
/private/var/folders/08/c_q_6br15md_r5wt_y0_ldtr0000gn/T/arduino/sketches/9FC9B0930FEFEE402DCE00A128125D05/FlasherX.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20008ac0 	.word	0x20008ac0
6000142c:	20009660 	.word	0x20009660

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f918 	bl	60001674 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8b6 	bl	60001684 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fae4 	bl	60001b18 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fc71 	bl	60001e48 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f8f2 	bl	60001794 <configure_external_ram>
	analog_init();
600015b0:	f000 fc16 	bl	60001de0 <analog_init>
	pwm_init();
600015b4:	f000 fc58 	bl	60001e68 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fadc 	bl	60001b74 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f85c 	bl	60001678 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fb6d 	bl	60001ca4 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f855 	bl	60001680 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f851 	bl	6000167c <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fc31 	bl	60001e40 <____libc_init_array_veneer>
	main();
600015de:	f000 fc37 	bl	60001e50 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	00015fc8 	.word	0x00015fc8
600015f0:	60001f90 	.word	0x60001f90
600015f4:	00000000 	.word	0x00000000
600015f8:	20008ac0 	.word	0x20008ac0
600015fc:	60017f5c 	.word	0x60017f5c
60001600:	20000000 	.word	0x20000000
60001604:	20008800 	.word	0x20008800
60001608:	00009b11 	.word	0x00009b11
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	00009331 	.word	0x00009331
6000161c:	200095fc 	.word	0x200095fc
60001620:	00009335 	.word	0x00009335
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	20009600 	.word	0x20009600
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaabf 	.word	0xaaaaaabf
6000166c:	00200007 	.word	0x00200007
60001670:	20068000 	.word	0x20068000

60001674 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001674:	4770      	bx	lr
60001676:	bf00      	nop

60001678 <startup_default_middle_hook>:
60001678:	4770      	bx	lr
6000167a:	bf00      	nop

6000167c <startup_default_late_hook>:
6000167c:	4770      	bx	lr
6000167e:	bf00      	nop

60001680 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001680:	bf00      	nop
60001682:	4770      	bx	lr

60001684 <configure_cache>:
{
60001684:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001686:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000168a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000168c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000168e:	4831      	ldr	r0, [pc, #196]	; (60001754 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001690:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001694:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001698:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000169a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000169e:	482e      	ldr	r0, [pc, #184]	; (60001758 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016a0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a4:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016a6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016aa:	482c      	ldr	r0, [pc, #176]	; (6000175c <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016ac:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b0:	4a2b      	ldr	r2, [pc, #172]	; (60001760 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016b2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016b6:	4c2b      	ldr	r4, [pc, #172]	; (60001764 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b8:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016bc:	482a      	ldr	r0, [pc, #168]	; (60001768 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016be:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016c2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c6:	4c29      	ldr	r4, [pc, #164]	; (6000176c <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016c8:	4829      	ldr	r0, [pc, #164]	; (60001770 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016ca:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ce:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016d2:	4c28      	ldr	r4, [pc, #160]	; (60001774 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016d4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016d8:	4827      	ldr	r0, [pc, #156]	; (60001778 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016da:	4a28      	ldr	r2, [pc, #160]	; (6000177c <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016dc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016e0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016e4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016e8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016ec:	4c24      	ldr	r4, [pc, #144]	; (60001780 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ee:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016f0:	4824      	ldr	r0, [pc, #144]	; (60001784 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016f2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016f6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016fa:	4a23      	ldr	r2, [pc, #140]	; (60001788 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016fc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001700:	4c22      	ldr	r4, [pc, #136]	; (6000178c <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001702:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001706:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000170a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000170e:	4820      	ldr	r0, [pc, #128]	; (60001790 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001710:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001714:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001716:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000171a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000171e:	bf00      	nop
	asm("nop");
60001720:	bf00      	nop
	asm("nop");
60001722:	bf00      	nop
	asm("nop");
60001724:	bf00      	nop
	asm("nop");
60001726:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001728:	2201      	movs	r2, #1
6000172a:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000172e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001732:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001736:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000173a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000173e:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001742:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001746:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000174a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000174e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001752:	4770      	bx	lr
60001754:	1000003f 	.word	0x1000003f
60001758:	07080025 	.word	0x07080025
6000175c:	00100009 	.word	0x00100009
60001760:	20009660 	.word	0x20009660
60001764:	00200013 	.word	0x00200013
60001768:	07020021 	.word	0x07020021
6000176c:	20000014 	.word	0x20000014
60001770:	13080025 	.word	0x13080025
60001774:	10000009 	.word	0x10000009
60001778:	20200016 	.word	0x20200016
6000177c:	130b0027 	.word	0x130b0027
60001780:	40000017 	.word	0x40000017
60001784:	60000018 	.word	0x60000018
60001788:	070b002f 	.word	0x070b002f
6000178c:	70000019 	.word	0x70000019
60001790:	8000001a 	.word	0x8000001a

60001794 <configure_external_ram>:
{
60001794:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001796:	4bb8      	ldr	r3, [pc, #736]	; (60001a78 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000179a:	4eb8      	ldr	r6, [pc, #736]	; (60001a7c <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000179c:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000179e:	4fb8      	ldr	r7, [pc, #736]	; (60001a80 <configure_external_ram+0x2ec>)
{
600017a0:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017a2:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017a6:	49b7      	ldr	r1, [pc, #732]	; (60001a84 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017a8:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017ac:	4db6      	ldr	r5, [pc, #728]	; (60001a88 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ae:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b2:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b6:	4cb5      	ldr	r4, [pc, #724]	; (60001a8c <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b8:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017bc:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c0:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c4:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c8:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017cc:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017d0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600017d2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600017d4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600017d6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017d8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017e6:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017ea:	4aa9      	ldr	r2, [pc, #676]	; (60001a90 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017ec:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017f0:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017f4:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017f8:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017fc:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001800:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001802:	4ba4      	ldr	r3, [pc, #656]	; (60001a94 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001804:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001806:	48a4      	ldr	r0, [pc, #656]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001808:	49a4      	ldr	r1, [pc, #656]	; (60001a9c <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000180a:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000180c:	4aa4      	ldr	r2, [pc, #656]	; (60001aa0 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000180e:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001810:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001814:	f043 030c 	orr.w	r3, r3, #12
60001818:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000181c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001820:	6803      	ldr	r3, [r0, #0]
60001822:	f043 0302 	orr.w	r3, r3, #2
60001826:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001828:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000182a:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000182c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001830:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001832:	4b9c      	ldr	r3, [pc, #624]	; (60001aa4 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001834:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001836:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001838:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000183a:	4c9b      	ldr	r4, [pc, #620]	; (60001aa8 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000183c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000183e:	4a9b      	ldr	r2, [pc, #620]	; (60001aac <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001844:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001846:	68c3      	ldr	r3, [r0, #12]
60001848:	f023 0378 	bic.w	r3, r3, #120	; 0x78
6000184c:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000184e:	6a03      	ldr	r3, [r0, #32]
60001850:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001852:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001854:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001856:	6a03      	ldr	r3, [r0, #32]
60001858:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000185a:	4a95      	ldr	r2, [pc, #596]	; (60001ab0 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000185c:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185e:	4c95      	ldr	r4, [pc, #596]	; (60001ab4 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001860:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001862:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001864:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60001866:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001868:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
6000186c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001870:	f043 0301 	orr.w	r3, r3, #1
60001874:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001878:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000187c:	498e      	ldr	r1, [pc, #568]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000187e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001882:	f043 0301 	orr.w	r3, r3, #1
60001886:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000188a:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000188e:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001890:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001892:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001894:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001898:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000189a:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000189c:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000189e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018a2:	6803      	ldr	r3, [r0, #0]
600018a4:	f023 0302 	bic.w	r3, r3, #2
600018a8:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018aa:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ac:	4b83      	ldr	r3, [pc, #524]	; (60001abc <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018ae:	4984      	ldr	r1, [pc, #528]	; (60001ac0 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018b0:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018b2:	f843 2b04 	str.w	r2, [r3], #4
600018b6:	428b      	cmp	r3, r1
600018b8:	d1fb      	bne.n	600018b2 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600018ba:	4a77      	ldr	r2, [pc, #476]	; (60001a98 <configure_external_ram+0x304>)
600018bc:	6813      	ldr	r3, [r2, #0]
600018be:	f043 0301 	orr.w	r3, r3, #1
600018c2:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600018c4:	6813      	ldr	r3, [r2, #0]
600018c6:	f013 0301 	ands.w	r3, r3, #1
600018ca:	d1fb      	bne.n	600018c4 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018cc:	487a      	ldr	r0, [pc, #488]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ce:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018d0:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018d4:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018d6:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018da:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018dc:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018e0:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018e4:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018e8:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ec:	4975      	ldr	r1, [pc, #468]	; (60001ac4 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018ee:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018f2:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018f6:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018fa:	4873      	ldr	r0, [pc, #460]	; (60001ac8 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018fc:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001900:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001904:	4c71      	ldr	r4, [pc, #452]	; (60001acc <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001906:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000190a:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000190e:	4970      	ldr	r1, [pc, #448]	; (60001ad0 <configure_external_ram+0x33c>)
60001910:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001914:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001916:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000191a:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000191e:	485e      	ldr	r0, [pc, #376]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001920:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001924:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001928:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000192c:	6943      	ldr	r3, [r0, #20]
6000192e:	07da      	lsls	r2, r3, #31
60001930:	d5fc      	bpl.n	6000192c <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001932:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001934:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001936:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193a:	4957      	ldr	r1, [pc, #348]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193c:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000193e:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001942:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001946:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194a:	694b      	ldr	r3, [r1, #20]
6000194c:	07db      	lsls	r3, r3, #31
6000194e:	d5fc      	bpl.n	6000194a <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001950:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001952:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001954:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001958:	4a4f      	ldr	r2, [pc, #316]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000195a:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
6000195c:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001960:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001964:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001968:	6953      	ldr	r3, [r2, #20]
6000196a:	07df      	lsls	r7, r3, #31
6000196c:	d5fc      	bpl.n	60001968 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000196e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001970:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001972:	4858      	ldr	r0, [pc, #352]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001974:	4948      	ldr	r1, [pc, #288]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001976:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001978:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000197c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001980:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001984:	694b      	ldr	r3, [r1, #20]
60001986:	07de      	lsls	r6, r3, #31
60001988:	d5fc      	bpl.n	60001984 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
6000198a:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000198e:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001992:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001994:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001996:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001998:	4293      	cmp	r3, r2
6000199a:	d165      	bne.n	60001a68 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
6000199c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000199e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019a2:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a4:	483c      	ldr	r0, [pc, #240]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600019a6:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019aa:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ae:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b2:	6943      	ldr	r3, [r0, #20]
600019b4:	07dd      	lsls	r5, r3, #31
600019b6:	d5fc      	bpl.n	600019b2 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019b8:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019ba:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019be:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c0:	4a35      	ldr	r2, [pc, #212]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019c2:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600019c4:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c8:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019cc:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d0:	6953      	ldr	r3, [r2, #20]
600019d2:	07dc      	lsls	r4, r3, #31
600019d4:	d5fc      	bpl.n	600019d0 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019d6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019d8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e0:	492d      	ldr	r1, [pc, #180]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e2:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019e4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019e8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ec:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f0:	694b      	ldr	r3, [r1, #20]
600019f2:	07d8      	lsls	r0, r3, #31
600019f4:	d5fc      	bpl.n	600019f0 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019f6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019f8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a00:	4a25      	ldr	r2, [pc, #148]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a02:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a04:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a08:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a0c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a10:	6953      	ldr	r3, [r2, #20]
60001a12:	07d9      	lsls	r1, r3, #31
60001a14:	d5fc      	bpl.n	60001a10 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a16:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a18:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a1c:	482d      	ldr	r0, [pc, #180]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a1e:	491e      	ldr	r1, [pc, #120]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a20:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a22:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a26:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a2a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a2e:	694b      	ldr	r3, [r1, #20]
60001a30:	07da      	lsls	r2, r3, #31
60001a32:	d5fc      	bpl.n	60001a2e <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001a34:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a38:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a3c:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a3e:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a40:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a42:	4293      	cmp	r3, r2
60001a44:	d050      	beq.n	60001ae8 <configure_external_ram+0x354>
60001a46:	2508      	movs	r5, #8
60001a48:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a4c:	4922      	ldr	r1, [pc, #136]	; (60001ad8 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a4e:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a50:	4b22      	ldr	r3, [pc, #136]	; (60001adc <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a52:	4a23      	ldr	r2, [pc, #140]	; (60001ae0 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a54:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a56:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a58:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a5a:	2301      	movs	r3, #1
60001a5c:	4821      	ldr	r0, [pc, #132]	; (60001ae4 <configure_external_ram+0x350>)
60001a5e:	4422      	add	r2, r4
60001a60:	f000 f9fa 	bl	60001e58 <__sm_set_pool_veneer>
}
60001a64:	b003      	add	sp, #12
60001a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a68:	4b1e      	ldr	r3, [pc, #120]	; (60001ae4 <configure_external_ram+0x350>)
60001a6a:	2200      	movs	r2, #0
60001a6c:	e9c3 2200 	strd	r2, r2, [r3]
60001a70:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a74:	b003      	add	sp, #12
60001a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a78:	401f8000 	.word	0x401f8000
60001a7c:	0001b0f9 	.word	0x0001b0f9
60001a80:	000110f9 	.word	0x000110f9
60001a84:	401f8400 	.word	0x401f8400
60001a88:	000170f9 	.word	0x000170f9
60001a8c:	400fc000 	.word	0x400fc000
60001a90:	1ffffcff 	.word	0x1ffffcff
60001a94:	a0000300 	.word	0xa0000300
60001a98:	402a4000 	.word	0x402a4000
60001a9c:	402a8000 	.word	0x402a8000
60001aa0:	ffff0012 	.word	0xffff0012
60001aa4:	00f737ff 	.word	0x00f737ff
60001aa8:	80000040 	.word	0x80000040
60001aac:	7cf0ff00 	.word	0x7cf0ff00
60001ab0:	830f00ff 	.word	0x830f00ff
60001ab4:	00020063 	.word	0x00020063
60001ab8:	5af05af0 	.word	0x5af05af0
60001abc:	402a4200 	.word	0x402a4200
60001ac0:	402a4300 	.word	0x402a4300
60001ac4:	3018049f 	.word	0x3018049f
60001ac8:	0a1806eb 	.word	0x0a1806eb
60001acc:	0a180638 	.word	0x0a180638
60001ad0:	26013206 	.word	0x26013206
60001ad4:	00030004 	.word	0x00030004
60001ad8:	70000000 	.word	0x70000000
60001adc:	70000000 	.word	0x70000000
60001ae0:	2000962c 	.word	0x2000962c
60001ae4:	20009584 	.word	0x20009584
	FLEXSPI2_IPCR0 = addr;
60001ae8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001af0:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af2:	4808      	ldr	r0, [pc, #32]	; (60001b14 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001af4:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001af8:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001afc:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b00:	6943      	ldr	r3, [r0, #20]
60001b02:	07db      	lsls	r3, r3, #31
60001b04:	d5fc      	bpl.n	60001b00 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b06:	2301      	movs	r3, #1
60001b08:	2510      	movs	r5, #16
60001b0a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001b0e:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001b10:	e79c      	b.n	60001a4c <configure_external_ram+0x2b8>
60001b12:	bf00      	nop
60001b14:	402a4000 	.word	0x402a4000

60001b18 <usb_pll_start>:
{
60001b18:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b1a:	4a15      	ldr	r2, [pc, #84]	; (60001b70 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b1c:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b1e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b22:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b26:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b2a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b2e:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b32:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b34:	f013 0f02 	tst.w	r3, #2
60001b38:	d10e      	bne.n	60001b58 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b3a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b3e:	d00f      	beq.n	60001b60 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b40:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b44:	d00e      	beq.n	60001b64 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b46:	2b00      	cmp	r3, #0
60001b48:	daf3      	bge.n	60001b32 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b4e:	d10b      	bne.n	60001b68 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b50:	065b      	lsls	r3, r3, #25
60001b52:	d50b      	bpl.n	60001b6c <usb_pll_start+0x54>
}
60001b54:	bcf0      	pop	{r4, r5, r6, r7}
60001b56:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b58:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b5a:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b5c:	6190      	str	r0, [r2, #24]
			continue;
60001b5e:	e7e8      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b60:	6155      	str	r5, [r2, #20]
			continue;
60001b62:	e7e6      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b64:	6156      	str	r6, [r2, #20]
			continue;
60001b66:	e7e4      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b68:	6191      	str	r1, [r2, #24]
			continue;
60001b6a:	e7e2      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b6c:	6157      	str	r7, [r2, #20]
			continue;
60001b6e:	e7e0      	b.n	60001b32 <usb_pll_start+0x1a>
60001b70:	400d8000 	.word	0x400d8000

60001b74 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b74:	4a3f      	ldr	r2, [pc, #252]	; (60001c74 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b76:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b78:	493f      	ldr	r1, [pc, #252]	; (60001c78 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7a:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b7e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b82:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b86:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c7c <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b8a:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b8e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c80 <tempmon_init+0x10c>
{
60001b92:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b98:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b9c:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba0:	4d38      	ldr	r5, [pc, #224]	; (60001c84 <tempmon_init+0x110>)
60001ba2:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ba4:	4c38      	ldr	r4, [pc, #224]	; (60001c88 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba6:	4839      	ldr	r0, [pc, #228]	; (60001c8c <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba8:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001baa:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bae:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bb0:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bb8:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bbc:	ee07 1a10 	vmov	s14, r1
60001bc0:	4b33      	ldr	r3, [pc, #204]	; (60001c90 <tempmon_init+0x11c>)
60001bc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bc6:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bc8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bcc:	4931      	ldr	r1, [pc, #196]	; (60001c94 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bce:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd2:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bd6:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bda:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bde:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be2:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be6:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bee:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bf2:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf6:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bfa:	4827      	ldr	r0, [pc, #156]	; (60001c98 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfc:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c00:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c04:	ee75 5a87 	vadd.f32	s11, s11, s14
60001c08:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c0c:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c10:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c14:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c18:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c1c:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c24:	ee16 3a10 	vmov	r3, s12
60001c28:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c30:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c34:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c36:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c3a:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c42:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c46:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c48:	4914      	ldr	r1, [pc, #80]	; (60001c9c <tempmon_init+0x128>)
60001c4a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c4e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c52:	f043 0302 	orr.w	r3, r3, #2
60001c56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c5a:	4b11      	ldr	r3, [pc, #68]	; (60001ca0 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c5c:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c60:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c68:	2201      	movs	r2, #1
}
60001c6a:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c6c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c70:	4770      	bx	lr
60001c72:	bf00      	nop
60001c74:	400d8100 	.word	0x400d8100
60001c78:	401f4400 	.word	0x401f4400
60001c7c:	42aa0000 	.word	0x42aa0000
60001c80:	42b40000 	.word	0x42b40000
60001c84:	200095ec 	.word	0x200095ec
60001c88:	200095e8 	.word	0x200095e8
60001c8c:	200095f0 	.word	0x200095f0
60001c90:	200095f4 	.word	0x200095f4
60001c94:	0fff0000 	.word	0x0fff0000
60001c98:	e000e400 	.word	0xe000e400
60001c9c:	20008800 	.word	0x20008800
60001ca0:	00009cfd 	.word	0x00009cfd

60001ca4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001ca4:	4b31      	ldr	r3, [pc, #196]	; (60001d6c <usb_init+0xc8>)
60001ca6:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001caa:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001cb0:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001cb4:	f000 f8e0 	bl	60001e78 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cb8:	4a2d      	ldr	r2, [pc, #180]	; (60001d70 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001cba:	492e      	ldr	r1, [pc, #184]	; (60001d74 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cbc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cc0:	482d      	ldr	r0, [pc, #180]	; (60001d78 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cc2:	f043 0303 	orr.w	r3, r3, #3
60001cc6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cca:	4b2c      	ldr	r3, [pc, #176]	; (60001d7c <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001ccc:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cd0:	6802      	ldr	r2, [r0, #0]
60001cd2:	421a      	tst	r2, r3
60001cd4:	d103      	bne.n	60001cde <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001cd6:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001cda:	079a      	lsls	r2, r3, #30
60001cdc:	d01b      	beq.n	60001d16 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cde:	4a25      	ldr	r2, [pc, #148]	; (60001d74 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ce0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001ce4:	4b24      	ldr	r3, [pc, #144]	; (60001d78 <usb_init+0xd4>)
60001ce6:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ce8:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cec:	f043 0302 	orr.w	r3, r3, #2
60001cf0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cf4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cf8:	079b      	lsls	r3, r3, #30
60001cfa:	d4fb      	bmi.n	60001cf4 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cfc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d04:	4b1c      	ldr	r3, [pc, #112]	; (60001d78 <usb_init+0xd4>)
60001d06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d0a:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d0e:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d10:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001d12:	f000 f8a5 	bl	60001e60 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d16:	4a18      	ldr	r2, [pc, #96]	; (60001d78 <usb_init+0xd4>)
60001d18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d1c:	4c15      	ldr	r4, [pc, #84]	; (60001d74 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001d1e:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d20:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d22:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d24:	4b16      	ldr	r3, [pc, #88]	; (60001d80 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001d26:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d28:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d2c:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d30:	4618      	mov	r0, r3
60001d32:	f000 f89d 	bl	60001e70 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d36:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d3a:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d3c:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d40:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d44:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d46:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d4a:	641a      	str	r2, [r3, #64]	; 0x40
60001d4c:	4b0d      	ldr	r3, [pc, #52]	; (60001d84 <usb_init+0xe0>)
60001d4e:	4a0e      	ldr	r2, [pc, #56]	; (60001d88 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d50:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d58:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d5c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d60:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d62:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d66:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d6a:	bd10      	pop	{r4, pc}
60001d6c:	400d8000 	.word	0x400d8000
60001d70:	400fc000 	.word	0x400fc000
60001d74:	402e0000 	.word	0x402e0000
60001d78:	400d9000 	.word	0x400d9000
60001d7c:	001e1c00 	.word	0x001e1c00
60001d80:	20000000 	.word	0x20000000
60001d84:	20008800 	.word	0x20008800
60001d88:	00009ee5 	.word	0x00009ee5

60001d8c <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001d8c:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d8e:	4b0e      	ldr	r3, [pc, #56]	; (60001dc8 <_reboot_Teensyduino_+0x3c>)
60001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d92:	079b      	lsls	r3, r3, #30
60001d94:	d400      	bmi.n	60001d98 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d96:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d98:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d9a:	4b0c      	ldr	r3, [pc, #48]	; (60001dcc <_reboot_Teensyduino_+0x40>)
60001d9c:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d9e:	4a0c      	ldr	r2, [pc, #48]	; (60001dd0 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001da0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001da4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001da8:	490a      	ldr	r1, [pc, #40]	; (60001dd4 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001daa:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dae:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001db0:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001db2:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001db6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001dba:	4807      	ldr	r0, [pc, #28]	; (60001dd8 <_reboot_Teensyduino_+0x4c>)
60001dbc:	4a07      	ldr	r2, [pc, #28]	; (60001ddc <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dbe:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001dc0:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dc2:	689b      	ldr	r3, [r3, #8]
60001dc4:	4798      	blx	r3
	}
	__builtin_unreachable();
60001dc6:	bf00      	nop
60001dc8:	401f4400 	.word	0x401f4400
60001dcc:	402e0000 	.word	0x402e0000
60001dd0:	400ac000 	.word	0x400ac000
60001dd4:	00200003 	.word	0x00200003
60001dd8:	20208000 	.word	0x20208000
60001ddc:	eb120000 	.word	0xeb120000

60001de0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de0:	4b10      	ldr	r3, [pc, #64]	; (60001e24 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001de2:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001de4:	4a10      	ldr	r2, [pc, #64]	; (60001e28 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001de8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001dec:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dee:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001df0:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001df4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001df6:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dfa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dfc:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dfe:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001e00:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e02:	061b      	lsls	r3, r3, #24
60001e04:	d4fc      	bmi.n	60001e00 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e06:	4a09      	ldr	r2, [pc, #36]	; (60001e2c <analog_init+0x4c>)
60001e08:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e0c:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e0e:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e10:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001e12:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e14:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001e18:	d1fb      	bne.n	60001e12 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001e1a:	4a05      	ldr	r2, [pc, #20]	; (60001e30 <analog_init+0x50>)
60001e1c:	7013      	strb	r3, [r2, #0]
}
60001e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001e22:	4770      	bx	lr
60001e24:	400fc000 	.word	0x400fc000
60001e28:	400c4000 	.word	0x400c4000
60001e2c:	400c8000 	.word	0x400c8000
60001e30:	2000962b 	.word	0x2000962b

60001e34 <_init>:
60001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e36:	bf00      	nop
60001e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e3a:	bc08      	pop	{r3}
60001e3c:	469e      	mov	lr, r3
60001e3e:	4770      	bx	lr

60001e40 <____libc_init_array_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <____libc_init_array_veneer+0x4>
60001e44:	0000dabd 	.word	0x0000dabd

60001e48 <__set_arm_clock_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <__set_arm_clock_veneer+0x4>
60001e4c:	0000aef1 	.word	0x0000aef1

60001e50 <__main_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <__main_veneer+0x4>
60001e54:	0000993d 	.word	0x0000993d

60001e58 <__sm_set_pool_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <__sm_set_pool_veneer+0x4>
60001e5c:	0000b39d 	.word	0x0000b39d

60001e60 <__delay_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <__delay_veneer+0x4>
60001e64:	00009559 	.word	0x00009559

60001e68 <__pwm_init_veneer>:
60001e68:	f85f f000 	ldr.w	pc, [pc]	; 60001e6c <__pwm_init_veneer+0x4>
60001e6c:	0000b25d 	.word	0x0000b25d

60001e70 <__memset_veneer>:
60001e70:	f85f f000 	ldr.w	pc, [pc]	; 60001e74 <__memset_veneer+0x4>
60001e74:	0000d4e5 	.word	0x0000d4e5

60001e78 <__usb_init_serialnumber_veneer>:
60001e78:	f85f f000 	ldr.w	pc, [pc]	; 60001e7c <__usb_init_serialnumber_veneer+0x4>
60001e7c:	0000a655 	.word	0x0000a655

60001e80 <__frame_dummy_init_array_entry>:
60001e80:	000000e5 00001bc1                       ........

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <flash_sector_not_erased>:
    return 0;

  if (((sum & 255) + (cksum & 255)) & 255)
    return 0;     /* checksum error */
  return 1;
}
      20:	f420 607f 	bic.w	r0, r0, #4080	; 0xff0
      24:	f020 000f 	bic.w	r0, r0, #15
      28:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
      2c:	6803      	ldr	r3, [r0, #0]
      2e:	3004      	adds	r0, #4
      30:	3301      	adds	r3, #1
      32:	d103      	bne.n	3c <_teensy_model_identifier+0x17>
      }
    }
    address += FLASH_SECTOR_SIZE;
  }
  return( error );
}
      34:	4290      	cmp	r0, r2
      36:	d1f9      	bne.n	2c <_teensy_model_identifier+0x7>
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	2000      	movs	r0, #0
      3a:	4770      	bx	lr
      3c:	2001      	movs	r0, #1
      3e:	4770      	bx	lr

00000040 <flash_move>:
}
      40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
      44:	4606      	mov	r6, r0
      46:	460d      	mov	r5, r1
  }
  m_vwd = dir;
  return true;

 fail:
  return false;
      48:	4690      	mov	r8, r2
}
      4a:	2400      	movs	r4, #0
      4c:	4544      	cmp	r4, r8
      4e:	d214      	bcs.n	7a <flash_move+0x3a>
	if (pin < NUM_DIGITAL_PINS) {
		cdPin_ = pin;
		pinMode(cdPin_, INPUT_PULLUP);
	} else {
		cdPin_ = 0xff;
		return false;
      50:	19a7      	adds	r7, r4, r6
      52:	f3c7 030b 	ubfx	r3, r7, #0, #12
      56:	b933      	cbnz	r3, 66 <flash_move+0x26>
      58:	4638      	mov	r0, r7
      5a:	f7ff ffe1 	bl	20 <flash_sector_not_erased>
  m_vwd = dir;
  return true;

 fail:
  return false;
}
      5e:	b110      	cbz	r0, 66 <flash_move+0x26>
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      60:	4638      	mov	r0, r7
      62:	f009 fc0f 	bl	9884 <eepromemu_flash_erase_sector>
      66:	2204      	movs	r2, #4
      68:	5963      	ldr	r3, [r4, r5]
      6a:	4638      	mov	r0, r7
      }
    }
  }
  if (r < 0) {
    // read error
    return -1;
      6c:	3404      	adds	r4, #4
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
      6e:	eb0d 0102 	add.w	r1, sp, r2
  }
  return true;

 fail:
  return false;
}
      72:	9301      	str	r3, [sp, #4]
      74:	f009 fb90 	bl	9798 <eepromemu_flash_write>
  if (!sync()) {
      78:	e7e8      	b.n	4c <flash_move+0xc>
}
      7a:	f105 4520 	add.w	r5, r5, #2684354560	; 0xa0000000
      7e:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
  if (IN_FLASH(src)) {
      82:	d208      	bcs.n	96 <flash_move+0x56>
    while (offset < (FLASH_SIZE - FLASH_RESERVE) && error == 0) {
      84:	4d0c      	ldr	r5, [pc, #48]	; (b8 <flash_move+0x78>)
      86:	e004      	b.n	92 <flash_move+0x52>
      addr = dst + offset;
      88:	19a1      	adds	r1, r4, r6
      if ((addr & (FLASH_SECTOR_SIZE - 1)) == 0) {
      8a:	f3c1 030b 	ubfx	r3, r1, #0, #12
      8e:	b143      	cbz	r3, a2 <flash_move+0x62>
      offset += FLASH_WRITE_SIZE;
      90:	3404      	adds	r4, #4
    while (offset < (FLASH_SIZE - FLASH_RESERVE) && error == 0) {
      92:	42ac      	cmp	r4, r5
      94:	d3f8      	bcc.n	88 <flash_move+0x48>
  REBOOT;
      96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
      9a:	4a08      	ldr	r2, [pc, #32]	; (bc <flash_move+0x7c>)
      9c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
      a0:	e008      	b.n	b4 <flash_move+0x74>
        if (flash_sector_not_erased( addr )) {
      a2:	4608      	mov	r0, r1
      a4:	f7ff ffbc 	bl	20 <flash_sector_not_erased>
      a8:	2800      	cmp	r0, #0
      aa:	d0f1      	beq.n	90 <flash_move+0x50>
            eepromemu_flash_erase_sector( (void*)addr );
      ac:	4608      	mov	r0, r1
      ae:	f009 fbe9 	bl	9884 <eepromemu_flash_erase_sector>
      b2:	e7ed      	b.n	90 <flash_move+0x50>
  for (;;) {}
      b4:	e7fe      	b.n	b4 <flash_move+0x74>
      b6:	bf00      	nop
      b8:	007fc000 	.word	0x007fc000
      bc:	05fa0004 	.word	0x05fa0004

000000c0 <register_tm_clones>:
    index = m_curPosition/FS_DIR_SIZE;

    DirFat_t* dir = readDirCache();
    if (!dir) {
      // At EOF if no error.
      if (!getError()) {
      c0:	4805      	ldr	r0, [pc, #20]	; (d8 <register_tm_clones+0x18>)
      c2:	4b06      	ldr	r3, [pc, #24]	; (dc <register_tm_clones+0x1c>)
      c4:	1a1b      	subs	r3, r3, r0
        goto fail;
      }
    }
  }
  // don't try to delete root
  if (!isRoot()) {
      c6:	0fd9      	lsrs	r1, r3, #31
      c8:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      cc:	1049      	asrs	r1, r1, #1
    if (!rmdir()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return true;
      ce:	d002      	beq.n	d6 <register_tm_clones+0x16>

 fail:
  return false;
}
      d0:	4b03      	ldr	r3, [pc, #12]	; (e0 <register_tm_clones+0x20>)
      d2:	b103      	cbz	r3, d6 <register_tm_clones+0x16>
    if (!rmdir()) {
      d4:	4718      	bx	r3
      d6:	4770      	bx	lr
      d8:	20008ac0 	.word	0x20008ac0
  seconds += (tm.mday-1) * SECS_PER_DAY;
  seconds += tm.hour * SECS_PER_HOUR;
  seconds += tm.min * SECS_PER_MIN;
  seconds += tm.sec;
  return /*(time_t)*/ seconds;
}
      dc:	20008ac0 	.word	0x20008ac0
      e0:	00000000 	.word	0x00000000

000000e4 <frame_dummy>:
      e4:	b508      	push	{r3, lr}
      e6:	4b05      	ldr	r3, [pc, #20]	; (fc <frame_dummy+0x18>)
      e8:	b11b      	cbz	r3, f2 <frame_dummy+0xe>
      ea:	4905      	ldr	r1, [pc, #20]	; (100 <frame_dummy+0x1c>)
      ec:	4805      	ldr	r0, [pc, #20]	; (104 <frame_dummy+0x20>)
      ee:	f3af 8000 	nop.w
      f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
      f6:	f7ff bfe3 	b.w	c0 <register_tm_clones>
  }
  m_cache.setMirrorOffset(m_sectorsPerFat);
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;
      fa:	bf00      	nop
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
      fc:	00000000 	.word	0x00000000
     100:	20009598 	.word	0x20009598
     104:	60021800 	.word	0x60021800

00000108 <usb_serial_class::available()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     108:	f00a bd9e 	b.w	ac48 <usb_serial_available>

0000010c <usb_serial_class::read()>:
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     10c:	f00a bde0 	b.w	acd0 <usb_serial_getchar>

00000110 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]>:
int parse_hex_line( const char *theline, char *bytes, 
     110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     114:	b085      	sub	sp, #20
     116:	4615      	mov	r5, r2
     118:	4604      	mov	r4, r0
     11a:	460f      	mov	r7, r1
  if (!sscanf (ptr, "%02x", &len))
     11c:	aa01      	add	r2, sp, #4
     11e:	492a      	ldr	r1, [pc, #168]	; (1c8 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0xb8>)
     120:	3001      	adds	r0, #1
int parse_hex_line( const char *theline, char *bytes, 
     122:	461e      	mov	r6, r3
  if (!sscanf (ptr, "%02x", &len))
     124:	f00c ffa6 	bl	d074 <sscanf>
     128:	b138      	cbz	r0, 13a <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x2a>
  if (strlen (theline) < (11 + (len * 2)))
     12a:	4620      	mov	r0, r4
     12c:	f00d fd48 	bl	dbc0 <strlen>
     130:	9b01      	ldr	r3, [sp, #4]
     132:	005b      	lsls	r3, r3, #1
     134:	330b      	adds	r3, #11
     136:	4298      	cmp	r0, r3
     138:	d203      	bcs.n	142 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x32>
    return 0;
     13a:	2000      	movs	r0, #0
}
     13c:	b005      	add	sp, #20
     13e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!sscanf (ptr, "%04x", (unsigned int *)addr))
     142:	462a      	mov	r2, r5
     144:	4921      	ldr	r1, [pc, #132]	; (1cc <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0xbc>)
     146:	1ce0      	adds	r0, r4, #3
     148:	f00c ff94 	bl	d074 <sscanf>
     14c:	2800      	cmp	r0, #0
     14e:	d0f4      	beq.n	13a <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x2a>
  if (!sscanf (ptr, "%02x", code))
     150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     152:	1de0      	adds	r0, r4, #7
     154:	491c      	ldr	r1, [pc, #112]	; (1c8 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0xb8>)
     156:	f00c ff8d 	bl	d074 <sscanf>
     15a:	2800      	cmp	r0, #0
     15c:	d0ed      	beq.n	13a <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x2a>
  sum = (len & 255) + ((*addr >> 8) & 255) + (*addr & 255) + (*code & 255);
     15e:	990c      	ldr	r1, [sp, #48]	; 0x30
  ptr += 2;
     160:	3409      	adds	r4, #9
  sum = (len & 255) + ((*addr >> 8) & 255) + (*addr & 255) + (*code & 255);
     162:	9b01      	ldr	r3, [sp, #4]
     164:	f891 8000 	ldrb.w	r8, [r1]
     168:	682a      	ldr	r2, [r5, #0]
     16a:	fa58 f883 	uxtab	r8, r8, r3
  while (*num != len)
     16e:	6835      	ldr	r5, [r6, #0]
    if (!sscanf (ptr, "%02x", &temp))
     170:	f8df 9054 	ldr.w	r9, [pc, #84]	; 1c8 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0xb8>
  sum = (len & 255) + ((*addr >> 8) & 255) + (*addr & 255) + (*code & 255);
     174:	fa58 f882 	uxtab	r8, r8, r2
     178:	f3c2 2207 	ubfx	r2, r2, #8, #8
     17c:	4490      	add	r8, r2
  while (*num != len)
     17e:	e010      	b.n	1a2 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x92>
    if (!sscanf (ptr, "%02x", &temp))
     180:	4649      	mov	r1, r9
    ptr += 2;
     182:	3402      	adds	r4, #2
    if (!sscanf (ptr, "%02x", &temp))
     184:	f00c ff76 	bl	d074 <sscanf>
     188:	2800      	cmp	r0, #0
     18a:	d0d6      	beq.n	13a <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x2a>
    bytes[*num] = temp;
     18c:	6833      	ldr	r3, [r6, #0]
     18e:	9a03      	ldr	r2, [sp, #12]
     190:	54fa      	strb	r2, [r7, r3]
    sum += bytes[*num] & 255;
     192:	6835      	ldr	r5, [r6, #0]
     194:	5d7b      	ldrb	r3, [r7, r5]
    (*num)++;
     196:	3501      	adds	r5, #1
    if (*num >= 256)
     198:	2dff      	cmp	r5, #255	; 0xff
    sum += bytes[*num] & 255;
     19a:	4498      	add	r8, r3
    (*num)++;
     19c:	6035      	str	r5, [r6, #0]
    if (*num >= 256)
     19e:	d8cc      	bhi.n	13a <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x2a>
  while (*num != len)
     1a0:	9b01      	ldr	r3, [sp, #4]
     1a2:	429d      	cmp	r5, r3
    if (!sscanf (ptr, "%02x", &temp))
     1a4:	4620      	mov	r0, r4
     1a6:	aa03      	add	r2, sp, #12
  while (*num != len)
     1a8:	d1ea      	bne.n	180 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x70>
  if (!sscanf (ptr, "%02x", &cksum))
     1aa:	aa02      	add	r2, sp, #8
     1ac:	4906      	ldr	r1, [pc, #24]	; (1c8 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0xb8>)
     1ae:	f00c ff61 	bl	d074 <sscanf>
     1b2:	2800      	cmp	r0, #0
     1b4:	d0c1      	beq.n	13a <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x2a>
  if (((sum & 255) + (cksum & 255)) & 255)
     1b6:	9b02      	ldr	r3, [sp, #8]
     1b8:	eb08 0003 	add.w	r0, r8, r3
     1bc:	b2c0      	uxtb	r0, r0
     1be:	fab0 f080 	clz	r0, r0
     1c2:	0940      	lsrs	r0, r0, #5
     1c4:	e7ba      	b.n	13c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x2c>
     1c6:	bf00      	nop
     1c8:	200003bc 	.word	0x200003bc
     1cc:	200003c4 	.word	0x200003c4

000001d0 <read_ascii_line(Stream*, char*, int)>:
{
     1d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int c=0, nchar=0;
     1d4:	f04f 0a00 	mov.w	sl, #0
{
     1d8:	4683      	mov	fp, r0
     1da:	460f      	mov	r7, r1
     1dc:	4615      	mov	r5, r2
     1de:	4e2b      	ldr	r6, [pc, #172]	; (28c <read_ascii_line(Stream*, char*, int)+0xbc>)
     1e0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 290 <read_ascii_line(Stream*, char*, int)+0xc0>
  while (serial->available()) {
     1e4:	f8db 3000 	ldr.w	r3, [fp]
     1e8:	691b      	ldr	r3, [r3, #16]
     1ea:	42b3      	cmp	r3, r6
     1ec:	d142      	bne.n	274 <read_ascii_line(Stream*, char*, int)+0xa4>
        virtual int available() { return usb_serial_available(); }
     1ee:	f00a fd2b 	bl	ac48 <usb_serial_available>
     1f2:	4604      	mov	r4, r0
     1f4:	b184      	cbz	r4, 218 <read_ascii_line(Stream*, char*, int)+0x48>
    c = serial->read();
     1f6:	f8db 3000 	ldr.w	r3, [fp]
     1fa:	695b      	ldr	r3, [r3, #20]
     1fc:	4543      	cmp	r3, r8
     1fe:	d13d      	bne.n	27c <read_ascii_line(Stream*, char*, int)+0xac>
        virtual int read() { return usb_serial_getchar(); }
     200:	f00a fd66 	bl	acd0 <usb_serial_getchar>
     204:	4682      	mov	sl, r0
    if (c == '\n' || c == '\r')
     206:	f1ba 0f0a 	cmp.w	sl, #10
     20a:	d0eb      	beq.n	1e4 <read_ascii_line(Stream*, char*, int)+0x14>
     20c:	f1ba 0f0d 	cmp.w	sl, #13
     210:	d0e8      	beq.n	1e4 <read_ascii_line(Stream*, char*, int)+0x14>
      line[nchar++] = c;
     212:	2401      	movs	r4, #1
     214:	f887 a000 	strb.w	sl, [r7]
      break;
     218:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
     21c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 290 <read_ascii_line(Stream*, char*, int)+0xc0>
     220:	44b8      	add	r8, r7
  while (nchar < maxbytes && !(c == '\n' || c == '\r')) {
     222:	42ac      	cmp	r4, r5
     224:	da1b      	bge.n	25e <read_ascii_line(Stream*, char*, int)+0x8e>
     226:	f1ba 0f0a 	cmp.w	sl, #10
     22a:	d018      	beq.n	25e <read_ascii_line(Stream*, char*, int)+0x8e>
     22c:	f1ba 0f0d 	cmp.w	sl, #13
     230:	d015      	beq.n	25e <read_ascii_line(Stream*, char*, int)+0x8e>
    if (serial->available()) {
     232:	f8db 3000 	ldr.w	r3, [fp]
     236:	691b      	ldr	r3, [r3, #16]
     238:	42b3      	cmp	r3, r6
     23a:	d116      	bne.n	26a <read_ascii_line(Stream*, char*, int)+0x9a>
        virtual int available() { return usb_serial_available(); }
     23c:	f00a fd04 	bl	ac48 <usb_serial_available>
     240:	2800      	cmp	r0, #0
     242:	d0ee      	beq.n	222 <read_ascii_line(Stream*, char*, int)+0x52>
      c = serial->read();
     244:	f8db 3000 	ldr.w	r3, [fp]
     248:	695b      	ldr	r3, [r3, #20]
     24a:	454b      	cmp	r3, r9
     24c:	d11a      	bne.n	284 <read_ascii_line(Stream*, char*, int)+0xb4>
        virtual int read() { return usb_serial_getchar(); }
     24e:	f00a fd3f 	bl	acd0 <usb_serial_getchar>
     252:	4682      	mov	sl, r0
      line[nchar++] = c;
     254:	3401      	adds	r4, #1
     256:	f808 af01 	strb.w	sl, [r8, #1]!
  while (nchar < maxbytes && !(c == '\n' || c == '\r')) {
     25a:	42ac      	cmp	r4, r5
     25c:	dbe3      	blt.n	226 <read_ascii_line(Stream*, char*, int)+0x56>
  line[nchar-1] = 0;	// null-terminate
     25e:	443c      	add	r4, r7
     260:	2300      	movs	r3, #0
     262:	f804 3c01 	strb.w	r3, [r4, #-1]
}
     266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (serial->available()) {
     26a:	4658      	mov	r0, fp
     26c:	4798      	blx	r3
     26e:	2800      	cmp	r0, #0
     270:	d0d7      	beq.n	222 <read_ascii_line(Stream*, char*, int)+0x52>
     272:	e7e7      	b.n	244 <read_ascii_line(Stream*, char*, int)+0x74>
  while (serial->available()) {
     274:	4658      	mov	r0, fp
     276:	4798      	blx	r3
     278:	4604      	mov	r4, r0
     27a:	e7bb      	b.n	1f4 <read_ascii_line(Stream*, char*, int)+0x24>
    c = serial->read();
     27c:	4658      	mov	r0, fp
     27e:	4798      	blx	r3
     280:	4682      	mov	sl, r0
     282:	e7c0      	b.n	206 <read_ascii_line(Stream*, char*, int)+0x36>
      c = serial->read();
     284:	4658      	mov	r0, fp
     286:	4798      	blx	r3
     288:	4682      	mov	sl, r0
     28a:	e7e3      	b.n	254 <read_ascii_line(Stream*, char*, int)+0x84>
     28c:	00000109 	.word	0x00000109
     290:	0000010d 	.word	0x0000010d

00000294 <process_hex_record(hex_info_t*)>:
  if (hex->code==0) { // data -- update min/max address so far
     294:	6882      	ldr	r2, [r0, #8]
{
     296:	4603      	mov	r3, r0
  if (hex->code==0) { // data -- update min/max address so far
     298:	b992      	cbnz	r2, 2c0 <process_hex_record(hex_info_t*)+0x2c>
    if (hex->base + hex->addr + hex->num > hex->max)
     29a:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
{
     29e:	b410      	push	{r4}
    if (hex->base + hex->addr + hex->num > hex->max)
     2a0:	685c      	ldr	r4, [r3, #4]
     2a2:	6980      	ldr	r0, [r0, #24]
     2a4:	4422      	add	r2, r4
     2a6:	4411      	add	r1, r2
     2a8:	4281      	cmp	r1, r0
  return 0;
     2aa:	f04f 0000 	mov.w	r0, #0
      hex->max = hex->base + hex->addr + hex->num;
     2ae:	bf88      	it	hi
     2b0:	6199      	strhi	r1, [r3, #24]
    if (hex->base + hex->addr < hex->min)
     2b2:	6959      	ldr	r1, [r3, #20]
     2b4:	428a      	cmp	r2, r1
     2b6:	d200      	bcs.n	2ba <process_hex_record(hex_info_t*)+0x26>
      hex->min = hex->base + hex->addr;
     2b8:	615a      	str	r2, [r3, #20]
}
     2ba:	f85d 4b04 	ldr.w	r4, [sp], #4
     2be:	4770      	bx	lr
  else if (hex->code==1) { // EOF (:flash command not received yet)
     2c0:	3a01      	subs	r2, #1
     2c2:	2a04      	cmp	r2, #4
     2c4:	d81d      	bhi.n	302 <process_hex_record(hex_info_t*)+0x6e>
     2c6:	e8df f002 	tbb	[pc, r2]
     2ca:	0d09      	.short	0x0d09
     2cc:	151c      	.short	0x151c
     2ce:	03          	.byte	0x03
     2cf:	00          	.byte	0x00
    hex->base = (hex->data[0] << 24) | (hex->data[1] << 16)
     2d0:	6802      	ldr	r2, [r0, #0]
  return 0;
     2d2:	2000      	movs	r0, #0
     2d4:	6812      	ldr	r2, [r2, #0]
     2d6:	ba12      	rev	r2, r2
    hex->base = (hex->data[0] << 24) | (hex->data[1] << 16)
     2d8:	611a      	str	r2, [r3, #16]
     2da:	4770      	bx	lr
    hex->eof = 1;
     2dc:	2201      	movs	r2, #1
  return 0;
     2de:	2000      	movs	r0, #0
    hex->eof = 1;
     2e0:	61da      	str	r2, [r3, #28]
     2e2:	4770      	bx	lr
    hex->base = ((hex->data[0] << 8) | hex->data[1]) << 4;
     2e4:	6802      	ldr	r2, [r0, #0]
  return 0;
     2e6:	2000      	movs	r0, #0
    hex->base = ((hex->data[0] << 8) | hex->data[1]) << 4;
     2e8:	8812      	ldrh	r2, [r2, #0]
     2ea:	ba52      	rev16	r2, r2
     2ec:	b292      	uxth	r2, r2
     2ee:	0112      	lsls	r2, r2, #4
     2f0:	611a      	str	r2, [r3, #16]
     2f2:	4770      	bx	lr
    hex->base = ((hex->data[0] << 8) | hex->data[1]) << 16;
     2f4:	6802      	ldr	r2, [r0, #0]
  return 0;
     2f6:	2000      	movs	r0, #0
    hex->base = ((hex->data[0] << 8) | hex->data[1]) << 16;
     2f8:	8812      	ldrh	r2, [r2, #0]
     2fa:	ba52      	rev16	r2, r2
     2fc:	0412      	lsls	r2, r2, #16
     2fe:	611a      	str	r2, [r3, #16]
     300:	4770      	bx	lr
  if (hex->code==0) { // data -- update min/max address so far
     302:	2001      	movs	r0, #1
}
     304:	4770      	bx	lr
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
				*buf++ = ' ';
     306:	bf00      	nop

00000308 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)>:
{
     308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hex_info_t hex = {					// intel hex info struct
     30c:	4f75      	ldr	r7, [pc, #468]	; (4e4 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x1dc>)
{
     30e:	b08d      	sub	sp, #52	; 0x34
     310:	460d      	mov	r5, r1
     312:	4606      	mov	r6, r0
     314:	4691      	mov	r9, r2
     316:	469a      	mov	sl, r3
  hex_info_t hex = {					// intel hex info struct
     318:	ac03      	add	r4, sp, #12
     31a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     31c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     31e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     322:	683b      	ldr	r3, [r7, #0]
  out->printf( "reading hex lines...\n" );
     324:	4628      	mov	r0, r5
     326:	4970      	ldr	r1, [pc, #448]	; (4e8 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x1e0>)
  hex_info_t hex = {					// intel hex info struct
     328:	6023      	str	r3, [r4, #0]
  out->printf( "reading hex lines...\n" );
     32a:	f009 f85b 	bl	93e4 <Print::printf(char const*, ...)>
  while (!hex.eof)  {
     32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     330:	2b00      	cmp	r3, #0
     332:	f040 80d4 	bne.w	4de <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x1d6>
    if (in == out && out == (Stream*)&Serial) {
     336:	4b6d      	ldr	r3, [pc, #436]	; (4ec <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x1e4>)
     338:	4c6d      	ldr	r4, [pc, #436]	; (4f0 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x1e8>)
     33a:	429d      	cmp	r5, r3
     33c:	bf08      	it	eq
     33e:	42b5      	cmpeq	r5, r6
      out->printf( "abort - bad hex line %s\n", line );
     340:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 528 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x220>
    if (in == out && out == (Stream*)&Serial) {
     344:	bf0c      	ite	eq
     346:	2701      	moveq	r7, #1
     348:	2700      	movne	r7, #0
     34a:	e02f      	b.n	3ac <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0xa4>
  if (strlen (theline) < 11)
     34c:	4620      	mov	r0, r4
     34e:	f00d fc37 	bl	dbc0 <strlen>
     352:	280a      	cmp	r0, #10
     354:	d938      	bls.n	3c8 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0xc0>
     356:	ab05      	add	r3, sp, #20
     358:	4659      	mov	r1, fp
     35a:	aa04      	add	r2, sp, #16
     35c:	4620      	mov	r0, r4
     35e:	9300      	str	r3, [sp, #0]
     360:	ab06      	add	r3, sp, #24
     362:	f7ff fed5 	bl	110 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]>
    if (parse_hex_line( (const char*)line, hex.data, &hex.addr, &hex.num, &hex.code ) == 0) {
     366:	b378      	cbz	r0, 3c8 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0xc0>
    else if (process_hex_record( &hex ) != 0) { // error on bad hex code
     368:	a803      	add	r0, sp, #12
     36a:	f7ff ff93 	bl	294 <process_hex_record(hex_info_t*)>
     36e:	2800      	cmp	r0, #0
     370:	f040 8085 	bne.w	47e <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x176>
    else if (hex.code == 0) { // if data record
     374:	9b05      	ldr	r3, [sp, #20]
     376:	b9a3      	cbnz	r3, 3a2 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x9a>
      uint32_t addr = buffer_addr + hex.base + hex.addr - FLASH_BASE_ADDR;
     378:	9b07      	ldr	r3, [sp, #28]
     37a:	9a04      	ldr	r2, [sp, #16]
     37c:	1898      	adds	r0, r3, r2
      if (hex.max > (FLASH_BASE_ADDR + buffer_size)) {
     37e:	9a09      	ldr	r2, [sp, #36]	; 0x24
     380:	f10a 43c0 	add.w	r3, sl, #1610612736	; 0x60000000
      uint32_t addr = buffer_addr + hex.base + hex.addr - FLASH_BASE_ADDR;
     384:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
      if (hex.max > (FLASH_BASE_ADDR + buffer_size)) {
     388:	429a      	cmp	r2, r3
      uint32_t addr = buffer_addr + hex.base + hex.addr - FLASH_BASE_ADDR;
     38a:	4448      	add	r0, r9
      if (hex.max > (FLASH_BASE_ADDR + buffer_size)) {
     38c:	f200 80a0 	bhi.w	4d0 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x1c8>
      else if (!IN_FLASH(buffer_addr)) {
     390:	f109 4320 	add.w	r3, r9, #2684354560	; 0xa0000000
        memcpy( (void*)addr, (void*)hex.data, hex.num );
     394:	9a06      	ldr	r2, [sp, #24]
     396:	9903      	ldr	r1, [sp, #12]
      else if (!IN_FLASH(buffer_addr)) {
     398:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
     39c:	d35a      	bcc.n	454 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x14c>
        memcpy( (void*)addr, (void*)hex.data, hex.num );
     39e:	f009 fad5 	bl	994c <memcpy>
  while (!hex.eof)  {
     3a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    hex.lines++;
     3a6:	3301      	adds	r3, #1
     3a8:	930b      	str	r3, [sp, #44]	; 0x2c
  while (!hex.eof)  {
     3aa:	b9c2      	cbnz	r2, 3de <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0xd6>
    read_ascii_line( in, line, sizeof(line) );
     3ac:	2260      	movs	r2, #96	; 0x60
     3ae:	4621      	mov	r1, r4
     3b0:	4630      	mov	r0, r6
     3b2:	f7ff ff0d 	bl	1d0 <read_ascii_line(Stream*, char*, int)>
    if (in == out && out == (Stream*)&Serial) {
     3b6:	2f00      	cmp	r7, #0
     3b8:	d156      	bne.n	468 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x160>
  if (theline[0] != ':')
     3ba:	7823      	ldrb	r3, [r4, #0]
  *num = 0;
     3bc:	2200      	movs	r2, #0
    if (parse_hex_line( (const char*)line, hex.data, &hex.addr, &hex.num, &hex.code ) == 0) {
     3be:	f8dd b00c 	ldr.w	fp, [sp, #12]
  if (theline[0] != ':')
     3c2:	2b3a      	cmp	r3, #58	; 0x3a
  *num = 0;
     3c4:	9206      	str	r2, [sp, #24]
  if (theline[0] != ':')
     3c6:	d0c1      	beq.n	34c <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x44>
      out->printf( "abort - bad hex line %s\n", line );
     3c8:	4622      	mov	r2, r4
     3ca:	4641      	mov	r1, r8
     3cc:	4628      	mov	r0, r5
     3ce:	f009 f809 	bl	93e4 <Print::printf(char const*, ...)>
  while (!hex.eof)  {
     3d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    hex.lines++;
     3d6:	3301      	adds	r3, #1
     3d8:	930b      	str	r3, [sp, #44]	; 0x2c
  while (!hex.eof)  {
     3da:	2a00      	cmp	r2, #0
     3dc:	d0e6      	beq.n	3ac <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0xa4>
     3de:	461a      	mov	r2, r3
  out->printf( "\nhex file: %1d lines %1lu bytes (%08lX - %08lX)\n",
     3e0:	4628      	mov	r0, r5
			hex.lines, hex.max-hex.min, hex.min, hex.max );
     3e2:	e9dd 1308 	ldrd	r1, r3, [sp, #32]
  out->printf( "\nhex file: %1d lines %1lu bytes (%08lX - %08lX)\n",
     3e6:	9301      	str	r3, [sp, #4]
     3e8:	1a5b      	subs	r3, r3, r1
     3ea:	9100      	str	r1, [sp, #0]
     3ec:	4941      	ldr	r1, [pc, #260]	; (4f4 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x1ec>)
     3ee:	f008 fff9 	bl	93e4 <Print::printf(char const*, ...)>
  if (check_flash_id( buffer_addr, hex.max - hex.min )) {
     3f2:	4648      	mov	r0, r9
     3f4:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
     3f8:	1ac9      	subs	r1, r1, r3
     3fa:	f000 f8e7 	bl	5cc <check_flash_id>
    out->printf( "new code contains correct target ID %s\n", FLASH_ID );
     3fe:	4a3e      	ldr	r2, [pc, #248]	; (4f8 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x1f0>)
  if (check_flash_id( buffer_addr, hex.max - hex.min )) {
     400:	2800      	cmp	r0, #0
     402:	d05e      	beq.n	4c2 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x1ba>
    out->printf( "new code contains correct target ID %s\n", FLASH_ID );
     404:	493d      	ldr	r1, [pc, #244]	; (4fc <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x1f4>)
     406:	4628      	mov	r0, r5
     408:	f008 ffec 	bl	93e4 <Print::printf(char const*, ...)>
  int user_lines = -1;
     40c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  while (user_lines != hex.lines && user_lines != 0) {
     410:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  int user_lines = -1;
     412:	9302      	str	r3, [sp, #8]
  while (user_lines != hex.lines && user_lines != 0) {
     414:	429a      	cmp	r2, r3
     416:	d03c      	beq.n	492 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x18a>
    out->printf( "enter %d to flash or 0 to abort\n", hex.lines );
     418:	4f39      	ldr	r7, [pc, #228]	; (500 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x1f8>)
    read_ascii_line( out, line, sizeof(line) );
     41a:	4c35      	ldr	r4, [pc, #212]	; (4f0 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x1e8>)
    sscanf( line, "%d", &user_lines );
     41c:	4e39      	ldr	r6, [pc, #228]	; (504 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x1fc>)
    out->printf( "enter %d to flash or 0 to abort\n", hex.lines );
     41e:	4639      	mov	r1, r7
     420:	4628      	mov	r0, r5
     422:	f008 ffdf 	bl	93e4 <Print::printf(char const*, ...)>
    read_ascii_line( out, line, sizeof(line) );
     426:	2260      	movs	r2, #96	; 0x60
     428:	4621      	mov	r1, r4
     42a:	4628      	mov	r0, r5
     42c:	f7ff fed0 	bl	1d0 <read_ascii_line(Stream*, char*, int)>
    sscanf( line, "%d", &user_lines );
     430:	aa02      	add	r2, sp, #8
     432:	4631      	mov	r1, r6
     434:	4620      	mov	r0, r4
     436:	f00c fe1d 	bl	d074 <sscanf>
  while (user_lines != hex.lines && user_lines != 0) {
     43a:	9b02      	ldr	r3, [sp, #8]
     43c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     43e:	429a      	cmp	r2, r3
     440:	d025      	beq.n	48e <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x186>
     442:	2b00      	cmp	r3, #0
     444:	d1eb      	bne.n	41e <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x116>
    out->printf( "abort - user entered 0 lines\n" );
     446:	4930      	ldr	r1, [pc, #192]	; (508 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x200>)
     448:	4628      	mov	r0, r5
     44a:	f008 ffcb 	bl	93e4 <Print::printf(char const*, ...)>
}
     44e:	b00d      	add	sp, #52	; 0x34
     450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int error = flash_write_block( addr, hex.data, hex.num );
     454:	f000 f8d2 	bl	5fc <flash_write_block>
        if (error) {
     458:	2800      	cmp	r0, #0
     45a:	d0a2      	beq.n	3a2 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x9a>
          out->printf( "abort - error %02X in flash_write_block()\n", error );
     45c:	4602      	mov	r2, r0
     45e:	492b      	ldr	r1, [pc, #172]	; (50c <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x204>)
     460:	4628      	mov	r0, r5
     462:	f008 ffbf 	bl	93e4 <Print::printf(char const*, ...)>
	  return;
     466:	e00f      	b.n	488 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x180>
      out->printf( "%s\n", line );
     468:	4622      	mov	r2, r4
     46a:	4929      	ldr	r1, [pc, #164]	; (510 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x208>)
     46c:	4628      	mov	r0, r5
     46e:	f008 ffb9 	bl	93e4 <Print::printf(char const*, ...)>
      out->flush();
     472:	4b1e      	ldr	r3, [pc, #120]	; (4ec <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x1e4>)
     474:	4628      	mov	r0, r5
     476:	681b      	ldr	r3, [r3, #0]
     478:	68db      	ldr	r3, [r3, #12]
     47a:	4798      	blx	r3
     47c:	e79d      	b.n	3ba <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0xb2>
      out->printf( "abort - invalid hex code %d\n", hex.code );
     47e:	9a05      	ldr	r2, [sp, #20]
     480:	4628      	mov	r0, r5
     482:	4924      	ldr	r1, [pc, #144]	; (514 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x20c>)
     484:	f008 ffae 	bl	93e4 <Print::printf(char const*, ...)>
}
     488:	b00d      	add	sp, #52	; 0x34
     48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (user_lines == 0) {
     48e:	2a00      	cmp	r2, #0
     490:	d0d9      	beq.n	446 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x13e>
    out->printf( "calling flash_move() to load new firmware...\n" );
     492:	4921      	ldr	r1, [pc, #132]	; (518 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x210>)
     494:	4628      	mov	r0, r5
     496:	f008 ffa5 	bl	93e4 <Print::printf(char const*, ...)>
    out->flush();
     49a:	682b      	ldr	r3, [r5, #0]
     49c:	4628      	mov	r0, r5
     49e:	68db      	ldr	r3, [r3, #12]
     4a0:	4798      	blx	r3
  flash_move( FLASH_BASE_ADDR, buffer_addr, hex.max-hex.min );
     4a2:	4649      	mov	r1, r9
     4a4:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
     4a8:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
     4ac:	1ad2      	subs	r2, r2, r3
     4ae:	f7ff fdc7 	bl	40 <flash_move>
  REBOOT;
     4b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4b6:	4a19      	ldr	r2, [pc, #100]	; (51c <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x214>)
     4b8:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
}
     4bc:	b00d      	add	sp, #52	; 0x34
     4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    out->printf( "abort - new code missing string %s\n", FLASH_ID );
     4c2:	4917      	ldr	r1, [pc, #92]	; (520 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x218>)
     4c4:	4628      	mov	r0, r5
     4c6:	f008 ff8d 	bl	93e4 <Print::printf(char const*, ...)>
}
     4ca:	b00d      	add	sp, #52	; 0x34
     4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        out->printf( "abort - max address %08lX too large\n", hex.max );
     4d0:	4914      	ldr	r1, [pc, #80]	; (524 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x21c>)
     4d2:	4628      	mov	r0, r5
     4d4:	f008 ff86 	bl	93e4 <Print::printf(char const*, ...)>
}
     4d8:	b00d      	add	sp, #52	; 0x34
     4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  out->printf( "\nhex file: %1d lines %1lu bytes (%08lX - %08lX)\n",
     4de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     4e0:	e77e      	b.n	3e0 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0xd8>
     4e2:	bf00      	nop
     4e4:	20000398 	.word	0x20000398
     4e8:	200003cc 	.word	0x200003cc
     4ec:	200080f0 	.word	0x200080f0
     4f0:	200091f8 	.word	0x200091f8
     4f4:	20000474 	.word	0x20000474
     4f8:	200004a8 	.word	0x200004a8
     4fc:	200004b4 	.word	0x200004b4
     500:	20000500 	.word	0x20000500
     504:	20000524 	.word	0x20000524
     508:	20000528 	.word	0x20000528
     50c:	20000448 	.word	0x20000448
     510:	200004d8 	.word	0x200004d8
     514:	20000400 	.word	0x20000400
     518:	20000548 	.word	0x20000548
     51c:	05fa0004 	.word	0x05fa0004
     520:	200004dc 	.word	0x200004dc
     524:	20000420 	.word	0x20000420
     528:	200003e4 	.word	0x200003e4

0000052c <firmware_buffer_init>:
  *buffer_addr = FLASH_BASE_ADDR + FLASH_SIZE - FLASH_RESERVE - 4;
     52c:	4a13      	ldr	r2, [pc, #76]	; (57c <firmware_buffer_init+0x50>)
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     52e:	4613      	mov	r3, r2
  *buffer_addr = FLASH_BASE_ADDR + FLASH_SIZE - FLASH_RESERVE - 4;
     530:	6002      	str	r2, [r0, #0]
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     532:	e002      	b.n	53a <firmware_buffer_init+0xe>
    *buffer_addr -= 4;
     534:	3b04      	subs	r3, #4
     536:	6003      	str	r3, [r0, #0]
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     538:	b163      	cbz	r3, 554 <firmware_buffer_init+0x28>
     53a:	681a      	ldr	r2, [r3, #0]
     53c:	3201      	adds	r2, #1
     53e:	d0f9      	beq.n	534 <firmware_buffer_init+0x8>
  *buffer_addr += 4; // first address above code
     540:	3304      	adds	r3, #4
  if ((*buffer_addr % FLASH_SECTOR_SIZE) > 0)
     542:	f3c3 020b 	ubfx	r2, r3, #0, #12
  *buffer_addr += 4; // first address above code
     546:	6003      	str	r3, [r0, #0]
  if ((*buffer_addr % FLASH_SECTOR_SIZE) > 0)
     548:	b95a      	cbnz	r2, 562 <firmware_buffer_init+0x36>
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     54a:	4a0d      	ldr	r2, [pc, #52]	; (580 <firmware_buffer_init+0x54>)
}
     54c:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     54e:	1ad2      	subs	r2, r2, r3
     550:	600a      	str	r2, [r1, #0]
}
     552:	4770      	bx	lr
     554:	4a0b      	ldr	r2, [pc, #44]	; (584 <firmware_buffer_init+0x58>)
     556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     55a:	6003      	str	r3, [r0, #0]
}
     55c:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     55e:	600a      	str	r2, [r1, #0]
}
     560:	4770      	bx	lr
{
     562:	b410      	push	{r4}
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     564:	4c08      	ldr	r4, [pc, #32]	; (588 <firmware_buffer_init+0x5c>)
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     566:	4a07      	ldr	r2, [pc, #28]	; (584 <firmware_buffer_init+0x58>)
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     568:	401c      	ands	r4, r3
     56a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     56e:	1b12      	subs	r2, r2, r4
}
     570:	f85d 4b04 	ldr.w	r4, [sp], #4
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     574:	6003      	str	r3, [r0, #0]
}
     576:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     578:	600a      	str	r2, [r1, #0]
}
     57a:	4770      	bx	lr
     57c:	607fbffc 	.word	0x607fbffc
     580:	607fc000 	.word	0x607fc000
     584:	607fb000 	.word	0x607fb000
     588:	fffff000 	.word	0xfffff000

0000058c <firmware_buffer_free>:
{
     58c:	b538      	push	{r3, r4, r5, lr}
  if (IN_FLASH(buffer_addr))
     58e:	f100 4320 	add.w	r3, r0, #2684354560	; 0xa0000000
     592:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
     596:	d215      	bcs.n	5c4 <firmware_buffer_free+0x38>
  while (address < (start + size) && error == 0) { 
     598:	1845      	adds	r5, r0, r1
     59a:	4604      	mov	r4, r0
     59c:	42a8      	cmp	r0, r5
     59e:	d307      	bcc.n	5b0 <firmware_buffer_free+0x24>
}
     5a0:	bd38      	pop	{r3, r4, r5, pc}
          eepromemu_flash_erase_sector( (void*)address );
     5a2:	4620      	mov	r0, r4
     5a4:	f009 f96e 	bl	9884 <eepromemu_flash_erase_sector>
    address += FLASH_SECTOR_SIZE;
     5a8:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
  while (address < (start + size) && error == 0) { 
     5ac:	42ac      	cmp	r4, r5
     5ae:	d2f7      	bcs.n	5a0 <firmware_buffer_free+0x14>
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
     5b0:	f3c4 030b 	ubfx	r3, r4, #0, #12
      if (flash_sector_not_erased( address )) {
     5b4:	4620      	mov	r0, r4
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
     5b6:	2b00      	cmp	r3, #0
     5b8:	d1f6      	bne.n	5a8 <firmware_buffer_free+0x1c>
      if (flash_sector_not_erased( address )) {
     5ba:	f7ff fd31 	bl	20 <flash_sector_not_erased>
     5be:	2800      	cmp	r0, #0
     5c0:	d0f2      	beq.n	5a8 <firmware_buffer_free+0x1c>
     5c2:	e7ee      	b.n	5a2 <firmware_buffer_free+0x16>
}
     5c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    free( (void*)buffer_addr );
     5c8:	f00b b8b6 	b.w	b738 <free>

000005cc <check_flash_id>:
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     5cc:	390b      	subs	r1, #11
{
     5ce:	b570      	push	{r4, r5, r6, lr}
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     5d0:	180d      	adds	r5, r1, r0
     5d2:	42a8      	cmp	r0, r5
     5d4:	d20e      	bcs.n	5f4 <check_flash_id+0x28>
     5d6:	4604      	mov	r4, r0
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     5d8:	4e07      	ldr	r6, [pc, #28]	; (5f8 <check_flash_id+0x2c>)
     5da:	e001      	b.n	5e0 <check_flash_id+0x14>
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     5dc:	42ac      	cmp	r4, r5
     5de:	d009      	beq.n	5f4 <check_flash_id+0x28>
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     5e0:	4620      	mov	r0, r4
     5e2:	220b      	movs	r2, #11
     5e4:	4631      	mov	r1, r6
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     5e6:	3401      	adds	r4, #1
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     5e8:	f00c ffce 	bl	d588 <strncmp>
     5ec:	2800      	cmp	r0, #0
     5ee:	d1f5      	bne.n	5dc <check_flash_id+0x10>
      return 1;
     5f0:	2001      	movs	r0, #1
}
     5f2:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
     5f4:	2000      	movs	r0, #0
}
     5f6:	bd70      	pop	{r4, r5, r6, pc}
     5f8:	200004a8 	.word	0x200004a8

000005fc <flash_write_block>:

//******************************************************************************
// take a 32-bit aligned array of 32-bit values and write it to erased flash
//******************************************************************************
int flash_write_block( uint32_t addr, char *data, uint32_t count )
{
     5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  static uint32_t next_addr = 0;			// expected address
  
  int ret = 0;						// return value
  uint32_t data_i = 0;					// index to data array

  if ((addr % 4) != 0 || (count % 4) != 0) {		// if not 32-bit aligned
     600:	ea40 0302 	orr.w	r3, r0, r2
     604:	079b      	lsls	r3, r3, #30
     606:	d002      	beq.n	60e <flash_write_block+0x12>
    return 1;	// "flash_block align error\n"		//   return error code 1
     608:	2001      	movs	r0, #1
    }
    buf_count = 0;					//   re-init buf count
    addr += FLASH_WRITE_SIZE;				//   advance address
  }  
  return 0;						// return success
}
     60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (buf_count > 0 && addr != next_addr) {		// if unexpected address   
     60e:	4f15      	ldr	r7, [pc, #84]	; (664 <flash_write_block+0x68>)
     610:	4c15      	ldr	r4, [pc, #84]	; (668 <flash_write_block+0x6c>)
     612:	683b      	ldr	r3, [r7, #0]
     614:	b113      	cbz	r3, 61c <flash_write_block+0x20>
     616:	6825      	ldr	r5, [r4, #0]
     618:	4285      	cmp	r5, r0
     61a:	d120      	bne.n	65e <flash_write_block+0x62>
  next_addr = addr + count;				//   compute next address
     61c:	1885      	adds	r5, r0, r2
     61e:	6025      	str	r5, [r4, #0]
  addr -= buf_count;					//   address of data[0]
     620:	1ac5      	subs	r5, r0, r3
  while (data_i < count) {				// while more data
     622:	b1ca      	cbz	r2, 658 <flash_write_block+0x5c>
     624:	1e4c      	subs	r4, r1, #1
     626:	f8df 8044 	ldr.w	r8, [pc, #68]	; 66c <flash_write_block+0x70>
    buf_count = 0;					//   re-init buf count
     62a:	f04f 0900 	mov.w	r9, #0
     62e:	18a6      	adds	r6, r4, r2
     630:	e000      	b.n	634 <flash_write_block+0x38>
    ((char*)&buf)[buf_count++] = data[data_i++];	//   copy a byte to buf
     632:	683b      	ldr	r3, [r7, #0]
     634:	1c59      	adds	r1, r3, #1
     636:	f814 cf01 	ldrb.w	ip, [r4, #1]!
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     63a:	4628      	mov	r0, r5
     63c:	2204      	movs	r2, #4
    if (buf_count < FLASH_WRITE_SIZE) {			//   if buf not complete
     63e:	2903      	cmp	r1, #3
    ((char*)&buf)[buf_count++] = data[data_i++];	//   copy a byte to buf
     640:	6039      	str	r1, [r7, #0]
     642:	f808 c003 	strb.w	ip, [r8, r3]
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     646:	4641      	mov	r1, r8
    if (buf_count < FLASH_WRITE_SIZE) {			//   if buf not complete
     648:	d904      	bls.n	654 <flash_write_block+0x58>
    addr += FLASH_WRITE_SIZE;				//   advance address
     64a:	4415      	add	r5, r2
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     64c:	f009 f8a4 	bl	9798 <eepromemu_flash_write>
    buf_count = 0;					//   re-init buf count
     650:	f8c7 9000 	str.w	r9, [r7]
  while (data_i < count) {				// while more data
     654:	42b4      	cmp	r4, r6
     656:	d1ec      	bne.n	632 <flash_write_block+0x36>
  return 0;						// return success
     658:	2000      	movs	r0, #0
}
     65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 2;	// "unexpected address\n"		//   return error code 2   
     65e:	2002      	movs	r0, #2
     660:	e7d3      	b.n	60a <flash_write_block+0xe>
     662:	bf00      	nop
     664:	2000956c 	.word	0x2000956c
     668:	20009594 	.word	0x20009594
     66c:	20009568 	.word	0x20009568

00000670 <Print::availableForWrite()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     670:	2000      	movs	r0, #0
     672:	4770      	bx	lr

00000674 <Print::flush()>:
	virtual void flush()				{ }
     674:	4770      	bx	lr
     676:	bf00      	nop

00000678 <SDFile::isOpen()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     678:	6d03      	ldr	r3, [r0, #80]	; 0x50
     67a:	b10b      	cbz	r3, 680 <SDFile::isOpen()+0x8>
     67c:	2001      	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
     67e:	4770      	bx	lr
     680:	6d40      	ldr	r0, [r0, #84]	; 0x54
     682:	3800      	subs	r0, #0
     684:	bf18      	it	ne
     686:	2001      	movne	r0, #1
     688:	4770      	bx	lr
     68a:	bf00      	nop

0000068c <SDFile::close()>:
	virtual void close() {
     68c:	b510      	push	{r4, lr}
     68e:	4604      	mov	r4, r0
		if (filename) {
     690:	6d80      	ldr	r0, [r0, #88]	; 0x58
     692:	b118      	cbz	r0, 69c <SDFile::close()+0x10>
			free(filename);
     694:	f00b f850 	bl	b738 <free>
			filename = nullptr;
     698:	2300      	movs	r3, #0
     69a:	65a3      	str	r3, [r4, #88]	; 0x58
     69c:	6d23      	ldr	r3, [r4, #80]	; 0x50
     69e:	b12b      	cbz	r3, 6ac <SDFile::close()+0x20>
			sdfatfile.close();
     6a0:	f104 0018 	add.w	r0, r4, #24
	}
     6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			sdfatfile.close();
     6a8:	f005 bf0e 	b.w	64c8 <FsBaseFile::close()>
     6ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
     6ae:	2b00      	cmp	r3, #0
     6b0:	d1f6      	bne.n	6a0 <SDFile::close()+0x14>
	}
     6b2:	bd10      	pop	{r4, pc}

000006b4 <SDFile::name()>:
	virtual const char * name() {
     6b4:	b510      	push	{r4, lr}
     6b6:	4604      	mov	r4, r0
		if (!filename) {
     6b8:	6d80      	ldr	r0, [r0, #88]	; 0x58
     6ba:	b100      	cbz	r0, 6be <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     6bc:	bd10      	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
     6be:	f44f 7080 	mov.w	r0, #256	; 0x100
     6c2:	f00b f831 	bl	b728 <malloc>
     6c6:	65a0      	str	r0, [r4, #88]	; 0x58
			if (filename) {
     6c8:	b1b0      	cbz	r0, 6f8 <SDFile::name()+0x44>
    *name = 0;
     6ca:	2200      	movs	r2, #0
    return m_fFile ? m_fFile->getName(name, len) :
     6cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    *name = 0;
     6ce:	7002      	strb	r2, [r0, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     6d0:	b13b      	cbz	r3, 6e2 <SDFile::name()+0x2e>
     6d2:	4601      	mov	r1, r0
     6d4:	f44f 7280 	mov.w	r2, #256	; 0x100
     6d8:	4618      	mov	r0, r3
     6da:	f005 fb45 	bl	5d68 <FatFile::getName(char*, unsigned int)>
		return filename;
     6de:	6da0      	ldr	r0, [r4, #88]	; 0x58
	}
     6e0:	bd10      	pop	{r4, pc}
     6e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
           m_xFile ? m_xFile->getName(name, len) : 0;
     6e4:	2b00      	cmp	r3, #0
     6e6:	d0e9      	beq.n	6bc <SDFile::name()+0x8>
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     6e8:	4601      	mov	r1, r0
     6ea:	f44f 7280 	mov.w	r2, #256	; 0x100
     6ee:	4618      	mov	r0, r3
     6f0:	f002 ffe8 	bl	36c4 <ExFatFile::getName8(char*, unsigned int)>
		return filename;
     6f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
	}
     6f6:	bd10      	pop	{r4, pc}
				filename = &zeroterm;
     6f8:	4b01      	ldr	r3, [pc, #4]	; (700 <SDFile::name()+0x4c>)
     6fa:	4618      	mov	r0, r3
     6fc:	65a3      	str	r3, [r4, #88]	; 0x58
	}
     6fe:	bd10      	pop	{r4, pc}
     700:	2000962a 	.word	0x2000962a

00000704 <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     704:	b538      	push	{r3, r4, r5, lr}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     706:	6d05      	ldr	r5, [r0, #80]	; 0x50
     708:	b16d      	cbz	r5, 726 <SDFile::truncate(unsigned long long)+0x22>
     70a:	b10b      	cbz	r3, 710 <SDFile::truncate(unsigned long long)+0xc>
	}
     70c:	2000      	movs	r0, #0
     70e:	bd38      	pop	{r3, r4, r5, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     710:	4611      	mov	r1, r2
     712:	4628      	mov	r0, r5
     714:	f004 f864 	bl	47e0 <FatFile::seekSet(unsigned long)>
     718:	2800      	cmp	r0, #0
     71a:	d0f7      	beq.n	70c <SDFile::truncate(unsigned long long)+0x8>
     71c:	4628      	mov	r0, r5
     71e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     722:	f004 b9ff 	b.w	4b24 <FatFile::truncate()>
     726:	6d44      	ldr	r4, [r0, #84]	; 0x54
           m_xFile ? m_xFile->truncate(length) : false;
     728:	2c00      	cmp	r4, #0
     72a:	d0ef      	beq.n	70c <SDFile::truncate(unsigned long long)+0x8>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     72c:	4620      	mov	r0, r4
     72e:	f001 fc1b 	bl	1f68 <ExFatFile::seekSet(unsigned long long)>
     732:	2800      	cmp	r0, #0
     734:	d0ea      	beq.n	70c <SDFile::truncate(unsigned long long)+0x8>
     736:	4620      	mov	r0, r4
     738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     73c:	f002 ba8e 	b.w	2c5c <ExFatFile::truncate()>

00000740 <SDFile::setModifyTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     740:	798a      	ldrb	r2, [r1, #6]
     742:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     746:	061b      	lsls	r3, r3, #24
     748:	d422      	bmi.n	790 <SDFile::setModifyTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     74a:	f202 726c 	addw	r2, r2, #1900	; 0x76c
	virtual bool setModifyTime(const DateTimeFields &tm) {
     74e:	b5f0      	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     750:	794b      	ldrb	r3, [r1, #5]
	virtual bool setModifyTime(const DateTimeFields &tm) {
     752:	b085      	sub	sp, #20
    return m_fFile ?
     754:	6d04      	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     756:	3301      	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     758:	790d      	ldrb	r5, [r1, #4]
     75a:	788e      	ldrb	r6, [r1, #2]
     75c:	784f      	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     75e:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     760:	7809      	ldrb	r1, [r1, #0]
     762:	b14c      	cbz	r4, 778 <SDFile::setModifyTime(DateTimeFields const&)+0x38>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     764:	4620      	mov	r0, r4
     766:	9601      	str	r6, [sp, #4]
     768:	9500      	str	r5, [sp, #0]
     76a:	e9cd 7102 	strd	r7, r1, [sp, #8]
     76e:	2104      	movs	r1, #4
     770:	f004 f96c 	bl	4a4c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     774:	b005      	add	sp, #20
     776:	bdf0      	pop	{r4, r5, r6, r7, pc}
     778:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ?
     77a:	2800      	cmp	r0, #0
     77c:	d0fa      	beq.n	774 <SDFile::setModifyTime(DateTimeFields const&)+0x34>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     77e:	9601      	str	r6, [sp, #4]
     780:	9500      	str	r5, [sp, #0]
     782:	e9cd 7102 	strd	r7, r1, [sp, #8]
     786:	2104      	movs	r1, #4
     788:	f002 f9ac 	bl	2ae4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     78c:	b005      	add	sp, #20
     78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     790:	2000      	movs	r0, #0
	}
     792:	4770      	bx	lr

00000794 <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
     794:	b510      	push	{r4, lr}
     796:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->isDir() :
     798:	6d00      	ldr	r0, [r0, #80]	; 0x50
     79a:	b180      	cbz	r0, 7be <SDFile::rewindDirectory()+0x2a>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     79c:	7803      	ldrb	r3, [r0, #0]
     79e:	f013 0f70 	tst.w	r3, #112	; 0x70
     7a2:	d100      	bne.n	7a6 <SDFile::rewindDirectory()+0x12>
	}
     7a4:	bd10      	pop	{r4, pc}
    seekSet(0);
     7a6:	2100      	movs	r1, #0
     7a8:	f004 f81a 	bl	47e0 <FatFile::seekSet(unsigned long)>
    if (m_xFile) m_xFile->rewind();
     7ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
     7ae:	2800      	cmp	r0, #0
     7b0:	d0f8      	beq.n	7a4 <SDFile::rewindDirectory()+0x10>
    seekSet(0);
     7b2:	2200      	movs	r2, #0
     7b4:	2300      	movs	r3, #0
     7b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     7ba:	f001 bbd5 	b.w	1f68 <ExFatFile::seekSet(unsigned long long)>
     7be:	6d60      	ldr	r0, [r4, #84]	; 0x54
           m_xFile ? m_xFile->isDir() : false;
     7c0:	2800      	cmp	r0, #0
     7c2:	d0ef      	beq.n	7a4 <SDFile::rewindDirectory()+0x10>
     7c4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
     7c8:	f013 0f50 	tst.w	r3, #80	; 0x50
     7cc:	d0ea      	beq.n	7a4 <SDFile::rewindDirectory()+0x10>
     7ce:	2200      	movs	r2, #0
     7d0:	2300      	movs	r3, #0
     7d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     7d6:	f001 bbc7 	b.w	1f68 <ExFatFile::seekSet(unsigned long long)>
     7da:	bf00      	nop

000007dc <SDFile::getModifyTime(DateTimeFields&)>:
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
     7dc:	6d03      	ldr	r3, [r0, #80]	; 0x50
	virtual bool getModifyTime(DateTimeFields &tm) {
     7de:	b510      	push	{r4, lr}
     7e0:	460c      	mov	r4, r1
     7e2:	b082      	sub	sp, #8
     7e4:	b32b      	cbz	r3, 832 <SDFile::getModifyTime(DateTimeFields&)+0x56>
     7e6:	f10d 0206 	add.w	r2, sp, #6
     7ea:	a901      	add	r1, sp, #4
     7ec:	4618      	mov	r0, r3
     7ee:	f003 fb9d 	bl	3f2c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     7f2:	b338      	cbz	r0, 844 <SDFile::getModifyTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     7f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
     7f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     7fc:	ea53 0102 	orrs.w	r1, r3, r2
     800:	d020      	beq.n	844 <SDFile::getModifyTime(DateTimeFields&)+0x68>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted minute [0,59]
 */
static inline uint8_t FS_MINUTE(uint16_t fatTime) {
  return (fatTime >> 5) & 0X3F;
     802:	f3c2 1c45 	ubfx	ip, r2, #5, #6
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
     806:	f002 001f 	and.w	r0, r2, #31
  return fatTime >> 11;
     80a:	0ad2      	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     80c:	f3c3 1143 	ubfx	r1, r3, #5, #4
  return 2*(fatTime & 0X1F);
     810:	0040      	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     812:	f884 c001 	strb.w	ip, [r4, #1]
  return fatTime >> 11;
     816:	70a2      	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     818:	0a5a      	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     81a:	3901      	subs	r1, #1
  return fatDate & 0X1F;
     81c:	f003 031f 	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     820:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     824:	7020      	strb	r0, [r4, #0]
		return true;
     826:	2001      	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     828:	7161      	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     82a:	7123      	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     82c:	71a2      	strb	r2, [r4, #6]
	}
     82e:	b002      	add	sp, #8
     830:	bd10      	pop	{r4, pc}
     832:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
     834:	b130      	cbz	r0, 844 <SDFile::getModifyTime(DateTimeFields&)+0x68>
     836:	f10d 0206 	add.w	r2, sp, #6
     83a:	a901      	add	r1, sp, #4
     83c:	f001 fa3a 	bl	1cb4 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     840:	2800      	cmp	r0, #0
     842:	d1d7      	bne.n	7f4 <SDFile::getModifyTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     844:	2000      	movs	r0, #0
	}
     846:	b002      	add	sp, #8
     848:	bd10      	pop	{r4, pc}
     84a:	bf00      	nop

0000084c <SDFile::getCreateTime(DateTimeFields&)>:
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     84c:	6d03      	ldr	r3, [r0, #80]	; 0x50
	virtual bool getCreateTime(DateTimeFields &tm) {
     84e:	b510      	push	{r4, lr}
     850:	460c      	mov	r4, r1
     852:	b082      	sub	sp, #8
     854:	b32b      	cbz	r3, 8a2 <SDFile::getCreateTime(DateTimeFields&)+0x56>
     856:	f10d 0206 	add.w	r2, sp, #6
     85a:	a901      	add	r1, sp, #4
     85c:	4618      	mov	r0, r3
     85e:	f003 fb55 	bl	3f0c <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     862:	b338      	cbz	r0, 8b4 <SDFile::getCreateTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     864:	f8bd 3004 	ldrh.w	r3, [sp, #4]
     868:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     86c:	ea53 0102 	orrs.w	r1, r3, r2
     870:	d020      	beq.n	8b4 <SDFile::getCreateTime(DateTimeFields&)+0x68>
  return (fatTime >> 5) & 0X3F;
     872:	f3c2 1c45 	ubfx	ip, r2, #5, #6
  return 2*(fatTime & 0X1F);
     876:	f002 001f 	and.w	r0, r2, #31
  return fatTime >> 11;
     87a:	0ad2      	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     87c:	f3c3 1143 	ubfx	r1, r3, #5, #4
  return 2*(fatTime & 0X1F);
     880:	0040      	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     882:	f884 c001 	strb.w	ip, [r4, #1]
  return fatTime >> 11;
     886:	70a2      	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     888:	0a5a      	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     88a:	3901      	subs	r1, #1
  return fatDate & 0X1F;
     88c:	f003 031f 	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     890:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     894:	7020      	strb	r0, [r4, #0]
		return true;
     896:	2001      	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     898:	7161      	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     89a:	7123      	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     89c:	71a2      	strb	r2, [r4, #6]
	}
     89e:	b002      	add	sp, #8
     8a0:	bd10      	pop	{r4, pc}
     8a2:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     8a4:	b130      	cbz	r0, 8b4 <SDFile::getCreateTime(DateTimeFields&)+0x68>
     8a6:	f10d 0206 	add.w	r2, sp, #6
     8aa:	a901      	add	r1, sp, #4
     8ac:	f001 f9f0 	bl	1c90 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     8b0:	2800      	cmp	r0, #0
     8b2:	d1d7      	bne.n	864 <SDFile::getCreateTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     8b4:	2000      	movs	r0, #0
	}
     8b6:	b002      	add	sp, #8
     8b8:	bd10      	pop	{r4, pc}
     8ba:	bf00      	nop

000008bc <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
     8bc:	6903      	ldr	r3, [r0, #16]
     8be:	b1d3      	cbz	r3, 8f6 <File::write(unsigned char const*, unsigned int)+0x3a>
     8c0:	480e      	ldr	r0, [pc, #56]	; (8fc <File::write(unsigned char const*, unsigned int)+0x40>)
	virtual size_t write(const uint8_t *buf, size_t size) {
     8c2:	b410      	push	{r4}
		return (f) ? f->write((void*)buf, size) : 0;
     8c4:	681c      	ldr	r4, [r3, #0]
     8c6:	68e4      	ldr	r4, [r4, #12]
     8c8:	4284      	cmp	r4, r0
     8ca:	d10f      	bne.n	8ec <File::write(unsigned char const*, unsigned int)+0x30>
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     8cc:	6d18      	ldr	r0, [r3, #80]	; 0x50
     8ce:	b118      	cbz	r0, 8d8 <File::write(unsigned char const*, unsigned int)+0x1c>
	}
     8d0:	f85d 4b04 	ldr.w	r4, [sp], #4
     8d4:	f004 b960 	b.w	4b98 <FatFile::write(void const*, unsigned int)>
     8d8:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
     8da:	b118      	cbz	r0, 8e4 <File::write(unsigned char const*, unsigned int)+0x28>
     8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
     8e0:	f002 ba2e 	b.w	2d40 <ExFatFile::write(void const*, unsigned int)>
     8e4:	2000      	movs	r0, #0
     8e6:	f85d 4b04 	ldr.w	r4, [sp], #4
     8ea:	4770      	bx	lr
		return (f) ? f->write((void*)buf, size) : 0;
     8ec:	4618      	mov	r0, r3
     8ee:	4623      	mov	r3, r4
	}
     8f0:	f85d 4b04 	ldr.w	r4, [sp], #4
		return (f) ? f->write((void*)buf, size) : 0;
     8f4:	4718      	bx	r3
	}
     8f6:	2000      	movs	r0, #0
     8f8:	4770      	bx	lr
     8fa:	bf00      	nop
     8fc:	00000bd9 	.word	0x00000bd9

00000900 <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
     900:	6900      	ldr	r0, [r0, #16]
     902:	b190      	cbz	r0, 92a <File::available()+0x2a>
     904:	6803      	ldr	r3, [r0, #0]
     906:	4a15      	ldr	r2, [pc, #84]	; (95c <File::available()+0x5c>)
     908:	691b      	ldr	r3, [r3, #16]
     90a:	4293      	cmp	r3, r2
     90c:	d125      	bne.n	95a <File::available()+0x5a>
    return m_fFile ? m_fFile->available() :
     90e:	6d03      	ldr	r3, [r0, #80]	; 0x50
     910:	b163      	cbz	r3, 92c <File::available()+0x2c>
    return isFile() ? fileSize() - curPosition() : 0;
     912:	7818      	ldrb	r0, [r3, #0]
     914:	f010 0008 	ands.w	r0, r0, #8
     918:	d007      	beq.n	92a <File::available()+0x2a>
     91a:	69d8      	ldr	r0, [r3, #28]
     91c:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     91e:	1ac0      	subs	r0, r0, r3
     920:	bf48      	it	mi
     922:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     926:	4770      	bx	lr
     928:	4618      	mov	r0, r3
	}
     92a:	4770      	bx	lr
     92c:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
     92e:	2b00      	cmp	r3, #0
     930:	d0fa      	beq.n	928 <File::available()+0x28>
    return isFile() ? fileSize() - curPosition() : 0;
     932:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     936:	f010 0008 	ands.w	r0, r0, #8
     93a:	d0f6      	beq.n	92a <File::available()+0x2a>
     93c:	6918      	ldr	r0, [r3, #16]
     93e:	6819      	ldr	r1, [r3, #0]
     940:	695a      	ldr	r2, [r3, #20]
     942:	1a40      	subs	r0, r0, r1
     944:	685b      	ldr	r3, [r3, #4]
     946:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     94a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     94e:	f173 0300 	sbcs.w	r3, r3, #0
     952:	d3ea      	bcc.n	92a <File::available()+0x2a>
     954:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     958:	4770      	bx	lr
		return (f) ? f->available() : 0;
     95a:	4718      	bx	r3
     95c:	00000cc1 	.word	0x00000cc1

00000960 <File::peek()>:
	int peek() {
		return (f) ? f->peek() : -1;
     960:	6903      	ldr	r3, [r0, #16]
     962:	b173      	cbz	r3, 982 <File::peek()+0x22>
     964:	681a      	ldr	r2, [r3, #0]
     966:	4908      	ldr	r1, [pc, #32]	; (988 <File::peek()+0x28>)
     968:	6952      	ldr	r2, [r2, #20]
     96a:	428a      	cmp	r2, r1
     96c:	d107      	bne.n	97e <File::peek()+0x1e>
    return m_fFile ? m_fFile->peek() :
     96e:	6d18      	ldr	r0, [r3, #80]	; 0x50
     970:	b108      	cbz	r0, 976 <File::peek()+0x16>
     972:	f003 bdc1 	b.w	44f8 <FatFile::peek()>
     976:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->peek() : -1;
     978:	b118      	cbz	r0, 982 <File::peek()+0x22>
     97a:	f001 badf 	b.w	1f3c <ExFatFile::peek()>
     97e:	4618      	mov	r0, r3
     980:	4710      	bx	r2
	}
     982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     986:	4770      	bx	lr
     988:	00000af5 	.word	0x00000af5

0000098c <File::flush()>:
	void flush() {
		if (f) f->flush();
     98c:	6903      	ldr	r3, [r0, #16]
     98e:	b163      	cbz	r3, 9aa <File::flush()+0x1e>
     990:	681a      	ldr	r2, [r3, #0]
     992:	4907      	ldr	r1, [pc, #28]	; (9b0 <File::flush()+0x24>)
     994:	6992      	ldr	r2, [r2, #24]
     996:	428a      	cmp	r2, r1
     998:	d108      	bne.n	9ac <File::flush()+0x20>
    return m_fFile ? m_fFile->sync() :
     99a:	6d18      	ldr	r0, [r3, #80]	; 0x50
     99c:	b108      	cbz	r0, 9a2 <File::flush()+0x16>
     99e:	f004 b84f 	b.w	4a40 <FatFile::sync()>
     9a2:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->sync() : false;
     9a4:	b108      	cbz	r0, 9aa <File::flush()+0x1e>
     9a6:	f001 bf27 	b.w	27f8 <ExFatFile::sync()>
	}
     9aa:	4770      	bx	lr
		if (f) f->flush();
     9ac:	4618      	mov	r0, r3
     9ae:	4710      	bx	r2
     9b0:	00000bb1 	.word	0x00000bb1

000009b4 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     9b4:	6903      	ldr	r3, [r0, #16]
     9b6:	b323      	cbz	r3, a02 <File::read()+0x4e>
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     9b8:	6819      	ldr	r1, [r3, #0]
     9ba:	4a13      	ldr	r2, [pc, #76]	; (a08 <File::read()+0x54>)
	int read() {
     9bc:	b510      	push	{r4, lr}
		if (f->read(&b, 1) < 1) return -1;
     9be:	688c      	ldr	r4, [r1, #8]
	int read() {
     9c0:	b082      	sub	sp, #8
     9c2:	4294      	cmp	r4, r2
     9c4:	d114      	bne.n	9f0 <File::read()+0x3c>
    return m_fFile ? m_fFile->read(buf, count) :
     9c6:	6d18      	ldr	r0, [r3, #80]	; 0x50
     9c8:	b148      	cbz	r0, 9de <File::read()+0x2a>
     9ca:	2201      	movs	r2, #1
     9cc:	f10d 0107 	add.w	r1, sp, #7
     9d0:	f003 fcbe 	bl	4350 <FatFile::read(void*, unsigned int)>
		if (f->read(&b, 1) < 1) return -1;
     9d4:	b190      	cbz	r0, 9fc <File::read()+0x48>
		return b;
     9d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
	}
     9da:	b002      	add	sp, #8
     9dc:	bd10      	pop	{r4, pc}
     9de:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
     9e0:	2800      	cmp	r0, #0
     9e2:	d0f8      	beq.n	9d6 <File::read()+0x22>
     9e4:	2201      	movs	r2, #1
     9e6:	f10d 0107 	add.w	r1, sp, #7
     9ea:	f001 f9d7 	bl	1d9c <ExFatFile::read(void*, unsigned int)>
     9ee:	e7f1      	b.n	9d4 <File::read()+0x20>
		if (f->read(&b, 1) < 1) return -1;
     9f0:	2201      	movs	r2, #1
     9f2:	f10d 0107 	add.w	r1, sp, #7
     9f6:	4618      	mov	r0, r3
     9f8:	47a0      	blx	r4
     9fa:	e7eb      	b.n	9d4 <File::read()+0x20>
		if (!f) return -1;
     9fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a00:	e7eb      	b.n	9da <File::read()+0x26>
     a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
     a06:	4770      	bx	lr
     a08:	00000b4d 	.word	0x00000b4d

00000a0c <SDFile::position()>:
    return m_fFile ? m_fFile->curPosition() :
     a0c:	6d03      	ldr	r3, [r0, #80]	; 0x50
     a0e:	b113      	cbz	r3, a16 <SDFile::position()+0xa>
     a10:	6958      	ldr	r0, [r3, #20]
     a12:	2100      	movs	r1, #0
     a14:	4770      	bx	lr
     a16:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->curPosition() : 0;
     a18:	b113      	cbz	r3, a20 <SDFile::position()+0x14>
  uint64_t curPosition() const {return m_curPosition;}
     a1a:	e9d3 0100 	ldrd	r0, r1, [r3]
     a1e:	4770      	bx	lr
     a20:	4618      	mov	r0, r3
     a22:	4619      	mov	r1, r3
	}
     a24:	4770      	bx	lr
     a26:	bf00      	nop

00000a28 <SDFile::size()>:
    return m_fFile ? m_fFile->fileSize() :
     a28:	6d03      	ldr	r3, [r0, #80]	; 0x50
     a2a:	b113      	cbz	r3, a32 <SDFile::size()+0xa>
     a2c:	69d8      	ldr	r0, [r3, #28]
     a2e:	2100      	movs	r1, #0
     a30:	4770      	bx	lr
     a32:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->fileSize() : 0;
     a34:	b113      	cbz	r3, a3c <SDFile::size()+0x14>
  uint64_t fileSize() const {return m_validLength;}
     a36:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
     a3a:	4770      	bx	lr
     a3c:	4618      	mov	r0, r3
     a3e:	4619      	mov	r1, r3
	}
     a40:	4770      	bx	lr
     a42:	bf00      	nop

00000a44 <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     a44:	b5f0      	push	{r4, r5, r6, r7, lr}
     a46:	b095      	sub	sp, #84	; 0x54
	constexpr Print() : write_error(0) {}
     a48:	2200      	movs	r2, #0
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     a4a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     a4e:	4f24      	ldr	r7, [pc, #144]	; (ae0 <SDFile::openNextFile(unsigned char)+0x9c>)
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     a50:	3118      	adds	r1, #24
     a52:	4605      	mov	r5, r0
     a54:	a804      	add	r0, sp, #16
     a56:	f88d 200c 	strb.w	r2, [sp, #12]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     a5a:	9700      	str	r7, [sp, #0]
     a5c:	e9cd 2401 	strd	r2, r4, [sp, #4]
  FsBaseFile() {}
     a60:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
    tmpFile.openNext(this, oflag);
     a64:	f005 fd9c 	bl	65a0 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
     a68:	9b12      	ldr	r3, [sp, #72]	; 0x48
     a6a:	2b00      	cmp	r3, #0
     a6c:	d02d      	beq.n	aca <SDFile::openNextFile(unsigned char)+0x86>
		if (file) return File(new SDFile(file));
     a6e:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
     a70:	2600      	movs	r6, #0
     a72:	f009 f805 	bl	9a80 <operator new(unsigned int)>
class Print
     a76:	9b01      	ldr	r3, [sp, #4]
     a78:	4604      	mov	r4, r0
     a7a:	6046      	str	r6, [r0, #4]
     a7c:	60c3      	str	r3, [r0, #12]
class StreamFile : public stream_t, public BaseFile {
     a7e:	a904      	add	r1, sp, #16
class Stream : public Print
     a80:	9b02      	ldr	r3, [sp, #8]
     a82:	3018      	adds	r0, #24
     a84:	f840 3c08 	str.w	r3, [r0, #-8]
     a88:	f89d 300c 	ldrb.w	r3, [sp, #12]
     a8c:	f800 3c04 	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     a90:	4b14      	ldr	r3, [pc, #80]	; (ae4 <SDFile::openNextFile(unsigned char)+0xa0>)
     a92:	f840 3c18 	str.w	r3, [r0, #-24]
     a96:	4b14      	ldr	r3, [pc, #80]	; (ae8 <SDFile::openNextFile(unsigned char)+0xa4>)
     a98:	f840 3c10 	str.w	r3, [r0, #-16]
     a9c:	f005 fcd2 	bl	6444 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
	File(FileImpl *file) {
     aa0:	4b12      	ldr	r3, [pc, #72]	; (aec <SDFile::openNextFile(unsigned char)+0xa8>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
     aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     aa6:	60a7      	str	r7, [r4, #8]
     aa8:	602b      	str	r3, [r5, #0]
		if (f) f->refcount++;
     aaa:	6863      	ldr	r3, [r4, #4]
     aac:	65a6      	str	r6, [r4, #88]	; 0x58
     aae:	3301      	adds	r3, #1
	constexpr Print() : write_error(0) {}
     ab0:	606e      	str	r6, [r5, #4]
     ab2:	732e      	strb	r6, [r5, #12]
     ab4:	60aa      	str	r2, [r5, #8]
		f = file;
     ab6:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
     ab8:	6063      	str	r3, [r4, #4]
     aba:	4b0d      	ldr	r3, [pc, #52]	; (af0 <SDFile::openNextFile(unsigned char)+0xac>)
  ~FsBaseFile() {close();}
     abc:	a804      	add	r0, sp, #16
     abe:	9300      	str	r3, [sp, #0]
     ac0:	f005 fd02 	bl	64c8 <FsBaseFile::close()>
	}
     ac4:	4628      	mov	r0, r5
     ac6:	b015      	add	sp, #84	; 0x54
     ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     aca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     acc:	2b00      	cmp	r3, #0
     ace:	d1ce      	bne.n	a6e <SDFile::openNextFile(unsigned char)+0x2a>
	constexpr File() : f(nullptr) { }
     ad0:	4a06      	ldr	r2, [pc, #24]	; (aec <SDFile::openNextFile(unsigned char)+0xa8>)
     ad2:	732b      	strb	r3, [r5, #12]
     ad4:	602a      	str	r2, [r5, #0]
     ad6:	612b      	str	r3, [r5, #16]
     ad8:	e9c5 3401 	strd	r3, r4, [r5, #4]
     adc:	e7ed      	b.n	aba <SDFile::openNextFile(unsigned char)+0x76>
     ade:	bf00      	nop
     ae0:	200009ac 	.word	0x200009ac
     ae4:	200009d0 	.word	0x200009d0
     ae8:	20000a2c 	.word	0x20000a2c
     aec:	20000980 	.word	0x20000980
     af0:	200008c4 	.word	0x200008c4

00000af4 <SDFile::peek()>:
    return m_fFile ? m_fFile->peek() :
     af4:	6d03      	ldr	r3, [r0, #80]	; 0x50
     af6:	b113      	cbz	r3, afe <SDFile::peek()+0xa>
     af8:	4618      	mov	r0, r3
     afa:	f003 bcfd 	b.w	44f8 <FatFile::peek()>
     afe:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->peek() : -1;
     b00:	b108      	cbz	r0, b06 <SDFile::peek()+0x12>
     b02:	f001 ba1b 	b.w	1f3c <ExFatFile::peek()>
	}
     b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     b0a:	4770      	bx	lr

00000b0c <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
     b0c:	6c83      	ldr	r3, [r0, #72]	; 0x48
     b0e:	b113      	cbz	r3, b16 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     b10:	4618      	mov	r0, r3
     b12:	f003 bcf1 	b.w	44f8 <FatFile::peek()>
     b16:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
     b18:	b108      	cbz	r0, b1e <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     b1a:	f001 ba0f 	b.w	1f3c <ExFatFile::peek()>
  }
     b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     b22:	4770      	bx	lr

00000b24 <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() :
     b24:	6d03      	ldr	r3, [r0, #80]	; 0x50
     b26:	b133      	cbz	r3, b36 <SDFile::isDirectory()+0x12>
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     b28:	781b      	ldrb	r3, [r3, #0]
     b2a:	f013 0f70 	tst.w	r3, #112	; 0x70
     b2e:	bf14      	ite	ne
     b30:	2001      	movne	r0, #1
     b32:	2000      	moveq	r0, #0
     b34:	4770      	bx	lr
     b36:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->isDir() : false;
     b38:	b130      	cbz	r0, b48 <SDFile::isDirectory()+0x24>
     b3a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
     b3e:	f013 0f50 	tst.w	r3, #80	; 0x50
     b42:	bf14      	ite	ne
     b44:	2001      	movne	r0, #1
     b46:	2000      	moveq	r0, #0
	}
     b48:	4770      	bx	lr
     b4a:	bf00      	nop

00000b4c <SDFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
     b4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
     b4e:	b113      	cbz	r3, b56 <SDFile::read(void*, unsigned int)+0xa>
     b50:	4618      	mov	r0, r3
     b52:	f003 bbfd 	b.w	4350 <FatFile::read(void*, unsigned int)>
     b56:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
     b58:	b108      	cbz	r0, b5e <SDFile::read(void*, unsigned int)+0x12>
     b5a:	f001 b91f 	b.w	1d9c <ExFatFile::read(void*, unsigned int)>
	}
     b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     b62:	4770      	bx	lr

00000b64 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
     b64:	6c83      	ldr	r3, [r0, #72]	; 0x48
  int read() {
     b66:	b500      	push	{lr}
     b68:	b083      	sub	sp, #12
     b6a:	b163      	cbz	r3, b86 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     b6c:	2201      	movs	r2, #1
     b6e:	f10d 0107 	add.w	r1, sp, #7
     b72:	4618      	mov	r0, r3
     b74:	f003 fbec 	bl	4350 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     b78:	2801      	cmp	r0, #1
     b7a:	d10c      	bne.n	b96 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     b7c:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
     b80:	b003      	add	sp, #12
     b82:	f85d fb04 	ldr.w	pc, [sp], #4
     b86:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
     b88:	b128      	cbz	r0, b96 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     b8a:	2201      	movs	r2, #1
     b8c:	f10d 0107 	add.w	r1, sp, #7
     b90:	f001 f904 	bl	1d9c <ExFatFile::read(void*, unsigned int)>
     b94:	e7f0      	b.n	b78 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     b9a:	e7f1      	b.n	b80 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000b9c <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
     b9c:	6c83      	ldr	r3, [r0, #72]	; 0x48
     b9e:	b113      	cbz	r3, ba6 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     ba0:	4618      	mov	r0, r3
     ba2:	f003 bf4d 	b.w	4a40 <FatFile::sync()>
     ba6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
     ba8:	b108      	cbz	r0, bae <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     baa:	f001 be25 	b.w	27f8 <ExFatFile::sync()>
  }
     bae:	4770      	bx	lr

00000bb0 <SDFile::flush()>:
    return m_fFile ? m_fFile->sync() :
     bb0:	6d03      	ldr	r3, [r0, #80]	; 0x50
     bb2:	b113      	cbz	r3, bba <SDFile::flush()+0xa>
     bb4:	4618      	mov	r0, r3
     bb6:	f003 bf43 	b.w	4a40 <FatFile::sync()>
     bba:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->sync() : false;
     bbc:	b108      	cbz	r0, bc2 <SDFile::flush()+0x12>
     bbe:	f001 be1b 	b.w	27f8 <ExFatFile::sync()>
	}
     bc2:	4770      	bx	lr

00000bc4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     bc4:	6c83      	ldr	r3, [r0, #72]	; 0x48
     bc6:	b113      	cbz	r3, bce <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     bc8:	4618      	mov	r0, r3
     bca:	f003 bfe5 	b.w	4b98 <FatFile::write(void const*, unsigned int)>
     bce:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     bd0:	b108      	cbz	r0, bd6 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     bd2:	f002 b8b5 	b.w	2d40 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     bd6:	4770      	bx	lr

00000bd8 <SDFile::write(void const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     bd8:	6d03      	ldr	r3, [r0, #80]	; 0x50
     bda:	b113      	cbz	r3, be2 <SDFile::write(void const*, unsigned int)+0xa>
     bdc:	4618      	mov	r0, r3
     bde:	f003 bfdb 	b.w	4b98 <FatFile::write(void const*, unsigned int)>
     be2:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
     be4:	b108      	cbz	r0, bea <SDFile::write(void const*, unsigned int)+0x12>
     be6:	f002 b8ab 	b.w	2d40 <ExFatFile::write(void const*, unsigned int)>
	}
     bea:	4770      	bx	lr

00000bec <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     bec:	b500      	push	{lr}
    return m_fFile ? m_fFile->write(buf, count) :
     bee:	6c83      	ldr	r3, [r0, #72]	; 0x48
     bf0:	b083      	sub	sp, #12
     bf2:	f88d 1007 	strb.w	r1, [sp, #7]
     bf6:	b143      	cbz	r3, c0a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     bf8:	2201      	movs	r2, #1
     bfa:	f10d 0107 	add.w	r1, sp, #7
     bfe:	4618      	mov	r0, r3
     c00:	f003 ffca 	bl	4b98 <FatFile::write(void const*, unsigned int)>
  }
     c04:	b003      	add	sp, #12
     c06:	f85d fb04 	ldr.w	pc, [sp], #4
     c0a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     c0c:	2800      	cmp	r0, #0
     c0e:	d0f9      	beq.n	c04 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     c10:	2201      	movs	r2, #1
     c12:	f10d 0107 	add.w	r1, sp, #7
     c16:	f002 f893 	bl	2d40 <ExFatFile::write(void const*, unsigned int)>
     c1a:	b003      	add	sp, #12
     c1c:	f85d fb04 	ldr.w	pc, [sp], #4

00000c20 <SDFile::setCreateTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
     c20:	798a      	ldrb	r2, [r1, #6]
     c22:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     c26:	061b      	lsls	r3, r3, #24
     c28:	d422      	bmi.n	c70 <SDFile::setCreateTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     c2a:	f202 726c 	addw	r2, r2, #1900	; 0x76c
	virtual bool setCreateTime(const DateTimeFields &tm) {
     c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     c30:	794b      	ldrb	r3, [r1, #5]
	virtual bool setCreateTime(const DateTimeFields &tm) {
     c32:	b085      	sub	sp, #20
    return m_fFile ?
     c34:	6d04      	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     c36:	3301      	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     c38:	790d      	ldrb	r5, [r1, #4]
     c3a:	788e      	ldrb	r6, [r1, #2]
     c3c:	784f      	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     c3e:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     c40:	7809      	ldrb	r1, [r1, #0]
     c42:	b14c      	cbz	r4, c58 <SDFile::setCreateTime(DateTimeFields const&)+0x38>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     c44:	4620      	mov	r0, r4
     c46:	9601      	str	r6, [sp, #4]
     c48:	9500      	str	r5, [sp, #0]
     c4a:	e9cd 7102 	strd	r7, r1, [sp, #8]
     c4e:	2102      	movs	r1, #2
     c50:	f003 fefc 	bl	4a4c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     c54:	b005      	add	sp, #20
     c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c58:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ?
     c5a:	2800      	cmp	r0, #0
     c5c:	d0fa      	beq.n	c54 <SDFile::setCreateTime(DateTimeFields const&)+0x34>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     c5e:	9601      	str	r6, [sp, #4]
     c60:	9500      	str	r5, [sp, #0]
     c62:	e9cd 7102 	strd	r7, r1, [sp, #8]
     c66:	2102      	movs	r1, #2
     c68:	f001 ff3c 	bl	2ae4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     c6c:	b005      	add	sp, #20
     c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     c70:	2000      	movs	r0, #0
	}
     c72:	4770      	bx	lr

00000c74 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     c74:	6c83      	ldr	r3, [r0, #72]	; 0x48
     c76:	b153      	cbz	r3, c8e <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     c78:	7818      	ldrb	r0, [r3, #0]
     c7a:	f010 0008 	ands.w	r0, r0, #8
     c7e:	d00d      	beq.n	c9c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     c80:	69d8      	ldr	r0, [r3, #28]
     c82:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     c84:	1ac0      	subs	r0, r0, r3
     c86:	bf48      	it	mi
     c88:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     c8c:	4770      	bx	lr
     c8e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
     c90:	b1a3      	cbz	r3, cbc <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
    return isFile() ? fileSize() - curPosition() : 0;
     c92:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     c96:	f010 0008 	ands.w	r0, r0, #8
     c9a:	d100      	bne.n	c9e <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
     c9c:	4770      	bx	lr
     c9e:	6918      	ldr	r0, [r3, #16]
     ca0:	6819      	ldr	r1, [r3, #0]
     ca2:	695a      	ldr	r2, [r3, #20]
     ca4:	1a40      	subs	r0, r0, r1
     ca6:	685b      	ldr	r3, [r3, #4]
     ca8:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     cac:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     cb0:	f173 0300 	sbcs.w	r3, r3, #0
     cb4:	d3f2      	bcc.n	c9c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     cb6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     cba:	4770      	bx	lr
     cbc:	4618      	mov	r0, r3
    return BaseFile::available();
     cbe:	e7ed      	b.n	c9c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000cc0 <SDFile::available()>:
    return m_fFile ? m_fFile->available() :
     cc0:	6d03      	ldr	r3, [r0, #80]	; 0x50
     cc2:	b153      	cbz	r3, cda <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     cc4:	7818      	ldrb	r0, [r3, #0]
     cc6:	f010 0008 	ands.w	r0, r0, #8
     cca:	d00d      	beq.n	ce8 <SDFile::available()+0x28>
     ccc:	69d8      	ldr	r0, [r3, #28]
     cce:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     cd0:	1ac0      	subs	r0, r0, r3
     cd2:	bf48      	it	mi
     cd4:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     cd8:	4770      	bx	lr
     cda:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
     cdc:	b1a3      	cbz	r3, d08 <SDFile::available()+0x48>
    return isFile() ? fileSize() - curPosition() : 0;
     cde:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     ce2:	f010 0008 	ands.w	r0, r0, #8
     ce6:	d100      	bne.n	cea <SDFile::available()+0x2a>
	}
     ce8:	4770      	bx	lr
     cea:	6918      	ldr	r0, [r3, #16]
     cec:	6819      	ldr	r1, [r3, #0]
     cee:	695a      	ldr	r2, [r3, #20]
     cf0:	1a40      	subs	r0, r0, r1
     cf2:	685b      	ldr	r3, [r3, #4]
     cf4:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     cf8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     cfc:	f173 0300 	sbcs.w	r3, r3, #0
     d00:	d3f2      	bcc.n	ce8 <SDFile::available()+0x28>
     d02:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     d06:	4770      	bx	lr
     d08:	4618      	mov	r0, r3
		return sdfatfile.available();
     d0a:	e7ed      	b.n	ce8 <SDFile::available()+0x28>

00000d0c <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     d0c:	b500      	push	{lr}
		return (f) ? f->write(&b, 1) : 0;
     d0e:	6900      	ldr	r0, [r0, #16]
	size_t write(uint8_t b) {
     d10:	b083      	sub	sp, #12
     d12:	f88d 1007 	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
     d16:	b160      	cbz	r0, d32 <File::write(unsigned char)+0x26>
     d18:	6803      	ldr	r3, [r0, #0]
     d1a:	4a10      	ldr	r2, [pc, #64]	; (d5c <File::write(unsigned char)+0x50>)
     d1c:	68db      	ldr	r3, [r3, #12]
     d1e:	4293      	cmp	r3, r2
     d20:	d115      	bne.n	d4e <File::write(unsigned char)+0x42>
    return m_fFile ? m_fFile->write(buf, count) :
     d22:	6d03      	ldr	r3, [r0, #80]	; 0x50
     d24:	b143      	cbz	r3, d38 <File::write(unsigned char)+0x2c>
     d26:	2201      	movs	r2, #1
     d28:	f10d 0107 	add.w	r1, sp, #7
     d2c:	4618      	mov	r0, r3
     d2e:	f003 ff33 	bl	4b98 <FatFile::write(void const*, unsigned int)>
	}
     d32:	b003      	add	sp, #12
     d34:	f85d fb04 	ldr.w	pc, [sp], #4
     d38:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
     d3a:	2800      	cmp	r0, #0
     d3c:	d0f9      	beq.n	d32 <File::write(unsigned char)+0x26>
     d3e:	2201      	movs	r2, #1
     d40:	f10d 0107 	add.w	r1, sp, #7
     d44:	f001 fffc 	bl	2d40 <ExFatFile::write(void const*, unsigned int)>
     d48:	b003      	add	sp, #12
     d4a:	f85d fb04 	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
     d4e:	2201      	movs	r2, #1
     d50:	f10d 0107 	add.w	r1, sp, #7
     d54:	4798      	blx	r3
	}
     d56:	b003      	add	sp, #12
     d58:	f85d fb04 	ldr.w	pc, [sp], #4
     d5c:	00000bd9 	.word	0x00000bd9

00000d60 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     d60:	b538      	push	{r3, r4, r5, lr}
     d62:	4604      	mov	r4, r0
     d64:	4b0c      	ldr	r3, [pc, #48]	; (d98 <SDFile::~SDFile()+0x38>)
		if (filename) {
     d66:	6d80      	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     d68:	6023      	str	r3, [r4, #0]
		if (filename) {
     d6a:	b118      	cbz	r0, d74 <SDFile::~SDFile()+0x14>
			free(filename);
     d6c:	f00a fce4 	bl	b738 <free>
			filename = nullptr;
     d70:	2300      	movs	r3, #0
     d72:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     d74:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     d76:	f104 0518 	add.w	r5, r4, #24
     d7a:	b14b      	cbz	r3, d90 <SDFile::~SDFile()+0x30>
     d7c:	4628      	mov	r0, r5
     d7e:	f005 fba3 	bl	64c8 <FsBaseFile::close()>
class StreamFile : public stream_t, public BaseFile {
     d82:	4b06      	ldr	r3, [pc, #24]	; (d9c <SDFile::~SDFile()+0x3c>)
  ~FsBaseFile() {close();}
     d84:	4628      	mov	r0, r5
     d86:	60a3      	str	r3, [r4, #8]
     d88:	f005 fb9e 	bl	64c8 <FsBaseFile::close()>
	}
     d8c:	4620      	mov	r0, r4
     d8e:	bd38      	pop	{r3, r4, r5, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     d90:	6d63      	ldr	r3, [r4, #84]	; 0x54
     d92:	2b00      	cmp	r3, #0
     d94:	d1f2      	bne.n	d7c <SDFile::~SDFile()+0x1c>
     d96:	e7f4      	b.n	d82 <SDFile::~SDFile()+0x22>
     d98:	200009d0 	.word	0x200009d0
     d9c:	200008c4 	.word	0x200008c4

00000da0 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     da0:	b538      	push	{r3, r4, r5, lr}
     da2:	4604      	mov	r4, r0
     da4:	4b0e      	ldr	r3, [pc, #56]	; (de0 <SDFile::~SDFile()+0x40>)
		if (filename) {
     da6:	6d80      	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     da8:	6023      	str	r3, [r4, #0]
		if (filename) {
     daa:	b118      	cbz	r0, db4 <SDFile::~SDFile()+0x14>
			free(filename);
     dac:	f00a fcc4 	bl	b738 <free>
			filename = nullptr;
     db0:	2300      	movs	r3, #0
     db2:	65a3      	str	r3, [r4, #88]	; 0x58
     db4:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     db6:	f104 0518 	add.w	r5, r4, #24
     dba:	b16b      	cbz	r3, dd8 <SDFile::~SDFile()+0x38>
     dbc:	4628      	mov	r0, r5
     dbe:	f005 fb83 	bl	64c8 <FsBaseFile::close()>
     dc2:	4b08      	ldr	r3, [pc, #32]	; (de4 <SDFile::~SDFile()+0x44>)
  ~FsBaseFile() {close();}
     dc4:	4628      	mov	r0, r5
     dc6:	60a3      	str	r3, [r4, #8]
     dc8:	f005 fb7e 	bl	64c8 <FsBaseFile::close()>
	}
     dcc:	4620      	mov	r0, r4
     dce:	215c      	movs	r1, #92	; 0x5c
     dd0:	f008 fe58 	bl	9a84 <operator delete(void*, unsigned int)>
     dd4:	4620      	mov	r0, r4
     dd6:	bd38      	pop	{r3, r4, r5, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     dd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
     dda:	2b00      	cmp	r3, #0
     ddc:	d1ee      	bne.n	dbc <SDFile::~SDFile()+0x1c>
     dde:	e7f0      	b.n	dc2 <SDFile::~SDFile()+0x22>
     de0:	200009d0 	.word	0x200009d0
     de4:	200008c4 	.word	0x200008c4

00000de8 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     de8:	b430      	push	{r4, r5}
     dea:	9c02      	ldr	r4, [sp, #8]
     dec:	4611      	mov	r1, r2
     dee:	469c      	mov	ip, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     df0:	b134      	cbz	r4, e00 <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     df2:	2c01      	cmp	r4, #1
     df4:	d01c      	beq.n	e30 <SDFile::seek(unsigned long long, int)+0x48>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     df6:	2c02      	cmp	r4, #2
     df8:	d00e      	beq.n	e18 <SDFile::seek(unsigned long long, int)+0x30>
	}
     dfa:	2000      	movs	r0, #0
     dfc:	bc30      	pop	{r4, r5}
     dfe:	4770      	bx	lr
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e00:	6d05      	ldr	r5, [r0, #80]	; 0x50
     e02:	b1f5      	cbz	r5, e42 <SDFile::seek(unsigned long long, int)+0x5a>
     e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     e08:	4293      	cmp	r3, r2
     e0a:	eb74 040c 	sbcs.w	r4, r4, ip
     e0e:	d3f4      	bcc.n	dfa <SDFile::seek(unsigned long long, int)+0x12>
     e10:	4628      	mov	r0, r5
     e12:	bc30      	pop	{r4, r5}
     e14:	f003 bce4 	b.w	47e0 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->fileSize() :
     e18:	6d02      	ldr	r2, [r0, #80]	; 0x50
     e1a:	b30a      	cbz	r2, e60 <SDFile::seek(unsigned long long, int)+0x78>
     e1c:	69d3      	ldr	r3, [r2, #28]
    return seekSet(fileSize() + offset);
     e1e:	1859      	adds	r1, r3, r1
     e20:	f14c 0300 	adc.w	r3, ip, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e24:	2b00      	cmp	r3, #0
     e26:	d1e8      	bne.n	dfa <SDFile::seek(unsigned long long, int)+0x12>
     e28:	4610      	mov	r0, r2
     e2a:	bc30      	pop	{r4, r5}
     e2c:	f003 bcd8 	b.w	47e0 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->curPosition() :
     e30:	6d02      	ldr	r2, [r0, #80]	; 0x50
     e32:	b162      	cbz	r2, e4e <SDFile::seek(unsigned long long, int)+0x66>
     e34:	6953      	ldr	r3, [r2, #20]
    return seekSet(curPosition() + offset);
     e36:	1859      	adds	r1, r3, r1
     e38:	f14c 0300 	adc.w	r3, ip, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e3c:	2b00      	cmp	r3, #0
     e3e:	d1dc      	bne.n	dfa <SDFile::seek(unsigned long long, int)+0x12>
     e40:	e7f2      	b.n	e28 <SDFile::seek(unsigned long long, int)+0x40>
     e42:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->seekSet(pos) : false;
     e44:	2800      	cmp	r0, #0
     e46:	d0d8      	beq.n	dfa <SDFile::seek(unsigned long long, int)+0x12>
     e48:	bc30      	pop	{r4, r5}
     e4a:	f001 b88d 	b.w	1f68 <ExFatFile::seekSet(unsigned long long)>
     e4e:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->curPosition() : 0;
     e50:	2800      	cmp	r0, #0
     e52:	d0d2      	beq.n	dfa <SDFile::seek(unsigned long long, int)+0x12>
    return seekSet(curPosition() + offset);
     e54:	e9d0 2300 	ldrd	r2, r3, [r0]
     e58:	188a      	adds	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
     e5a:	eb4c 0303 	adc.w	r3, ip, r3
     e5e:	e7f3      	b.n	e48 <SDFile::seek(unsigned long long, int)+0x60>
     e60:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->fileSize() : 0;
     e62:	2800      	cmp	r0, #0
     e64:	d0c9      	beq.n	dfa <SDFile::seek(unsigned long long, int)+0x12>
    return seekSet(fileSize() + offset);
     e66:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
     e6a:	bc30      	pop	{r4, r5}
     e6c:	188a      	adds	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
     e6e:	eb4c 0303 	adc.w	r3, ip, r3
     e72:	f001 b879 	b.w	1f68 <ExFatFile::seekSet(unsigned long long)>
     e76:	bf00      	nop

00000e78 <File::~File()>:
	virtual ~File() {
     e78:	b570      	push	{r4, r5, r6, lr}
     e7a:	4b24      	ldr	r3, [pc, #144]	; (f0c <File::~File()+0x94>)
     e7c:	4604      	mov	r4, r0
		if (f) dec_refcount();
     e7e:	6905      	ldr	r5, [r0, #16]
	virtual ~File() {
     e80:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     e82:	2d00      	cmp	r5, #0
     e84:	d032      	beq.n	eec <File::~File()+0x74>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
     e86:	686e      	ldr	r6, [r5, #4]
     e88:	3e01      	subs	r6, #1
     e8a:	606e      	str	r6, [r5, #4]
     e8c:	bb76      	cbnz	r6, eec <File::~File()+0x74>
			f->close();
     e8e:	682b      	ldr	r3, [r5, #0]
     e90:	4a1f      	ldr	r2, [pc, #124]	; (f10 <File::~File()+0x98>)
     e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     e94:	4293      	cmp	r3, r2
     e96:	d12f      	bne.n	ef8 <File::~File()+0x80>
		if (filename) {
     e98:	6da8      	ldr	r0, [r5, #88]	; 0x58
     e9a:	b110      	cbz	r0, ea2 <File::~File()+0x2a>
			free(filename);
     e9c:	f00a fc4c 	bl	b738 <free>
			filename = nullptr;
     ea0:	65ae      	str	r6, [r5, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     ea2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
     ea4:	b323      	cbz	r3, ef0 <File::~File()+0x78>
			sdfatfile.close();
     ea6:	f105 0018 	add.w	r0, r5, #24
     eaa:	f005 fb0d 	bl	64c8 <FsBaseFile::close()>
			delete f;
     eae:	6925      	ldr	r5, [r4, #16]
     eb0:	b1e5      	cbz	r5, eec <File::~File()+0x74>
     eb2:	682b      	ldr	r3, [r5, #0]
     eb4:	4a17      	ldr	r2, [pc, #92]	; (f14 <File::~File()+0x9c>)
     eb6:	685b      	ldr	r3, [r3, #4]
     eb8:	4293      	cmp	r3, r2
     eba:	d124      	bne.n	f06 <File::~File()+0x8e>
	virtual ~SDFile(void) {
     ebc:	4b16      	ldr	r3, [pc, #88]	; (f18 <File::~File()+0xa0>)
		if (filename) {
     ebe:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     ec0:	602b      	str	r3, [r5, #0]
		if (filename) {
     ec2:	b118      	cbz	r0, ecc <File::~File()+0x54>
			free(filename);
     ec4:	f00a fc38 	bl	b738 <free>
			filename = nullptr;
     ec8:	2300      	movs	r3, #0
     eca:	65ab      	str	r3, [r5, #88]	; 0x58
     ecc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     ece:	f105 0618 	add.w	r6, r5, #24
     ed2:	b1a3      	cbz	r3, efe <File::~File()+0x86>
     ed4:	4630      	mov	r0, r6
     ed6:	f005 faf7 	bl	64c8 <FsBaseFile::close()>
     eda:	4b10      	ldr	r3, [pc, #64]	; (f1c <File::~File()+0xa4>)
  ~FsBaseFile() {close();}
     edc:	4630      	mov	r0, r6
     ede:	60ab      	str	r3, [r5, #8]
     ee0:	f005 faf2 	bl	64c8 <FsBaseFile::close()>
	}
     ee4:	215c      	movs	r1, #92	; 0x5c
     ee6:	4628      	mov	r0, r5
     ee8:	f008 fdcc 	bl	9a84 <operator delete(void*, unsigned int)>
	}
     eec:	4620      	mov	r0, r4
     eee:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     ef0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
     ef2:	2b00      	cmp	r3, #0
     ef4:	d1d7      	bne.n	ea6 <File::~File()+0x2e>
     ef6:	e7da      	b.n	eae <File::~File()+0x36>
			f->close();
     ef8:	4628      	mov	r0, r5
     efa:	4798      	blx	r3
     efc:	e7d7      	b.n	eae <File::~File()+0x36>
     efe:	6d6b      	ldr	r3, [r5, #84]	; 0x54
     f00:	2b00      	cmp	r3, #0
     f02:	d1e7      	bne.n	ed4 <File::~File()+0x5c>
     f04:	e7e9      	b.n	eda <File::~File()+0x62>
			delete f;
     f06:	4628      	mov	r0, r5
     f08:	4798      	blx	r3
     f0a:	e7ef      	b.n	eec <File::~File()+0x74>
     f0c:	20000980 	.word	0x20000980
     f10:	0000068d 	.word	0x0000068d
     f14:	00000da1 	.word	0x00000da1
     f18:	200009d0 	.word	0x200009d0
     f1c:	200008c4 	.word	0x200008c4

00000f20 <File::~File()>:
	virtual ~File() {
     f20:	b570      	push	{r4, r5, r6, lr}
     f22:	4b26      	ldr	r3, [pc, #152]	; (fbc <File::~File()+0x9c>)
     f24:	4604      	mov	r4, r0
		if (f) dec_refcount();
     f26:	6905      	ldr	r5, [r0, #16]
	virtual ~File() {
     f28:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     f2a:	2d00      	cmp	r5, #0
     f2c:	d032      	beq.n	f94 <File::~File()+0x74>
		if (--(f->refcount) == 0) {
     f2e:	686e      	ldr	r6, [r5, #4]
     f30:	3e01      	subs	r6, #1
     f32:	606e      	str	r6, [r5, #4]
     f34:	bb76      	cbnz	r6, f94 <File::~File()+0x74>
			f->close();
     f36:	682b      	ldr	r3, [r5, #0]
     f38:	4a21      	ldr	r2, [pc, #132]	; (fc0 <File::~File()+0xa0>)
     f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     f3c:	4293      	cmp	r3, r2
     f3e:	d133      	bne.n	fa8 <File::~File()+0x88>
		if (filename) {
     f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
     f42:	b110      	cbz	r0, f4a <File::~File()+0x2a>
			free(filename);
     f44:	f00a fbf8 	bl	b738 <free>
			filename = nullptr;
     f48:	65ae      	str	r6, [r5, #88]	; 0x58
     f4a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
     f4c:	b343      	cbz	r3, fa0 <File::~File()+0x80>
			sdfatfile.close();
     f4e:	f105 0018 	add.w	r0, r5, #24
     f52:	f005 fab9 	bl	64c8 <FsBaseFile::close()>
			delete f;
     f56:	6925      	ldr	r5, [r4, #16]
     f58:	b1e5      	cbz	r5, f94 <File::~File()+0x74>
     f5a:	682b      	ldr	r3, [r5, #0]
     f5c:	4a19      	ldr	r2, [pc, #100]	; (fc4 <File::~File()+0xa4>)
     f5e:	685b      	ldr	r3, [r3, #4]
     f60:	4293      	cmp	r3, r2
     f62:	d128      	bne.n	fb6 <File::~File()+0x96>
	virtual ~SDFile(void) {
     f64:	4b18      	ldr	r3, [pc, #96]	; (fc8 <File::~File()+0xa8>)
		if (filename) {
     f66:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     f68:	602b      	str	r3, [r5, #0]
		if (filename) {
     f6a:	b118      	cbz	r0, f74 <File::~File()+0x54>
			free(filename);
     f6c:	f00a fbe4 	bl	b738 <free>
			filename = nullptr;
     f70:	2300      	movs	r3, #0
     f72:	65ab      	str	r3, [r5, #88]	; 0x58
     f74:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     f76:	f105 0618 	add.w	r6, r5, #24
     f7a:	b1c3      	cbz	r3, fae <File::~File()+0x8e>
     f7c:	4630      	mov	r0, r6
     f7e:	f005 faa3 	bl	64c8 <FsBaseFile::close()>
     f82:	4b12      	ldr	r3, [pc, #72]	; (fcc <File::~File()+0xac>)
  ~FsBaseFile() {close();}
     f84:	4630      	mov	r0, r6
     f86:	60ab      	str	r3, [r5, #8]
     f88:	f005 fa9e 	bl	64c8 <FsBaseFile::close()>
	}
     f8c:	215c      	movs	r1, #92	; 0x5c
     f8e:	4628      	mov	r0, r5
     f90:	f008 fd78 	bl	9a84 <operator delete(void*, unsigned int)>
	}
     f94:	4620      	mov	r0, r4
     f96:	2114      	movs	r1, #20
     f98:	f008 fd74 	bl	9a84 <operator delete(void*, unsigned int)>
     f9c:	4620      	mov	r0, r4
     f9e:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     fa0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
     fa2:	2b00      	cmp	r3, #0
     fa4:	d1d3      	bne.n	f4e <File::~File()+0x2e>
     fa6:	e7d6      	b.n	f56 <File::~File()+0x36>
			f->close();
     fa8:	4628      	mov	r0, r5
     faa:	4798      	blx	r3
     fac:	e7d3      	b.n	f56 <File::~File()+0x36>
     fae:	6d6b      	ldr	r3, [r5, #84]	; 0x54
     fb0:	2b00      	cmp	r3, #0
     fb2:	d1e3      	bne.n	f7c <File::~File()+0x5c>
     fb4:	e7e5      	b.n	f82 <File::~File()+0x62>
			delete f;
     fb6:	4628      	mov	r0, r5
     fb8:	4798      	blx	r3
     fba:	e7eb      	b.n	f94 <File::~File()+0x74>
     fbc:	20000980 	.word	0x20000980
     fc0:	0000068d 	.word	0x0000068d
     fc4:	00000da1 	.word	0x00000da1
     fc8:	200009d0 	.word	0x200009d0
     fcc:	200008c4 	.word	0x200008c4

00000fd0 <setup>:
// use uint8_t -> 1MB, uint16_t -> 2MB, uint32_t -> 4MB, uint64_t -> 8MB)
PROGMEM const uint8_t a[16][16][16][16][16] = A4;
#endif

void setup () 
{
     fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (serial == (Stream*)&Serial) {
     fd4:	4d33      	ldr	r5, [pc, #204]	; (10a4 <setup+0xd4>)
{
     fd6:	b082      	sub	sp, #8
  if (serial == (Stream*)&Serial) {
     fd8:	4b33      	ldr	r3, [pc, #204]	; (10a8 <setup+0xd8>)
     fda:	6828      	ldr	r0, [r5, #0]
     fdc:	4298      	cmp	r0, r3
     fde:	d02c      	beq.n	103a <setup+0x6a>
    Serial.begin(115200);
    while (!Serial) {} 
  }
  else {
    ((HardwareSerial*)serial)->begin( 115200 );
     fe0:	6803      	ldr	r3, [r0, #0]
     fe2:	2200      	movs	r2, #0
     fe4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     fe8:	69db      	ldr	r3, [r3, #28]
     fea:	4798      	blx	r3
  } 
  
  pinMode( led, OUTPUT );	// assign output
     fec:	2101      	movs	r1, #1
     fee:	200d      	movs	r0, #13
     ff0:	f008 fb6c 	bl	96cc <pinMode>
  digitalWrite( led, HIGH );	// set the LED on
     ff4:	2101      	movs	r1, #1
     ff6:	200d      	movs	r0, #13
  delay(200);			// delay
  digitalWrite( led, LOW );	// set the LED off

  serial->printf( "%s - %s %s\n", FLASHERX_VERSION, __DATE__, __TIME__ );
  serial->printf( "WARNING: this can ruin your device!\n" );
  serial->printf( "target = %s (%dK flash in %dK sectors)\n",
     ff8:	2404      	movs	r4, #4
  digitalWrite( led, HIGH );	// set the LED on
     ffa:	f008 fb2b 	bl	9654 <digitalWrite>
  delay(200);			// delay
     ffe:	20c8      	movs	r0, #200	; 0xc8
    1000:	f008 faaa 	bl	9558 <delay>
  digitalWrite( led, LOW );	// set the LED off
    1004:	2100      	movs	r1, #0
    1006:	200d      	movs	r0, #13
    1008:	f008 fb24 	bl	9654 <digitalWrite>
  serial->printf( "%s - %s %s\n", FLASHERX_VERSION, __DATE__, __TIME__ );
    100c:	4827      	ldr	r0, [pc, #156]	; (10ac <setup+0xdc>)
    100e:	4b28      	ldr	r3, [pc, #160]	; (10b0 <setup+0xe0>)
    1010:	4a28      	ldr	r2, [pc, #160]	; (10b4 <setup+0xe4>)
    1012:	9000      	str	r0, [sp, #0]
    1014:	4928      	ldr	r1, [pc, #160]	; (10b8 <setup+0xe8>)
    1016:	6828      	ldr	r0, [r5, #0]
    1018:	f008 f9e4 	bl	93e4 <Print::printf(char const*, ...)>
  serial->printf( "WARNING: this can ruin your device!\n" );
    101c:	4927      	ldr	r1, [pc, #156]	; (10bc <setup+0xec>)
    101e:	6828      	ldr	r0, [r5, #0]
    1020:	f008 f9e0 	bl	93e4 <Print::printf(char const*, ...)>
  serial->printf( "target = %s (%dK flash in %dK sectors)\n",
    1024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1028:	4a25      	ldr	r2, [pc, #148]	; (10c0 <setup+0xf0>)
    102a:	4926      	ldr	r1, [pc, #152]	; (10c4 <setup+0xf4>)
    102c:	6828      	ldr	r0, [r5, #0]
    102e:	9400      	str	r4, [sp, #0]
    1030:	f008 f9d8 	bl	93e4 <Print::printf(char const*, ...)>
			FLASH_ID, FLASH_SIZE/1024, FLASH_SECTOR_SIZE/1024);
			
#if (LARGE_ARRAY) // if true, access array so it doesn't get optimized out
  serial->printf( "Large Array -- %08lX\n", (uint32_t)&a[15][15][15][15][15] );
#endif
}
    1034:	b002      	add	sp, #8
    1036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t millis_begin = systick_millis_count;
    103a:	4e23      	ldr	r6, [pc, #140]	; (10c8 <setup+0xf8>)
				if (elapsed > 750) break;
    103c:	f240 29ee 	movw	r9, #750	; 0x2ee
    1040:	4c22      	ldr	r4, [pc, #136]	; (10cc <setup+0xfc>)
    1042:	f8df 808c 	ldr.w	r8, [pc, #140]	; 10d0 <setup+0x100>
    1046:	f8df a08c 	ldr.w	sl, [pc, #140]	; 10d4 <setup+0x104>
		uint32_t millis_begin = systick_millis_count;
    104a:	6837      	ldr	r7, [r6, #0]
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
    104c:	f009 fee4 	bl	ae18 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1050:	7823      	ldrb	r3, [r4, #0]
    1052:	b1cb      	cbz	r3, 1088 <setup+0xb8>
    1054:	f898 3000 	ldrb.w	r3, [r8]
    1058:	07da      	lsls	r2, r3, #31
    105a:	d515      	bpl.n	1088 <setup+0xb8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    105c:	6833      	ldr	r3, [r6, #0]
    105e:	f8da 2000 	ldr.w	r2, [sl]
    1062:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1064:	2b0e      	cmp	r3, #14
    1066:	d90f      	bls.n	1088 <setup+0xb8>
		yield();
    1068:	f009 fed6 	bl	ae18 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    106c:	7823      	ldrb	r3, [r4, #0]
    106e:	2b00      	cmp	r3, #0
    1070:	d0fa      	beq.n	1068 <setup+0x98>
    1072:	f898 3000 	ldrb.w	r3, [r8]
    1076:	07db      	lsls	r3, r3, #31
    1078:	d5f6      	bpl.n	1068 <setup+0x98>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    107a:	6833      	ldr	r3, [r6, #0]
    107c:	f8da 2000 	ldr.w	r2, [sl]
    1080:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1082:	2b0e      	cmp	r3, #14
    1084:	d8b2      	bhi.n	fec <setup+0x1c>
    1086:	e7ef      	b.n	1068 <setup+0x98>
			uint32_t elapsed = systick_millis_count - millis_begin;
    1088:	6833      	ldr	r3, [r6, #0]
			if (usb_configuration) {
    108a:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    108c:	1bdb      	subs	r3, r3, r7
			if (usb_configuration) {
    108e:	b12a      	cbz	r2, 109c <setup+0xcc>
				if (elapsed > 2000) break;
    1090:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    1094:	d8e8      	bhi.n	1068 <setup+0x98>
			yield();
    1096:	f009 febf 	bl	ae18 <yield>
    109a:	e7d7      	b.n	104c <setup+0x7c>
				if (elapsed > 750) break;
    109c:	454b      	cmp	r3, r9
    109e:	d9fa      	bls.n	1096 <setup+0xc6>
    10a0:	e7e2      	b.n	1068 <setup+0x98>
    10a2:	bf00      	nop
    10a4:	200086e8 	.word	0x200086e8
    10a8:	200080f0 	.word	0x200080f0
    10ac:	20007e30 	.word	0x20007e30
    10b0:	20007e08 	.word	0x20007e08
    10b4:	20007e14 	.word	0x20007e14
    10b8:	20007e24 	.word	0x20007e24
    10bc:	20007e3c 	.word	0x20007e3c
    10c0:	200004a8 	.word	0x200004a8
    10c4:	20007e64 	.word	0x20007e64
    10c8:	20009600 	.word	0x20009600
    10cc:	20009634 	.word	0x20009634
    10d0:	20009633 	.word	0x20009633
    10d4:	20009610 	.word	0x20009610

000010d8 <loop>:

void loop ()
{
    10d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    10dc:	b0a9      	sub	sp, #164	; 0xa4
  uint32_t buffer_addr, buffer_size;

  // create flash buffer to hold new firmware
  if (firmware_buffer_init( &buffer_addr, &buffer_size ) == 0) {
    10de:	a905      	add	r1, sp, #20
    10e0:	a804      	add	r0, sp, #16
    10e2:	f7ff fa23 	bl	52c <firmware_buffer_init>
    10e6:	2800      	cmp	r0, #0
    10e8:	f000 8120 	beq.w	132c <loop+0x254>
    serial->printf( "unable to create buffer\n" );
    serial->flush();
    for (;;) {}
  }
  
  serial->printf( "created buffer = %1luK %s (%08lX - %08lX)\n",
    10ec:	4894      	ldr	r0, [pc, #592]	; (1340 <loop+0x268>)
    10ee:	4c95      	ldr	r4, [pc, #596]	; (1344 <loop+0x26c>)
    10f0:	4b95      	ldr	r3, [pc, #596]	; (1348 <loop+0x270>)

  // get user input to read from serial or SD
  int user_input = -1;
  char line[32];
  while (user_input != 1 && user_input != 2) {
    serial->printf( "enter 1 for hex file via serial, 2 for hex file via SD\n" );
    10f2:	4e96      	ldr	r6, [pc, #600]	; (134c <loop+0x274>)
  serial->printf( "created buffer = %1luK %s (%08lX - %08lX)\n",
    10f4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
		buffer_size/1024, IN_FLASH(buffer_addr) ? "FLASH" : "RAM",
    10f8:	f101 4520 	add.w	r5, r1, #2684354560	; 0xa0000000
  serial->printf( "created buffer = %1luK %s (%08lX - %08lX)\n",
    10fc:	9100      	str	r1, [sp, #0]
    10fe:	4411      	add	r1, r2
    1100:	0a92      	lsrs	r2, r2, #10
    1102:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
    1106:	bf28      	it	cs
    1108:	4603      	movcs	r3, r0
    read_ascii_line( serial, line, sizeof(line) );
    sscanf( line, "%d", &user_input );
    110a:	4d91      	ldr	r5, [pc, #580]	; (1350 <loop+0x278>)
  serial->printf( "created buffer = %1luK %s (%08lX - %08lX)\n",
    110c:	9101      	str	r1, [sp, #4]
    110e:	4991      	ldr	r1, [pc, #580]	; (1354 <loop+0x27c>)
    1110:	6820      	ldr	r0, [r4, #0]
    1112:	f008 f967 	bl	93e4 <Print::printf(char const*, ...)>
  int user_input = -1;
    1116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    111a:	9306      	str	r3, [sp, #24]
    serial->printf( "enter 1 for hex file via serial, 2 for hex file via SD\n" );
    111c:	4631      	mov	r1, r6
    111e:	6820      	ldr	r0, [r4, #0]
    1120:	f008 f960 	bl	93e4 <Print::printf(char const*, ...)>
    read_ascii_line( serial, line, sizeof(line) );
    1124:	2220      	movs	r2, #32
    1126:	a90c      	add	r1, sp, #48	; 0x30
    1128:	6820      	ldr	r0, [r4, #0]
    112a:	f7ff f851 	bl	1d0 <read_ascii_line(Stream*, char*, int)>
    sscanf( line, "%d", &user_input );
    112e:	aa06      	add	r2, sp, #24
    1130:	4629      	mov	r1, r5
    1132:	a80c      	add	r0, sp, #48	; 0x30
    1134:	f00b ff9e 	bl	d074 <sscanf>
  while (user_input != 1 && user_input != 2) {
    1138:	9b06      	ldr	r3, [sp, #24]
    113a:	1e5a      	subs	r2, r3, #1
    113c:	2a01      	cmp	r2, #1
    113e:	d8ed      	bhi.n	111c <loop+0x44>
  }
  
  if (user_input == 1) { // serial 
    1140:	2b01      	cmp	r3, #1
    1142:	f000 80d9 	beq.w	12f8 <loop+0x220>
    // read hex file, write new firmware to flash, clean up, reboot
    update_firmware( serial, serial, buffer_addr, buffer_size );
  }
  else if (user_input == 2) { // SD
    if (!SD.begin( cs )) {
    1146:	21fe      	movs	r1, #254	; 0xfe
    1148:	4883      	ldr	r0, [pc, #524]	; (1358 <loop+0x280>)
    114a:	f000 fccf 	bl	1aec <SDClass::begin(unsigned char)>
    114e:	2800      	cmp	r0, #0
    1150:	f000 8175 	beq.w	143e <loop+0x366>
      serial->println( "SD initialization failed" );
      return;
    }
    File hexFile;
    1154:	2500      	movs	r5, #0
    serial->println( "SD initialization OK" );
    1156:	6826      	ldr	r6, [r4, #0]
    File hexFile;
    1158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    115c:	4f7f      	ldr	r7, [pc, #508]	; (135c <loop+0x284>)
    115e:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
							  return write((const uint8_t *)str, strlen(str)); }
    1162:	2214      	movs	r2, #20
    1164:	9309      	str	r3, [sp, #36]	; 0x24
    1166:	4630      	mov	r0, r6
    1168:	497d      	ldr	r1, [pc, #500]	; (1360 <loop+0x288>)
    116a:	e9cd 7507 	strd	r7, r5, [sp, #28]
    116e:	6833      	ldr	r3, [r6, #0]
    1170:	950b      	str	r5, [sp, #44]	; 0x2c
    1172:	685b      	ldr	r3, [r3, #4]
    1174:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    1176:	4630      	mov	r0, r6
    1178:	f008 f918 	bl	93ac <Print::println()>
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    117c:	462b      	mov	r3, r5
    117e:	4a79      	ldr	r2, [pc, #484]	; (1364 <loop+0x28c>)
    1180:	a814      	add	r0, sp, #80	; 0x50
    1182:	4979      	ldr	r1, [pc, #484]	; (1368 <loop+0x290>)
    1184:	f005 faba 	bl	66fc <FsVolume::open(char const*, int)>
    1188:	9b26      	ldr	r3, [sp, #152]	; 0x98
    118a:	2b00      	cmp	r3, #0
    118c:	f000 8164 	beq.w	1458 <loop+0x380>
		if (file) return File(new SDFile(file));
    1190:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    1192:	2600      	movs	r6, #0
    1194:	f008 fc74 	bl	9a80 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    1198:	4b74      	ldr	r3, [pc, #464]	; (136c <loop+0x294>)
		if (file) return File(new SDFile(file));
    119a:	4605      	mov	r5, r0
    119c:	a918      	add	r1, sp, #96	; 0x60
    119e:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 1390 <loop+0x2b8>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    11a2:	e9c0 3600 	strd	r3, r6, [r0]
class Print
    11a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    11a8:	3018      	adds	r0, #24
    11aa:	f840 3c0c 	str.w	r3, [r0, #-12]
class Stream : public Print
    11ae:	4b70      	ldr	r3, [pc, #448]	; (1370 <loop+0x298>)
    11b0:	f840 3c10 	str.w	r3, [r0, #-16]
    11b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    11b6:	f840 3c08 	str.w	r3, [r0, #-8]
    11ba:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    11be:	f800 3c04 	strb.w	r3, [r0, #-4]
    11c2:	f005 f93f 	bl	6444 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		if (f) f->refcount++;
    11c6:	686b      	ldr	r3, [r5, #4]
    11c8:	65ae      	str	r6, [r5, #88]	; 0x58
  ~FsBaseFile() {close();}
    11ca:	a818      	add	r0, sp, #96	; 0x60
    11cc:	3301      	adds	r3, #1
    11ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
    11d2:	606b      	str	r3, [r5, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    11d4:	4b67      	ldr	r3, [pc, #412]	; (1374 <loop+0x29c>)
    11d6:	60ab      	str	r3, [r5, #8]
  ~FsBaseFile() {close();}
    11d8:	f005 f976 	bl	64c8 <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    11dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    11de:	2e00      	cmp	r6, #0
    11e0:	f000 80d8 	beq.w	1394 <loop+0x2bc>
		if (--(f->refcount) == 0) {
    11e4:	6873      	ldr	r3, [r6, #4]
    11e6:	3b01      	subs	r3, #1
    11e8:	6073      	str	r3, [r6, #4]
    11ea:	9303      	str	r3, [sp, #12]
    11ec:	2b00      	cmp	r3, #0
    11ee:	d135      	bne.n	125c <loop+0x184>
			f->close();
    11f0:	6832      	ldr	r2, [r6, #0]
    11f2:	4961      	ldr	r1, [pc, #388]	; (1378 <loop+0x2a0>)
    11f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    11f6:	428a      	cmp	r2, r1
    11f8:	f040 8153 	bne.w	14a2 <loop+0x3ca>
		if (filename) {
    11fc:	6db0      	ldr	r0, [r6, #88]	; 0x58
    11fe:	b118      	cbz	r0, 1208 <loop+0x130>
			free(filename);
    1200:	f00a fa9a 	bl	b738 <free>
			filename = nullptr;
    1204:	9b03      	ldr	r3, [sp, #12]
    1206:	65b3      	str	r3, [r6, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    1208:	6d33      	ldr	r3, [r6, #80]	; 0x50
    120a:	2b00      	cmp	r3, #0
    120c:	f000 8134 	beq.w	1478 <loop+0x3a0>
			sdfatfile.close();
    1210:	f106 0018 	add.w	r0, r6, #24
    1214:	f005 f958 	bl	64c8 <FsBaseFile::close()>
			delete f;
    1218:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    121a:	b1fe      	cbz	r6, 125c <loop+0x184>
    121c:	6833      	ldr	r3, [r6, #0]
    121e:	4a57      	ldr	r2, [pc, #348]	; (137c <loop+0x2a4>)
    1220:	685b      	ldr	r3, [r3, #4]
    1222:	4293      	cmp	r3, r2
    1224:	f040 812d 	bne.w	1482 <loop+0x3aa>
	virtual ~SDFile(void) {
    1228:	4b50      	ldr	r3, [pc, #320]	; (136c <loop+0x294>)
		if (filename) {
    122a:	6db0      	ldr	r0, [r6, #88]	; 0x58
	virtual ~SDFile(void) {
    122c:	6033      	str	r3, [r6, #0]
		if (filename) {
    122e:	b118      	cbz	r0, 1238 <loop+0x160>
			free(filename);
    1230:	f00a fa82 	bl	b738 <free>
			filename = nullptr;
    1234:	2300      	movs	r3, #0
    1236:	65b3      	str	r3, [r6, #88]	; 0x58
    1238:	6d33      	ldr	r3, [r6, #80]	; 0x50
			sdfatfile.close();
    123a:	f106 0918 	add.w	r9, r6, #24
    123e:	2b00      	cmp	r3, #0
    1240:	f000 8136 	beq.w	14b0 <loop+0x3d8>
    1244:	4648      	mov	r0, r9
    1246:	f005 f93f 	bl	64c8 <FsBaseFile::close()>
  ~FsBaseFile() {close();}
    124a:	4648      	mov	r0, r9
    124c:	f8c6 8008 	str.w	r8, [r6, #8]
    1250:	f005 f93a 	bl	64c8 <FsBaseFile::close()>
	}
    1254:	4630      	mov	r0, r6
    1256:	215c      	movs	r1, #92	; 0x5c
    1258:	f008 fc14 	bl	9a84 <operator delete(void*, unsigned int)>
		f = file.f;
    125c:	950b      	str	r5, [sp, #44]	; 0x2c
		return (f) ? f->isOpen() : false;
    125e:	2d00      	cmp	r5, #0
    1260:	f040 8099 	bne.w	1396 <loop+0x2be>
    hexFile = SD.open( HEX_FILE_NAME, FILE_READ );
    if (!hexFile) {
      serial->println( "SD file open failed" );
    1264:	6824      	ldr	r4, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1266:	2213      	movs	r2, #19
    1268:	4945      	ldr	r1, [pc, #276]	; (1380 <loop+0x2a8>)
    126a:	6823      	ldr	r3, [r4, #0]
    126c:	4620      	mov	r0, r4
    126e:	685b      	ldr	r3, [r3, #4]
    1270:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1272:	4620      	mov	r0, r4
    1274:	f008 f89a 	bl	93ac <Print::println()>
		if (f) dec_refcount();
    1278:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	virtual ~File() {
    127a:	9707      	str	r7, [sp, #28]
		if (f) dec_refcount();
    127c:	2c00      	cmp	r4, #0
    127e:	d052      	beq.n	1326 <loop+0x24e>
		if (--(f->refcount) == 0) {
    1280:	6865      	ldr	r5, [r4, #4]
    1282:	3d01      	subs	r5, #1
    1284:	6065      	str	r5, [r4, #4]
    1286:	2d00      	cmp	r5, #0
    1288:	d14d      	bne.n	1326 <loop+0x24e>
			f->close();
    128a:	6823      	ldr	r3, [r4, #0]
    128c:	4a3a      	ldr	r2, [pc, #232]	; (1378 <loop+0x2a0>)
    128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1290:	4293      	cmp	r3, r2
    1292:	f040 811e 	bne.w	14d2 <loop+0x3fa>
		if (filename) {
    1296:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1298:	b110      	cbz	r0, 12a0 <loop+0x1c8>
			free(filename);
    129a:	f00a fa4d 	bl	b738 <free>
			filename = nullptr;
    129e:	65a5      	str	r5, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    12a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    12a2:	2b00      	cmp	r3, #0
    12a4:	f000 8110 	beq.w	14c8 <loop+0x3f0>
			sdfatfile.close();
    12a8:	f104 0018 	add.w	r0, r4, #24
    12ac:	f005 f90c 	bl	64c8 <FsBaseFile::close()>
			delete f;
    12b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    12b2:	2c00      	cmp	r4, #0
    12b4:	d037      	beq.n	1326 <loop+0x24e>
    12b6:	6823      	ldr	r3, [r4, #0]
    12b8:	4a30      	ldr	r2, [pc, #192]	; (137c <loop+0x2a4>)
    12ba:	685b      	ldr	r3, [r3, #4]
    12bc:	4293      	cmp	r3, r2
    12be:	f040 810b 	bne.w	14d8 <loop+0x400>
	virtual ~SDFile(void) {
    12c2:	4b2a      	ldr	r3, [pc, #168]	; (136c <loop+0x294>)
		if (filename) {
    12c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    12c6:	6023      	str	r3, [r4, #0]
		if (filename) {
    12c8:	b118      	cbz	r0, 12d2 <loop+0x1fa>
			free(filename);
    12ca:	f00a fa35 	bl	b738 <free>
			filename = nullptr;
    12ce:	2300      	movs	r3, #0
    12d0:	65a3      	str	r3, [r4, #88]	; 0x58
    12d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    12d4:	f104 0518 	add.w	r5, r4, #24
    12d8:	2b00      	cmp	r3, #0
    12da:	f000 8100 	beq.w	14de <loop+0x406>
    12de:	4628      	mov	r0, r5
    12e0:	f005 f8f2 	bl	64c8 <FsBaseFile::close()>
  ~FsBaseFile() {close();}
    12e4:	4628      	mov	r0, r5
    12e6:	f8c4 8008 	str.w	r8, [r4, #8]
    12ea:	f005 f8ed 	bl	64c8 <FsBaseFile::close()>
	}
    12ee:	215c      	movs	r1, #92	; 0x5c
    12f0:	4620      	mov	r0, r4
    12f2:	f008 fbc7 	bl	9a84 <operator delete(void*, unsigned int)>
    12f6:	e016      	b.n	1326 <loop+0x24e>
    update_firmware( serial, serial, buffer_addr, buffer_size );
    12f8:	6821      	ldr	r1, [r4, #0]
    12fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    12fe:	4608      	mov	r0, r1
    1300:	f7ff f802 	bl	308 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)>
    update_firmware( &hexFile, serial, buffer_addr, buffer_size );
  }
  
  // return from update_firmware() means error or user abort, so clean up and
  // reboot to ensure that static vars get boot-up initialized before retry
  serial->printf( "erase FLASH buffer / free RAM buffer...\n" );
    1304:	491f      	ldr	r1, [pc, #124]	; (1384 <loop+0x2ac>)
    1306:	6820      	ldr	r0, [r4, #0]
    1308:	f008 f86c 	bl	93e4 <Print::printf(char const*, ...)>
  firmware_buffer_free( buffer_addr, buffer_size );
    130c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1310:	f7ff f93c 	bl	58c <firmware_buffer_free>
  serial->flush();
    1314:	6820      	ldr	r0, [r4, #0]
    1316:	6803      	ldr	r3, [r0, #0]
    1318:	68db      	ldr	r3, [r3, #12]
    131a:	4798      	blx	r3
  REBOOT;
    131c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1320:	4a19      	ldr	r2, [pc, #100]	; (1388 <loop+0x2b0>)
    1322:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
}
    1326:	b029      	add	sp, #164	; 0xa4
    1328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    serial->printf( "unable to create buffer\n" );
    132c:	4c05      	ldr	r4, [pc, #20]	; (1344 <loop+0x26c>)
    132e:	4917      	ldr	r1, [pc, #92]	; (138c <loop+0x2b4>)
    1330:	6820      	ldr	r0, [r4, #0]
    1332:	f008 f857 	bl	93e4 <Print::printf(char const*, ...)>
    serial->flush();
    1336:	6820      	ldr	r0, [r4, #0]
    1338:	6803      	ldr	r3, [r0, #0]
    133a:	68db      	ldr	r3, [r3, #12]
    133c:	4798      	blx	r3
    for (;;) {}
    133e:	e7fe      	b.n	133e <loop+0x266>
    1340:	20007ce0 	.word	0x20007ce0
    1344:	200086e8 	.word	0x200086e8
    1348:	20007cd8 	.word	0x20007cd8
    134c:	20007d2c 	.word	0x20007d2c
    1350:	20000524 	.word	0x20000524
    1354:	20007d00 	.word	0x20007d00
    1358:	20008ca8 	.word	0x20008ca8
    135c:	20000980 	.word	0x20000980
    1360:	20007d80 	.word	0x20007d80
    1364:	20007d98 	.word	0x20007d98
    1368:	20008cac 	.word	0x20008cac
    136c:	200009d0 	.word	0x200009d0
    1370:	20000a2c 	.word	0x20000a2c
    1374:	200009ac 	.word	0x200009ac
    1378:	0000068d 	.word	0x0000068d
    137c:	00000da1 	.word	0x00000da1
    1380:	20007dac 	.word	0x20007dac
    1384:	20007dd0 	.word	0x20007dd0
    1388:	05fa0004 	.word	0x05fa0004
    138c:	20007ce4 	.word	0x20007ce4
    1390:	200008c4 	.word	0x200008c4
		f = file.f;
    1394:	950b      	str	r5, [sp, #44]	; 0x2c
		return (f) ? f->isOpen() : false;
    1396:	682b      	ldr	r3, [r5, #0]
    1398:	4a53      	ldr	r2, [pc, #332]	; (14e8 <loop+0x410>)
    139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    139c:	4293      	cmp	r3, r2
    139e:	d17a      	bne.n	1496 <loop+0x3be>
  bool isOpen() const {return m_fFile || m_xFile;}
    13a0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    13a2:	2b00      	cmp	r3, #0
    13a4:	d073      	beq.n	148e <loop+0x3b6>
    serial->println( "SD file open OK" );
    13a6:	6825      	ldr	r5, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    13a8:	220f      	movs	r2, #15
    13aa:	4950      	ldr	r1, [pc, #320]	; (14ec <loop+0x414>)
    13ac:	682b      	ldr	r3, [r5, #0]
    13ae:	4628      	mov	r0, r5
    13b0:	685b      	ldr	r3, [r3, #4]
    13b2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    13b4:	4628      	mov	r0, r5
    13b6:	f007 fff9 	bl	93ac <Print::println()>
    update_firmware( &hexFile, serial, buffer_addr, buffer_size );
    13ba:	6821      	ldr	r1, [r4, #0]
    13bc:	a807      	add	r0, sp, #28
    13be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    13c2:	f7fe ffa1 	bl	308 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)>
		if (f) dec_refcount();
    13c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	virtual ~File() {
    13c8:	9707      	str	r7, [sp, #28]
		if (f) dec_refcount();
    13ca:	2d00      	cmp	r5, #0
    13cc:	d09a      	beq.n	1304 <loop+0x22c>
		if (--(f->refcount) == 0) {
    13ce:	686e      	ldr	r6, [r5, #4]
    13d0:	3e01      	subs	r6, #1
    13d2:	606e      	str	r6, [r5, #4]
    13d4:	2e00      	cmp	r6, #0
    13d6:	d195      	bne.n	1304 <loop+0x22c>
			f->close();
    13d8:	682b      	ldr	r3, [r5, #0]
    13da:	4a45      	ldr	r2, [pc, #276]	; (14f0 <loop+0x418>)
    13dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    13de:	4293      	cmp	r3, r2
    13e0:	d152      	bne.n	1488 <loop+0x3b0>
		if (filename) {
    13e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
    13e4:	b110      	cbz	r0, 13ec <loop+0x314>
			free(filename);
    13e6:	f00a f9a7 	bl	b738 <free>
			filename = nullptr;
    13ea:	65ae      	str	r6, [r5, #88]	; 0x58
    13ec:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    13ee:	2b00      	cmp	r3, #0
    13f0:	d05a      	beq.n	14a8 <loop+0x3d0>
			sdfatfile.close();
    13f2:	f105 0018 	add.w	r0, r5, #24
    13f6:	f005 f867 	bl	64c8 <FsBaseFile::close()>
			delete f;
    13fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    13fc:	2d00      	cmp	r5, #0
    13fe:	d081      	beq.n	1304 <loop+0x22c>
    1400:	682b      	ldr	r3, [r5, #0]
    1402:	4a3c      	ldr	r2, [pc, #240]	; (14f4 <loop+0x41c>)
    1404:	685b      	ldr	r3, [r3, #4]
    1406:	4293      	cmp	r3, r2
    1408:	d15b      	bne.n	14c2 <loop+0x3ea>
	virtual ~SDFile(void) {
    140a:	4b3b      	ldr	r3, [pc, #236]	; (14f8 <loop+0x420>)
		if (filename) {
    140c:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
    140e:	602b      	str	r3, [r5, #0]
		if (filename) {
    1410:	b118      	cbz	r0, 141a <loop+0x342>
			free(filename);
    1412:	f00a f991 	bl	b738 <free>
			filename = nullptr;
    1416:	2300      	movs	r3, #0
    1418:	65ab      	str	r3, [r5, #88]	; 0x58
    141a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
    141c:	f105 0618 	add.w	r6, r5, #24
    1420:	2b00      	cmp	r3, #0
    1422:	d04a      	beq.n	14ba <loop+0x3e2>
    1424:	4630      	mov	r0, r6
    1426:	f005 f84f 	bl	64c8 <FsBaseFile::close()>
  ~FsBaseFile() {close();}
    142a:	4630      	mov	r0, r6
    142c:	f8c5 8008 	str.w	r8, [r5, #8]
    1430:	f005 f84a 	bl	64c8 <FsBaseFile::close()>
	}
    1434:	215c      	movs	r1, #92	; 0x5c
    1436:	4628      	mov	r0, r5
    1438:	f008 fb24 	bl	9a84 <operator delete(void*, unsigned int)>
    143c:	e762      	b.n	1304 <loop+0x22c>
      serial->println( "SD initialization failed" );
    143e:	6824      	ldr	r4, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1440:	2218      	movs	r2, #24
    1442:	492e      	ldr	r1, [pc, #184]	; (14fc <loop+0x424>)
    1444:	6823      	ldr	r3, [r4, #0]
    1446:	4620      	mov	r0, r4
    1448:	685b      	ldr	r3, [r3, #4]
    144a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    144c:	4620      	mov	r0, r4
    144e:	f007 ffad 	bl	93ac <Print::println()>
}
    1452:	b029      	add	sp, #164	; 0xa4
    1454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    1458:	9d27      	ldr	r5, [sp, #156]	; 0x9c
    145a:	2d00      	cmp	r5, #0
    145c:	f47f ae98 	bne.w	1190 <loop+0xb8>
    1460:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1500 <loop+0x428>
  ~FsBaseFile() {close();}
    1464:	a818      	add	r0, sp, #96	; 0x60
    1466:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
    146a:	f005 f82d 	bl	64c8 <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    146e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    1470:	2e00      	cmp	r6, #0
    1472:	f47f aeb7 	bne.w	11e4 <loop+0x10c>
    1476:	e6f5      	b.n	1264 <loop+0x18c>
  bool isOpen() const {return m_fFile || m_xFile;}
    1478:	6d73      	ldr	r3, [r6, #84]	; 0x54
    147a:	2b00      	cmp	r3, #0
    147c:	f47f aec8 	bne.w	1210 <loop+0x138>
    1480:	e6ca      	b.n	1218 <loop+0x140>
			delete f;
    1482:	4630      	mov	r0, r6
    1484:	4798      	blx	r3
    1486:	e6e9      	b.n	125c <loop+0x184>
			f->close();
    1488:	4628      	mov	r0, r5
    148a:	4798      	blx	r3
    148c:	e7b5      	b.n	13fa <loop+0x322>
    148e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    1490:	2b00      	cmp	r3, #0
    1492:	d188      	bne.n	13a6 <loop+0x2ce>
    1494:	e6e6      	b.n	1264 <loop+0x18c>
		return (f) ? f->isOpen() : false;
    1496:	4628      	mov	r0, r5
    1498:	4798      	blx	r3
    149a:	2800      	cmp	r0, #0
    149c:	f43f aee2 	beq.w	1264 <loop+0x18c>
    14a0:	e781      	b.n	13a6 <loop+0x2ce>
			f->close();
    14a2:	4630      	mov	r0, r6
    14a4:	4790      	blx	r2
    14a6:	e6b7      	b.n	1218 <loop+0x140>
    14a8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    14aa:	2b00      	cmp	r3, #0
    14ac:	d1a1      	bne.n	13f2 <loop+0x31a>
    14ae:	e7a4      	b.n	13fa <loop+0x322>
    14b0:	6d73      	ldr	r3, [r6, #84]	; 0x54
    14b2:	2b00      	cmp	r3, #0
    14b4:	f47f aec6 	bne.w	1244 <loop+0x16c>
    14b8:	e6c7      	b.n	124a <loop+0x172>
    14ba:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    14bc:	2b00      	cmp	r3, #0
    14be:	d1b1      	bne.n	1424 <loop+0x34c>
    14c0:	e7b3      	b.n	142a <loop+0x352>
			delete f;
    14c2:	4628      	mov	r0, r5
    14c4:	4798      	blx	r3
		}
		f = nullptr;
    14c6:	e71d      	b.n	1304 <loop+0x22c>
    14c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    14ca:	2b00      	cmp	r3, #0
    14cc:	f47f aeec 	bne.w	12a8 <loop+0x1d0>
    14d0:	e6ee      	b.n	12b0 <loop+0x1d8>
			f->close();
    14d2:	4620      	mov	r0, r4
    14d4:	4798      	blx	r3
    14d6:	e6eb      	b.n	12b0 <loop+0x1d8>
			delete f;
    14d8:	4620      	mov	r0, r4
    14da:	4798      	blx	r3
	}
    14dc:	e723      	b.n	1326 <loop+0x24e>
    14de:	6d63      	ldr	r3, [r4, #84]	; 0x54
    14e0:	2b00      	cmp	r3, #0
    14e2:	f47f aefc 	bne.w	12de <loop+0x206>
    14e6:	e6fd      	b.n	12e4 <loop+0x20c>
    14e8:	00000679 	.word	0x00000679
    14ec:	20007dc0 	.word	0x20007dc0
    14f0:	0000068d 	.word	0x0000068d
    14f4:	00000da1 	.word	0x00000da1
    14f8:	200009d0 	.word	0x200009d0
    14fc:	20007d64 	.word	0x20007d64
    1500:	200008c4 	.word	0x200008c4

00001504 <SDClass::~SDClass()>:
class SDClass : public FS
    1504:	4770      	bx	lr
    1506:	bf00      	nop

00001508 <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    1508:	b530      	push	{r4, r5, lr}
    150a:	b083      	sub	sp, #12
    150c:	4605      	mov	r5, r0
    150e:	460c      	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    1510:	f008 faec 	bl	9aec <rtc_get>
	if (now < 315532800) { // before 1980
    1514:	4b1c      	ldr	r3, [pc, #112]	; (1588 <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    1516:	4298      	cmp	r0, r3
    1518:	d804      	bhi.n	1524 <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    151a:	2300      	movs	r3, #0
    151c:	802b      	strh	r3, [r5, #0]
		*time = 0;
    151e:	8023      	strh	r3, [r4, #0]
}
    1520:	b003      	add	sp, #12
    1522:	bd30      	pop	{r4, r5, pc}
		breakTime(now, datetime);
    1524:	4669      	mov	r1, sp
    1526:	f007 ff6b 	bl	9400 <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    152a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    152e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    1532:	3301      	adds	r3, #1
    1534:	f89d 1004 	ldrb.w	r1, [sp, #4]
  year -= 1980;
    1538:	3a50      	subs	r2, #80	; 0x50
    153a:	b2db      	uxtb	r3, r3
    153c:	b292      	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0 :
    153e:	291f      	cmp	r1, #31
    1540:	bf98      	it	ls
    1542:	2b0c      	cmpls	r3, #12
    1544:	d801      	bhi.n	154a <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    1546:	2a7f      	cmp	r2, #127	; 0x7f
    1548:	d918      	bls.n	157c <SDClass::dateTime(unsigned short*, unsigned short*)+0x74>
         year << 9 | month << 5 | day;
    154a:	2100      	movs	r1, #0
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    154c:	f89d 2002 	ldrb.w	r2, [sp, #2]
    1550:	f89d 3001 	ldrb.w	r3, [sp, #1]
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    1554:	8029      	strh	r1, [r5, #0]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    1556:	2a17      	cmp	r2, #23
    1558:	bf98      	it	ls
    155a:	2b3b      	cmpls	r3, #59	; 0x3b
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    155c:	f89d 1000 	ldrb.w	r1, [sp]
    1560:	d801      	bhi.n	1566 <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    1562:	293b      	cmp	r1, #59	; 0x3b
    1564:	d903      	bls.n	156e <SDClass::dateTime(unsigned short*, unsigned short*)+0x66>
         hour << 11 | minute << 5 | second >> 1;
    1566:	2300      	movs	r3, #0
    1568:	8023      	strh	r3, [r4, #0]
}
    156a:	b003      	add	sp, #12
    156c:	bd30      	pop	{r4, r5, pc}
    156e:	015b      	lsls	r3, r3, #5
    1570:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    1574:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    1578:	b29b      	uxth	r3, r3
    157a:	e7f5      	b.n	1568 <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
         year << 9 | month << 5 | day;
    157c:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    1580:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
    1584:	b289      	uxth	r1, r1
    1586:	e7e1      	b.n	154c <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
    1588:	12cea5ff 	.word	0x12cea5ff

0000158c <SDClass::open(char const*, unsigned char)>:
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    158c:	2b01      	cmp	r3, #1
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    158e:	b5f0      	push	{r4, r5, r6, r7, lr}
    1590:	4605      	mov	r5, r0
    1592:	b095      	sub	sp, #84	; 0x54
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    1594:	d03d      	beq.n	1612 <SDClass::open(char const*, unsigned char)+0x86>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    1596:	2b02      	cmp	r3, #2
    1598:	f240 2002 	movw	r0, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    159c:	f101 0104 	add.w	r1, r1, #4
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    15a0:	bf0c      	ite	eq
    15a2:	4603      	moveq	r3, r0
    15a4:	2300      	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    15a6:	4668      	mov	r0, sp
    15a8:	f005 f8a8 	bl	66fc <FsVolume::open(char const*, int)>
    15ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
    15ae:	2b00      	cmp	r3, #0
    15b0:	d038      	beq.n	1624 <SDClass::open(char const*, unsigned char)+0x98>
		if (file) return File(new SDFile(file));
    15b2:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    15b4:	2600      	movs	r6, #0
    15b6:	f008 fa63 	bl	9a80 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    15ba:	4b21      	ldr	r3, [pc, #132]	; (1640 <SDClass::open(char const*, unsigned char)+0xb4>)
    15bc:	af04      	add	r7, sp, #16
		if (file) return File(new SDFile(file));
    15be:	4604      	mov	r4, r0
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    15c0:	e9c0 3600 	strd	r3, r6, [r0]
class Print
    15c4:	9b01      	ldr	r3, [sp, #4]
    15c6:	4639      	mov	r1, r7
    15c8:	3018      	adds	r0, #24
    15ca:	f840 3c0c 	str.w	r3, [r0, #-12]
    15ce:	4b1d      	ldr	r3, [pc, #116]	; (1644 <SDClass::open(char const*, unsigned char)+0xb8>)
    15d0:	f840 3c10 	str.w	r3, [r0, #-16]
    15d4:	9b02      	ldr	r3, [sp, #8]
    15d6:	f840 3c08 	str.w	r3, [r0, #-8]
    15da:	f89d 300c 	ldrb.w	r3, [sp, #12]
    15de:	f800 3c04 	strb.w	r3, [r0, #-4]
    15e2:	f004 ff2f 	bl	6444 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    15e6:	4b18      	ldr	r3, [pc, #96]	; (1648 <SDClass::open(char const*, unsigned char)+0xbc>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    15e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    15ec:	65a6      	str	r6, [r4, #88]	; 0x58
    15ee:	60a3      	str	r3, [r4, #8]
	File(FileImpl *file) {
    15f0:	4b16      	ldr	r3, [pc, #88]	; (164c <SDClass::open(char const*, unsigned char)+0xc0>)
	constexpr Print() : write_error(0) {}
    15f2:	606e      	str	r6, [r5, #4]
    15f4:	602b      	str	r3, [r5, #0]
		if (f) f->refcount++;
    15f6:	6863      	ldr	r3, [r4, #4]
    15f8:	732e      	strb	r6, [r5, #12]
    15fa:	3301      	adds	r3, #1
    15fc:	60aa      	str	r2, [r5, #8]
		f = file;
    15fe:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
    1600:	6063      	str	r3, [r4, #4]
    1602:	4b13      	ldr	r3, [pc, #76]	; (1650 <SDClass::open(char const*, unsigned char)+0xc4>)
  ~FsBaseFile() {close();}
    1604:	4638      	mov	r0, r7
    1606:	9300      	str	r3, [sp, #0]
    1608:	f004 ff5e 	bl	64c8 <FsBaseFile::close()>
		return File();
	}
    160c:	4628      	mov	r0, r5
    160e:	b015      	add	sp, #84	; 0x54
    1610:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    1612:	f244 2302 	movw	r3, #16898	; 0x4202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1616:	3104      	adds	r1, #4
    1618:	4668      	mov	r0, sp
    161a:	f005 f86f 	bl	66fc <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    161e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1620:	2b00      	cmp	r3, #0
    1622:	d1c6      	bne.n	15b2 <SDClass::open(char const*, unsigned char)+0x26>
    1624:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1626:	2b00      	cmp	r3, #0
    1628:	d1c3      	bne.n	15b2 <SDClass::open(char const*, unsigned char)+0x26>
    162a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	constexpr File() : f(nullptr) { }
    162e:	4a07      	ldr	r2, [pc, #28]	; (164c <SDClass::open(char const*, unsigned char)+0xc0>)
    1630:	af04      	add	r7, sp, #16
    1632:	732b      	strb	r3, [r5, #12]
    1634:	602a      	str	r2, [r5, #0]
    1636:	612b      	str	r3, [r5, #16]
    1638:	e9c5 3101 	strd	r3, r1, [r5, #4]
    163c:	e7e1      	b.n	1602 <SDClass::open(char const*, unsigned char)+0x76>
    163e:	bf00      	nop
    1640:	200009d0 	.word	0x200009d0
    1644:	20000a2c 	.word	0x20000a2c
    1648:	200009ac 	.word	0x200009ac
    164c:	20000980 	.word	0x20000980
    1650:	200008c4 	.word	0x200008c4

00001654 <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    1654:	b510      	push	{r4, lr}
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    1656:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    165a:	b08e      	sub	sp, #56	; 0x38
    165c:	460a      	mov	r2, r1
    165e:	b144      	cbz	r4, 1672 <SDClass::rmdir(char const*)+0x1e>
  FatFile() {}
    1660:	2300      	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1662:	4621      	mov	r1, r4
    1664:	4668      	mov	r0, sp
    1666:	9300      	str	r3, [sp, #0]
    1668:	f002 fe1e 	bl	42a8 <FatFile::open(FatVolume*, char const*, int)>
    166c:	b980      	cbnz	r0, 1690 <SDClass::rmdir(char const*)+0x3c>
		return sdfs.rmdir(filepath);
	}
    166e:	b00e      	add	sp, #56	; 0x38
    1670:	bd10      	pop	{r4, pc}
    1672:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->rmdir(path) : false;
    1676:	b141      	cbz	r1, 168a <SDClass::rmdir(char const*)+0x36>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1678:	4623      	mov	r3, r4
    167a:	4668      	mov	r0, sp
  ExFatFile() {}
    167c:	940c      	str	r4, [sp, #48]	; 0x30
    167e:	f000 ff31 	bl	24e4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1682:	b950      	cbnz	r0, 169a <SDClass::rmdir(char const*)+0x46>
    1684:	2000      	movs	r0, #0
    1686:	b00e      	add	sp, #56	; 0x38
    1688:	bd10      	pop	{r4, pc}
    168a:	4608      	mov	r0, r1
    168c:	b00e      	add	sp, #56	; 0x38
    168e:	bd10      	pop	{r4, pc}
    1690:	4668      	mov	r0, sp
    1692:	f003 f85d 	bl	4750 <FatFile::rmdir()>
    1696:	b00e      	add	sp, #56	; 0x38
    1698:	bd10      	pop	{r4, pc}
    169a:	4668      	mov	r0, sp
    169c:	f000 ffe0 	bl	2660 <ExFatFile::rmdir()>
    16a0:	2800      	cmp	r0, #0
    16a2:	d0ef      	beq.n	1684 <SDClass::rmdir(char const*)+0x30>
    16a4:	e7e3      	b.n	166e <SDClass::rmdir(char const*)+0x1a>
    16a6:	bf00      	nop

000016a8 <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    16a8:	b570      	push	{r4, r5, r6, lr}
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    16aa:	f8d0 5484 	ldr.w	r5, [r0, #1156]	; 0x484
    16ae:	b08e      	sub	sp, #56	; 0x38
    16b0:	4616      	mov	r6, r2
    16b2:	b15d      	cbz	r5, 16cc <SDClass::rename(char const*, char const*)+0x24>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    16b4:	f505 6589 	add.w	r5, r5, #1096	; 0x448
    16b8:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    16ba:	460a      	mov	r2, r1
    16bc:	4668      	mov	r0, sp
    16be:	4629      	mov	r1, r5
    16c0:	9300      	str	r3, [sp, #0]
    16c2:	f002 fd6f 	bl	41a4 <FatFile::open(FatFile*, char const*, int)>
    16c6:	b990      	cbnz	r0, 16ee <SDClass::rename(char const*, char const*)+0x46>
	}
    16c8:	b00e      	add	sp, #56	; 0x38
    16ca:	bd70      	pop	{r4, r5, r6, pc}
    16cc:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    16d0:	2800      	cmp	r0, #0
    16d2:	d0f9      	beq.n	16c8 <SDClass::rename(char const*, char const*)+0x20>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    16d4:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    16d8:	460a      	mov	r2, r1
    16da:	462b      	mov	r3, r5
    16dc:	4668      	mov	r0, sp
    16de:	4621      	mov	r1, r4
    16e0:	950c      	str	r5, [sp, #48]	; 0x30
    16e2:	f000 fe83 	bl	23ec <ExFatFile::open(ExFatFile*, char const*, int)>
    16e6:	b948      	cbnz	r0, 16fc <SDClass::rename(char const*, char const*)+0x54>
    16e8:	2000      	movs	r0, #0
    16ea:	b00e      	add	sp, #56	; 0x38
    16ec:	bd70      	pop	{r4, r5, r6, pc}
    16ee:	4632      	mov	r2, r6
    16f0:	4629      	mov	r1, r5
    16f2:	4668      	mov	r0, sp
    16f4:	f002 ff36 	bl	4564 <FatFile::rename(FatFile*, char const*)>
    16f8:	b00e      	add	sp, #56	; 0x38
    16fa:	bd70      	pop	{r4, r5, r6, pc}
    16fc:	4632      	mov	r2, r6
    16fe:	4621      	mov	r1, r4
    1700:	4668      	mov	r0, sp
    1702:	f001 f901 	bl	2908 <ExFatFile::rename(ExFatFile*, char const*)>
    1706:	2800      	cmp	r0, #0
    1708:	d0ee      	beq.n	16e8 <SDClass::rename(char const*, char const*)+0x40>
    170a:	e7dd      	b.n	16c8 <SDClass::rename(char const*, char const*)+0x20>

0000170c <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    170c:	b510      	push	{r4, lr}
    return m_fVol ? m_fVol->remove(path) :
    170e:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    1712:	b08e      	sub	sp, #56	; 0x38
    1714:	460a      	mov	r2, r1
    1716:	b14c      	cbz	r4, 172c <SDClass::remove(char const*)+0x20>
    1718:	2000      	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    171a:	2301      	movs	r3, #1
    171c:	4621      	mov	r1, r4
    171e:	9000      	str	r0, [sp, #0]
    1720:	4668      	mov	r0, sp
    1722:	f002 fdc1 	bl	42a8 <FatFile::open(FatVolume*, char const*, int)>
    1726:	b980      	cbnz	r0, 174a <SDClass::remove(char const*)+0x3e>
	}
    1728:	b00e      	add	sp, #56	; 0x38
    172a:	bd10      	pop	{r4, pc}
    172c:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->remove(path) : false;
    1730:	b141      	cbz	r1, 1744 <SDClass::remove(char const*)+0x38>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    1732:	2301      	movs	r3, #1
    1734:	4668      	mov	r0, sp
    1736:	940c      	str	r4, [sp, #48]	; 0x30
    1738:	f000 fed4 	bl	24e4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    173c:	b950      	cbnz	r0, 1754 <SDClass::remove(char const*)+0x48>
    173e:	2000      	movs	r0, #0
    1740:	b00e      	add	sp, #56	; 0x38
    1742:	bd10      	pop	{r4, pc}
    1744:	4608      	mov	r0, r1
    1746:	b00e      	add	sp, #56	; 0x38
    1748:	bd10      	pop	{r4, pc}
    174a:	4668      	mov	r0, sp
    174c:	f003 feb2 	bl	54b4 <FatFile::remove()>
    1750:	b00e      	add	sp, #56	; 0x38
    1752:	bd10      	pop	{r4, pc}
    1754:	4668      	mov	r0, sp
    1756:	f000 ff29 	bl	25ac <ExFatFile::remove()>
    175a:	2800      	cmp	r0, #0
    175c:	d0ef      	beq.n	173e <SDClass::remove(char const*)+0x32>
    175e:	e7e3      	b.n	1728 <SDClass::remove(char const*)+0x1c>

00001760 <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    1760:	b530      	push	{r4, r5, lr}
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    1762:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    1766:	b08f      	sub	sp, #60	; 0x3c
    1768:	460a      	mov	r2, r1
    176a:	b14c      	cbz	r4, 1780 <SDClass::mkdir(char const*)+0x20>
    176c:	2500      	movs	r5, #0
    return sub.mkdir(vwd(), path, pFlag);
    176e:	2301      	movs	r3, #1
    1770:	f504 6189 	add.w	r1, r4, #1096	; 0x448
    1774:	4668      	mov	r0, sp
    1776:	9500      	str	r5, [sp, #0]
    1778:	f002 fc9e 	bl	40b8 <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    177c:	b00f      	add	sp, #60	; 0x3c
    177e:	bd30      	pop	{r4, r5, pc}
    1780:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1784:	2800      	cmp	r0, #0
    1786:	d0f9      	beq.n	177c <SDClass::mkdir(char const*)+0x1c>
    return sub.mkdir(vwd(), path, pFlag);
    1788:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    178c:	2301      	movs	r3, #1
    178e:	4668      	mov	r0, sp
    1790:	940c      	str	r4, [sp, #48]	; 0x30
    1792:	f001 f93b 	bl	2a0c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1796:	b00f      	add	sp, #60	; 0x3c
    1798:	bd30      	pop	{r4, r5, pc}
    179a:	bf00      	nop

0000179c <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    179c:	b510      	push	{r4, lr}
    return m_fVol ? m_fVol->exists(path) :
    179e:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    17a2:	b08e      	sub	sp, #56	; 0x38
    17a4:	460a      	mov	r2, r1
    17a6:	b13c      	cbz	r4, 17b8 <SDClass::exists(char const*)+0x1c>
    17a8:	2300      	movs	r3, #0
    return tmp.open(this, path, O_RDONLY);
    17aa:	4621      	mov	r1, r4
    17ac:	4668      	mov	r0, sp
    17ae:	9300      	str	r3, [sp, #0]
    17b0:	f002 fd7a 	bl	42a8 <FatFile::open(FatVolume*, char const*, int)>
	}
    17b4:	b00e      	add	sp, #56	; 0x38
    17b6:	bd10      	pop	{r4, pc}
    17b8:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
    17bc:	b131      	cbz	r1, 17cc <SDClass::exists(char const*)+0x30>
    return tmp.open(this, path, O_RDONLY);
    17be:	4623      	mov	r3, r4
    17c0:	4668      	mov	r0, sp
    17c2:	940c      	str	r4, [sp, #48]	; 0x30
    17c4:	f000 fe8e 	bl	24e4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    17c8:	b00e      	add	sp, #56	; 0x38
    17ca:	bd10      	pop	{r4, pc}
    17cc:	4608      	mov	r0, r1
    17ce:	b00e      	add	sp, #56	; 0x38
    17d0:	bd10      	pop	{r4, pc}
    17d2:	bf00      	nop

000017d4 <SDClass::usedSize()>:
	uint64_t usedSize() {
    17d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17d6:	4605      	mov	r5, r0
		if (!cardPreviouslyPresent) return (uint64_t)0;
    17d8:	f890 04d0 	ldrb.w	r0, [r0, #1232]	; 0x4d0
    17dc:	b908      	cbnz	r0, 17e2 <SDClass::usedSize()+0xe>
    17de:	4601      	mov	r1, r0
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
    17e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol ? m_fVol->clusterCount() :
    17e2:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    17e6:	2b00      	cmp	r3, #0
    17e8:	d04c      	beq.n	1884 <SDClass::usedSize()+0xb0>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    17ea:	69dc      	ldr	r4, [r3, #28]
    17ec:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    17f0:	3c01      	subs	r4, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    17f2:	2800      	cmp	r0, #0
    17f4:	d054      	beq.n	18a0 <SDClass::usedSize()+0xcc>
    17f6:	6803      	ldr	r3, [r0, #0]
    17f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    17fa:	4798      	blx	r3
    17fc:	b1e0      	cbz	r0, 1838 <SDClass::usedSize()+0x64>
    17fe:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    1802:	b378      	cbz	r0, 1864 <SDClass::usedSize()+0x90>
    1804:	6803      	ldr	r3, [r0, #0]
    1806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1808:	4798      	blx	r3
    180a:	b9a8      	cbnz	r0, 1838 <SDClass::usedSize()+0x64>
    180c:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    1810:	b340      	cbz	r0, 1864 <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    1812:	6803      	ldr	r3, [r0, #0]
    1814:	2101      	movs	r1, #1
    1816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1818:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    181a:	4607      	mov	r7, r0
    181c:	b310      	cbz	r0, 1864 <SDClass::usedSize()+0x90>
    return m_fVol ? m_fVol->freeClusterCount() :
    181e:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    1822:	bb58      	cbnz	r0, 187c <SDClass::usedSize()+0xa8>
    1824:	f8d5 6488 	ldr.w	r6, [r5, #1160]	; 0x488
    1828:	4633      	mov	r3, r6
           m_xVol ? m_xVol->freeClusterCount() : 0;
    182a:	b96e      	cbnz	r6, 1848 <SDClass::usedSize()+0x74>
    182c:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    if (m_card) {
    1830:	b990      	cbnz	r0, 1858 <SDClass::usedSize()+0x84>
  uint32_t bytesPerCluster() const {
    1832:	2000      	movs	r0, #0
    1834:	4601      	mov	r1, r0
    1836:	e7d3      	b.n	17e0 <SDClass::usedSize()+0xc>
    return m_fVol ? m_fVol->freeClusterCount() :
    1838:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    183c:	b9e8      	cbnz	r0, 187a <SDClass::usedSize()+0xa6>
    183e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
           m_xVol ? m_xVol->freeClusterCount() : 0;
    1842:	2b00      	cmp	r3, #0
    1844:	d0f5      	beq.n	1832 <SDClass::usedSize()+0x5e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    1846:	4607      	mov	r7, r0
    1848:	4618      	mov	r0, r3
    184a:	f002 f9b3 	bl	3bb4 <ExFatPartition::freeClusterCount()>
    184e:	4606      	mov	r6, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    1850:	b13f      	cbz	r7, 1862 <SDClass::usedSize()+0x8e>
    1852:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    if (m_card) {
    1856:	b128      	cbz	r0, 1864 <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    1858:	6803      	ldr	r3, [r0, #0]
    185a:	2100      	movs	r1, #0
    185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    185e:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    1860:	b100      	cbz	r0, 1864 <SDClass::usedSize()+0x90>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    1862:	1ba4      	subs	r4, r4, r6
    return m_fVol ? m_fVol->bytesPerCluster() :
    1864:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    1868:	b1fb      	cbz	r3, 18aa <SDClass::usedSize()+0xd6>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    186a:	799b      	ldrb	r3, [r3, #6]
    186c:	f44f 7100 	mov.w	r1, #512	; 0x200
    1870:	4099      	lsls	r1, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    1872:	b289      	uxth	r1, r1
    1874:	fba1 0104 	umull	r0, r1, r1, r4
	}
    1878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    187a:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    187c:	f004 fc6c 	bl	6158 <FatPartition::freeClusterCount()>
    1880:	4606      	mov	r6, r0
    1882:	e7e5      	b.n	1850 <SDClass::usedSize()+0x7c>
    1884:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
  uint32_t clusterCount() const {
    1888:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
           m_xVol ? m_xVol->clusterCount() : 0;
    188c:	b1b3      	cbz	r3, 18bc <SDClass::usedSize()+0xe8>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    188e:	f8d3 4430 	ldr.w	r4, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    1892:	2800      	cmp	r0, #0
    1894:	d1af      	bne.n	17f6 <SDClass::usedSize()+0x22>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    1896:	4618      	mov	r0, r3
    1898:	f002 f98c 	bl	3bb4 <ExFatPartition::freeClusterCount()>
    189c:	4606      	mov	r6, r0
    189e:	e7e0      	b.n	1862 <SDClass::usedSize()+0x8e>
    return m_fVol ? m_fVol->freeClusterCount() :
    18a0:	4618      	mov	r0, r3
    18a2:	f004 fc59 	bl	6158 <FatPartition::freeClusterCount()>
    18a6:	4606      	mov	r6, r0
    18a8:	e7db      	b.n	1862 <SDClass::usedSize()+0x8e>
    18aa:	f8d5 6488 	ldr.w	r6, [r5, #1160]	; 0x488
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    18ae:	2e00      	cmp	r6, #0
    18b0:	d0bf      	beq.n	1832 <SDClass::usedSize()+0x5e>
		  * (uint64_t)sdfs.bytesPerCluster();
    18b2:	f8d6 143c 	ldr.w	r1, [r6, #1084]	; 0x43c
    18b6:	fba1 0104 	umull	r0, r1, r1, r4
	}
    18ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18bc:	2800      	cmp	r0, #0
    18be:	d0b8      	beq.n	1832 <SDClass::usedSize()+0x5e>
           m_xVol ? m_xVol->clusterCount() : 0;
    18c0:	461c      	mov	r4, r3
    18c2:	e798      	b.n	17f6 <SDClass::usedSize()+0x22>

000018c4 <SDClass::totalSize()>:
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    18c4:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    18c8:	b163      	cbz	r3, 18e4 <SDClass::totalSize()+0x20>
    return m_fVol ? m_fVol->clusterCount() :
    18ca:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    18ce:	b163      	cbz	r3, 18ea <SDClass::totalSize()+0x26>
    18d0:	799a      	ldrb	r2, [r3, #6]
    18d2:	f44f 7000 	mov.w	r0, #512	; 0x200
    return m_lastCluster - 1;
    18d6:	69d9      	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    18d8:	4090      	lsls	r0, r2
    return m_lastCluster - 1;
    18da:	3901      	subs	r1, #1
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    18dc:	b280      	uxth	r0, r0
    18de:	fba0 0101 	umull	r0, r1, r0, r1
    18e2:	4770      	bx	lr
		if (!cardPreviouslyPresent) return (uint64_t)0;
    18e4:	4618      	mov	r0, r3
    18e6:	4601      	mov	r1, r0
	}
    18e8:	4770      	bx	lr
    18ea:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->clusterCount() : 0;
    18ee:	2800      	cmp	r0, #0
    18f0:	d0f9      	beq.n	18e6 <SDClass::totalSize()+0x22>
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    18f2:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    18f6:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
    18fa:	fba1 0100 	umull	r0, r1, r1, r0
    18fe:	4770      	bx	lr

00001900 <SDClass::format(int, char, Print&)>:
{
    1900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SdCard* card() {return m_card;}
    1904:	f8d0 5490 	ldr.w	r5, [r0, #1168]	; 0x490
    1908:	b08d      	sub	sp, #52	; 0x34
	if (!card) return false; // no SD card
    190a:	b14d      	cbz	r5, 1920 <SDClass::format(int, char, Print&)+0x20>
    190c:	4698      	mov	r8, r3
	uint32_t sectors = card->sectorCount();
    190e:	682b      	ldr	r3, [r5, #0]
    1910:	4604      	mov	r4, r0
    1912:	4628      	mov	r0, r5
    1914:	69db      	ldr	r3, [r3, #28]
    1916:	4798      	blx	r3
	if (sectors <= 12288) return false; // card too small
    1918:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
	uint32_t sectors = card->sectorCount();
    191c:	4606      	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    191e:	d804      	bhi.n	192a <SDClass::format(int, char, Print&)+0x2a>
	if (!card) return false; // no SD card
    1920:	2600      	movs	r6, #0
}
    1922:	4630      	mov	r0, r6
    1924:	b00d      	add	sp, #52	; 0x34
    1926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    192a:	f44f 7000 	mov.w	r0, #512	; 0x200
    192e:	f009 fefb 	bl	b728 <malloc>
	if (!buf) return false; // unable to allocate memory
    1932:	4607      	mov	r7, r0
    1934:	2800      	cmp	r0, #0
    1936:	d0f3      	beq.n	1920 <SDClass::format(int, char, Print&)+0x20>
		ret = exFatFormatter.format(card, buf, &pr);
    1938:	f10d 0904 	add.w	r9, sp, #4
	if (sectors > 67108864) {
    193c:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
		ret = exFatFormatter.format(card, buf, &pr);
    1940:	4602      	mov	r2, r0
    1942:	4643      	mov	r3, r8
    1944:	4629      	mov	r1, r5
    1946:	4648      	mov	r0, r9
	if (sectors > 67108864) {
    1948:	d92e      	bls.n	19a8 <SDClass::format(int, char, Print&)+0xa8>
		ret = exFatFormatter.format(card, buf, &pr);
    194a:	f001 fbff 	bl	314c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    194e:	4606      	mov	r6, r0
	free(buf);
    1950:	4638      	mov	r0, r7
    1952:	f009 fef1 	bl	b738 <free>
	if (ret) {
    1956:	2e00      	cmp	r6, #0
    1958:	d0e2      	beq.n	1920 <SDClass::format(int, char, Print&)+0x20>
		card->syncDevice();
    195a:	682b      	ldr	r3, [r5, #0]
    195c:	4628      	mov	r0, r5
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    195e:	1d27      	adds	r7, r4, #4
		card->syncDevice();
    1960:	6a1b      	ldr	r3, [r3, #32]
    1962:	4798      	blx	r3
    if (spiConfigBackupPin == 255) {
    1964:	f894 34c0 	ldrb.w	r3, [r4, #1216]	; 0x4c0
    1968:	2bff      	cmp	r3, #255	; 0xff
    196a:	d021      	beq.n	19b0 <SDClass::format(int, char, Print&)+0xb0>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    196c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    1970:	f504 6594 	add.w	r5, r4, #1184	; 0x4a0
    1974:	9302      	str	r3, [sp, #8]
    1976:	4628      	mov	r0, r5
    1978:	f8d4 34c8 	ldr.w	r3, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    197c:	9303      	str	r3, [sp, #12]
    197e:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
    1982:	f8ad 3004 	strh.w	r3, [sp, #4]
    1986:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
    198a:	f005 fd7d 	bl	7488 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    198e:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    1992:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    1996:	2b00      	cmp	r3, #0
    1998:	d1c3      	bne.n	1922 <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    199a:	2301      	movs	r3, #1
    199c:	4629      	mov	r1, r5
    199e:	4638      	mov	r0, r7
    19a0:	461a      	mov	r2, r3
    19a2:	f004 fe39 	bl	6618 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    19a6:	e7bc      	b.n	1922 <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    19a8:	f004 f89c 	bl	5ae4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    19ac:	4606      	mov	r6, r0
    19ae:	e7cf      	b.n	1950 <SDClass::format(int, char, Print&)+0x50>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    19b0:	f204 4594 	addw	r5, r4, #1172	; 0x494
    19b4:	f894 14cc 	ldrb.w	r1, [r4, #1228]	; 0x4cc
    19b8:	4628      	mov	r0, r5
    19ba:	f006 fbad 	bl	8118 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    19be:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    19c0:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    19c4:	f005 fe0a 	bl	75dc <SdioCard::errorCode() const>
    19c8:	2800      	cmp	r0, #0
    19ca:	d1aa      	bne.n	1922 <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    19cc:	2301      	movs	r3, #1
    19ce:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    19d2:	4638      	mov	r0, r7
    19d4:	461a      	mov	r2, r3
    19d6:	f004 fe1f 	bl	6618 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    19da:	e7a2      	b.n	1922 <SDClass::format(int, char, Print&)+0x22>

000019dc <SDClass::mediaPresent()>:
{
    19dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  SdCard* card() {return m_card;}
    19de:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
    19e2:	b085      	sub	sp, #20
    19e4:	4604      	mov	r4, r0
	if (card) {
    19e6:	2e00      	cmp	r6, #0
    19e8:	d042      	beq.n	1a70 <SDClass::mediaPresent()+0x94>
		if (cardPreviouslyPresent) {
    19ea:	f890 54d0 	ldrb.w	r5, [r0, #1232]	; 0x4d0
			if (csPin_ == BUILTIN_SDCARD) {
    19ee:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
		if (cardPreviouslyPresent) {
    19f2:	b185      	cbz	r5, 1a16 <SDClass::mediaPresent()+0x3a>
			if (csPin_ == BUILTIN_SDCARD) {
    19f4:	2bfe      	cmp	r3, #254	; 0xfe
    19f6:	d063      	beq.n	1ac0 <SDClass::mediaPresent()+0xe4>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    19f8:	f894 04d2 	ldrb.w	r0, [r4, #1234]	; 0x4d2
    19fc:	2836      	cmp	r0, #54	; 0x36
    19fe:	d93d      	bls.n	1a7c <SDClass::mediaPresent()+0xa0>
					ret = card->readCID(&cid);
    1a00:	6833      	ldr	r3, [r6, #0]
    1a02:	4669      	mov	r1, sp
    1a04:	4630      	mov	r0, r6
    1a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1a08:	4798      	blx	r3
    1a0a:	4605      	mov	r5, r0
}
    1a0c:	4628      	mov	r0, r5
	cardPreviouslyPresent = ret;
    1a0e:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    1a12:	b005      	add	sp, #20
    1a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    1a16:	2bfe      	cmp	r3, #254	; 0xfe
    1a18:	d026      	beq.n	1a68 <SDClass::mediaPresent()+0x8c>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    1a1a:	f890 04d2 	ldrb.w	r0, [r0, #1234]	; 0x4d2
    1a1e:	2836      	cmp	r0, #54	; 0x36
    1a20:	d949      	bls.n	1ab6 <SDClass::mediaPresent()+0xda>
    if (spiConfigBackupPin == 255) {
    1a22:	f894 34c0 	ldrb.w	r3, [r4, #1216]	; 0x4c0
				ret = sdfs.restart();
    1a26:	1d27      	adds	r7, r4, #4
    1a28:	2bff      	cmp	r3, #255	; 0xff
    1a2a:	d02d      	beq.n	1a88 <SDClass::mediaPresent()+0xac>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    1a2c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    m_spiCard.begin(config);
    1a30:	f504 6694 	add.w	r6, r4, #1184	; 0x4a0
    1a34:	f8d4 24c8 	ldr.w	r2, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    1a38:	9301      	str	r3, [sp, #4]
    1a3a:	4630      	mov	r0, r6
    1a3c:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
    1a40:	9202      	str	r2, [sp, #8]
    1a42:	f8ad 3000 	strh.w	r3, [sp]
    1a46:	466b      	mov	r3, sp
    1a48:	cb0e      	ldmia	r3, {r1, r2, r3}
    1a4a:	f005 fd1d 	bl	7488 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    1a4e:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    1a52:	f8c4 6490 	str.w	r6, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    1a56:	b963      	cbnz	r3, 1a72 <SDClass::mediaPresent()+0x96>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    1a58:	2301      	movs	r3, #1
    1a5a:	4631      	mov	r1, r6
    1a5c:	4638      	mov	r0, r7
    1a5e:	461a      	mov	r2, r3
    1a60:	f004 fdda 	bl	6618 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    1a64:	4605      	mov	r5, r0
    1a66:	e004      	b.n	1a72 <SDClass::mediaPresent()+0x96>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    1a68:	4b1f      	ldr	r3, [pc, #124]	; (1ae8 <SDClass::mediaPresent()+0x10c>)
    1a6a:	689b      	ldr	r3, [r3, #8]
			if (ret)
    1a6c:	039b      	lsls	r3, r3, #14
    1a6e:	d4d8      	bmi.n	1a22 <SDClass::mediaPresent()+0x46>
		ret = false;
    1a70:	2500      	movs	r5, #0
}
    1a72:	4628      	mov	r0, r5
	cardPreviouslyPresent = ret;
    1a74:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    1a78:	b005      	add	sp, #20
    1a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    1a7c:	f007 fe14 	bl	96a8 <digitalRead>
    1a80:	1e05      	subs	r5, r0, #0
    1a82:	bf18      	it	ne
    1a84:	2501      	movne	r5, #1
    1a86:	e7f4      	b.n	1a72 <SDClass::mediaPresent()+0x96>
    m_sdioCard.begin(config);
    1a88:	f204 4694 	addw	r6, r4, #1172	; 0x494
    1a8c:	f894 14cc 	ldrb.w	r1, [r4, #1228]	; 0x4cc
    1a90:	4630      	mov	r0, r6
    1a92:	f006 fb41 	bl	8118 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    1a96:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    1a98:	f8c4 6490 	str.w	r6, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    1a9c:	f005 fd9e 	bl	75dc <SdioCard::errorCode() const>
    1aa0:	2800      	cmp	r0, #0
    1aa2:	d1e6      	bne.n	1a72 <SDClass::mediaPresent()+0x96>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    1aa4:	2301      	movs	r3, #1
    1aa6:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    1aaa:	4638      	mov	r0, r7
    1aac:	461a      	mov	r2, r3
    1aae:	f004 fdb3 	bl	6618 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    1ab2:	4605      	mov	r5, r0
    1ab4:	e7dd      	b.n	1a72 <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    1ab6:	f007 fdf7 	bl	96a8 <digitalRead>
			if (ret)
    1aba:	2800      	cmp	r0, #0
    1abc:	d1b1      	bne.n	1a22 <SDClass::mediaPresent()+0x46>
    1abe:	e7d7      	b.n	1a70 <SDClass::mediaPresent()+0x94>
				s = card->status();
    1ac0:	6833      	ldr	r3, [r6, #0]
    1ac2:	4630      	mov	r0, r6
    1ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    1ac6:	4798      	blx	r3
			if (s == 0xFFFFFFFF) {
    1ac8:	1c42      	adds	r2, r0, #1
				s = card->status();
    1aca:	4603      	mov	r3, r0
			if (s == 0xFFFFFFFF) {
    1acc:	d094      	beq.n	19f8 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    1ace:	2800      	cmp	r0, #0
    1ad0:	d1cf      	bne.n	1a72 <SDClass::mediaPresent()+0x96>
				if (csPin_ == BUILTIN_SDCARD) 
    1ad2:	f894 24d1 	ldrb.w	r2, [r4, #1233]	; 0x4d1
    1ad6:	2afe      	cmp	r2, #254	; 0xfe
    1ad8:	d1ca      	bne.n	1a70 <SDClass::mediaPresent()+0x94>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    1ada:	2103      	movs	r1, #3
    1adc:	202e      	movs	r0, #46	; 0x2e
				ret = false;
    1ade:	461d      	mov	r5, r3
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    1ae0:	f007 fdf4 	bl	96cc <pinMode>
    1ae4:	e7c5      	b.n	1a72 <SDClass::mediaPresent()+0x96>
    1ae6:	bf00      	nop
    1ae8:	42008000 	.word	0x42008000

00001aec <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    1aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aee:	460d      	mov	r5, r1
    1af0:	4604      	mov	r4, r0
    1af2:	b085      	sub	sp, #20
	FsDateTime::setCallback(dateTime);
    1af4:	4830      	ldr	r0, [pc, #192]	; (1bb8 <SDClass::begin(unsigned char)+0xcc>)
    1af6:	f007 f84f 	bl	8b98 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	if (csPin == BUILTIN_SDCARD) {
    1afa:	2dfe      	cmp	r5, #254	; 0xfe
	csPin_ = csPin; // remember which one passed in. 
    1afc:	f884 54d1 	strb.w	r5, [r4, #1233]	; 0x4d1
	if (csPin == BUILTIN_SDCARD) {
    1b00:	d026      	beq.n	1b50 <SDClass::begin(unsigned char)+0x64>
	if (csPin < NUM_DIGITAL_PINS) {
    1b02:	2d36      	cmp	r5, #54	; 0x36
    1b04:	d902      	bls.n	1b0c <SDClass::begin(unsigned char)+0x20>
	return false;
    1b06:	2000      	movs	r0, #0
}
    1b08:	b005      	add	sp, #20
    1b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    spiConfigBackupOptions = spiConfig.options;
    1b0c:	2600      	movs	r6, #0
    spiConfigBackupClock = spiConfig.maxSck;
    1b0e:	4b2b      	ldr	r3, [pc, #172]	; (1bbc <SDClass::begin(unsigned char)+0xd0>)
    m_spiCard.begin(config);
    1b10:	f504 6794 	add.w	r7, r4, #1184	; 0x4a0
    1b14:	f88d 5004 	strb.w	r5, [sp, #4]
    1b18:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    1b1c:	f88d 6005 	strb.w	r6, [sp, #5]
    1b20:	4638      	mov	r0, r7
    spiConfigBackupPin = spiConfig.csPin;
    1b22:	f884 54c0 	strb.w	r5, [r4, #1216]	; 0x4c0
    spiConfigBackupOptions = spiConfig.options;
    1b26:	f884 64c1 	strb.w	r6, [r4, #1217]	; 0x4c1
    spiConfigBackupPort = spiConfig.spiPort;
    1b2a:	f8c4 64c8 	str.w	r6, [r4, #1224]	; 0x4c8
    1b2e:	e9cd 3602 	strd	r3, r6, [sp, #8]
    1b32:	ab04      	add	r3, sp, #16
    1b34:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    1b38:	f005 fca6 	bl	7488 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    1b3c:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    1b40:	f8c4 7490 	str.w	r7, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    1b44:	b383      	cbz	r3, 1ba8 <SDClass::begin(unsigned char)+0xbc>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    1b46:	4630      	mov	r0, r6
		cardPreviouslyPresent = ret;
    1b48:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
}
    1b4c:	b005      	add	sp, #20
    1b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_sdioCard.begin(config);
    1b50:	f204 4594 	addw	r5, r4, #1172	; 0x494
    sdioConfigBackup = sdioConfig;
    1b54:	2300      	movs	r3, #0
    spiConfigBackupPin = 255;
    1b56:	22ff      	movs	r2, #255	; 0xff
    1b58:	4619      	mov	r1, r3
    1b5a:	4628      	mov	r0, r5
    sdioConfigBackup = sdioConfig;
    1b5c:	f884 34cc 	strb.w	r3, [r4, #1228]	; 0x4cc
    spiConfigBackupPin = 255;
    1b60:	f884 24c0 	strb.w	r2, [r4, #1216]	; 0x4c0
    1b64:	f006 fad8 	bl	8118 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    1b68:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    1b6a:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    1b6e:	f005 fd35 	bl	75dc <SdioCard::errorCode() const>
    1b72:	b970      	cbnz	r0, 1b92 <SDClass::begin(unsigned char)+0xa6>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    1b74:	2301      	movs	r3, #1
    1b76:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    1b7a:	1d20      	adds	r0, r4, #4
    1b7c:	461a      	mov	r2, r3
    1b7e:	f004 fd4b 	bl	6618 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    1b82:	b130      	cbz	r0, 1b92 <SDClass::begin(unsigned char)+0xa6>
		cardPreviouslyPresent = ret;
    1b84:	2201      	movs	r2, #1
		cdPin_ = _SD_DAT3;
    1b86:	232e      	movs	r3, #46	; 0x2e
		cardPreviouslyPresent = ret;
    1b88:	f884 24d0 	strb.w	r2, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    1b8c:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    1b90:	e7ba      	b.n	1b08 <SDClass::begin(unsigned char)+0x1c>
		cdPin_ = _SD_DAT3;
    1b92:	202e      	movs	r0, #46	; 0x2e
		cardPreviouslyPresent = ret;
    1b94:	2500      	movs	r5, #0
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    1b96:	2103      	movs	r1, #3
		cdPin_ = _SD_DAT3;
    1b98:	f884 04d2 	strb.w	r0, [r4, #1234]	; 0x4d2
		cardPreviouslyPresent = ret;
    1b9c:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    1ba0:	f007 fd94 	bl	96cc <pinMode>
    1ba4:	4628      	mov	r0, r5
    1ba6:	e7af      	b.n	1b08 <SDClass::begin(unsigned char)+0x1c>
    1ba8:	2301      	movs	r3, #1
    1baa:	4639      	mov	r1, r7
    1bac:	1d20      	adds	r0, r4, #4
    1bae:	461a      	mov	r2, r3
    1bb0:	f004 fd32 	bl	6618 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    1bb4:	e7c8      	b.n	1b48 <SDClass::begin(unsigned char)+0x5c>
    1bb6:	bf00      	nop
    1bb8:	00001509 	.word	0x00001509
    1bbc:	017d7840 	.word	0x017d7840

00001bc0 <_GLOBAL__sub_I_SD>:
	SDClass() { }
    1bc0:	4818      	ldr	r0, [pc, #96]	; (1c24 <_GLOBAL__sub_I_SD+0x64>)
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    1bc2:	f04f 0c29 	mov.w	ip, #41	; 0x29
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1bc6:	4a18      	ldr	r2, [pc, #96]	; (1c28 <_GLOBAL__sub_I_SD+0x68>)
  FsVolume() {}
    1bc8:	2300      	movs	r3, #0
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    1bca:	4918      	ldr	r1, [pc, #96]	; (1c2c <_GLOBAL__sub_I_SD+0x6c>)
	}
	return true;
}
    1bcc:	b410      	push	{r4}
    1bce:	f8c0 2494 	str.w	r2, [r0, #1172]	; 0x494
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1bd2:	2207      	movs	r2, #7
    1bd4:	f880 c4b1 	strb.w	ip, [r0, #1201]	; 0x4b1
    1bd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
	SPISettings() : _clock(4000000) {
    1bdc:	f8c0 14a8 	str.w	r1, [r0, #1192]	; 0x4a8
    1be0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1be4:	4c12      	ldr	r4, [pc, #72]	; (1c30 <_GLOBAL__sub_I_SD+0x70>)
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1be6:	f8c0 24ac 	str.w	r2, [r0, #1196]	; 0x4ac
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    1bea:	4a12      	ldr	r2, [pc, #72]	; (1c34 <_GLOBAL__sub_I_SD+0x74>)
    1bec:	f8a0 14d0 	strh.w	r1, [r0, #1232]	; 0x4d0
  SdioConfig() {}
    1bf0:	f8a0 349c 	strh.w	r3, [r0, #1180]	; 0x49c
  SharedSpiCard() {}
    1bf4:	f880 34b5 	strb.w	r3, [r0, #1205]	; 0x4b5
    1bf8:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
    1bfc:	f880 c4d2 	strb.w	ip, [r0, #1234]	; 0x4d2
    1c00:	6004      	str	r4, [r0, #0]
  DedicatedSpiCard() {}
    1c02:	f8c0 24a0 	str.w	r2, [r0, #1184]	; 0x4a0
SDClass SD;
    1c06:	490c      	ldr	r1, [pc, #48]	; (1c38 <_GLOBAL__sub_I_SD+0x78>)
    1c08:	4a0c      	ldr	r2, [pc, #48]	; (1c3c <_GLOBAL__sub_I_SD+0x7c>)
}
    1c0a:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c0e:	f8c0 3484 	str.w	r3, [r0, #1156]	; 0x484
    1c12:	f8c0 3488 	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    1c16:	f8c0 3490 	str.w	r3, [r0, #1168]	; 0x490
    1c1a:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
SDClass SD;
    1c1e:	f009 bbff 	b.w	b420 <__aeabi_atexit>
    1c22:	bf00      	nop
    1c24:	20008ca8 	.word	0x20008ca8
    1c28:	20000a80 	.word	0x20000a80
    1c2c:	003d0900 	.word	0x003d0900
    1c30:	20000a50 	.word	0x20000a50
    1c34:	200008e8 	.word	0x200008e8
    1c38:	00001505 	.word	0x00001505
    1c3c:	20008108 	.word	0x20008108

00001c40 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1c40:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    1c42:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1c46:	b084      	sub	sp, #16
    1c48:	468c      	mov	ip, r1
    1c4a:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    1c4c:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1c4e:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    1c50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1c54:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    1c58:	ea4f 124c 	mov.w	r2, ip, lsl #5
    1c5c:	4629      	mov	r1, r5
    1c5e:	6a20      	ldr	r0, [r4, #32]
    1c60:	f001 fec4 	bl	39ec <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    1c64:	2801      	cmp	r0, #1
    1c66:	d106      	bne.n	1c76 <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    1c68:	4632      	mov	r2, r6
    1c6a:	4629      	mov	r1, r5
    1c6c:	6a20      	ldr	r0, [r4, #32]
    1c6e:	f001 fea1 	bl	39b4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    1c72:	b004      	add	sp, #16
    1c74:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    1c76:	2000      	movs	r0, #0
}
    1c78:	b004      	add	sp, #16
    1c7a:	bd70      	pop	{r4, r5, r6, pc}

00001c7c <ExFatFile::close()>:
bool ExFatFile::close() {
    1c7c:	b510      	push	{r4, lr}
    1c7e:	4604      	mov	r4, r0
  bool rtn = sync();
    1c80:	f000 fdba 	bl	27f8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    1c84:	2300      	movs	r3, #0
    1c86:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    1c8a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    1c8e:	bd10      	pop	{r4, pc}

00001c90 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    1c90:	b538      	push	{r3, r4, r5, lr}
    1c92:	4614      	mov	r4, r2
    1c94:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    1c96:	2200      	movs	r2, #0
    1c98:	f100 0124 	add.w	r1, r0, #36	; 0x24
    1c9c:	6a00      	ldr	r0, [r0, #32]
    1c9e:	f001 fe89 	bl	39b4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    1ca2:	4603      	mov	r3, r0
    1ca4:	b120      	cbz	r0, 1cb0 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    1ca6:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
  *ptime = getLe16(df->createTime);
  return true;
    1ca8:	2001      	movs	r0, #1
  *pdate = getLe16(df->createDate);
    1caa:	802a      	strh	r2, [r5, #0]
    1cac:	891b      	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    1cae:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    1cb0:	bd38      	pop	{r3, r4, r5, pc}
    1cb2:	bf00      	nop

00001cb4 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    1cb4:	b538      	push	{r3, r4, r5, lr}
    1cb6:	4614      	mov	r4, r2
    1cb8:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    1cba:	2200      	movs	r2, #0
    1cbc:	f100 0124 	add.w	r1, r0, #36	; 0x24
    1cc0:	6a00      	ldr	r0, [r0, #32]
    1cc2:	f001 fe77 	bl	39b4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    1cc6:	4603      	mov	r3, r0
    1cc8:	b120      	cbz	r0, 1cd4 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    1cca:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
  *ptime = getLe16(df->modifyTime);
  return true;
    1ccc:	2001      	movs	r0, #1
  *pdate = getLe16(df->modifyDate);
    1cce:	802a      	strh	r2, [r5, #0]
    1cd0:	899b      	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    1cd2:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    1cd4:	bd38      	pop	{r3, r4, r5, pc}
    1cd6:	bf00      	nop

00001cd8 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    1cd8:	b538      	push	{r3, r4, r5, lr}
    1cda:	460d      	mov	r5, r1
  if (isOpen()) {
    1cdc:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    1ce0:	b109      	cbz	r1, 1ce6 <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    1ce2:	2000      	movs	r0, #0
}
    1ce4:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    1ce6:	2238      	movs	r2, #56	; 0x38
    1ce8:	4604      	mov	r4, r0
    1cea:	f00b fbfb 	bl	d4e4 <memset>
  m_flags = FILE_FLAG_READ;
    1cee:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    1cf0:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    1cf2:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    1cf4:	4618      	mov	r0, r3
    1cf6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    1cfa:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    1cfe:	bd38      	pop	{r3, r4, r5, pc}

00001d00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    1d00:	b4f0      	push	{r4, r5, r6, r7}
    1d02:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    1d04:	7809      	ldrb	r1, [r1, #0]
    1d06:	2920      	cmp	r1, #32
    1d08:	d103      	bne.n	1d12 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    1d0a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1d0e:	2c20      	cmp	r4, #32
    1d10:	d0fb      	beq.n	1d0a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    1d12:	6015      	str	r5, [r2, #0]
  fname->end = path;
    1d14:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    1d16:	782c      	ldrb	r4, [r5, #0]
    1d18:	2c2f      	cmp	r4, #47	; 0x2f
    1d1a:	d011      	beq.n	1d40 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1d1c:	b184      	cbz	r4, 1d40 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1d1e:	1c6e      	adds	r6, r5, #1
    1d20:	2c3c      	cmp	r4, #60	; 0x3c
    1d22:	4f1d      	ldr	r7, [pc, #116]	; (1d98 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    1d24:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    1d26:	d82a      	bhi.n	1d7e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    1d28:	2c21      	cmp	r4, #33	; 0x21
    1d2a:	d812      	bhi.n	1d52 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    1d2c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
    1d30:	f1bc 0f1e 	cmp.w	ip, #30
    1d34:	d816      	bhi.n	1d64 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    1d36:	2000      	movs	r0, #0
    1d38:	bcf0      	pop	{r4, r5, r6, r7}
    1d3a:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    1d3c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1d40:	2c20      	cmp	r4, #32
    1d42:	d0fb      	beq.n	1d3c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    1d44:	2c2f      	cmp	r4, #47	; 0x2f
    1d46:	d0f9      	beq.n	1d3c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    1d48:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    1d4a:	4611      	mov	r1, r2
}
    1d4c:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    1d4e:	f001 bd1f 	b.w	3790 <ExFatFile::hashName(ExName_t*)>
    1d52:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    1d56:	fa5f fc8c 	uxtb.w	ip, ip
    1d5a:	fa27 fc0c 	lsr.w	ip, r7, ip
    1d5e:	f01c 0f01 	tst.w	ip, #1
    1d62:	d1e8      	bne.n	1d36 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    1d64:	2c2e      	cmp	r4, #46	; 0x2e
    1d66:	d001      	beq.n	1d6c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1d68:	2c20      	cmp	r4, #32
    1d6a:	d10d      	bne.n	1d88 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    1d6c:	f816 4b01 	ldrb.w	r4, [r6], #1
    1d70:	2c00      	cmp	r4, #0
    1d72:	d0e5      	beq.n	1d40 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1d74:	2c2f      	cmp	r4, #47	; 0x2f
    1d76:	d0e3      	beq.n	1d40 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    1d78:	2c3c      	cmp	r4, #60	; 0x3c
    1d7a:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    1d7c:	d9d4      	bls.n	1d28 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    1d7e:	2c5c      	cmp	r4, #92	; 0x5c
    1d80:	d0d9      	beq.n	1d36 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    1d82:	d903      	bls.n	1d8c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    1d84:	2c7c      	cmp	r4, #124	; 0x7c
    1d86:	d0d6      	beq.n	1d36 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    1d88:	6096      	str	r6, [r2, #8]
    1d8a:	e7ef      	b.n	1d6c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1d8c:	3c3e      	subs	r4, #62	; 0x3e
    1d8e:	2c01      	cmp	r4, #1
    1d90:	d8fa      	bhi.n	1d88 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    1d92:	2000      	movs	r0, #0
    1d94:	bcf0      	pop	{r4, r5, r6, r7}
    1d96:	4770      	bx	lr
    1d98:	05002101 	.word	0x05002101

00001d9c <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    1d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    1da0:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    1da4:	b083      	sub	sp, #12
    1da6:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    1da8:	07dc      	lsls	r4, r3, #31
    1daa:	d574      	bpl.n	1e96 <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    1dac:	0658      	lsls	r0, r3, #25
    1dae:	460f      	mov	r7, r1
    1db0:	4690      	mov	r8, r2
    1db2:	f140 80b0 	bpl.w	1f16 <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    1db6:	e9d5 2300 	ldrd	r2, r3, [r5]
    1dba:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    1dbe:	eb18 0402 	adds.w	r4, r8, r2
    1dc2:	f143 0300 	adc.w	r3, r3, #0
    1dc6:	42a1      	cmp	r1, r4
    1dc8:	eb70 0303 	sbcs.w	r3, r0, r3
    1dcc:	f0c0 80a9 	bcc.w	1f22 <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    1dd0:	f1b8 0f00 	cmp.w	r8, #0
    1dd4:	d05b      	beq.n	1e8e <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    1dd6:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1dd8:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    1ddc:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    1de0:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1de4:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    1de8:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    1dea:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    1dee:	2c00      	cmp	r4, #0
    1df0:	d170      	bne.n	1ed4 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    1df2:	4313      	orrs	r3, r2
    1df4:	d170      	bne.n	1ed8 <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    1df6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1dfa:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    1dfc:	bf4c      	ite	mi
    1dfe:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    1e02:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    1e04:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    1e06:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    1e0a:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    1e0c:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    1e10:	0a63      	lsrs	r3, r4, #9
    1e12:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    1e14:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    1e18:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    1e1a:	f1bb 0f00 	cmp.w	fp, #0
    1e1e:	d145      	bne.n	1eac <ExFatFile::read(void*, unsigned int)+0x110>
    1e20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1e24:	d342      	bcc.n	1eac <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    1e26:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    1e2a:	4291      	cmp	r1, r2
    1e2c:	d03e      	beq.n	1eac <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    1e2e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    1e32:	d358      	bcc.n	1ee6 <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    1e34:	f04f 0b01 	mov.w	fp, #1
    1e38:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    1e3c:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    1e40:	0a73      	lsrs	r3, r6, #9
    1e42:	459b      	cmp	fp, r3
    1e44:	bf28      	it	cs
    1e46:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    1e48:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    1e4a:	ea4f 244b 	mov.w	r4, fp, lsl #9
    1e4e:	d80a      	bhi.n	1e66 <ExFatFile::read(void*, unsigned int)+0xca>
    1e50:	eb01 030b 	add.w	r3, r1, fp
    1e54:	429a      	cmp	r2, r3
    1e56:	d206      	bcs.n	1e66 <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    1e58:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1e5c:	9101      	str	r1, [sp, #4]
    1e5e:	f006 fe3d 	bl	8adc <FsCache::sync()>
    1e62:	9901      	ldr	r1, [sp, #4]
    1e64:	b1b8      	cbz	r0, 1e96 <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    1e66:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1e6a:	465b      	mov	r3, fp
    1e6c:	6802      	ldr	r2, [r0, #0]
    1e6e:	f8d2 a014 	ldr.w	sl, [r2, #20]
    1e72:	463a      	mov	r2, r7
    1e74:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    1e76:	b170      	cbz	r0, 1e96 <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    1e78:	4623      	mov	r3, r4
    dst += n;
    1e7a:	4427      	add	r7, r4
    m_curPosition += n;
    1e7c:	e9d5 1200 	ldrd	r1, r2, [r5]
    1e80:	185b      	adds	r3, r3, r1
    1e82:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    1e86:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    1e88:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    1e8c:	d1a8      	bne.n	1de0 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    1e8e:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    1e90:	b003      	add	sp, #12
    1e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    1e96:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    1e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
    1e9e:	f043 0302 	orr.w	r3, r3, #2
    1ea2:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    1ea6:	b003      	add	sp, #12
    1ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    1eac:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    1eb0:	2200      	movs	r2, #0
    1eb2:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1eb6:	42b4      	cmp	r4, r6
    1eb8:	bf28      	it	cs
    1eba:	4634      	movcs	r4, r6
    1ebc:	f006 fe3a 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    1ec0:	2800      	cmp	r0, #0
    1ec2:	d0e8      	beq.n	1e96 <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    1ec4:	eb00 010b 	add.w	r1, r0, fp
    1ec8:	4622      	mov	r2, r4
    1eca:	4638      	mov	r0, r7
    1ecc:	f007 fd3e 	bl	994c <memcpy>
    m_curPosition += n;
    1ed0:	4623      	mov	r3, r4
    1ed2:	e7d2      	b.n	1e7a <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    1ed4:	69aa      	ldr	r2, [r5, #24]
    1ed6:	e796      	b.n	1e06 <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    1ed8:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    1edc:	065b      	lsls	r3, r3, #25
    1ede:	d50e      	bpl.n	1efe <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    1ee0:	69aa      	ldr	r2, [r5, #24]
    1ee2:	3201      	adds	r2, #1
    1ee4:	e78e      	b.n	1e04 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    1ee6:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1eea:	463a      	mov	r2, r7
    1eec:	6803      	ldr	r3, [r0, #0]
    1eee:	691b      	ldr	r3, [r3, #16]
    1ef0:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    1ef2:	2800      	cmp	r0, #0
    1ef4:	d0cf      	beq.n	1e96 <ExFatFile::read(void*, unsigned int)+0xfa>
    1ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    1efa:	461c      	mov	r4, r3
    1efc:	e7bd      	b.n	1e7a <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1efe:	464a      	mov	r2, r9
    1f00:	4650      	mov	r0, sl
    1f02:	69a9      	ldr	r1, [r5, #24]
    1f04:	f001 fdb4 	bl	3a70 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    1f08:	2800      	cmp	r0, #0
    1f0a:	dbc4      	blt.n	1e96 <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    1f0c:	d00c      	beq.n	1f28 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    1f0e:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1f12:	69aa      	ldr	r2, [r5, #24]
    1f14:	e777      	b.n	1e06 <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    1f16:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1f1a:	0719      	lsls	r1, r3, #28
    1f1c:	f57f af58 	bpl.w	1dd0 <ExFatFile::read(void*, unsigned int)+0x34>
    1f20:	e749      	b.n	1db6 <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    1f22:	eba1 0802 	sub.w	r8, r1, r2
    1f26:	e753      	b.n	1dd0 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    1f28:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1f2c:	f013 0f50 	tst.w	r3, #80	; 0x50
    1f30:	d0b1      	beq.n	1e96 <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    1f32:	eba8 0806 	sub.w	r8, r8, r6
    1f36:	4640      	mov	r0, r8
    1f38:	e7aa      	b.n	1e90 <ExFatFile::read(void*, unsigned int)+0xf4>
    1f3a:	bf00      	nop

00001f3c <ExFatFile::peek()>:
int ExFatFile::peek() {
    1f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f3e:	b083      	sub	sp, #12
    return read(&b, 1) == 1 ? b : -1;
    1f40:	2201      	movs	r2, #1
    1f42:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    1f44:	6985      	ldr	r5, [r0, #24]
    1f46:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    1f4a:	e9d0 6700 	ldrd	r6, r7, [r0]
    1f4e:	f7ff ff25 	bl	1d9c <ExFatFile::read(void*, unsigned int)>
    1f52:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    1f54:	61a5      	str	r5, [r4, #24]
    1f56:	bf0c      	ite	eq
    1f58:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    1f5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    1f60:	e9c4 6700 	strd	r6, r7, [r4]
}
    1f64:	b003      	add	sp, #12
    1f66:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001f68 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    1f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f6c:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    1f6e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    1f72:	b083      	sub	sp, #12
    1f74:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    1f76:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d051      	beq.n	2022 <ExFatFile::seekSet(unsigned long long)+0xba>
    1f7e:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    1f80:	e9d0 1c00 	ldrd	r1, ip, [r0]
    1f84:	45bc      	cmp	ip, r7
    1f86:	bf08      	it	eq
    1f88:	4291      	cmpeq	r1, r2
    1f8a:	d05c      	beq.n	2046 <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    1f8c:	ea56 0207 	orrs.w	r2, r6, r7
    1f90:	d04d      	beq.n	202e <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    1f92:	071d      	lsls	r5, r3, #28
    1f94:	d504      	bpl.n	1fa0 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    1f96:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    1f9a:	42b0      	cmp	r0, r6
    1f9c:	41ba      	sbcs	r2, r7
    1f9e:	d340      	bcc.n	2022 <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    1fa0:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    1fa4:	1e75      	subs	r5, r6, #1
    1fa6:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    1faa:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    1fac:	f147 30ff 	adc.w	r0, r7, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    1fb0:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    1fb4:	3209      	adds	r2, #9
    1fb6:	b2d2      	uxtb	r2, r2
    1fb8:	f1c2 0e20 	rsb	lr, r2, #32
    1fbc:	40d5      	lsrs	r5, r2
    1fbe:	f1a2 0920 	sub.w	r9, r2, #32
    1fc2:	fa00 fb0e 	lsl.w	fp, r0, lr
    1fc6:	fa20 f009 	lsr.w	r0, r0, r9
    1fca:	ea45 050b 	orr.w	r5, r5, fp
    1fce:	4305      	orrs	r5, r0
  if (isContiguous()) {
    1fd0:	9801      	ldr	r0, [sp, #4]
    1fd2:	0640      	lsls	r0, r0, #25
    1fd4:	d433      	bmi.n	203e <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    1fd6:	1e48      	subs	r0, r1, #1
    1fd8:	fa20 f202 	lsr.w	r2, r0, r2
    1fdc:	f14c 30ff 	adc.w	r0, ip, #4294967295	; 0xffffffff
  if (nNew < nCur || m_curPosition == 0) {
    1fe0:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    1fe4:	fa00 fe0e 	lsl.w	lr, r0, lr
    1fe8:	fa20 f009 	lsr.w	r0, r0, r9
    1fec:	ea42 020e 	orr.w	r2, r2, lr
    1ff0:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    1ff4:	d001      	beq.n	1ffa <ExFatFile::seekSet(unsigned long long)+0x92>
    1ff6:	4295      	cmp	r5, r2
    1ff8:	d229      	bcs.n	204e <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    1ffa:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    1ffc:	bf4c      	ite	mi
    1ffe:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    2002:	69e3      	ldrpl	r3, [r4, #28]
    2004:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    2006:	f104 0918 	add.w	r9, r4, #24
    200a:	e006      	b.n	201a <ExFatFile::seekSet(unsigned long long)+0xb2>
    200c:	69a1      	ldr	r1, [r4, #24]
    200e:	3d01      	subs	r5, #1
    2010:	6a20      	ldr	r0, [r4, #32]
    2012:	f001 fd2d 	bl	3a70 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    2016:	2800      	cmp	r0, #0
    2018:	dd03      	ble.n	2022 <ExFatFile::seekSet(unsigned long long)+0xba>
    201a:	464a      	mov	r2, r9
  while (nNew--) {
    201c:	2d00      	cmp	r5, #0
    201e:	d1f5      	bne.n	200c <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    2020:	e007      	b.n	2032 <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    2022:	2000      	movs	r0, #0
  m_curCluster = tmp;
    2024:	f8c4 8018 	str.w	r8, [r4, #24]
}
    2028:	b003      	add	sp, #12
    202a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    202e:	2300      	movs	r3, #0
    2030:	6183      	str	r3, [r0, #24]
  return true;
    2032:	2001      	movs	r0, #1
  m_curPosition = pos;
    2034:	e9c4 6700 	strd	r6, r7, [r4]
}
    2038:	b003      	add	sp, #12
    203a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    203e:	69e3      	ldr	r3, [r4, #28]
    2040:	442b      	add	r3, r5
    2042:	61a3      	str	r3, [r4, #24]
    goto done;
    2044:	e7f5      	b.n	2032 <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    2046:	2001      	movs	r0, #1
}
    2048:	b003      	add	sp, #12
    204a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    204e:	1aad      	subs	r5, r5, r2
    2050:	e7d9      	b.n	2006 <ExFatFile::seekSet(unsigned long long)+0x9e>
    2052:	bf00      	nop

00002054 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    2054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2058:	4617      	mov	r7, r2
    205a:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    205e:	b08f      	sub	sp, #60	; 0x3c
    2060:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    2062:	2a00      	cmp	r2, #0
    2064:	f040 80d7 	bne.w	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    2068:	468b      	mov	fp, r1
    206a:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    206e:	f011 0f50 	tst.w	r1, #80	; 0x50
    2072:	f000 80d0 	beq.w	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    2076:	f003 0103 	and.w	r1, r3, #3
    207a:	469a      	mov	sl, r3
    207c:	2903      	cmp	r1, #3
    207e:	f000 80ca 	beq.w	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    2082:	3101      	adds	r1, #1
    2084:	f003 0008 	and.w	r0, r3, #8
    2088:	ea41 0300 	orr.w	r3, r1, r0
    208c:	9302      	str	r3, [sp, #8]
  if (fname) {
    208e:	2f00      	cmp	r7, #0
    2090:	f000 80cb 	beq.w	222a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    2094:	6939      	ldr	r1, [r7, #16]
    2096:	f101 080e 	add.w	r8, r1, #14
    209a:	49b6      	ldr	r1, [pc, #728]	; (2374 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    209c:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    20a0:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    20a4:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    20a8:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    20aa:	f108 0802 	add.w	r8, r8, #2
    20ae:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    20b2:	d005      	beq.n	20c0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    20b4:	2000      	movs	r0, #0
    20b6:	2100      	movs	r1, #0
    m_curCluster = 0;
    20b8:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    20bc:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    20c0:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    20c2:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    20c4:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    20c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    20ca:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    20cc:	2220      	movs	r2, #32
    20ce:	a906      	add	r1, sp, #24
    20d0:	4658      	mov	r0, fp
    20d2:	f7ff fe63 	bl	1d9c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    20d6:	b300      	cbz	r0, 211a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    20d8:	2820      	cmp	r0, #32
    20da:	f040 809c 	bne.w	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    20de:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    20e2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    20e6:	2a00      	cmp	r2, #0
    20e8:	f2c0 80a2 	blt.w	2230 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    20ec:	b934      	cbnz	r4, 20fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    20ee:	f8db 2000 	ldr.w	r2, [fp]
    20f2:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    20f6:	f8db 2018 	ldr.w	r2, [fp, #24]
    20fa:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    20fc:	4544      	cmp	r4, r8
    20fe:	d201      	bcs.n	2104 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    2100:	3401      	adds	r4, #1
    2102:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    2104:	2b00      	cmp	r3, #0
    2106:	f000 8113 	beq.w	2330 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    210a:	2220      	movs	r2, #32
    210c:	a906      	add	r1, sp, #24
    210e:	4658      	mov	r0, fp
      inSet = false;
    2110:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    2112:	f7ff fe43 	bl	1d9c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    2116:	2800      	cmp	r0, #0
    2118:	d1de      	bne.n	20d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    211a:	f41a 7f00 	tst.w	sl, #512	; 0x200
    211e:	d07a      	beq.n	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    2120:	9b02      	ldr	r3, [sp, #8]
    2122:	079b      	lsls	r3, r3, #30
    2124:	d577      	bpl.n	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    2126:	2f00      	cmp	r7, #0
    2128:	d075      	beq.n	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    212a:	4544      	cmp	r4, r8
    212c:	d217      	bcs.n	215e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    212e:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    2132:	2220      	movs	r2, #32
    2134:	a906      	add	r1, sp, #24
    2136:	4658      	mov	r0, fp
    2138:	f7ff fe30 	bl	1d9c <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    213c:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    213e:	2800      	cmp	r0, #0
    2140:	d061      	beq.n	2206 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    2142:	2820      	cmp	r0, #32
    2144:	d167      	bne.n	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    2146:	b92c      	cbnz	r4, 2154 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    2148:	f8db 2000 	ldr.w	r2, [fp]
    214c:	f8db a018 	ldr.w	sl, [fp, #24]
    2150:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    2154:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    2156:	45a0      	cmp	r8, r4
    2158:	d8eb      	bhi.n	2132 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    215a:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    215e:	2238      	movs	r2, #56	; 0x38
    2160:	2100      	movs	r1, #0
    2162:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    2164:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    2168:	f00b f9bc 	bl	d4e4 <memset>
  ExFatVolume* volume() const {return m_vol;}
    216c:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    2170:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    2174:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    2176:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    2178:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    217a:	2600      	movs	r6, #0
  m_dirPos = freePos;
    217c:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    2180:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    2184:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    2186:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    218a:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    218c:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    218e:	f1b8 0f00 	cmp.w	r8, #0
    2192:	d033      	beq.n	21fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    2194:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
    2198:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    219a:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 2378 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    219e:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    21a2:	2201      	movs	r2, #1
    21a4:	4659      	mov	r1, fp
    21a6:	4628      	mov	r0, r5
    21a8:	f7ff fd4a 	bl	1c40 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    21ac:	4604      	mov	r4, r0
    21ae:	b390      	cbz	r0, 2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    21b0:	f990 2000 	ldrsb.w	r2, [r0]
    21b4:	2a00      	cmp	r2, #0
    21b6:	db2e      	blt.n	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    21b8:	2220      	movs	r2, #32
    21ba:	2100      	movs	r1, #0
    21bc:	f00b f992 	bl	d4e4 <memset>
    if (i == 0) {
    21c0:	2e00      	cmp	r6, #0
    21c2:	f000 80bc 	beq.w	233e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    21c6:	f1bb 0f01 	cmp.w	fp, #1
    21ca:	f000 80d7 	beq.w	237c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    21ce:	23c1      	movs	r3, #193	; 0xc1
    21d0:	46a3      	mov	fp, r4
    21d2:	341e      	adds	r4, #30
    21d4:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    21d8:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    21da:	4638      	mov	r0, r7
    21dc:	b91b      	cbnz	r3, 21e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    21de:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    21e2:	429a      	cmp	r2, r3
    21e4:	d005      	beq.n	21f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    21e6:	f006 fce3 	bl	8bb0 <FsName::get16()>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    21ea:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    21ee:	45a3      	cmp	fp, r4
    21f0:	d1f2      	bne.n	21d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    21f2:	3601      	adds	r6, #1
    21f4:	fa5f fb86 	uxtb.w	fp, r6
    21f8:	45d8      	cmp	r8, fp
    21fa:	d8d2      	bhi.n	21a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    21fc:	4628      	mov	r0, r5
    21fe:	f000 fafb 	bl	27f8 <ExFatFile::sync()>
    2202:	4606      	mov	r6, r0
    2204:	e00d      	b.n	2222 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    2206:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    2208:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    220c:	f000 fb24 	bl	2858 <ExFatFile::addDirCluster()>
    2210:	2800      	cmp	r0, #0
    2212:	f040 8091 	bne.w	2338 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    2216:	2300      	movs	r3, #0
  return false;
    2218:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    221a:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    221e:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    2222:	4630      	mov	r0, r6
    2224:	b00f      	add	sp, #60	; 0x3c
    2226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    222a:	f04f 0803 	mov.w	r8, #3
    222e:	e747      	b.n	20c0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    2230:	bb56      	cbnz	r6, 2288 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    2232:	4544      	cmp	r4, r8
    2234:	bf38      	it	cc
    2236:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    2238:	2b85      	cmp	r3, #133	; 0x85
    223a:	f47f af47 	bne.w	20cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    223e:	4631      	mov	r1, r6
    2240:	2238      	movs	r2, #56	; 0x38
    2242:	4628      	mov	r0, r5
      inSet = true;
    2244:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    2246:	f00b f94d 	bl	d4e4 <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    224a:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    224e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2252:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    2256:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    225a:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    225c:	bf58      	it	pl
    225e:	f043 0308 	orrpl.w	r3, r3, #8
    2262:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    2266:	f8db 3000 	ldr.w	r3, [fp]
    226a:	f8db 2020 	ldr.w	r2, [fp, #32]
    226e:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    2270:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    2272:	f8db 2018 	ldr.w	r2, [fp, #24]
    2276:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    227a:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    227e:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    2282:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    2286:	e721      	b.n	20cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    2288:	2bc0      	cmp	r3, #192	; 0xc0
    228a:	d028      	beq.n	22de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    228c:	2bc1      	cmp	r3, #193	; 0xc1
    228e:	f47f af3c 	bne.w	210a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    2292:	463a      	mov	r2, r7
    2294:	a906      	add	r1, sp, #24
    2296:	4628      	mov	r0, r5
    2298:	f001 f9ee 	bl	3678 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    229c:	b1e8      	cbz	r0, 22da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    229e:	89bb      	ldrh	r3, [r7, #12]
    22a0:	b9db      	cbnz	r3, 22da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    22a2:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    22a6:	429a      	cmp	r2, r3
    22a8:	d117      	bne.n	22da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    22aa:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    22ae:	d1b2      	bne.n	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    22b0:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    22b4:	d170      	bne.n	2398 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    22b6:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    22ba:	0798      	lsls	r0, r3, #30
    22bc:	d46c      	bmi.n	2398 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    22be:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    22c2:	d1a8      	bne.n	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    22c4:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    22c8:	d0ab      	beq.n	2222 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    22ca:	4628      	mov	r0, r5
    22cc:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    22d0:	f7ff fe4a 	bl	1f68 <ExFatFile::seekSet(unsigned long long)>
    22d4:	2800      	cmp	r0, #0
    22d6:	d1a4      	bne.n	2222 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    22d8:	e79d      	b.n	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    22da:	4606      	mov	r6, r0
    22dc:	e6f6      	b.n	20cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    22de:	9b02      	ldr	r3, [sp, #8]
    22e0:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    22e4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    22e8:	079b      	lsls	r3, r3, #30
    22ea:	d502      	bpl.n	22f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    22ec:	9b03      	ldr	r3, [sp, #12]
    22ee:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    22f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    22f4:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    22f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    22fa:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    22fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    2302:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    2306:	2f00      	cmp	r7, #0
    2308:	d0cf      	beq.n	22aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    230a:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    230e:	693a      	ldr	r2, [r7, #16]
    2310:	81bb      	strh	r3, [r7, #12]
    next = begin;
    2312:	683b      	ldr	r3, [r7, #0]
    2314:	607b      	str	r3, [r7, #4]
    2316:	f89d 301b 	ldrb.w	r3, [sp, #27]
    231a:	429a      	cmp	r2, r3
    231c:	f47f aef5 	bne.w	210a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    2320:	8abe      	ldrh	r6, [r7, #20]
    2322:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    2326:	1af6      	subs	r6, r6, r3
    2328:	fab6 f686 	clz	r6, r6
    232c:	0976      	lsrs	r6, r6, #5
    232e:	e6cd      	b.n	20cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    2330:	2f00      	cmp	r7, #0
    2332:	f47f aef2 	bne.w	211a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    2336:	e76e      	b.n	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    2338:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    233c:	e70b      	b.n	2156 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    233e:	2385      	movs	r3, #133	; 0x85
    2340:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    2342:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    2346:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    234a:	f8da 3000 	ldr.w	r3, [sl]
    234e:	2b00      	cmp	r3, #0
    2350:	d046      	beq.n	23e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    2352:	f10d 0213 	add.w	r2, sp, #19
    2356:	f10d 0116 	add.w	r1, sp, #22
    235a:	a805      	add	r0, sp, #20
    235c:	4798      	blx	r3
    235e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    2362:	8163      	strh	r3, [r4, #10]
    2364:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    2368:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    236a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    236e:	7523      	strb	r3, [r4, #20]
    2370:	e73f      	b.n	21f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    2372:	bf00      	nop
    2374:	88888889 	.word	0x88888889
    2378:	200091b4 	.word	0x200091b4
      dirStream->type = EXFAT_TYPE_STREAM;
    237c:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    237e:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    2382:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    2384:	9b02      	ldr	r3, [sp, #8]
    2386:	f063 037f 	orn	r3, r3, #127	; 0x7f
    238a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    238e:	693b      	ldr	r3, [r7, #16]
    2390:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    2392:	8abb      	ldrh	r3, [r7, #20]
    2394:	80a3      	strh	r3, [r4, #4]
}
    2396:	e72c      	b.n	21f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    2398:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    239c:	06d9      	lsls	r1, r3, #27
    239e:	f53f af3a 	bmi.w	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    23a2:	f013 0101 	ands.w	r1, r3, #1
    23a6:	f47f af36 	bne.w	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    23aa:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    23ae:	d089      	beq.n	22c4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    23b0:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    23b4:	0792      	lsls	r2, r2, #30
    23b6:	f57f af2e 	bpl.w	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    23ba:	2b00      	cmp	r3, #0
    23bc:	f43f af2b 	beq.w	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    23c0:	e9d5 3200 	ldrd	r3, r2, [r5]
    23c4:	4313      	orrs	r3, r2
    23c6:	d004      	beq.n	23d2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    23c8:	2200      	movs	r2, #0
    23ca:	2300      	movs	r3, #0
    m_curCluster = 0;
    23cc:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    23ce:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    23d2:	4628      	mov	r0, r5
    23d4:	f000 fc42 	bl	2c5c <ExFatFile::truncate()>
    23d8:	2800      	cmp	r0, #0
    23da:	f43f af1c 	beq.w	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    23de:	e720      	b.n	2222 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    23e0:	f645 0321 	movw	r3, #22561	; 0x5821
    23e4:	8163      	strh	r3, [r4, #10]
    23e6:	81e3      	strh	r3, [r4, #14]
    23e8:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    23ea:	e702      	b.n	21f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

000023ec <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    23ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    23f0:	2500      	movs	r5, #0
    23f2:	b097      	sub	sp, #92	; 0x5c
    23f4:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    23f6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    23fa:	9201      	str	r2, [sp, #4]
    23fc:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    23fe:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    2402:	2b00      	cmp	r3, #0
    2404:	d13e      	bne.n	2484 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    2406:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    240a:	460f      	mov	r7, r1
    240c:	f013 0f50 	tst.w	r3, #80	; 0x50
    2410:	d038      	beq.n	2484 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    2412:	7813      	ldrb	r3, [r2, #0]
    2414:	4604      	mov	r4, r0
    2416:	4616      	mov	r6, r2
    2418:	2b2f      	cmp	r3, #47	; 0x2f
    241a:	d037      	beq.n	248c <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    241c:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    2420:	ab01      	add	r3, sp, #4
    2422:	aa02      	add	r2, sp, #8
    2424:	4631      	mov	r1, r6
    2426:	4620      	mov	r0, r4
    2428:	f7ff fc6a 	bl	1d00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    242c:	b350      	cbz	r0, 2484 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    242e:	9e01      	ldr	r6, [sp, #4]
    2430:	7833      	ldrb	r3, [r6, #0]
    2432:	2b00      	cmp	r3, #0
    2434:	d03e      	beq.n	24b4 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    2436:	2300      	movs	r3, #0
    2438:	aa02      	add	r2, sp, #8
    243a:	4639      	mov	r1, r7
    243c:	4620      	mov	r0, r4
    243e:	f7ff fe09 	bl	2054 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    2442:	b1f8      	cbz	r0, 2484 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    2444:	46a4      	mov	ip, r4
    2446:	ad08      	add	r5, sp, #32
    2448:	f104 0730 	add.w	r7, r4, #48	; 0x30
    244c:	f8dc 0000 	ldr.w	r0, [ip]
    2450:	f10c 0c10 	add.w	ip, ip, #16
    2454:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    2458:	46ae      	mov	lr, r5
    245a:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    245e:	3510      	adds	r5, #16
    2460:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    2464:	45bc      	cmp	ip, r7
    2466:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    246a:	d1ef      	bne.n	244c <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    246c:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    2470:	af08      	add	r7, sp, #32
    tmpDir = *this;
    2472:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    2474:	4620      	mov	r0, r4
    2476:	f000 f9bf 	bl	27f8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    247a:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    247e:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    2482:	e7cd      	b.n	2420 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    2484:	2000      	movs	r0, #0
}
    2486:	b017      	add	sp, #92	; 0x5c
    2488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    248c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    2490:	292f      	cmp	r1, #47	; 0x2f
    2492:	d0fb      	beq.n	248c <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    2494:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    2496:	b9b1      	cbnz	r1, 24c6 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    2498:	2238      	movs	r2, #56	; 0x38
    249a:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    249c:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    249e:	f00b f821 	bl	d4e4 <memset>
  m_flags = FILE_FLAG_READ;
    24a2:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    24a4:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    24a6:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    24a8:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    24aa:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    24ae:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    24b2:	e7e8      	b.n	2486 <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    24b4:	464b      	mov	r3, r9
    24b6:	aa02      	add	r2, sp, #8
    24b8:	4639      	mov	r1, r7
    24ba:	4620      	mov	r0, r4
    24bc:	f7ff fdca 	bl	2054 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    24c0:	b017      	add	sp, #92	; 0x5c
    24c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    24c6:	2238      	movs	r2, #56	; 0x38
    24c8:	2100      	movs	r1, #0
    24ca:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    24cc:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    24ce:	f00b f809 	bl	d4e4 <memset>
  m_flags = FILE_FLAG_READ;
    24d2:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    24d4:	af08      	add	r7, sp, #32
  m_vol = vol;
    24d6:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    24d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    24dc:	2340      	movs	r3, #64	; 0x40
    24de:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    24e2:	e79b      	b.n	241c <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

000024e4 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    24e4:	b119      	cbz	r1, 24ee <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    24e6:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    24ea:	f7ff bf7f 	b.w	23ec <ExFatFile::open(ExFatFile*, char const*, int)>
}
    24ee:	4608      	mov	r0, r1
    24f0:	4770      	bx	lr
    24f2:	bf00      	nop

000024f4 <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    24f4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    24f8:	b963      	cbnz	r3, 2514 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    24fa:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    24fe:	f013 0f50 	tst.w	r3, #80	; 0x50
    2502:	d007      	beq.n	2514 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    2504:	680b      	ldr	r3, [r1, #0]
    2506:	f013 0c1f 	ands.w	ip, r3, #31
    250a:	d103      	bne.n	2514 <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    250c:	4613      	mov	r3, r2
    250e:	4662      	mov	r2, ip
    2510:	f7ff bda0 	b.w	2054 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    2514:	2000      	movs	r0, #0
    2516:	4770      	bx	lr

00002518 <ExFatFile::addCluster()>:
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    2518:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    251a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    251c:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    251e:	6a00      	ldr	r0, [r0, #32]
    2520:	b101      	cbz	r1, 2524 <ExFatFile::addCluster()+0xc>
    2522:	3101      	adds	r1, #1
    2524:	2201      	movs	r2, #1
    2526:	f001 f969 	bl	37fc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    252a:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    252c:	4605      	mov	r5, r0
  if (find < 2) {
    252e:	d932      	bls.n	2596 <ExFatFile::addCluster()+0x7e>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    2530:	2301      	movs	r3, #1
    2532:	4601      	mov	r1, r0
    2534:	6a20      	ldr	r0, [r4, #32]
    2536:	461a      	mov	r2, r3
    2538:	f001 f9c0 	bl	38bc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    253c:	4606      	mov	r6, r0
    253e:	b350      	cbz	r0, 2596 <ExFatFile::addCluster()+0x7e>
  if (m_curCluster == 0) {
    2540:	69a3      	ldr	r3, [r4, #24]
    2542:	b35b      	cbz	r3, 259c <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    2544:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    2548:	0651      	lsls	r1, r2, #25
    254a:	d512      	bpl.n	2572 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    254c:	1c59      	adds	r1, r3, #1
    254e:	42a9      	cmp	r1, r5
    2550:	d018      	beq.n	2584 <ExFatFile::addCluster()+0x6c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2556:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2558:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    255c:	e005      	b.n	256a <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    255e:	6a20      	ldr	r0, [r4, #32]
    2560:	f001 faa8 	bl	3ab4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2564:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    2566:	b1b0      	cbz	r0, 2596 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2568:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    256a:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    256c:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    256e:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2570:	d3f5      	bcc.n	255e <ExFatFile::addCluster()+0x46>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    2572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2576:	4629      	mov	r1, r5
    2578:	6a20      	ldr	r0, [r4, #32]
    257a:	f001 fa9b 	bl	3ab4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    257e:	b150      	cbz	r0, 2596 <ExFatFile::addCluster()+0x7e>
  if (m_curCluster) {
    2580:	69a1      	ldr	r1, [r4, #24]
    2582:	b911      	cbnz	r1, 258a <ExFatFile::addCluster()+0x72>
}
    2584:	4630      	mov	r0, r6
  m_curCluster = find;
    2586:	61a5      	str	r5, [r4, #24]
}
    2588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    258a:	462a      	mov	r2, r5
    258c:	6a20      	ldr	r0, [r4, #32]
    258e:	f001 fa91 	bl	3ab4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2592:	2800      	cmp	r0, #0
    2594:	d1f6      	bne.n	2584 <ExFatFile::addCluster()+0x6c>
  return false;
    2596:	2600      	movs	r6, #0
}
    2598:	4630      	mov	r0, r6
    259a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    259c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    25a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    25a4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    25a8:	e7ec      	b.n	2584 <ExFatFile::addCluster()+0x6c>
    25aa:	bf00      	nop

000025ac <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    25ac:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    25b0:	079a      	lsls	r2, r3, #30
    25b2:	d536      	bpl.n	2622 <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    25b4:	69c1      	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    25b6:	b570      	push	{r4, r5, r6, lr}
    25b8:	4605      	mov	r5, r0
  if (m_firstCluster) {
    25ba:	b9a1      	cbnz	r1, 25e6 <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    25bc:	2400      	movs	r4, #0
    25be:	4621      	mov	r1, r4
    25c0:	e007      	b.n	25d2 <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    25c2:	7803      	ldrb	r3, [r0, #0]
    25c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    25c8:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    25ca:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    25ce:	428b      	cmp	r3, r1
    25d0:	d329      	bcc.n	2626 <ExFatFile::remove()+0x7a>
    25d2:	3401      	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    25d4:	2201      	movs	r2, #1
    25d6:	4628      	mov	r0, r5
    25d8:	f7ff fb32 	bl	1c40 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    25dc:	b2e1      	uxtb	r1, r4
    if (!cache) {
    25de:	2800      	cmp	r0, #0
    25e0:	d1ef      	bne.n	25c2 <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    25e2:	2000      	movs	r0, #0
    25e4:	bd70      	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    25e6:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    25e8:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
    25ea:	d534      	bpl.n	2656 <ExFatFile::remove()+0xaa>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    25ec:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    25f0:	e9d5 2402 	ldrd	r2, r4, [r5, #8]
    25f4:	3309      	adds	r3, #9
    25f6:	3a01      	subs	r2, #1
    25f8:	b2db      	uxtb	r3, r3
    25fa:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
    25fe:	f1c3 0c20 	rsb	ip, r3, #32
    2602:	40da      	lsrs	r2, r3
    2604:	3b20      	subs	r3, #32
    2606:	fa04 fc0c 	lsl.w	ip, r4, ip
    260a:	fa24 f303 	lsr.w	r3, r4, r3
    260e:	ea42 020c 	orr.w	r2, r2, ip
    2612:	431a      	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    2614:	2300      	movs	r3, #0
    2616:	3201      	adds	r2, #1
    2618:	f001 f950 	bl	38bc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    261c:	2800      	cmp	r0, #0
    261e:	d1cd      	bne.n	25bc <ExFatFile::remove()+0x10>
    2620:	e7df      	b.n	25e2 <ExFatFile::remove()+0x36>
}
    2622:	2000      	movs	r0, #0
    2624:	4770      	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    2626:	2300      	movs	r3, #0
  return m_vol->cacheSync();
    2628:	6a2c      	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    262a:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    262e:	4620      	mov	r0, r4
  m_flags = 0;
    2630:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    2634:	f006 fa52 	bl	8adc <FsCache::sync()>
    2638:	2800      	cmp	r0, #0
    263a:	d0d2      	beq.n	25e2 <ExFatFile::remove()+0x36>
    263c:	f504 7004 	add.w	r0, r4, #528	; 0x210
    2640:	f006 fa4c 	bl	8adc <FsCache::sync()>
    2644:	2800      	cmp	r0, #0
    2646:	d0cc      	beq.n	25e2 <ExFatFile::remove()+0x36>
    2648:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    264c:	6803      	ldr	r3, [r0, #0]
}
    264e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2652:	6a1b      	ldr	r3, [r3, #32]
    2654:	4718      	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    2656:	f001 fa4d 	bl	3af4 <ExFatPartition::freeChain(unsigned long)>
    265a:	2800      	cmp	r0, #0
    265c:	d1ae      	bne.n	25bc <ExFatFile::remove()+0x10>
    265e:	e7c0      	b.n	25e2 <ExFatFile::remove()+0x36>

00002660 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    2660:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    2664:	06db      	lsls	r3, r3, #27
    2666:	d401      	bmi.n	266c <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    2668:	2000      	movs	r0, #0
}
    266a:	4770      	bx	lr
bool ExFatFile::rmdir() {
    266c:	b510      	push	{r4, lr}
    seekSet(0);
    266e:	2200      	movs	r2, #0
    2670:	b088      	sub	sp, #32
    2672:	2300      	movs	r3, #0
    2674:	4604      	mov	r4, r0
    2676:	f7ff fc77 	bl	1f68 <ExFatFile::seekSet(unsigned long long)>
  }
    267a:	e008      	b.n	268e <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    267c:	2820      	cmp	r0, #32
    267e:	d11b      	bne.n	26b8 <ExFatFile::rmdir()+0x58>
    2680:	f99d 3000 	ldrsb.w	r3, [sp]
    2684:	f89d 2000 	ldrb.w	r2, [sp]
    2688:	2b00      	cmp	r3, #0
    268a:	db15      	blt.n	26b8 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    268c:	b132      	cbz	r2, 269c <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    268e:	2220      	movs	r2, #32
    2690:	4669      	mov	r1, sp
    2692:	4620      	mov	r0, r4
    2694:	f7ff fb82 	bl	1d9c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    2698:	2800      	cmp	r0, #0
    269a:	d1ef      	bne.n	267c <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    269c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    26a0:	2208      	movs	r2, #8
  return remove();
    26a2:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    26a4:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    26a8:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    26ac:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    26b0:	f7ff ff7c 	bl	25ac <ExFatFile::remove()>
}
    26b4:	b008      	add	sp, #32
    26b6:	bd10      	pop	{r4, pc}
  return false;
    26b8:	2000      	movs	r0, #0
}
    26ba:	b008      	add	sp, #32
    26bc:	bd10      	pop	{r4, pc}
    26be:	bf00      	nop

000026c0 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    26c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    26c4:	f04f 0800 	mov.w	r8, #0
    26c8:	b082      	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    26ca:	4f4a      	ldr	r7, [pc, #296]	; (27f4 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    26cc:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    26ce:	4644      	mov	r4, r8
    26d0:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    26d2:	2200      	movs	r2, #0
    26d4:	4630      	mov	r0, r6
    26d6:	f7ff fab3 	bl	1c40 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    26da:	4605      	mov	r5, r0
    26dc:	b130      	cbz	r0, 26ec <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    26de:	7801      	ldrb	r1, [r0, #0]
    26e0:	29c0      	cmp	r1, #192	; 0xc0
    26e2:	d069      	beq.n	27b8 <ExFatFile::syncDir()+0xf8>
    26e4:	29c1      	cmp	r1, #193	; 0xc1
    26e6:	d02b      	beq.n	2740 <ExFatFile::syncDir()+0x80>
    26e8:	2985      	cmp	r1, #133	; 0x85
    26ea:	d009      	beq.n	2700 <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    26ec:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    26f0:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    26f2:	f043 0301 	orr.w	r3, r3, #1
    26f6:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    26fa:	b002      	add	sp, #8
    26fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    2700:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    2704:	f003 0337 	and.w	r3, r3, #55	; 0x37
    2708:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    270a:	683b      	ldr	r3, [r7, #0]
    270c:	b183      	cbz	r3, 2730 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    270e:	f10d 0203 	add.w	r2, sp, #3
    2712:	f10d 0106 	add.w	r1, sp, #6
    2716:	a801      	add	r0, sp, #4
    2718:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    271a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    271e:	81ab      	strh	r3, [r5, #12]
    2720:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    2722:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    2726:	81eb      	strh	r3, [r5, #14]
    2728:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    272a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    272e:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    2730:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    2732:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    2736:	f043 0301 	orr.w	r3, r3, #1
    273a:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    273e:	7829      	ldrb	r1, [r5, #0]
    2740:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2744:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2746:	fab0 f080 	clz	r0, r0
    274a:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    274c:	e001      	b.n	2752 <ExFatFile::syncDir()+0x92>
    274e:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2750:	5ca9      	ldrb	r1, [r5, r2]
    2752:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2754:	2a01      	cmp	r2, #1
    2756:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    275a:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    275e:	fa11 f383 	uxtah	r3, r1, r3
    2762:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2764:	d101      	bne.n	276a <ExFatFile::syncDir()+0xaa>
    2766:	2800      	cmp	r0, #0
    2768:	d1f1      	bne.n	274e <ExFatFile::syncDir()+0x8e>
    276a:	2a1f      	cmp	r2, #31
    276c:	d9f0      	bls.n	2750 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    276e:	f108 0801 	add.w	r8, r8, #1
    2772:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    2776:	fa5f f188 	uxtb.w	r1, r8
    277a:	428b      	cmp	r3, r1
    277c:	d2a9      	bcs.n	26d2 <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    277e:	2201      	movs	r2, #1
    2780:	f106 0124 	add.w	r1, r6, #36	; 0x24
    2784:	6a30      	ldr	r0, [r6, #32]
    2786:	f001 f915 	bl	39b4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    278a:	2800      	cmp	r0, #0
    278c:	d0ae      	beq.n	26ec <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    278e:	6a35      	ldr	r5, [r6, #32]
    2790:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2792:	4628      	mov	r0, r5
    2794:	f006 f9a2 	bl	8adc <FsCache::sync()>
    2798:	2800      	cmp	r0, #0
    279a:	d0a7      	beq.n	26ec <ExFatFile::syncDir()+0x2c>
    279c:	f505 7004 	add.w	r0, r5, #528	; 0x210
    27a0:	f006 f99c 	bl	8adc <FsCache::sync()>
    27a4:	2800      	cmp	r0, #0
    27a6:	d0a1      	beq.n	26ec <ExFatFile::syncDir()+0x2c>
    27a8:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    27ac:	6803      	ldr	r3, [r0, #0]
    27ae:	6a1b      	ldr	r3, [r3, #32]
    27b0:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    27b2:	2800      	cmp	r0, #0
    27b4:	d1a1      	bne.n	26fa <ExFatFile::syncDir()+0x3a>
    27b6:	e799      	b.n	26ec <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    27b8:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    27bc:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    27c0:	7843      	ldrb	r3, [r0, #1]
    27c2:	bf14      	ite	ne
    27c4:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    27c8:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    27cc:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    27ce:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    27d2:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    27d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    27da:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    27de:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    27e0:	e9c5 0106 	strd	r0, r1, [r5, #24]
    27e4:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    27e8:	f043 0301 	orr.w	r3, r3, #1
    27ec:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    27f0:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    27f2:	e7a5      	b.n	2740 <ExFatFile::syncDir()+0x80>
    27f4:	200091b4 	.word	0x200091b4

000027f8 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    27f8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    27fa:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    27fe:	b343      	cbz	r3, 2852 <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    2800:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    2804:	4604      	mov	r4, r0
    2806:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    280a:	2a00      	cmp	r2, #0
    280c:	db0c      	blt.n	2828 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    280e:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2810:	4628      	mov	r0, r5
    2812:	f006 f963 	bl	8adc <FsCache::sync()>
    2816:	b978      	cbnz	r0, 2838 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    2818:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    281c:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    281e:	f043 0301 	orr.w	r3, r3, #1
    2822:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    2826:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    2828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    282c:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    2830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    2834:	f7ff bf44 	b.w	26c0 <ExFatFile::syncDir()>
    2838:	f505 7004 	add.w	r0, r5, #528	; 0x210
    283c:	f006 f94e 	bl	8adc <FsCache::sync()>
    2840:	2800      	cmp	r0, #0
    2842:	d0e9      	beq.n	2818 <ExFatFile::sync()+0x20>
    2844:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    2848:	6803      	ldr	r3, [r0, #0]
    284a:	6a1b      	ldr	r3, [r3, #32]
    284c:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    284e:	2800      	cmp	r0, #0
    2850:	d0e2      	beq.n	2818 <ExFatFile::sync()+0x20>
    return true;
    2852:	2001      	movs	r0, #1
}
    2854:	bd38      	pop	{r3, r4, r5, pc}
    2856:	bf00      	nop

00002858 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    2858:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    285a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    285e:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    2860:	065a      	lsls	r2, r3, #25
    2862:	d44c      	bmi.n	28fe <ExFatFile::addDirCluster()+0xa6>
    2864:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    2866:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    2868:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    286c:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    286e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    2872:	d301      	bcc.n	2878 <ExFatFile::addDirCluster()+0x20>
}
    2874:	2000      	movs	r0, #0
    2876:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    2878:	4628      	mov	r0, r5
    287a:	f7ff fe4d 	bl	2518 <ExFatFile::addCluster()>
    287e:	2800      	cmp	r0, #0
    2880:	d0f8      	beq.n	2874 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    2882:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    2884:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    2886:	69ae      	ldr	r6, [r5, #24]
    2888:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    288c:	3e02      	subs	r6, #2
    288e:	409e      	lsls	r6, r3
    2890:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2894:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    2896:	1931      	adds	r1, r6, r4
    2898:	2205      	movs	r2, #5
    289a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    289e:	3401      	adds	r4, #1
    28a0:	f006 f948 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    28a4:	f44f 7200 	mov.w	r2, #512	; 0x200
    28a8:	2100      	movs	r1, #0
    if (!cache) {
    28aa:	2800      	cmp	r0, #0
    28ac:	d0e2      	beq.n	2874 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    28ae:	f00a fe19 	bl	d4e4 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    28b2:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    28b4:	2301      	movs	r3, #1
    28b6:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    28ba:	4093      	lsls	r3, r2
    28bc:	429c      	cmp	r4, r3
    28be:	d3ea      	bcc.n	2896 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    28c0:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    28c4:	065b      	lsls	r3, r3, #25
    28c6:	d415      	bmi.n	28f4 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    28c8:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    28cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    28d0:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    28d4:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    28d8:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    28dc:	189b      	adds	r3, r3, r2
    28de:	f141 0000 	adc.w	r0, r1, #0
    28e2:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    28e4:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    28e8:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    28ea:	189b      	adds	r3, r3, r2
    28ec:	f141 0100 	adc.w	r1, r1, #0
    28f0:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    28f4:	4628      	mov	r0, r5
}
    28f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    28fa:	f7ff bf7d 	b.w	27f8 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    28fe:	6a00      	ldr	r0, [r0, #32]
    2900:	f001 f9fe 	bl	3d00 <ExFatPartition::rootLength()>
    2904:	e7af      	b.n	2866 <ExFatFile::addDirCluster()+0xe>
    2906:	bf00      	nop

00002908 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    2908:	b570      	push	{r4, r5, r6, lr}
    290a:	4604      	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    290c:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    2910:	b09c      	sub	sp, #112	; 0x70
  ExFatFile() {}
    2912:	2300      	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    2914:	f010 0f18 	tst.w	r0, #24
    2918:	930c      	str	r3, [sp, #48]	; 0x30
    291a:	931a      	str	r3, [sp, #104]	; 0x68
    291c:	d003      	beq.n	2926 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    291e:	6a20      	ldr	r0, [r4, #32]
    2920:	6a0b      	ldr	r3, [r1, #32]
    2922:	4298      	cmp	r0, r3
    2924:	d002      	beq.n	292c <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    2926:	2000      	movs	r0, #0
}
    2928:	b01c      	add	sp, #112	; 0x70
    292a:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    292c:	f640 2301 	movw	r3, #2561	; 0xa01
    2930:	4668      	mov	r0, sp
    2932:	f7ff fd5b 	bl	23ec <ExFatFile::open(ExFatFile*, char const*, int)>
    2936:	2800      	cmp	r0, #0
    2938:	d0f5      	beq.n	2926 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    293a:	46a4      	mov	ip, r4
    293c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2940:	ad0e      	add	r5, sp, #56	; 0x38
    2942:	f8dc 0000 	ldr.w	r0, [ip]
    2946:	f10c 0c10 	add.w	ip, ip, #16
    294a:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    294e:	46ae      	mov	lr, r5
    2950:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    2954:	3510      	adds	r5, #16
    2956:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    295a:	45b4      	cmp	ip, r6
    295c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2960:	d1ef      	bne.n	2942 <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    2962:	f8dc 0000 	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    2966:	aa09      	add	r2, sp, #36	; 0x24
    2968:	f104 0324 	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    296c:	6028      	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    296e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    2972:	ca07      	ldmia	r2, {r0, r1, r2}
    2974:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2978:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    297c:	4620      	mov	r0, r4
  m_setCount = file.m_setCount;
    297e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2982:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2986:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    298a:	f7ff ff35 	bl	27f8 <ExFatFile::sync()>
    298e:	2800      	cmp	r0, #0
    2990:	d0c9      	beq.n	2926 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    2992:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    2994:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    2996:	2308      	movs	r3, #8
  return oldFile.remove();
    2998:	a80e      	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    299a:	9115      	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    299c:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    29a0:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    29a4:	f7ff fe02 	bl	25ac <ExFatFile::remove()>
    29a8:	e7be      	b.n	2928 <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    29aa:	bf00      	nop

000029ac <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    29ac:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    29ae:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    29b2:	f013 0f50 	tst.w	r3, #80	; 0x50
    29b6:	d102      	bne.n	29be <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    29b8:	2500      	movs	r5, #0
}
    29ba:	4628      	mov	r0, r5
    29bc:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    29be:	f640 2302 	movw	r3, #2562	; 0xa02
    29c2:	4604      	mov	r4, r0
    29c4:	f7ff fb46 	bl	2054 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    29c8:	2800      	cmp	r0, #0
    29ca:	d0f5      	beq.n	29b8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    29cc:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    29ce:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    29d0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    29d4:	f7ff ff40 	bl	2858 <ExFatFile::addDirCluster()>
    29d8:	4605      	mov	r5, r0
    29da:	2800      	cmp	r0, #0
    29dc:	d0ec      	beq.n	29b8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    29de:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    29e0:	2200      	movs	r2, #0
    29e2:	2300      	movs	r3, #0
    29e4:	4620      	mov	r0, r4
    29e6:	61e1      	str	r1, [r4, #28]
    29e8:	f7ff fabe 	bl	1f68 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    29ec:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    29ee:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    29f2:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    29f6:	2b00      	cmp	r3, #0
    29f8:	d0df      	beq.n	29ba <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    29fa:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    29fc:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    29fe:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    2a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    2a06:	f7ff be5b 	b.w	26c0 <ExFatFile::syncDir()>
    2a0a:	bf00      	nop

00002a0c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    2a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a0e:	2500      	movs	r5, #0
    2a10:	b097      	sub	sp, #92	; 0x5c
    2a12:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    2a14:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    2a18:	9201      	str	r2, [sp, #4]
    2a1a:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    2a1e:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    2a20:	2b00      	cmp	r3, #0
    2a22:	d146      	bne.n	2ab2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    2a24:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    2a28:	460e      	mov	r6, r1
    2a2a:	f013 0f50 	tst.w	r3, #80	; 0x50
    2a2e:	d040      	beq.n	2ab2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    2a30:	7813      	ldrb	r3, [r2, #0]
    2a32:	4604      	mov	r4, r0
    2a34:	4611      	mov	r1, r2
    2a36:	2b2f      	cmp	r3, #47	; 0x2f
    2a38:	d03e      	beq.n	2ab8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    2a3a:	ab01      	add	r3, sp, #4
    2a3c:	aa02      	add	r2, sp, #8
    2a3e:	4620      	mov	r0, r4
    2a40:	f7ff f95e 	bl	1d00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2a44:	2800      	cmp	r0, #0
    2a46:	d034      	beq.n	2ab2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    2a48:	9b01      	ldr	r3, [sp, #4]
    2a4a:	781b      	ldrb	r3, [r3, #0]
    2a4c:	2b00      	cmp	r3, #0
    2a4e:	d041      	beq.n	2ad4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    2a50:	2300      	movs	r3, #0
    2a52:	aa02      	add	r2, sp, #8
    2a54:	4631      	mov	r1, r6
    2a56:	4620      	mov	r0, r4
    2a58:	f7ff fafc 	bl	2054 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    2a5c:	b930      	cbnz	r0, 2a6c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    2a5e:	b347      	cbz	r7, 2ab2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    2a60:	aa02      	add	r2, sp, #8
    2a62:	4631      	mov	r1, r6
    2a64:	4620      	mov	r0, r4
    2a66:	f7ff ffa1 	bl	29ac <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    2a6a:	b310      	cbz	r0, 2ab2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    2a6c:	46a4      	mov	ip, r4
    2a6e:	ad08      	add	r5, sp, #32
    2a70:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2a74:	f8dc 0000 	ldr.w	r0, [ip]
    2a78:	f10c 0c10 	add.w	ip, ip, #16
    2a7c:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    2a80:	46ae      	mov	lr, r5
    2a82:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    2a86:	3510      	adds	r5, #16
    2a88:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    2a8c:	45b4      	cmp	ip, r6
    2a8e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2a92:	d1ef      	bne.n	2a74 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    2a94:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    2a98:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    2a9a:	6028      	str	r0, [r5, #0]
    close();
    2a9c:	4620      	mov	r0, r4
    2a9e:	f7ff f8ed 	bl	1c7c <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    2aa2:	9901      	ldr	r1, [sp, #4]
    2aa4:	ab01      	add	r3, sp, #4
    2aa6:	aa02      	add	r2, sp, #8
    2aa8:	4620      	mov	r0, r4
    2aaa:	f7ff f929 	bl	1d00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2aae:	2800      	cmp	r0, #0
    2ab0:	d1ca      	bne.n	2a48 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    2ab2:	2000      	movs	r0, #0
}
    2ab4:	b017      	add	sp, #92	; 0x5c
    2ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    2ab8:	3101      	adds	r1, #1
    2aba:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    2abc:	780b      	ldrb	r3, [r1, #0]
    2abe:	2b2f      	cmp	r3, #47	; 0x2f
    2ac0:	d0fa      	beq.n	2ab8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    2ac2:	6a31      	ldr	r1, [r6, #32]
    2ac4:	a808      	add	r0, sp, #32
    2ac6:	f7ff f907 	bl	1cd8 <ExFatFile::openRoot(ExFatVolume*)>
    2aca:	2800      	cmp	r0, #0
    2acc:	d0f1      	beq.n	2ab2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    2ace:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    2ad0:	ae08      	add	r6, sp, #32
    2ad2:	e7b2      	b.n	2a3a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    2ad4:	aa02      	add	r2, sp, #8
    2ad6:	4631      	mov	r1, r6
    2ad8:	4620      	mov	r0, r4
    2ada:	f7ff ff67 	bl	29ac <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    2ade:	b017      	add	sp, #92	; 0x5c
    2ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ae2:	bf00      	nop

00002ae4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    2ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ae8:	460e      	mov	r6, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    2aea:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    2aee:	b083      	sub	sp, #12
      || second > 59) {
    2af0:	0709      	lsls	r1, r1, #28
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    2af2:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    2af6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
    2afa:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    2afe:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
      || second > 59) {
    2b02:	f140 8085 	bpl.w	2c10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || year > 2107
    2b06:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    2b0a:	b294      	uxth	r4, r2
    2b0c:	2c7f      	cmp	r4, #127	; 0x7f
    2b0e:	d87f      	bhi.n	2c10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || month > 12
    2b10:	1e5a      	subs	r2, r3, #1
    2b12:	2a0b      	cmp	r2, #11
    2b14:	d87c      	bhi.n	2c10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || day > 31
    2b16:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    2b1a:	2a1e      	cmp	r2, #30
    2b1c:	d878      	bhi.n	2c10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || minute > 59
    2b1e:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    2b22:	bf98      	it	ls
    2b24:	f1b9 0f17 	cmpls.w	r9, #23
    2b28:	bf8c      	ite	hi
    2b2a:	f04f 0a01 	movhi.w	sl, #1
    2b2e:	f04f 0a00 	movls.w	sl, #0
    2b32:	2f3b      	cmp	r7, #59	; 0x3b
    2b34:	bf88      	it	hi
    2b36:	f04a 0a01 	orrhi.w	sl, sl, #1
      || second > 59) {
    2b3a:	f1ba 0f00 	cmp.w	sl, #0
    2b3e:	d167      	bne.n	2c10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    2b40:	4605      	mov	r5, r0
    2b42:	9301      	str	r3, [sp, #4]
    2b44:	f7ff fe58 	bl	27f8 <ExFatFile::sync()>
    2b48:	2800      	cmp	r0, #0
    2b4a:	d061      	beq.n	2c10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    2b4c:	9b01      	ldr	r3, [sp, #4]
    2b4e:	4651      	mov	r1, sl
    2b50:	ea4b 1b43 	orr.w	fp, fp, r3, lsl #5
         hour << 11 | minute << 5 | second >> 1;
    2b54:	087b      	lsrs	r3, r7, #1
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    2b56:	f017 0701 	ands.w	r7, r7, #1
         year << 9 | month << 5 | day;
    2b5a:	ea4b 2444 	orr.w	r4, fp, r4, lsl #9
  uint16_t checksum = 0;
    2b5e:	46d3      	mov	fp, sl
         hour << 11 | minute << 5 | second >> 1;
    2b60:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
  ms10 = second & 1 ? 100 : 0;
    2b64:	bf18      	it	ne
    2b66:	2764      	movne	r7, #100	; 0x64
         year << 9 | month << 5 | day;
    2b68:	b2a4      	uxth	r4, r4
         hour << 11 | minute << 5 | second >> 1;
    2b6a:	ea48 28c9 	orr.w	r8, r8, r9, lsl #11
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    2b6e:	f006 0901 	and.w	r9, r6, #1
    2b72:	fa1f f888 	uxth.w	r8, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    2b76:	2200      	movs	r2, #0
    2b78:	4628      	mov	r0, r5
    2b7a:	f7ff f861 	bl	1c40 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    2b7e:	2800      	cmp	r0, #0
    2b80:	d046      	beq.n	2c10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    switch (cache[0]) {
    2b82:	f890 c000 	ldrb.w	ip, [r0]
    2b86:	f1bc 0f85 	cmp.w	ip, #133	; 0x85
    2b8a:	d045      	beq.n	2c18 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    2b8c:	f10c 0340 	add.w	r3, ip, #64	; 0x40
    2b90:	b2db      	uxtb	r3, r3
    2b92:	2b01      	cmp	r3, #1
    2b94:	d83c      	bhi.n	2c10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2b96:	f1ac 0185 	sub.w	r1, ip, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2b9a:	2300      	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2b9c:	fab1 f181 	clz	r1, r1
    2ba0:	0949      	lsrs	r1, r1, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2ba2:	e002      	b.n	2baa <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc6>
    2ba4:	2304      	movs	r3, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2ba6:	f810 c003 	ldrb.w	ip, [r0, r3]
    2baa:	ea4f 32cb 	mov.w	r2, fp, lsl #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2bae:	2b01      	cmp	r3, #1
    2bb0:	f103 0301 	add.w	r3, r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2bb4:	ea42 025b 	orr.w	r2, r2, fp, lsr #1
    2bb8:	fa1c f282 	uxtah	r2, ip, r2
    2bbc:	fa1f fb82 	uxth.w	fp, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2bc0:	d101      	bne.n	2bc6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe2>
    2bc2:	2900      	cmp	r1, #0
    2bc4:	d1ee      	bne.n	2ba4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
    2bc6:	2b1f      	cmp	r3, #31
    2bc8:	d9ed      	bls.n	2ba6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    2bca:	f10a 0a01 	add.w	sl, sl, #1
    2bce:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    2bd2:	fa5f f18a 	uxtb.w	r1, sl
    2bd6:	428b      	cmp	r3, r1
    2bd8:	d2cd      	bcs.n	2b76 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x92>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    2bda:	2201      	movs	r2, #1
    2bdc:	f105 0124 	add.w	r1, r5, #36	; 0x24
    2be0:	6a28      	ldr	r0, [r5, #32]
    2be2:	f000 fee7 	bl	39b4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    2be6:	b198      	cbz	r0, 2c10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    2be8:	6a2c      	ldr	r4, [r5, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    2bea:	f8a0 b002 	strh.w	fp, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2bee:	4620      	mov	r0, r4
    2bf0:	f005 ff74 	bl	8adc <FsCache::sync()>
    2bf4:	b160      	cbz	r0, 2c10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    2bf6:	f504 7004 	add.w	r0, r4, #528	; 0x210
    2bfa:	f005 ff6f 	bl	8adc <FsCache::sync()>
    2bfe:	b138      	cbz	r0, 2c10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    2c00:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    return m_blockDev->syncDevice();
    2c04:	6803      	ldr	r3, [r0, #0]
    2c06:	6a1b      	ldr	r3, [r3, #32]
  }
  return true;

 fail:
  return false;
}
    2c08:	b003      	add	sp, #12
    2c0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c0e:	4718      	bx	r3
    2c10:	2000      	movs	r0, #0
    2c12:	b003      	add	sp, #12
    2c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    2c18:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
        m_vol->dataCacheDirty();
    2c1c:	6a2a      	ldr	r2, [r5, #32]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    2c1e:	f003 0337 	and.w	r3, r3, #55	; 0x37
    2c22:	8083      	strh	r3, [r0, #4]
    2c24:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    2c28:	f043 0301 	orr.w	r3, r3, #1
    2c2c:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
        if (flags & T_ACCESS) {
    2c30:	f1b9 0f00 	cmp.w	r9, #0
    2c34:	d002      	beq.n	2c3c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x158>
    2c36:	f8a0 8010 	strh.w	r8, [r0, #16]
    2c3a:	8244      	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    2c3c:	07b2      	lsls	r2, r6, #30
    2c3e:	d503      	bpl.n	2c48 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
          df->createTimeMs = ms10;
    2c40:	7507      	strb	r7, [r0, #20]
    2c42:	f8a0 8008 	strh.w	r8, [r0, #8]
    2c46:	8144      	strh	r4, [r0, #10]
        if (flags & T_WRITE) {
    2c48:	0773      	lsls	r3, r6, #29
    2c4a:	d503      	bpl.n	2c54 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
          df->modifyTimeMs = ms10;
    2c4c:	7547      	strb	r7, [r0, #21]
    2c4e:	f8a0 800c 	strh.w	r8, [r0, #12]
    2c52:	81c4      	strh	r4, [r0, #14]
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2c54:	f890 c000 	ldrb.w	ip, [r0]
}
    2c58:	e79d      	b.n	2b96 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb2>
    2c5a:	bf00      	nop

00002c5c <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    2c5c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    2c60:	079a      	lsls	r2, r3, #30
    2c62:	d562      	bpl.n	2d2a <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    2c64:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    2c66:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    2c68:	b082      	sub	sp, #8
    2c6a:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    2c6c:	b3a5      	cbz	r5, 2cd8 <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    2c6e:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    2c72:	d034      	beq.n	2cde <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2c74:	6a00      	ldr	r0, [r0, #32]
    2c76:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2c78:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    2c7c:	3a01      	subs	r2, #1
    2c7e:	68e1      	ldr	r1, [r4, #12]
    2c80:	f10c 0c09 	add.w	ip, ip, #9
    2c84:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    2c88:	fa5f fc8c 	uxtb.w	ip, ip
    2c8c:	f1cc 0e20 	rsb	lr, ip, #32
    2c90:	fa22 f20c 	lsr.w	r2, r2, ip
    2c94:	f1ac 0c20 	sub.w	ip, ip, #32
    2c98:	fa01 fe0e 	lsl.w	lr, r1, lr
    2c9c:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    2ca0:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2ca2:	ea42 020e 	orr.w	r2, r2, lr
    2ca6:	ea42 020c 	orr.w	r2, r2, ip
    2caa:	3201      	adds	r2, #1
    if (m_curCluster) {
    2cac:	b319      	cbz	r1, 2cf6 <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    2cae:	3d01      	subs	r5, #1
    2cb0:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    2cb2:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    2cb4:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    2cb6:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    2cb8:	bb72      	cbnz	r2, 2d18 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2cba:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    2cbe:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    2cc0:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2cc4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    2cc8:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    2ccc:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    2cd0:	f7ff fd92 	bl	27f8 <ExFatFile::sync()>

 fail:
  return false;
}
    2cd4:	b002      	add	sp, #8
    2cd6:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    2cd8:	2001      	movs	r0, #1
}
    2cda:	b002      	add	sp, #8
    2cdc:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    2cde:	6981      	ldr	r1, [r0, #24]
    2ce0:	b961      	cbnz	r1, 2cfc <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    2ce2:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    2ce4:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    2ce6:	4629      	mov	r1, r5
    2ce8:	6a20      	ldr	r0, [r4, #32]
    2cea:	f000 ff03 	bl	3af4 <ExFatPartition::freeChain(unsigned long)>
    2cee:	b1c8      	cbz	r0, 2d24 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2cf0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2cf4:	e7e1      	b.n	2cba <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    2cf6:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    2cf8:	61e1      	str	r1, [r4, #28]
    2cfa:	e7dd      	b.n	2cb8 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2cfc:	aa01      	add	r2, sp, #4
    2cfe:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    2d00:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2d02:	f000 feb5 	bl	3a70 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    2d06:	2800      	cmp	r0, #0
    2d08:	db0c      	blt.n	2d24 <ExFatFile::truncate()+0xc8>
      if (fg) {
    2d0a:	d110      	bne.n	2d2e <ExFatFile::truncate()+0xd2>
    if (toFree) {
    2d0c:	9d01      	ldr	r5, [sp, #4]
    2d0e:	2d00      	cmp	r5, #0
    2d10:	d1e9      	bne.n	2ce6 <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2d12:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2d16:	e7d0      	b.n	2cba <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    2d18:	2300      	movs	r3, #0
    2d1a:	9901      	ldr	r1, [sp, #4]
    2d1c:	f000 fdce 	bl	38bc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2d20:	2800      	cmp	r0, #0
    2d22:	d1e5      	bne.n	2cf0 <ExFatFile::truncate()+0x94>
  return false;
    2d24:	2000      	movs	r0, #0
}
    2d26:	b002      	add	sp, #8
    2d28:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    2d2a:	2000      	movs	r0, #0
}
    2d2c:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    2d2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2d32:	69a1      	ldr	r1, [r4, #24]
    2d34:	6a20      	ldr	r0, [r4, #32]
    2d36:	f000 febd 	bl	3ab4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2d3a:	2800      	cmp	r0, #0
    2d3c:	d1e6      	bne.n	2d0c <ExFatFile::truncate()+0xb0>
    2d3e:	e7f1      	b.n	2d24 <ExFatFile::truncate()+0xc8>

00002d40 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    2d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2d44:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    2d48:	b083      	sub	sp, #12
    2d4a:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    2d4c:	079d      	lsls	r5, r3, #30
    2d4e:	f140 80a1 	bpl.w	2e94 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    2d52:	4691      	mov	r9, r2
    2d54:	071a      	lsls	r2, r3, #28
    2d56:	460e      	mov	r6, r1
    2d58:	f100 8095 	bmi.w	2e86 <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    2d5c:	f1b9 0f00 	cmp.w	r9, #0
    2d60:	f000 8128 	beq.w	2fb4 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    2d64:	6823      	ldr	r3, [r4, #0]
    2d66:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2d68:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    2d6a:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2d6c:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    2d70:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    2d74:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    2d78:	f1b8 0f00 	cmp.w	r8, #0
    2d7c:	f040 8094 	bne.w	2ea8 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    2d80:	2900      	cmp	r1, #0
    2d82:	f000 80d4 	beq.w	2f2e <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    2d86:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2d8a:	065b      	lsls	r3, r3, #25
    2d8c:	f140 80ec 	bpl.w	2f68 <ExFatFile::write(void const*, unsigned int)+0x228>
    2d90:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    2d94:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2d98:	f10c 0c09 	add.w	ip, ip, #9
    2d9c:	3b01      	subs	r3, #1
    2d9e:	fa5f fc8c 	uxtb.w	ip, ip
    2da2:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
    2da6:	f1cc 0e20 	rsb	lr, ip, #32
    2daa:	fa23 f30c 	lsr.w	r3, r3, ip
    2dae:	f1ac 0c20 	sub.w	ip, ip, #32
    2db2:	fa02 fe0e 	lsl.w	lr, r2, lr
    2db6:	fa22 fc0c 	lsr.w	ip, r2, ip
    2dba:	69e2      	ldr	r2, [r4, #28]
    2dbc:	ea43 030e 	orr.w	r3, r3, lr
    2dc0:	ea43 030c 	orr.w	r3, r3, ip
    2dc4:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    2dc6:	4299      	cmp	r1, r3
    2dc8:	f080 80d5 	bcs.w	2f76 <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    2dcc:	3101      	adds	r1, #1
    2dce:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    2dd0:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2dd4:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    2dd6:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2dda:	4091      	lsls	r1, r2
    2ddc:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2dde:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    2de2:	f0c0 808a 	bcc.w	2efa <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    2de6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    2dea:	f0c0 80a6 	bcc.w	2f3a <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    2dee:	2301      	movs	r3, #1
    2df0:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    2df2:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    2df4:	eba3 0308 	sub.w	r3, r3, r8
    2df8:	4293      	cmp	r3, r2
    2dfa:	bf28      	it	cs
    2dfc:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    2dfe:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    2e02:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    2e04:	ea4f 2843 	mov.w	r8, r3, lsl #9
    2e08:	d309      	bcc.n	2e1e <ExFatFile::write(void const*, unsigned int)+0xde>
    2e0a:	185f      	adds	r7, r3, r1
    2e0c:	42ba      	cmp	r2, r7
    2e0e:	d206      	bcs.n	2e1e <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    2e10:	2200      	movs	r2, #0
    2e12:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e1a:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    2e1e:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2e22:	4632      	mov	r2, r6
    2e24:	6807      	ldr	r7, [r0, #0]
    2e26:	6abf      	ldr	r7, [r7, #40]	; 0x28
    2e28:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    2e2a:	b398      	cbz	r0, 2e94 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    2e2c:	4643      	mov	r3, r8
    src += n;
    2e2e:	4446      	add	r6, r8
    toWrite -= n;
    2e30:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    2e34:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    2e38:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    2e3c:	19db      	adds	r3, r3, r7
    2e3e:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    2e42:	4298      	cmp	r0, r3
    2e44:	4191      	sbcs	r1, r2
    m_curPosition += n;
    2e46:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    2e4a:	d207      	bcs.n	2e5c <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2e4c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2e50:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    2e54:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2e58:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    2e5c:	2d00      	cmp	r5, #0
    2e5e:	d183      	bne.n	2d68 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    2e60:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    2e64:	4298      	cmp	r0, r3
    2e66:	4191      	sbcs	r1, r2
    2e68:	f0c0 8096 	bcc.w	2f98 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    2e6c:	4b53      	ldr	r3, [pc, #332]	; (2fbc <ExFatFile::write(void const*, unsigned int)+0x27c>)
    2e6e:	681b      	ldr	r3, [r3, #0]
    2e70:	2b00      	cmp	r3, #0
    2e72:	f000 809d 	beq.w	2fb0 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2e76:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2e7a:	4648      	mov	r0, r9
    2e7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2e80:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    2e84:	e00d      	b.n	2ea2 <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    2e86:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    2e8a:	f7ff f86d 	bl	1f68 <ExFatFile::seekSet(unsigned long long)>
    2e8e:	2800      	cmp	r0, #0
    2e90:	f47f af64 	bne.w	2d5c <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    2e94:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    2e98:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2e9a:	f043 0301 	orr.w	r3, r3, #1
    2e9e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    2ea2:	b003      	add	sp, #12
    2ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    2ea8:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2eac:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    2eae:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    2eb2:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2eb6:	4091      	lsls	r1, r2
    2eb8:	4441      	add	r1, r8
    2eba:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2ebc:	2f00      	cmp	r7, #0
    2ebe:	d08e      	beq.n	2dde <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    2ec0:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    2ec4:	2201      	movs	r2, #1
    2ec6:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2eca:	45a8      	cmp	r8, r5
    2ecc:	bf28      	it	cs
    2ece:	46a8      	movcs	r8, r5
    2ed0:	f005 fe30 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2ed4:	2800      	cmp	r0, #0
    2ed6:	d0dd      	beq.n	2e94 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2ed8:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2eda:	4447      	add	r7, r8
      memcpy(dst, src, n);
    2edc:	4642      	mov	r2, r8
    2ede:	4631      	mov	r1, r6
    2ee0:	f006 fd34 	bl	994c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2ee4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    2ee8:	6a20      	ldr	r0, [r4, #32]
    2eea:	d19f      	bne.n	2e2c <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    2eec:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2ef0:	f005 fdf4 	bl	8adc <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    2ef4:	2800      	cmp	r0, #0
    2ef6:	d199      	bne.n	2e2c <ExFatFile::write(void const*, unsigned int)+0xec>
    2ef8:	e7cc      	b.n	2e94 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    2efa:	6862      	ldr	r2, [r4, #4]
    2efc:	6963      	ldr	r3, [r4, #20]
    2efe:	9200      	str	r2, [sp, #0]
    2f00:	9301      	str	r3, [sp, #4]
    2f02:	6922      	ldr	r2, [r4, #16]
    2f04:	6823      	ldr	r3, [r4, #0]
    2f06:	4293      	cmp	r3, r2
    2f08:	e9dd 2300 	ldrd	r2, r3, [sp]
    2f0c:	419a      	sbcs	r2, r3
    2f0e:	d212      	bcs.n	2f36 <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    2f10:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    2f12:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2f16:	f005 fe0d 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2f1a:	2800      	cmp	r0, #0
    2f1c:	d0ba      	beq.n	2e94 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2f1e:	462a      	mov	r2, r5
    2f20:	4631      	mov	r1, r6
    2f22:	4438      	add	r0, r7
    m_curPosition += n;
    2f24:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    2f26:	f006 fd11 	bl	994c <memcpy>
    m_curPosition += n;
    2f2a:	462b      	mov	r3, r5
    2f2c:	e77f      	b.n	2e2e <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    2f2e:	69e1      	ldr	r1, [r4, #28]
    2f30:	b349      	cbz	r1, 2f86 <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    2f32:	61a1      	str	r1, [r4, #24]
    2f34:	e74c      	b.n	2dd0 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    2f36:	2205      	movs	r2, #5
    2f38:	e7eb      	b.n	2f12 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    2f3a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    2f3e:	428b      	cmp	r3, r1
    2f40:	d106      	bne.n	2f50 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    2f42:	2300      	movs	r3, #0
    2f44:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2f4c:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    2f50:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2f54:	4632      	mov	r2, r6
    2f56:	6803      	ldr	r3, [r0, #0]
    2f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f5a:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    2f5c:	2800      	cmp	r0, #0
    2f5e:	d099      	beq.n	2e94 <ExFatFile::write(void const*, unsigned int)+0x154>
    2f60:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    2f64:	4698      	mov	r8, r3
    2f66:	e762      	b.n	2e2e <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2f68:	f104 0218 	add.w	r2, r4, #24
    2f6c:	f000 fd80 	bl	3a70 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    2f70:	2800      	cmp	r0, #0
    2f72:	db8f      	blt.n	2e94 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    2f74:	d104      	bne.n	2f80 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    2f76:	4620      	mov	r0, r4
    2f78:	f7ff face 	bl	2518 <ExFatFile::addCluster()>
    2f7c:	2800      	cmp	r0, #0
    2f7e:	d089      	beq.n	2e94 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    2f80:	69a1      	ldr	r1, [r4, #24]
    2f82:	6a20      	ldr	r0, [r4, #32]
    2f84:	e724      	b.n	2dd0 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    2f86:	4620      	mov	r0, r4
    2f88:	f7ff fac6 	bl	2518 <ExFatFile::addCluster()>
    2f8c:	2800      	cmp	r0, #0
    2f8e:	d081      	beq.n	2e94 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    2f90:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    2f92:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    2f94:	61e1      	str	r1, [r4, #28]
    2f96:	e71b      	b.n	2dd0 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2f98:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2f9c:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    2f9e:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2fa2:	f061 037f 	orn	r3, r1, #127	; 0x7f
    2fa6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    2faa:	b003      	add	sp, #12
    2fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2fb0:	4648      	mov	r0, r9
    2fb2:	e776      	b.n	2ea2 <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    2fb4:	e9d4 3200 	ldrd	r3, r2, [r4]
    2fb8:	e752      	b.n	2e60 <ExFatFile::write(void const*, unsigned int)+0x120>
    2fba:	bf00      	nop
    2fbc:	200091b4 	.word	0x200091b4

00002fc0 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2fc0:	b169      	cbz	r1, 2fde <Print::write(char const*) [clone .isra.0]+0x1e>
    2fc2:	b570      	push	{r4, r5, r6, lr}
    2fc4:	4605      	mov	r5, r0
							  return write((const uint8_t *)str, strlen(str)); }
    2fc6:	4608      	mov	r0, r1
    2fc8:	460c      	mov	r4, r1
    2fca:	f00a fdf9 	bl	dbc0 <strlen>
    2fce:	682b      	ldr	r3, [r5, #0]
    2fd0:	4602      	mov	r2, r0
    2fd2:	4621      	mov	r1, r4
    2fd4:	4628      	mov	r0, r5
    2fd6:	685b      	ldr	r3, [r3, #4]
    2fd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2fdc:	4718      	bx	r3
    2fde:	4770      	bx	lr

00002fe0 <ExFatFormatter::syncUpcase()>:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2fe0:	6883      	ldr	r3, [r0, #8]
    2fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  if (!index) {
    2fe6:	b183      	cbz	r3, 300a <ExFatFormatter::syncUpcase()+0x2a>
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    2fe8:	2100      	movs	r1, #0
bool ExFatFormatter::syncUpcase() {
    2fea:	b410      	push	{r4}
    m_secBuf[i] = 0;
    2fec:	6902      	ldr	r2, [r0, #16]
    2fee:	54d1      	strb	r1, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    2ff0:	3301      	adds	r3, #1
    2ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2ff6:	d1f9      	bne.n	2fec <ExFatFormatter::syncUpcase()+0xc>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    2ff8:	6801      	ldr	r1, [r0, #0]
    2ffa:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    2ffe:	681c      	ldr	r4, [r3, #0]
    3000:	4618      	mov	r0, r3
    3002:	6a63      	ldr	r3, [r4, #36]	; 0x24
}
    3004:	f85d 4b04 	ldr.w	r4, [sp], #4
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    3008:	4718      	bx	r3
}
    300a:	2001      	movs	r0, #1
    300c:	4770      	bx	lr
    300e:	bf00      	nop

00003010 <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3010:	6882      	ldr	r2, [r0, #8]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    3012:	4603      	mov	r3, r0
  m_secBuf[index] = b;
    3014:	6900      	ldr	r0, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3016:	f240 1cff 	movw	ip, #511	; 0x1ff
    301a:	f3c2 0208 	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    301e:	5481      	strb	r1, [r0, r2]
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    3020:	4562      	cmp	r2, ip
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    3022:	6858      	ldr	r0, [r3, #4]
    3024:	eb01 0170 	add.w	r1, r1, r0, ror #1
  m_upcaseSize++;
    3028:	6898      	ldr	r0, [r3, #8]
    302a:	f100 0001 	add.w	r0, r0, #1
    302e:	e9c3 1001 	strd	r1, r0, [r3, #4]
  if (index == SECTOR_MASK) {
    3032:	d001      	beq.n	3038 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x28>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
}
    3034:	2001      	movs	r0, #1
    3036:	4770      	bx	lr
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    3038:	68d8      	ldr	r0, [r3, #12]
    303a:	6819      	ldr	r1, [r3, #0]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    303c:	b410      	push	{r4}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    303e:	6804      	ldr	r4, [r0, #0]
    3040:	1c4a      	adds	r2, r1, #1
    3042:	6a64      	ldr	r4, [r4, #36]	; 0x24
    3044:	601a      	str	r2, [r3, #0]
    3046:	691a      	ldr	r2, [r3, #16]
    3048:	4623      	mov	r3, r4
}
    304a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    304e:	4718      	bx	r3

00003050 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    3050:	b538      	push	{r3, r4, r5, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3052:	6883      	ldr	r3, [r0, #8]
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3054:	b2ca      	uxtb	r2, r1
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    3056:	460d      	mov	r5, r1
  m_secBuf[index] = b;
    3058:	6901      	ldr	r1, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    305a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    305e:	f240 1cff 	movw	ip, #511	; 0x1ff
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    3062:	4604      	mov	r4, r0
  m_secBuf[index] = b;
    3064:	54ca      	strb	r2, [r1, r3]
  if (index == SECTOR_MASK) {
    3066:	4563      	cmp	r3, ip
    3068:	6841      	ldr	r1, [r0, #4]
    306a:	eb02 0271 	add.w	r2, r2, r1, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    306e:	6042      	str	r2, [r0, #4]
  m_upcaseSize++;
    3070:	6882      	ldr	r2, [r0, #8]
    3072:	f102 0201 	add.w	r2, r2, #1
    3076:	6082      	str	r2, [r0, #8]
  if (index == SECTOR_MASK) {
    3078:	d005      	beq.n	3086 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x36>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    307a:	0a29      	lsrs	r1, r5, #8
    307c:	4620      	mov	r0, r4
}
    307e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3082:	f7ff bfc5 	b.w	3010 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    3086:	6801      	ldr	r1, [r0, #0]
    3088:	68c0      	ldr	r0, [r0, #12]
    308a:	1c4a      	adds	r2, r1, #1
    308c:	6803      	ldr	r3, [r0, #0]
    308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3090:	6022      	str	r2, [r4, #0]
    3092:	6922      	ldr	r2, [r4, #16]
    3094:	4798      	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3096:	2800      	cmp	r0, #0
    3098:	d1ef      	bne.n	307a <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x2a>
}
    309a:	bd38      	pop	{r3, r4, r5, pc}

0000309c <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    309e:	2300      	movs	r3, #0
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    30a0:	4606      	mov	r6, r0
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    30a2:	6001      	str	r1, [r0, #0]
  uint32_t ch = 0;
    30a4:	461d      	mov	r5, r3
  m_upcaseChecksum = 0;
    30a6:	e9c0 3301 	strd	r3, r3, [r0, #4]

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    30aa:	b2a8      	uxth	r0, r5
    30ac:	f005 fe94 	bl	8dd8 <toUpcase(unsigned short)>
    if (uc != ch) {
    30b0:	42a8      	cmp	r0, r5
    uc = toUpcase(ch);
    30b2:	4604      	mov	r4, r0
    if (uc != ch) {
    30b4:	d007      	beq.n	30c6 <ExFatFormatter::writeUpcase(unsigned long)+0x2a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    30b6:	b2c1      	uxtb	r1, r0
    30b8:	4630      	mov	r0, r6
    30ba:	f7ff ffa9 	bl	3010 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    30be:	2800      	cmp	r0, #0
    30c0:	d13b      	bne.n	313a <ExFatFormatter::writeUpcase(unsigned long)+0x9e>
  }
  return true;

 fail:
  return false;
}
    30c2:	2000      	movs	r0, #0
    30c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    30c6:	1c6c      	adds	r4, r5, #1
    30c8:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    30cc:	d104      	bne.n	30d8 <ExFatFormatter::writeUpcase(unsigned long)+0x3c>
    30ce:	e02a      	b.n	3126 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
    30d0:	3401      	adds	r4, #1
    30d2:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    30d6:	d004      	beq.n	30e2 <ExFatFormatter::writeUpcase(unsigned long)+0x46>
    30d8:	b2a0      	uxth	r0, r4
    30da:	f005 fe7d 	bl	8dd8 <toUpcase(unsigned short)>
    30de:	42a0      	cmp	r0, r4
    30e0:	d0f6      	beq.n	30d0 <ExFatFormatter::writeUpcase(unsigned long)+0x34>
      ns = n - ch;
    30e2:	1b67      	subs	r7, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    30e4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    30e8:	d31d      	bcc.n	3126 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    30ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
    30ee:	4630      	mov	r0, r6
    30f0:	f7ff ffae 	bl	3050 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    30f4:	2800      	cmp	r0, #0
    30f6:	d0e4      	beq.n	30c2 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    30f8:	b2b9      	uxth	r1, r7
    30fa:	4630      	mov	r0, r6
    30fc:	f7ff ffa8 	bl	3050 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    3100:	2800      	cmp	r0, #0
    3102:	d0de      	beq.n	30c2 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    3104:	4625      	mov	r5, r4
  while (ch < 0X10000) {
    3106:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    310a:	d1ce      	bne.n	30aa <ExFatFormatter::writeUpcase(unsigned long)+0xe>
  if (!syncUpcase()) {
    310c:	4630      	mov	r0, r6
}
    310e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (!syncUpcase()) {
    3112:	f7ff bf65 	b.w	2fe0 <ExFatFormatter::syncUpcase()>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3116:	f3c5 2107 	ubfx	r1, r5, #8, #8
    311a:	4630      	mov	r0, r6
    311c:	3501      	adds	r5, #1
    311e:	f7ff ff77 	bl	3010 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    3122:	2800      	cmp	r0, #0
    3124:	d0cd      	beq.n	30c2 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
        while (ch < n) {
    3126:	42a5      	cmp	r5, r4
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3128:	b2e9      	uxtb	r1, r5
    312a:	4630      	mov	r0, r6
        while (ch < n) {
    312c:	d2eb      	bcs.n	3106 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    312e:	f7ff ff6f 	bl	3010 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    3132:	2800      	cmp	r0, #0
    3134:	d1ef      	bne.n	3116 <ExFatFormatter::writeUpcase(unsigned long)+0x7a>
}
    3136:	2000      	movs	r0, #0
    3138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    313a:	f3c4 2107 	ubfx	r1, r4, #8, #8
    313e:	4630      	mov	r0, r6
    3140:	f7ff ff66 	bl	3010 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    3144:	2800      	cmp	r0, #0
    3146:	d0bc      	beq.n	30c2 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
      ch++;
    3148:	3501      	adds	r5, #1
    314a:	e7dc      	b.n	3106 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>

0000314c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    314c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3150:	461f      	mov	r7, r3
    3152:	b089      	sub	sp, #36	; 0x24
  sectorCount = dev->sectorCount();
    3154:	680b      	ldr	r3, [r1, #0]
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    3156:	460d      	mov	r5, r1
    3158:	9004      	str	r0, [sp, #16]
    315a:	4614      	mov	r4, r2
  m_dev = dev;
    315c:	60c1      	str	r1, [r0, #12]
  m_secBuf = secBuf;
    315e:	6102      	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    3160:	4608      	mov	r0, r1
    3162:	69db      	ldr	r3, [r3, #28]
    3164:	4798      	blx	r3
  if (sectorCount < 0X100000) {
    3166:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
  sectorCount = dev->sectorCount();
    316a:	9000      	str	r0, [sp, #0]
  if (sectorCount < 0X100000) {
    316c:	f0c0 80d8 	bcc.w	3320 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1d4>
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    3170:	2300      	movs	r3, #0
    3172:	2201      	movs	r2, #1
    3174:	9e00      	ldr	r6, [sp, #0]
    3176:	3301      	adds	r3, #1
    3178:	0052      	lsls	r2, r2, #1
    317a:	b2db      	uxtb	r3, r3
    317c:	d001      	beq.n	3182 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36>
    317e:	4296      	cmp	r6, r2
    3180:	d8f9      	bhi.n	3176 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    3182:	2b1c      	cmp	r3, #28
    3184:	9600      	str	r6, [sp, #0]
    3186:	f240 80b7 	bls.w	32f8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ac>
    318a:	f1a3 080b 	sub.w	r8, r3, #11
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    318e:	2201      	movs	r2, #1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    3190:	fa48 f102 	asr.w	r1, r8, r2
    3194:	f3c8 0847 	ubfx	r8, r8, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    3198:	408a      	lsls	r2, r1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    319a:	9102      	str	r1, [sp, #8]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    319c:	9207      	str	r2, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    319e:	3301      	adds	r3, #1
    31a0:	2201      	movs	r2, #1
    31a2:	105b      	asrs	r3, r3, #1
    31a4:	409a      	lsls	r2, r3
    31a6:	9206      	str	r2, [sp, #24]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    31a8:	2204      	movs	r2, #4
    31aa:	409a      	lsls	r2, r3
    31ac:	9203      	str	r2, [sp, #12]
  partitionOffset = 2*fatLength;
    31ae:	2202      	movs	r2, #2
    31b0:	fa02 f303 	lsl.w	r3, r2, r3
    31b4:	9301      	str	r3, [sp, #4]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    31b6:	9a00      	ldr	r2, [sp, #0]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    31b8:	2100      	movs	r1, #0
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    31ba:	9b03      	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    31bc:	4620      	mov	r0, r4
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    31be:	9e02      	ldr	r6, [sp, #8]
  mbr->part->beginCHS[0] = 1;
    31c0:	f04f 0a01 	mov.w	sl, #1
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    31c4:	1ad3      	subs	r3, r2, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    31c6:	f44f 7200 	mov.w	r2, #512	; 0x200
  *reinterpret_cast<uint16_t*>(dst) = src;
    31ca:	f64a 2b55 	movw	fp, #43605	; 0xaa55
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    31ce:	40f3      	lsrs	r3, r6
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    31d0:	fa03 f906 	lsl.w	r9, r3, r6
    31d4:	9305      	str	r3, [sp, #20]
    31d6:	9e01      	ldr	r6, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    31d8:	f00a f984 	bl	d4e4 <memset>
  mbr->part->endCHS[1] = 0XFF;
    31dc:	23ff      	movs	r3, #255	; 0xff
  mbr->part->beginCHS[0] = 1;
    31de:	f884 a1bf 	strb.w	sl, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    31e2:	f884 a1c0 	strb.w	sl, [r4, #448]	; 0x1c0
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    31e6:	44b1      	add	r9, r6
  mbr->part->endCHS[1] = 0XFF;
    31e8:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
  if (!dev->writeSector(0, secBuf)) {
    31ec:	4622      	mov	r2, r4
  mbr->part->endCHS[2] = 0XFF;
    31ee:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
  mbr->part->type = 7;
    31f2:	2307      	movs	r3, #7
  if (!dev->writeSector(0, secBuf)) {
    31f4:	2100      	movs	r1, #0
    31f6:	4628      	mov	r0, r5
  mbr->part->type = 7;
    31f8:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    31fc:	23fe      	movs	r3, #254	; 0xfe
  *reinterpret_cast<uint32_t*>(dst) = src;
    31fe:	f8c4 61c6 	str.w	r6, [r4, #454]	; 0x1c6
    3202:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
  if (!dev->writeSector(0, secBuf)) {
    3206:	682b      	ldr	r3, [r5, #0]
    3208:	f8c4 91ca 	str.w	r9, [r4, #458]	; 0x1ca
    320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  *reinterpret_cast<uint16_t*>(dst) = src;
    320e:	f8a4 b1fe 	strh.w	fp, [r4, #510]	; 0x1fe
    3212:	4798      	blx	r3
    3214:	2800      	cmp	r0, #0
    3216:	d063      	beq.n	32e0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3218:	f44f 7200 	mov.w	r2, #512	; 0x200
    321c:	2100      	movs	r1, #0
    321e:	4620      	mov	r0, r4
    3220:	f00a f960 	bl	d4e4 <memset>
  *reinterpret_cast<uint32_t*>(dst) = src;
    3224:	9b00      	ldr	r3, [sp, #0]
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    3226:	f884 806d 	strb.w	r8, [r4, #109]	; 0x6d
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    322a:	f04f 0800 	mov.w	r8, #0
    322e:	6663      	str	r3, [r4, #100]	; 0x64
    pbs->bootCode[i] = 0XF4;
    3230:	21f4      	movs	r1, #244	; 0xf4
    3232:	9b05      	ldr	r3, [sp, #20]
    3234:	f104 0078 	add.w	r0, r4, #120	; 0x78
    3238:	9a06      	ldr	r2, [sp, #24]
    323a:	65e3      	str	r3, [r4, #92]	; 0x5c
  pbs->oemName[5] = ' ';
    323c:	2320      	movs	r3, #32
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    323e:	6426      	str	r6, [r4, #64]	; 0x40
  pbs->oemName[5] = ' ';
    3240:	7223      	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    3242:	7263      	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    3244:	72a3      	strb	r3, [r4, #10]
  pbs->jmpInstruction[0] = 0XEB;
    3246:	23eb      	movs	r3, #235	; 0xeb
    3248:	65a6      	str	r6, [r4, #88]	; 0x58
  uint32_t checksum = 0;
    324a:	4646      	mov	r6, r8
  pbs->jmpInstruction[0] = 0XEB;
    324c:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    324e:	2376      	movs	r3, #118	; 0x76
  setLe64(pbs->bpb.volumeLength, volumeLength);
    3250:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  pbs->jmpInstruction[1] = 0X76;
    3254:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    3256:	2390      	movs	r3, #144	; 0x90
  pbs->bpb.numberOfFats = 1;
    3258:	f884 a06e 	strb.w	sl, [r4, #110]	; 0x6e
  pbs->jmpInstruction[2] = 0X90;
    325c:	70a3      	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    325e:	2345      	movs	r3, #69	; 0x45
    3260:	70e3      	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    3262:	2358      	movs	r3, #88	; 0x58
    3264:	7123      	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    3266:	2346      	movs	r3, #70	; 0x46
    3268:	7163      	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    326a:	2341      	movs	r3, #65	; 0x41
    326c:	71a3      	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    326e:	2354      	movs	r3, #84	; 0x54
    3270:	71e3      	strb	r3, [r4, #7]
    3272:	2304      	movs	r3, #4
    3274:	6623      	str	r3, [r4, #96]	; 0x60
  *reinterpret_cast<uint16_t*>(dst) = src;
    3276:	f44f 7380 	mov.w	r3, #256	; 0x100
    327a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    327e:	2309      	movs	r3, #9
    3280:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.driveSelect = 0X80;
    3284:	2380      	movs	r3, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    3286:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
    328a:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
    pbs->bootCode[i] = 0XF4;
    328e:	f44f 72c3 	mov.w	r2, #390	; 0x186
    3292:	f00a f927 	bl	d4e4 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    3296:	f8a4 b1fe 	strh.w	fp, [r4, #510]	; 0x1fe
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    329a:	f1a8 036a 	sub.w	r3, r8, #106	; 0x6a
    329e:	2b01      	cmp	r3, #1
    32a0:	d906      	bls.n	32b0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
    32a2:	f1b8 0f70 	cmp.w	r8, #112	; 0x70
    32a6:	d003      	beq.n	32b0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
  return (sum << 31) + (sum >> 1) + data;
    32a8:	f814 3008 	ldrb.w	r3, [r4, r8]
    32ac:	eb03 0676 	add.w	r6, r3, r6, ror #1
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    32b0:	f108 0801 	add.w	r8, r8, #1
    32b4:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    32b8:	d1ef      	bne.n	329a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x14e>
  if (!dev->writeSector(sector, secBuf)  ||
    32ba:	682b      	ldr	r3, [r5, #0]
    32bc:	4622      	mov	r2, r4
    32be:	f8dd 9004 	ldr.w	r9, [sp, #4]
    32c2:	4628      	mov	r0, r5
    32c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    32c6:	4649      	mov	r1, r9
    32c8:	4798      	blx	r3
    32ca:	b148      	cbz	r0, 32e0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    32cc:	682b      	ldr	r3, [r5, #0]
    32ce:	4649      	mov	r1, r9
    32d0:	4622      	mov	r2, r4
    32d2:	4628      	mov	r0, r5
    32d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    32d6:	310c      	adds	r1, #12
    32d8:	f8cd 9004 	str.w	r9, [sp, #4]
    32dc:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    32de:	bb40      	cbnz	r0, 3332 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e6>
  writeMsg(pr, "Format failed\r\n");
    32e0:	b12f      	cbz	r7, 32ee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    32e2:	683b      	ldr	r3, [r7, #0]
    32e4:	220f      	movs	r2, #15
    32e6:	49b8      	ldr	r1, [pc, #736]	; (35c8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x47c>)
    32e8:	4638      	mov	r0, r7
    32ea:	685b      	ldr	r3, [r3, #4]
    32ec:	4798      	blx	r3
  return false;
    32ee:	2600      	movs	r6, #0
}
    32f0:	4630      	mov	r0, r6
    32f2:	b009      	add	sp, #36	; 0x24
    32f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    32f8:	2b1a      	cmp	r3, #26
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    32fa:	f04f 0808 	mov.w	r8, #8
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    32fe:	f200 81a6 	bhi.w	364e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
    3302:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    3306:	f8cd 8008 	str.w	r8, [sp, #8]
    330a:	9301      	str	r3, [sp, #4]
    330c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3310:	9303      	str	r3, [sp, #12]
    3312:	f44f 7380 	mov.w	r3, #256	; 0x100
    3316:	9307      	str	r3, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    3318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    331c:	9306      	str	r3, [sp, #24]
    331e:	e74a      	b.n	31b6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
    writeMsg(pr, "Device is too small\r\n");
    3320:	2f00      	cmp	r7, #0
    3322:	d0e4      	beq.n	32ee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    3324:	683b      	ldr	r3, [r7, #0]
    3326:	2215      	movs	r2, #21
    3328:	49a8      	ldr	r1, [pc, #672]	; (35cc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x480>)
    332a:	4638      	mov	r0, r7
    332c:	685b      	ldr	r3, [r3, #4]
    332e:	4798      	blx	r3
  writeMsg(pr, "Format failed\r\n");
    3330:	e7d7      	b.n	32e2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3332:	4642      	mov	r2, r8
    3334:	2100      	movs	r1, #0
    3336:	4620      	mov	r0, r4
  sector++;
    3338:	f109 0a01 	add.w	sl, r9, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    333c:	f00a f8d2 	bl	d4e4 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    3340:	f64a 2355 	movw	r3, #43605	; 0xaa55
    3344:	f109 0209 	add.w	r2, r9, #9
    3348:	f204 19ff 	addw	r9, r4, #511	; 0x1ff
    334c:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
    3350:	2300      	movs	r3, #0
    3352:	4693      	mov	fp, r2
  uint32_t checksum = 0;
    3354:	46a0      	mov	r8, r4
    3356:	e001      	b.n	335c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x210>
      checksum = exFatChecksum(checksum, secBuf[i]);
    3358:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    335c:	45c1      	cmp	r9, r8
  return (sum << 31) + (sum >> 1) + data;
    335e:	eb03 0676 	add.w	r6, r3, r6, ror #1
    3362:	d1f9      	bne.n	3358 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x20c>
    if (!dev->writeSector(sector, secBuf)  ||
    3364:	682b      	ldr	r3, [r5, #0]
    3366:	4622      	mov	r2, r4
    3368:	4651      	mov	r1, sl
    336a:	4628      	mov	r0, r5
    336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    336e:	4798      	blx	r3
    3370:	2800      	cmp	r0, #0
    3372:	d0b5      	beq.n	32e0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    3374:	682b      	ldr	r3, [r5, #0]
    3376:	4622      	mov	r2, r4
    3378:	f10a 010c 	add.w	r1, sl, #12
    337c:	4628      	mov	r0, r5
    337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3380:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    3382:	2800      	cmp	r0, #0
    3384:	d0ac      	beq.n	32e0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    3386:	f10a 0301 	add.w	r3, sl, #1
  for (int j = 0; j < 8; j++) {
    338a:	459b      	cmp	fp, r3
    338c:	d002      	beq.n	3394 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x248>
      checksum = exFatChecksum(checksum, secBuf[i]);
    338e:	469a      	mov	sl, r3
    3390:	7823      	ldrb	r3, [r4, #0]
    3392:	e7df      	b.n	3354 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x208>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3394:	f44f 7200 	mov.w	r2, #512	; 0x200
    3398:	2100      	movs	r1, #0
    339a:	4620      	mov	r0, r4
    339c:	469b      	mov	fp, r3
    339e:	f00a f8a1 	bl	d4e4 <memset>
    33a2:	2200      	movs	r2, #0
    33a4:	f10a 0a03 	add.w	sl, sl, #3
    33a8:	4611      	mov	r1, r2
  *reinterpret_cast<uint16_t*>(dst) = src;
    33aa:	4623      	mov	r3, r4
    33ac:	e001      	b.n	33b2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x266>
      checksum = exFatChecksum(checksum, secBuf[i]);
    33ae:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    33b2:	4598      	cmp	r8, r3
  return (sum << 31) + (sum >> 1) + data;
    33b4:	eb01 0676 	add.w	r6, r1, r6, ror #1
    33b8:	d1f9      	bne.n	33ae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x262>
    if (!dev->writeSector(sector, secBuf)  ||
    33ba:	682b      	ldr	r3, [r5, #0]
    33bc:	4622      	mov	r2, r4
    33be:	4659      	mov	r1, fp
    33c0:	4628      	mov	r0, r5
    33c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    33c4:	4798      	blx	r3
    33c6:	2800      	cmp	r0, #0
    33c8:	d08a      	beq.n	32e0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    33ca:	682b      	ldr	r3, [r5, #0]
    33cc:	4622      	mov	r2, r4
    33ce:	f10b 010c 	add.w	r1, fp, #12
    33d2:	4628      	mov	r0, r5
    33d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    33d6:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    33d8:	2800      	cmp	r0, #0
    33da:	d081      	beq.n	32e0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    33dc:	f10b 0101 	add.w	r1, fp, #1
  for (int j = 0; j < 2; j++) {
    33e0:	458a      	cmp	sl, r1
    33e2:	d16a      	bne.n	34ba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    33e4:	1f23      	subs	r3, r4, #4
    33e6:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    33ea:	f843 6f04 	str.w	r6, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    33ee:	429a      	cmp	r2, r3
    33f0:	d1fb      	bne.n	33ea <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x29e>
  if (!dev->writeSector(sector, secBuf)  ||
    33f2:	682b      	ldr	r3, [r5, #0]
    33f4:	4622      	mov	r2, r4
    33f6:	4628      	mov	r0, r5
    33f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    33fa:	4798      	blx	r3
    33fc:	2800      	cmp	r0, #0
    33fe:	f43f af6f 	beq.w	32e0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    3402:	682b      	ldr	r3, [r5, #0]
    3404:	f10b 010d 	add.w	r1, fp, #13
    3408:	4622      	mov	r2, r4
    340a:	4628      	mov	r0, r5
    340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    340e:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    3410:	2800      	cmp	r0, #0
    3412:	f43f af65 	beq.w	32e0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  writeMsg(pr, "Writing FAT ");
    3416:	b12f      	cbz	r7, 3424 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d8>
    3418:	683b      	ldr	r3, [r7, #0]
    341a:	220c      	movs	r2, #12
    341c:	496c      	ldr	r1, [pc, #432]	; (35d0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x484>)
    341e:	4638      	mov	r0, r7
    3420:	685b      	ldr	r3, [r3, #4]
    3422:	4798      	blx	r3
  sector = partitionOffset + fatOffset;
    3424:	9a06      	ldr	r2, [sp, #24]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3426:	2100      	movs	r1, #0
  sector = partitionOffset + fatOffset;
    3428:	9b01      	ldr	r3, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    342a:	4620      	mov	r0, r4
  for (uint32_t i = 0; i < ns; i++) {
    342c:	2600      	movs	r6, #0
  sector = partitionOffset + fatOffset;
    342e:	4413      	add	r3, r2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3430:	f44f 7200 	mov.w	r2, #512	; 0x200
  sector = partitionOffset + fatOffset;
    3434:	4699      	mov	r9, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    3436:	9b05      	ldr	r3, [sp, #20]
    3438:	ea4f 0883 	mov.w	r8, r3, lsl #2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    343c:	f00a f852 	bl	d4e4 <memset>
  secBuf[0] = 0XF8;
    3440:	4623      	mov	r3, r4
    secBuf[i] = 0XFF;
    3442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    3446:	f208 2807 	addw	r8, r8, #519	; 0x207
  secBuf[0] = 0XF8;
    344a:	21f8      	movs	r1, #248	; 0xf8
      writeMsg(pr, ".");
    344c:	f1b7 0b00 	subs.w	fp, r7, #0
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    3450:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  secBuf[0] = 0XF8;
    3454:	f803 1b01 	strb.w	r1, [r3], #1
    if (i%(ns/32) == 0) {
    3458:	ea4f 3898 	mov.w	r8, r8, lsr #14
    secBuf[i] = 0XFF;
    345c:	f8c4 2001 	str.w	r2, [r4, #1]
      writeMsg(pr, ".");
    3460:	bf18      	it	ne
    3462:	f04f 0b01 	movne.w	fp, #1
    secBuf[i] = 0XFF;
    3466:	60da      	str	r2, [r3, #12]
    3468:	605a      	str	r2, [r3, #4]
    346a:	609a      	str	r2, [r3, #8]
    346c:	f8c3 200f 	str.w	r2, [r3, #15]
    3470:	e002      	b.n	3478 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x32c>
  for (uint32_t i = 0; i < ns; i++) {
    3472:	3601      	adds	r6, #1
    3474:	45b2      	cmp	sl, r6
    3476:	d023      	beq.n	34c0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (i%(ns/32) == 0) {
    3478:	fbb6 f3f8 	udiv	r3, r6, r8
    347c:	fb08 6313 	mls	r3, r8, r3, r6
      writeMsg(pr, ".");
    3480:	b943      	cbnz	r3, 3494 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    3482:	f1bb 0f00 	cmp.w	fp, #0
    3486:	d005      	beq.n	3494 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    3488:	683b      	ldr	r3, [r7, #0]
    348a:	2201      	movs	r2, #1
    348c:	4951      	ldr	r1, [pc, #324]	; (35d4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x488>)
    348e:	4638      	mov	r0, r7
    3490:	685b      	ldr	r3, [r3, #4]
    3492:	4798      	blx	r3
    if (!dev->writeSector(sector + i, secBuf)) {
    3494:	682b      	ldr	r3, [r5, #0]
    3496:	eb09 0106 	add.w	r1, r9, r6
    349a:	4622      	mov	r2, r4
    349c:	4628      	mov	r0, r5
    349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    34a0:	4798      	blx	r3
    34a2:	2800      	cmp	r0, #0
    34a4:	f43f af1c 	beq.w	32e0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    34a8:	2e00      	cmp	r6, #0
    34aa:	d1e2      	bne.n	3472 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    34ac:	4631      	mov	r1, r6
    34ae:	f44f 7200 	mov.w	r2, #512	; 0x200
    34b2:	4620      	mov	r0, r4
    34b4:	f00a f816 	bl	d4e4 <memset>
    34b8:	e7db      	b.n	3472 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      checksum = exFatChecksum(checksum, secBuf[i]);
    34ba:	468b      	mov	fp, r1
    34bc:	7821      	ldrb	r1, [r4, #0]
    34be:	e774      	b.n	33aa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x25e>
  writeMsg(pr, "\r\n");
    34c0:	2f00      	cmp	r7, #0
    34c2:	d034      	beq.n	352e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3e2>
    34c4:	683b      	ldr	r3, [r7, #0]
    34c6:	2202      	movs	r2, #2
    34c8:	4943      	ldr	r1, [pc, #268]	; (35d8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48c>)
    34ca:	4638      	mov	r0, r7
    34cc:	685b      	ldr	r3, [r3, #4]
    34ce:	4798      	blx	r3
  bitmapSize = (clusterCount + 7)/8;
    34d0:	9e05      	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    34d2:	9a07      	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7)/8;
    34d4:	3607      	adds	r6, #7
    34d6:	08f6      	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    34d8:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    34dc:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    34e0:	ea4f 2953 	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    34e4:	f4ff aefd 	bcc.w	32e2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    34e8:	f44f 7200 	mov.w	r2, #512	; 0x200
    34ec:	2100      	movs	r1, #0
    34ee:	4620      	mov	r0, r4
    34f0:	f009 fff8 	bl	d4e4 <memset>
  secBuf[0] = 0X7;
    34f4:	2307      	movs	r3, #7
    34f6:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    34f8:	f1b9 0f00 	cmp.w	r9, #0
    34fc:	f000 808a 	beq.w	3614 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c8>
    3500:	f04f 0800 	mov.w	r8, #0
    3504:	e008      	b.n	3518 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3cc>
    if (i == 0) {
    3506:	f1b8 0f00 	cmp.w	r8, #0
    350a:	d101      	bne.n	3510 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c4>
      secBuf[0] = 0;
    350c:	f884 8000 	strb.w	r8, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    3510:	f108 0801 	add.w	r8, r8, #1
    3514:	45c1      	cmp	r9, r8
    3516:	d97b      	bls.n	3610 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c4>
    if (!dev->writeSector(sector + i, secBuf)) {
    3518:	9a03      	ldr	r2, [sp, #12]
    351a:	4628      	mov	r0, r5
    351c:	682b      	ldr	r3, [r5, #0]
    351e:	eb02 0108 	add.w	r1, r2, r8
    3522:	4622      	mov	r2, r4
    3524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3526:	4798      	blx	r3
    3528:	2800      	cmp	r0, #0
    352a:	d1ec      	bne.n	3506 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ba>
    352c:	e6d8      	b.n	32e0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  bitmapSize = (clusterCount + 7)/8;
    352e:	9e05      	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    3530:	9a07      	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7)/8;
    3532:	3607      	adds	r6, #7
    3534:	08f6      	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    3536:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    353a:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    353e:	ea4f 2953 	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    3542:	f4ff aed4 	bcc.w	32ee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3546:	f44f 7200 	mov.w	r2, #512	; 0x200
    354a:	4639      	mov	r1, r7
    354c:	4620      	mov	r0, r4
    354e:	f009 ffc9 	bl	d4e4 <memset>
  secBuf[0] = 0X7;
    3552:	2307      	movs	r3, #7
    3554:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    3556:	f1b9 0f00 	cmp.w	r9, #0
    355a:	d1d1      	bne.n	3500 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    355c:	9b03      	ldr	r3, [sp, #12]
    355e:	9a07      	ldr	r2, [sp, #28]
    3560:	9804      	ldr	r0, [sp, #16]
    3562:	1899      	adds	r1, r3, r2
    3564:	f7ff fd9a 	bl	309c <ExFatFormatter::writeUpcase(unsigned long)>
    3568:	2800      	cmp	r0, #0
    356a:	f43f aec0 	beq.w	32ee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    356e:	9a02      	ldr	r2, [sp, #8]
    3570:	f44f 7300 	mov.w	r3, #512	; 0x200
    3574:	4093      	lsls	r3, r2
    3576:	9a04      	ldr	r2, [sp, #16]
    3578:	6892      	ldr	r2, [r2, #8]
    357a:	429a      	cmp	r2, r3
    357c:	f63f aeb7 	bhi.w	32ee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    3580:	f04f 0802 	mov.w	r8, #2
    3584:	9b02      	ldr	r3, [sp, #8]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3586:	f44f 7200 	mov.w	r2, #512	; 0x200
    358a:	2100      	movs	r1, #0
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    358c:	fa08 f903 	lsl.w	r9, r8, r3
    3590:	9b03      	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3592:	4620      	mov	r0, r4
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    3594:	4499      	add	r9, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3596:	f009 ffa5 	bl	d4e4 <memset>
  dbm->type = EXFAT_TYPE_BITMAP;
    359a:	2281      	movs	r2, #129	; 0x81
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    359c:	2303      	movs	r3, #3
  setLe32(dup->checksum, m_upcaseChecksum);
    359e:	9904      	ldr	r1, [sp, #16]
    35a0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
  dbm->type = EXFAT_TYPE_BITMAP;
    35a4:	f884 2020 	strb.w	r2, [r4, #32]
  dup->type = EXFAT_TYPE_UPCASE;
    35a8:	2282      	movs	r2, #130	; 0x82
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    35aa:	7023      	strb	r3, [r4, #0]
  dup->type = EXFAT_TYPE_UPCASE;
    35ac:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  setLe64(dbm->size, bitmapSize);
    35b0:	e9c4 860d 	strd	r8, r6, [r4, #52]	; 0x34
  setLe32(dup->checksum, m_upcaseChecksum);
    35b4:	684a      	ldr	r2, [r1, #4]
  *reinterpret_cast<uint64_t*>(dst) = src;
    35b6:	f04f 0801 	mov.w	r8, #1
  *reinterpret_cast<uint32_t*>(dst) = src;
    35ba:	6563      	str	r3, [r4, #84]	; 0x54
    35bc:	6462      	str	r2, [r4, #68]	; 0x44
  setLe64(dup->size, m_upcaseSize);
    35be:	688b      	ldr	r3, [r1, #8]
    35c0:	65a3      	str	r3, [r4, #88]	; 0x58
  setLe64(dbm->size, bitmapSize);
    35c2:	2300      	movs	r3, #0
  setLe64(dup->size, m_upcaseSize);
    35c4:	65e3      	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    35c6:	e00e      	b.n	35e6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x49a>
    35c8:	20000834 	.word	0x20000834
    35cc:	200007d0 	.word	0x200007d0
    35d0:	200007e8 	.word	0x200007e8
    35d4:	200007f8 	.word	0x200007f8
    35d8:	20000810 	.word	0x20000810
    35dc:	9b07      	ldr	r3, [sp, #28]
    35de:	4598      	cmp	r8, r3
    35e0:	d23b      	bcs.n	365a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    35e2:	f108 0801 	add.w	r8, r8, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    35e6:	682b      	ldr	r3, [r5, #0]
    35e8:	eb09 0108 	add.w	r1, r9, r8
    35ec:	4622      	mov	r2, r4
    35ee:	4628      	mov	r0, r5
    35f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    35f2:	4798      	blx	r3
    35f4:	4606      	mov	r6, r0
    35f6:	2800      	cmp	r0, #0
    35f8:	f43f ae72 	beq.w	32e0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    35fc:	f1b8 0f01 	cmp.w	r8, #1
    3600:	d1ec      	bne.n	35dc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x490>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    3602:	f44f 7200 	mov.w	r2, #512	; 0x200
    3606:	2100      	movs	r1, #0
    3608:	4620      	mov	r0, r4
    360a:	f009 ff6b 	bl	d4e4 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    360e:	e7e8      	b.n	35e2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x496>
  writeMsg(pr, "Writing upcase table\r\n");
    3610:	2f00      	cmp	r7, #0
    3612:	d0a3      	beq.n	355c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x410>
    3614:	683b      	ldr	r3, [r7, #0]
    3616:	2216      	movs	r2, #22
    3618:	4914      	ldr	r1, [pc, #80]	; (366c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x520>)
    361a:	4638      	mov	r0, r7
    361c:	685b      	ldr	r3, [r3, #4]
    361e:	4798      	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    3620:	9b03      	ldr	r3, [sp, #12]
    3622:	9a07      	ldr	r2, [sp, #28]
    3624:	9804      	ldr	r0, [sp, #16]
    3626:	1899      	adds	r1, r3, r2
    3628:	f7ff fd38 	bl	309c <ExFatFormatter::writeUpcase(unsigned long)>
    362c:	2800      	cmp	r0, #0
    362e:	f43f ae58 	beq.w	32e2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    3632:	9a02      	ldr	r2, [sp, #8]
    3634:	f44f 7300 	mov.w	r3, #512	; 0x200
    3638:	4093      	lsls	r3, r2
    363a:	9a04      	ldr	r2, [sp, #16]
    363c:	6892      	ldr	r2, [r2, #8]
    363e:	429a      	cmp	r2, r3
    3640:	f63f ae4f 	bhi.w	32e2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  writeMsg(pr, "Writing root\r\n");
    3644:	490a      	ldr	r1, [pc, #40]	; (3670 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x524>)
    3646:	4638      	mov	r0, r7
    3648:	f7ff fcba 	bl	2fc0 <Print::write(char const*) [clone .isra.0]>
    364c:	e798      	b.n	3580 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x434>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    364e:	f44f 7280 	mov.w	r2, #256	; 0x100
    3652:	f8cd 8008 	str.w	r8, [sp, #8]
    3656:	9207      	str	r2, [sp, #28]
    3658:	e5a1      	b.n	319e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
  writeMsg(pr, "Format done\r\n");
    365a:	2f00      	cmp	r7, #0
    365c:	f43f ae48 	beq.w	32f0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    3660:	4904      	ldr	r1, [pc, #16]	; (3674 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x528>)
    3662:	4638      	mov	r0, r7
    3664:	f7ff fcac 	bl	2fc0 <Print::write(char const*) [clone .isra.0]>
    3668:	e642      	b.n	32f0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    366a:	bf00      	nop
    366c:	200007fc 	.word	0x200007fc
    3670:	20000814 	.word	0x20000814
    3674:	20000824 	.word	0x20000824

00003678 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    3678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    367c:	460c      	mov	r4, r1
    367e:	4615      	mov	r5, r2
    3680:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    3684:	89ab      	ldrh	r3, [r5, #12]
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    3686:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    3688:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    368c:	b91b      	cbnz	r3, 3696 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    368e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    3692:	429a      	cmp	r2, r3
    3694:	d00e      	beq.n	36b4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    3696:	f005 fa8b 	bl	8bb0 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    369a:	f005 fb9d 	bl	8dd8 <toUpcase(unsigned short)>
    369e:	4606      	mov	r6, r0
    36a0:	4638      	mov	r0, r7
    36a2:	f005 fb99 	bl	8dd8 <toUpcase(unsigned short)>
    36a6:	4286      	cmp	r6, r0
    36a8:	d109      	bne.n	36be <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    36aa:	4544      	cmp	r4, r8
    36ac:	d1ea      	bne.n	3684 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    36ae:	2001      	movs	r0, #1
}
    36b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    36b4:	fab7 f087 	clz	r0, r7
    36b8:	0940      	lsrs	r0, r0, #5
}
    36ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    36be:	2000      	movs	r0, #0
}
    36c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000036c4 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    36c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    36c8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    36cc:	b083      	sub	sp, #12
    36ce:	4688      	mov	r8, r1
  if (!isOpen()) {
    36d0:	2b00      	cmp	r3, #0
    36d2:	d04f      	beq.n	3774 <ExFatFile::getName8(char*, unsigned int)+0xb0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    36d4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    36d8:	4607      	mov	r7, r0
    36da:	2b01      	cmp	r3, #1
    36dc:	d953      	bls.n	3786 <ExFatFile::getName8(char*, unsigned int)+0xc2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    36de:	3a01      	subs	r2, #1
  char* str = name;
    36e0:	460b      	mov	r3, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    36e2:	f04f 0a02 	mov.w	sl, #2
  uint16_t hs = 0;
    36e6:	2400      	movs	r4, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    36e8:	188e      	adds	r6, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    36ea:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 378c <ExFatFile::getName8(char*, unsigned int)+0xc8>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    36ee:	2200      	movs	r2, #0
    36f0:	4651      	mov	r1, sl
    36f2:	4638      	mov	r0, r7
    36f4:	9301      	str	r3, [sp, #4]
    36f6:	f7fe faa3 	bl	1c40 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    36fa:	2800      	cmp	r0, #0
    36fc:	d03a      	beq.n	3774 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    36fe:	7802      	ldrb	r2, [r0, #0]
    3700:	2ac1      	cmp	r2, #193	; 0xc1
    3702:	d137      	bne.n	3774 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    3704:	4605      	mov	r5, r0
    3706:	f100 091e 	add.w	r9, r0, #30
    370a:	9b01      	ldr	r3, [sp, #4]
    370c:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    3710:	b324      	cbz	r4, 375c <ExFatFile::getName8(char*, unsigned int)+0x98>
    return 0XDC00 <= c && c <= 0XDFFF;
    3712:	f500 5210 	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    3716:	b292      	uxth	r2, r2
    3718:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    371c:	d22a      	bcs.n	3774 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    371e:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    3722:	f3c0 0009 	ubfx	r0, r0, #0, #10
    3726:	4320      	orrs	r0, r4
    3728:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    372c:	4619      	mov	r1, r3
    372e:	4632      	mov	r2, r6
    3730:	f005 fab4 	bl	8c9c <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    3734:	4603      	mov	r3, r0
    3736:	b1e8      	cbz	r0, 3774 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    3738:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    373a:	454d      	cmp	r5, r9
    373c:	d1e6      	bne.n	370c <ExFatFile::getName8(char*, unsigned int)+0x48>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    373e:	f10a 0a01 	add.w	sl, sl, #1
    3742:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    3746:	fa5f fa8a 	uxtb.w	sl, sl
    374a:	4552      	cmp	r2, sl
    374c:	d2cf      	bcs.n	36ee <ExFatFile::getName8(char*, unsigned int)+0x2a>
      str = ptr;
    }
  }
 done:
  *str = '\0';
  return str - name;
    374e:	eba3 0008 	sub.w	r0, r3, r8
    3752:	4698      	mov	r8, r3
  *str = '\0';
    3754:	2300      	movs	r3, #0
    3756:	f888 3000 	strb.w	r3, [r8]
  return str - name;
    375a:	e00f      	b.n	377c <ExFatFile::getName8(char*, unsigned int)+0xb8>
    return 0XD800 <= c && c <= 0XDFFF;
    375c:	f500 5220 	add.w	r2, r0, #10240	; 0x2800
    3760:	b292      	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    3762:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    3766:	d302      	bcc.n	376e <ExFatFile::getName8(char*, unsigned int)+0xaa>
        if (c == 0) {
    3768:	2800      	cmp	r0, #0
    376a:	d1df      	bne.n	372c <ExFatFile::getName8(char*, unsigned int)+0x68>
    376c:	e7ef      	b.n	374e <ExFatFile::getName8(char*, unsigned int)+0x8a>
      } else if (FsUtf::isHighSurrogate(c)) {
    376e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    3772:	d306      	bcc.n	3782 <ExFatFile::getName8(char*, unsigned int)+0xbe>

 fail:
  *name = 0;
    3774:	2300      	movs	r3, #0
  return 0;
    3776:	4618      	mov	r0, r3
  *name = 0;
    3778:	f888 3000 	strb.w	r3, [r8]
}
    377c:	b003      	add	sp, #12
    377e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3782:	4604      	mov	r4, r0
    3784:	e7d9      	b.n	373a <ExFatFile::getName8(char*, unsigned int)+0x76>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3786:	2000      	movs	r0, #0
    3788:	e7e4      	b.n	3754 <ExFatFile::getName8(char*, unsigned int)+0x90>
    378a:	bf00      	nop
    378c:	000ffc00 	.word	0x000ffc00

00003790 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    3790:	b570      	push	{r4, r5, r6, lr}
    3792:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    3794:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    3796:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    379a:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    379c:	4619      	mov	r1, r3
  uint16_t hash = 0;
    379e:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    37a0:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    37a2:	6123      	str	r3, [r4, #16]
    next = begin;
    37a4:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    37a6:	e017      	b.n	37d8 <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    37a8:	f005 fa02 	bl	8bb0 <FsName::get16()>
    if (u == 0XFFFF) {
    37ac:	42a8      	cmp	r0, r5
    37ae:	d022      	beq.n	37f6 <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    37b0:	f005 fb12 	bl	8dd8 <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    37b4:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    37b6:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    37b8:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    37ba:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    37bc:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    37c0:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    37c2:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    37c4:	fa52 f080 	uxtab	r0, r2, r0
    37c8:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    37ca:	f3c0 004e 	ubfx	r0, r0, #1, #15
    37ce:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    37d2:	fa16 f080 	uxtah	r0, r6, r0
    37d6:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    37d8:	4620      	mov	r0, r4
    37da:	2900      	cmp	r1, #0
    37dc:	d1e4      	bne.n	37a8 <ExFatFile::hashName(ExName_t*)+0x18>
    37de:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    37e2:	429a      	cmp	r2, r3
    37e4:	d1e0      	bne.n	37a8 <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    37e6:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    37e8:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    37ea:	3801      	subs	r0, #1
    37ec:	28fe      	cmp	r0, #254	; 0xfe
    37ee:	bf8c      	ite	hi
    37f0:	2000      	movhi	r0, #0
    37f2:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    37f4:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    37f6:	2000      	movs	r0, #0
}
    37f8:	bd70      	pop	{r4, r5, r6, pc}
    37fa:	bf00      	nop

000037fc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    37fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3800:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    3802:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    3804:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    3806:	2900      	cmp	r1, #0
    3808:	d042      	beq.n	3890 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    380a:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    380e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    3812:	4543      	cmp	r3, r8
    3814:	d942      	bls.n	389c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    3816:	f008 0307 	and.w	r3, r8, #7
    381a:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    381c:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    3820:	409d      	lsls	r5, r3
    3822:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    3824:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    3826:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    3828:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    382c:	2200      	movs	r2, #0
    382e:	4638      	mov	r0, r7
    3830:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    3834:	f005 f97e 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    3838:	b1e8      	cbz	r0, 3876 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    383a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    383e:	4483      	add	fp, r0
    3840:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3844:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    3848:	e00a      	b.n	3860 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    384a:	454a      	cmp	r2, r9
    384c:	d02b      	beq.n	38a6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    384e:	45a0      	cmp	r8, r4
    3850:	d010      	beq.n	3874 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    3852:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    3856:	42a5      	cmp	r5, r4
    3858:	d914      	bls.n	3884 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    385a:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    385e:	d00c      	beq.n	387a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    3860:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    3862:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    3864:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    3868:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    386c:	d0ed      	beq.n	384a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    386e:	45a0      	cmp	r8, r4
        endAlloc++;
    3870:	4626      	mov	r6, r4
        if (endAlloc == start) {
    3872:	d1ee      	bne.n	3852 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    3874:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    3876:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    387a:	4558      	cmp	r0, fp
      mask = 1;
    387c:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    3880:	d1e0      	bne.n	3844 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    3882:	e001      	b.n	3888 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    3884:	2600      	movs	r6, #0
    3886:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    3888:	2501      	movs	r5, #1
    i = 0;
    388a:	f04f 0b00 	mov.w	fp, #0
    388e:	e7cb      	b.n	3828 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    3890:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    3894:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    3898:	4543      	cmp	r3, r8
    389a:	d8bc      	bhi.n	3816 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    389c:	f04f 0800 	mov.w	r8, #0
    38a0:	2501      	movs	r5, #1
    start = 0;
    38a2:	46c3      	mov	fp, r8
    38a4:	e7be      	b.n	3824 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    38a6:	f1ba 0f00 	cmp.w	sl, #0
    38aa:	d104      	bne.n	38b6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    38ac:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    38b0:	bf08      	it	eq
    38b2:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    38b6:	1cb0      	adds	r0, r6, #2
}
    38b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000038bc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    38bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    38c0:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    38c2:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    38c4:	4615      	mov	r5, r2
    38c6:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    38c8:	1883      	adds	r3, r0, r2
    38ca:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    38ce:	4293      	cmp	r3, r2
    38d0:	d837      	bhi.n	3942 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    38d2:	bbce      	cbnz	r6, 3948 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    38d4:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    38d8:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    38da:	bf88      	it	hi
    38dc:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    38e0:	f000 0307 	and.w	r3, r0, #7
    38e4:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    38e6:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    38ea:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    38ee:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    38f0:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    38f4:	b2e4      	uxtb	r4, r4
    38f6:	2201      	movs	r2, #1
    38f8:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    38fa:	188f      	adds	r7, r1, r2
    38fc:	f005 f91a 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    3900:	b1f8      	cbz	r0, 3942 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    3902:	f109 3eff 	add.w	lr, r9, #4294967295	; 0xffffffff
    3906:	4486      	add	lr, r0
    3908:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    390c:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    3910:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    3914:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    3918:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    391c:	bf14      	ite	ne
    391e:	2201      	movne	r2, #1
    3920:	2200      	moveq	r2, #0
    3922:	42b2      	cmp	r2, r6
    3924:	d00d      	beq.n	3942 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    3926:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    3928:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    392c:	d018      	beq.n	3960 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    392e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    3932:	d1ed      	bne.n	3910 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    3934:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    3936:	46a1      	mov	r9, r4
    3938:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    393c:	d1e6      	bne.n	390c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    393e:	4639      	mov	r1, r7
    3940:	e7d9      	b.n	38f6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

 fail:
  return false;
    3942:	2000      	movs	r0, #0
}
    3944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    3948:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    394c:	428b      	cmp	r3, r1
    394e:	d9c7      	bls.n	38e0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    3950:	4281      	cmp	r1, r0
    3952:	d3c5      	bcc.n	38e0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    3954:	4293      	cmp	r3, r2
    3956:	bf28      	it	cs
    3958:	2300      	movcs	r3, #0
    395a:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    395e:	e7bf      	b.n	38e0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    3960:	2001      	movs	r0, #1
}
    3962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3966:	bf00      	nop

00003968 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    3968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    396a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    396e:	3301      	adds	r3, #1
    3970:	428b      	cmp	r3, r1
    3972:	d201      	bcs.n	3978 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    3974:	2000      	movs	r0, #0
}
    3976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3978:	4607      	mov	r7, r0
    397a:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    397c:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    3980:	2500      	movs	r5, #0
    3982:	e005      	b.n	3990 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    3984:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    3988:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    398a:	3301      	adds	r3, #1
    398c:	42a3      	cmp	r3, r4
    398e:	d3f1      	bcc.n	3974 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3990:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    3994:	2200      	movs	r2, #0
    3996:	4630      	mov	r0, r6
    3998:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    399c:	f005 f8ca 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    39a0:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    39a2:	2800      	cmp	r0, #0
    39a4:	d0e6      	beq.n	3974 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    39a6:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    39aa:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    39ac:	1c63      	adds	r3, r4, #1
    39ae:	d1e9      	bne.n	3984 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    39b0:	1c68      	adds	r0, r5, #1
}
    39b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000039b4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    39b4:	b538      	push	{r3, r4, r5, lr}
    39b6:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    39b8:	680b      	ldr	r3, [r1, #0]
    39ba:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    39be:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    39c2:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    39c6:	3b02      	subs	r3, #2
    39c8:	6865      	ldr	r5, [r4, #4]
    39ca:	fa03 f30c 	lsl.w	r3, r3, ip
    39ce:	4029      	ands	r1, r5
    39d0:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    39d4:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    39d8:	4419      	add	r1, r3
    39da:	f005 f8ab 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    39de:	b118      	cbz	r0, 39e8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    39e0:	6863      	ldr	r3, [r4, #4]
    39e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    39e6:	4418      	add	r0, r3
}
    39e8:	bd38      	pop	{r3, r4, r5, pc}
    39ea:	bf00      	nop

000039ec <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    39ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    39f0:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    39f2:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    39f6:	6849      	ldr	r1, [r1, #4]
    39f8:	400b      	ands	r3, r1
  pos->position += offset;
    39fa:	4411      	add	r1, r2
    39fc:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    39fe:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3a00:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    3a04:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    3a08:	b2d2      	uxtb	r2, r2
    3a0a:	40d3      	lsrs	r3, r2
  while (tmp--) {
    3a0c:	b32b      	cbz	r3, 3a5a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    3a0e:	4680      	mov	r8, r0
    3a10:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    3a12:	f500 7904 	add.w	r9, r0, #528	; 0x210
    3a16:	e005      	b.n	3a24 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    3a18:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    3a1a:	3d01      	subs	r5, #1
      pos->cluster++;
    3a1c:	f103 0301 	add.w	r3, r3, #1
    3a20:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    3a22:	d31a      	bcc.n	3a5a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    3a24:	7a26      	ldrb	r6, [r4, #8]
    3a26:	2e00      	cmp	r6, #0
    3a28:	d1f6      	bne.n	3a18 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    3a2a:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    3a2e:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    3a30:	6827      	ldr	r7, [r4, #0]
    3a32:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    3a34:	3301      	adds	r3, #1
    3a36:	429f      	cmp	r7, r3
    3a38:	d812      	bhi.n	3a60 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3a3a:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    3a3e:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    3a42:	f005 f877 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    3a46:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    3a48:	b150      	cbz	r0, 3a60 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    3a4a:	f3c7 0708 	ubfx	r7, r7, #0, #9
    3a4e:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    3a50:	1c5a      	adds	r2, r3, #1
    3a52:	d009      	beq.n	3a68 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    3a54:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    3a56:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    3a58:	d2e4      	bcs.n	3a24 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    3a5a:	2001      	movs	r0, #1
}
    3a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    3a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    3a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    3a68:	4630      	mov	r0, r6
}
    3a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3a6e:	bf00      	nop

00003a70 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    3a70:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    3a72:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    3a76:	3301      	adds	r3, #1
    3a78:	428b      	cmp	r3, r1
    3a7a:	d202      	bcs.n	3a82 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    3a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  return 1;
}
    3a80:	bd38      	pop	{r3, r4, r5, pc}
    3a82:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3a84:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    3a88:	4615      	mov	r5, r2
    3a8a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    3a8e:	2200      	movs	r2, #0
    3a90:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    3a94:	f005 f84e 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    3a98:	2800      	cmp	r0, #0
    3a9a:	d0ef      	beq.n	3a7c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    3a9c:	00a4      	lsls	r4, r4, #2
    3a9e:	f3c4 0408 	ubfx	r4, r4, #0, #9
    3aa2:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    3aa4:	1c5a      	adds	r2, r3, #1
    3aa6:	d002      	beq.n	3aae <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    3aa8:	2001      	movs	r0, #1
  *value = next;
    3aaa:	602b      	str	r3, [r5, #0]
}
    3aac:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    3aae:	2000      	movs	r0, #0
}
    3ab0:	bd38      	pop	{r3, r4, r5, pc}
    3ab2:	bf00      	nop

00003ab4 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    3ab4:	2901      	cmp	r1, #1
    3ab6:	d91b      	bls.n	3af0 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    3ab8:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    3aba:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    3abe:	460c      	mov	r4, r1
    3ac0:	3301      	adds	r3, #1
    3ac2:	428b      	cmp	r3, r1
    3ac4:	d201      	bcs.n	3aca <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    3ac6:	2000      	movs	r0, #0
}
    3ac8:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3aca:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    3ace:	4615      	mov	r5, r2
    3ad0:	f500 7004 	add.w	r0, r0, #528	; 0x210
    3ad4:	2201      	movs	r2, #1
    3ad6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    3ada:	f005 f82b 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    3ade:	4603      	mov	r3, r0
    3ae0:	2800      	cmp	r0, #0
    3ae2:	d0f0      	beq.n	3ac6 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    3ae4:	00a4      	lsls	r4, r4, #2
  return true;
    3ae6:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    3ae8:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    3aec:	511d      	str	r5, [r3, r4]
}
    3aee:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    3af0:	2000      	movs	r0, #0
}
    3af2:	4770      	bx	lr

00003af4 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    3af4:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    3af8:	3301      	adds	r3, #1
    3afa:	4299      	cmp	r1, r3
    3afc:	d901      	bls.n	3b02 <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

 fail:
  return false;
}
    3afe:	2000      	movs	r0, #0
    3b00:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    3b02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b06:	4605      	mov	r5, r0
    3b08:	b083      	sub	sp, #12
    3b0a:	460c      	mov	r4, r1
    3b0c:	f500 7904 	add.w	r9, r0, #528	; 0x210
    3b10:	460f      	mov	r7, r1
    3b12:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3b16:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    3b1a:	2200      	movs	r2, #0
    3b1c:	4648      	mov	r0, r9
    3b1e:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    3b22:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    3b26:	f005 f805 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    3b2a:	b190      	cbz	r0, 3b52 <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    3b2c:	00a3      	lsls	r3, r4, #2
    3b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    3b32:	58c2      	ldr	r2, [r0, r3]
    3b34:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    3b36:	1c53      	adds	r3, r2, #1
    3b38:	bf16      	itet	ne
    3b3a:	4616      	movne	r6, r2
    3b3c:	f04f 0a00 	moveq.w	sl, #0
    3b40:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    3b44:	2c01      	cmp	r4, #1
    3b46:	d904      	bls.n	3b52 <ExFatPartition::freeChain(unsigned long)+0x5e>
    3b48:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    3b4c:	3201      	adds	r2, #1
    3b4e:	4294      	cmp	r4, r2
    3b50:	d903      	bls.n	3b5a <ExFatPartition::freeChain(unsigned long)+0x66>
}
    3b52:	2000      	movs	r0, #0
    3b54:	b003      	add	sp, #12
    3b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3b5a:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    3b5e:	2201      	movs	r2, #1
    3b60:	4648      	mov	r0, r9
    3b62:	4459      	add	r1, fp
    3b64:	f004 ffe6 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    3b68:	2800      	cmp	r0, #0
    3b6a:	d0f2      	beq.n	3b52 <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    3b6c:	9b01      	ldr	r3, [sp, #4]
    3b6e:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    3b72:	f1ba 0f00 	cmp.w	sl, #0
    3b76:	d012      	beq.n	3b9e <ExFatPartition::freeChain(unsigned long)+0xaa>
    3b78:	3401      	adds	r4, #1
    3b7a:	42b4      	cmp	r4, r6
    3b7c:	d008      	beq.n	3b90 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    3b7e:	2300      	movs	r3, #0
    3b80:	1be2      	subs	r2, r4, r7
    3b82:	4639      	mov	r1, r7
    3b84:	4628      	mov	r0, r5
    3b86:	f7ff fe99 	bl	38bc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    3b8a:	2800      	cmp	r0, #0
    3b8c:	d0e1      	beq.n	3b52 <ExFatPartition::freeChain(unsigned long)+0x5e>
    3b8e:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    3b90:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    3b94:	3301      	adds	r3, #1
    3b96:	42b3      	cmp	r3, r6
    3b98:	d3db      	bcc.n	3b52 <ExFatPartition::freeChain(unsigned long)+0x5e>
    3b9a:	4634      	mov	r4, r6
    3b9c:	e7bb      	b.n	3b16 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    3b9e:	1c62      	adds	r2, r4, #1
    3ba0:	4653      	mov	r3, sl
    3ba2:	4639      	mov	r1, r7
    3ba4:	4628      	mov	r0, r5
    3ba6:	1bd2      	subs	r2, r2, r7
}
    3ba8:	b003      	add	sp, #12
    3baa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    3bae:	f7ff be85 	b.w	38bc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    3bb2:	bf00      	nop

00003bb4 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    3bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    3bb8:	2500      	movs	r5, #0
uint32_t ExFatPartition::freeClusterCount() {
    3bba:	4606      	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    3bbc:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    3bc0:	f500 7804 	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    3bc4:	462c      	mov	r4, r5
    3bc6:	2200      	movs	r2, #0
    3bc8:	4640      	mov	r0, r8
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    3bca:	1c4f      	adds	r7, r1, #1
    3bcc:	f004 ffb2 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    3bd0:	b1a8      	cbz	r0, 3bfe <ExFatPartition::freeClusterCount()+0x4a>
    3bd2:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
    3bd6:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    3bda:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    3bde:	e005      	b.n	3bec <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    3be0:	b979      	cbnz	r1, 3c02 <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    3be2:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    3be4:	4284      	cmp	r4, r0
    3be6:	d209      	bcs.n	3bfc <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    3be8:	454c      	cmp	r4, r9
    3bea:	d016      	beq.n	3c1a <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    3bec:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    3bf0:	29ff      	cmp	r1, #255	; 0xff
    3bf2:	d1f5      	bne.n	3be0 <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    3bf4:	3408      	adds	r4, #8
        usedCount+= 8;
    3bf6:	3508      	adds	r5, #8
      if (nc >= m_clusterCount) {
    3bf8:	4284      	cmp	r4, r0
    3bfa:	d3f5      	bcc.n	3be8 <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    3bfc:	1b40      	subs	r0, r0, r5
      }
    }
  }
}
    3bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3c02:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    3c04:	2301      	movs	r3, #1
          if ((mask & cache[i])) {
    3c06:	4219      	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    3c08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            usedCount++;
    3c0c:	bf18      	it	ne
    3c0e:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    3c10:	3a01      	subs	r2, #1
    3c12:	fa5f f38c 	uxtb.w	r3, ip
    3c16:	d1f6      	bne.n	3c06 <ExFatPartition::freeClusterCount()+0x52>
    3c18:	e7e3      	b.n	3be2 <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    3c1a:	4639      	mov	r1, r7
    3c1c:	e7d3      	b.n	3bc6 <ExFatPartition::freeClusterCount()+0x12>
    3c1e:	bf00      	nop

00003c20 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    3c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    3c22:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    3c24:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    3c28:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    3c2c:	4615      	mov	r5, r2
  m_blockDev = dev;
    3c2e:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    3c32:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    3c34:	6041      	str	r1, [r0, #4]
    3c36:	461a      	mov	r2, r3
    3c38:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    3c3c:	4619      	mov	r1, r3
  m_fatType = 0;
    3c3e:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    3c42:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    3c44:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    3c46:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    3c4a:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    3c4e:	4638      	mov	r0, r7
    3c50:	f004 ff70 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    3c54:	2d04      	cmp	r5, #4
    3c56:	d80d      	bhi.n	3c74 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    3c58:	4606      	mov	r6, r0
    3c5a:	b158      	cbz	r0, 3c74 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    3c5c:	b1bd      	cbz	r5, 3c8e <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    3c5e:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    3c60:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    3c64:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    3c68:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    3c6c:	d102      	bne.n	3c74 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    3c6e:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    3c72:	b90b      	cbnz	r3, 3c78 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    3c74:	2000      	movs	r0, #0
}
    3c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    3c78:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    3c7c:	4638      	mov	r0, r7
    3c7e:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    3c82:	4629      	mov	r1, r5
    3c84:	f004 ff56 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    3c88:	4606      	mov	r6, r0
    3c8a:	2800      	cmp	r0, #0
    3c8c:	d0f2      	beq.n	3c74 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    3c8e:	2205      	movs	r2, #5
    3c90:	491a      	ldr	r1, [pc, #104]	; (3cfc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    3c92:	1cf0      	adds	r0, r6, #3
    3c94:	f009 fc78 	bl	d588 <strncmp>
    3c98:	2800      	cmp	r0, #0
    3c9a:	d1eb      	bne.n	3c74 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    3c9c:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    3ca0:	2b09      	cmp	r3, #9
    3ca2:	d1e7      	bne.n	3c74 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3ca4:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    3ca6:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3ca8:	442b      	add	r3, r5
    3caa:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    3cae:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    3cb0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3cb4:	6db3      	ldr	r3, [r6, #88]	; 0x58
    3cb6:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3cb8:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3cba:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    3cbe:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    3cc0:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    3cc4:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    3cc6:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    3cca:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    3cce:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    3cd2:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3cd4:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    3cd8:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3cdc:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    3ce0:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3ce2:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    3ce6:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    3cea:	462a      	mov	r2, r5
    3cec:	f7ff fd86 	bl	37fc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    3cf0:	2340      	movs	r3, #64	; 0x40
  return true;
    3cf2:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    3cf4:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    3cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cfa:	bf00      	nop
    3cfc:	20000844 	.word	0x20000844

00003d00 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    3d00:	b510      	push	{r4, lr}
    3d02:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    3d04:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    3d08:	f7ff fe2e 	bl	3968 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3d0c:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    3d10:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    3d12:	b2db      	uxtb	r3, r3
}
    3d14:	4098      	lsls	r0, r3
    3d16:	bd10      	pop	{r4, pc}

00003d18 <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    3d18:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    3d1a:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    3d1e:	b082      	sub	sp, #8
    3d20:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    3d22:	2b00      	cmp	r3, #0
    3d24:	db0d      	blt.n	3d42 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    3d26:	68a5      	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3d28:	f105 0028 	add.w	r0, r5, #40	; 0x28
    3d2c:	f004 fed6 	bl	8adc <FsCache::sync()>
    3d30:	2800      	cmp	r0, #0
    3d32:	d13b      	bne.n	3dac <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    3d34:	7863      	ldrb	r3, [r4, #1]
  return false;
    3d36:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    3d38:	f043 0301 	orr.w	r3, r3, #1
    3d3c:	7063      	strb	r3, [r4, #1]
}
    3d3e:	b002      	add	sp, #8
    3d40:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    3d42:	6880      	ldr	r0, [r0, #8]
    3d44:	2201      	movs	r2, #1
    3d46:	69a1      	ldr	r1, [r4, #24]
    3d48:	3028      	adds	r0, #40	; 0x28
    3d4a:	f004 fef3 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    3d4e:	2800      	cmp	r0, #0
    3d50:	d0f0      	beq.n	3d34 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    3d52:	88a5      	ldrh	r5, [r4, #4]
    3d54:	f005 050f 	and.w	r5, r5, #15
    3d58:	016b      	lsls	r3, r5, #5
    3d5a:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    3d5e:	5cc3      	ldrb	r3, [r0, r3]
    3d60:	2be5      	cmp	r3, #229	; 0xe5
    3d62:	d0e7      	beq.n	3d34 <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    3d64:	7823      	ldrb	r3, [r4, #0]
    3d66:	071b      	lsls	r3, r3, #28
    3d68:	d501      	bpl.n	3d6e <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    3d6a:	69e3      	ldr	r3, [r4, #28]
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    3d6c:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    3d6e:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    3d70:	4915      	ldr	r1, [pc, #84]	; (3dc8 <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    3d72:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    3d74:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    3d76:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    3d78:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    3d7a:	b166      	cbz	r6, 3d96 <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    3d7c:	f10d 0203 	add.w	r2, sp, #3
    3d80:	f10d 0106 	add.w	r1, sp, #6
    3d84:	a801      	add	r0, sp, #4
    3d86:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    3d88:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    3d8c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3d90:	832b      	strh	r3, [r5, #24]
    3d92:	826b      	strh	r3, [r5, #18]
    3d94:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    3d96:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    3d98:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    3d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3d9e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    3da2:	70a3      	strb	r3, [r4, #2]
    3da4:	f004 fe9a 	bl	8adc <FsCache::sync()>
    3da8:	2800      	cmp	r0, #0
    3daa:	d0c3      	beq.n	3d34 <FatFile::sync() [clone .part.0]+0x1c>
    3dac:	f505 700e 	add.w	r0, r5, #568	; 0x238
    3db0:	f004 fe94 	bl	8adc <FsCache::sync()>
    3db4:	2800      	cmp	r0, #0
    3db6:	d0bd      	beq.n	3d34 <FatFile::sync() [clone .part.0]+0x1c>
    3db8:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    3dba:	6803      	ldr	r3, [r0, #0]
    3dbc:	6a1b      	ldr	r3, [r3, #32]
    3dbe:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3dc0:	2800      	cmp	r0, #0
    3dc2:	d0b7      	beq.n	3d34 <FatFile::sync() [clone .part.0]+0x1c>
    3dc4:	e7bb      	b.n	3d3e <FatFile::sync() [clone .part.0]+0x26>
    3dc6:	bf00      	nop
    3dc8:	200091b4 	.word	0x200091b4

00003dcc <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    3dcc:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    3dce:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    3dd0:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    3dd4:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    3dd6:	6880      	ldr	r0, [r0, #8]
    3dd8:	4629      	mov	r1, r5
    3dda:	f002 f921 	bl	6020 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    3dde:	b150      	cbz	r0, 3df6 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    3de0:	b155      	cbz	r5, 3df8 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    3de2:	6923      	ldr	r3, [r4, #16]
    3de4:	3501      	adds	r5, #1
    3de6:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    3de8:	78a3      	ldrb	r3, [r4, #2]
    3dea:	bf18      	it	ne
    3dec:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    3df0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3df4:	70a3      	strb	r3, [r4, #2]
}
    3df6:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    3df8:	78a3      	ldrb	r3, [r4, #2]
    3dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3dfe:	e7f7      	b.n	3df0 <FatFile::addCluster()+0x24>

00003e00 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    3e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    3e02:	7804      	ldrb	r4, [r0, #0]
    3e04:	f014 0420 	ands.w	r4, r4, #32
    3e08:	d104      	bne.n	3e14 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    3e0a:	4b1a      	ldr	r3, [pc, #104]	; (3e74 <FatFile::addDirCluster()+0x74>)
    3e0c:	4605      	mov	r5, r0
    3e0e:	6942      	ldr	r2, [r0, #20]
    3e10:	429a      	cmp	r2, r3
    3e12:	d302      	bcc.n	3e1a <FatFile::addDirCluster()+0x1a>
  return false;
    3e14:	2700      	movs	r7, #0
}
    3e16:	4638      	mov	r0, r7
    3e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    3e1a:	f7ff ffd7 	bl	3dcc <FatFile::addCluster()>
    3e1e:	4607      	mov	r7, r0
    3e20:	2800      	cmp	r0, #0
    3e22:	d0f7      	beq.n	3e14 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    3e24:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3e26:	692e      	ldr	r6, [r5, #16]
    3e28:	7982      	ldrb	r2, [r0, #6]
    3e2a:	3e02      	subs	r6, #2
    3e2c:	6941      	ldr	r1, [r0, #20]
    3e2e:	4096      	lsls	r6, r2
    3e30:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    3e32:	7901      	ldrb	r1, [r0, #4]
    3e34:	b1a9      	cbz	r1, 3e62 <FatFile::addDirCluster()+0x62>
    3e36:	4621      	mov	r1, r4
    3e38:	e006      	b.n	3e48 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    3e3a:	f009 fb53 	bl	d4e4 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    3e3e:	68a8      	ldr	r0, [r5, #8]
    3e40:	b2e1      	uxtb	r1, r4
    3e42:	7902      	ldrb	r2, [r0, #4]
    3e44:	428a      	cmp	r2, r1
    3e46:	d90b      	bls.n	3e60 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    3e48:	4431      	add	r1, r6
    3e4a:	2205      	movs	r2, #5
    3e4c:	3028      	adds	r0, #40	; 0x28
    3e4e:	3401      	adds	r4, #1
    3e50:	f004 fe70 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    3e54:	f44f 7200 	mov.w	r2, #512	; 0x200
    3e58:	2100      	movs	r1, #0
    if (!pc) {
    3e5a:	2800      	cmp	r0, #0
    3e5c:	d1ed      	bne.n	3e3a <FatFile::addDirCluster()+0x3a>
    3e5e:	e7d9      	b.n	3e14 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    3e60:	7982      	ldrb	r2, [r0, #6]
    3e62:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    3e66:	6969      	ldr	r1, [r5, #20]
}
    3e68:	4638      	mov	r0, r7
    3e6a:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    3e6c:	fa11 f383 	uxtah	r3, r1, r3
    3e70:	616b      	str	r3, [r5, #20]
}
    3e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e74:	001ffe00 	.word	0x001ffe00

00003e78 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    3e78:	b510      	push	{r4, lr}
    3e7a:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
    3e7c:	6880      	ldr	r0, [r0, #8]
    3e7e:	460a      	mov	r2, r1
    3e80:	3028      	adds	r0, #40	; 0x28
    3e82:	69a1      	ldr	r1, [r4, #24]
    3e84:	f004 fe56 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    3e88:	b120      	cbz	r0, 3e94 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    3e8a:	88a3      	ldrh	r3, [r4, #4]
    3e8c:	f003 030f 	and.w	r3, r3, #15
    3e90:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
    3e94:	bd10      	pop	{r4, pc}
    3e96:	bf00      	nop

00003e98 <FatFile::close()>:
bool FatFile::close() {
    3e98:	b510      	push	{r4, lr}
  if (!isOpen()) {
    3e9a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    3e9c:	4604      	mov	r4, r0
  if (!isOpen()) {
    3e9e:	b12b      	cbz	r3, 3eac <FatFile::close()+0x14>
    3ea0:	f7ff ff3a 	bl	3d18 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    3ea4:	2300      	movs	r3, #0
    3ea6:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3ea8:	70a3      	strb	r3, [r4, #2]
}
    3eaa:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    3eac:	2300      	movs	r3, #0
    return true;
    3eae:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    3eb0:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3eb2:	70a3      	strb	r3, [r4, #2]
}
    3eb4:	bd10      	pop	{r4, pc}
    3eb6:	bf00      	nop

00003eb8 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    3eb8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    3eba:	7803      	ldrb	r3, [r0, #0]
bool FatFile::dirEntry(DirFat_t* dst) {
    3ebc:	4605      	mov	r5, r0
    3ebe:	460c      	mov	r4, r1
  if (!isOpen()) {
    3ec0:	b113      	cbz	r3, 3ec8 <FatFile::dirEntry(DirFat_t*)+0x10>
    3ec2:	f7ff ff29 	bl	3d18 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    3ec6:	b1f0      	cbz	r0, 3f06 <FatFile::dirEntry(DirFat_t*)+0x4e>
    3ec8:	68a8      	ldr	r0, [r5, #8]
    3eca:	2200      	movs	r2, #0
    3ecc:	69a9      	ldr	r1, [r5, #24]
    3ece:	3028      	adds	r0, #40	; 0x28
    3ed0:	f004 fe30 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    3ed4:	b1b8      	cbz	r0, 3f06 <FatFile::dirEntry(DirFat_t*)+0x4e>
  return dir + (m_dirIndex & 0XF);
    3ed6:	88aa      	ldrh	r2, [r5, #4]
    3ed8:	f002 020f 	and.w	r2, r2, #15
    3edc:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    3ee0:	0152      	lsls	r2, r2, #5
  memcpy(dst, dir, sizeof(DirFat_t));
    3ee2:	685d      	ldr	r5, [r3, #4]
    3ee4:	5880      	ldr	r0, [r0, r2]
    3ee6:	6899      	ldr	r1, [r3, #8]
    3ee8:	68da      	ldr	r2, [r3, #12]
    3eea:	6020      	str	r0, [r4, #0]
    3eec:	6065      	str	r5, [r4, #4]
    3eee:	60a1      	str	r1, [r4, #8]
    3ef0:	60e2      	str	r2, [r4, #12]
    3ef2:	6918      	ldr	r0, [r3, #16]
    3ef4:	695d      	ldr	r5, [r3, #20]
    3ef6:	6999      	ldr	r1, [r3, #24]
    3ef8:	69da      	ldr	r2, [r3, #28]
    3efa:	6120      	str	r0, [r4, #16]
  return true;
    3efc:	2001      	movs	r0, #1
  memcpy(dst, dir, sizeof(DirFat_t));
    3efe:	6165      	str	r5, [r4, #20]
    3f00:	61a1      	str	r1, [r4, #24]
    3f02:	61e2      	str	r2, [r4, #28]
}
    3f04:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    3f06:	2000      	movs	r0, #0
}
    3f08:	bd38      	pop	{r3, r4, r5, pc}
    3f0a:	bf00      	nop

00003f0c <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    3f0c:	b530      	push	{r4, r5, lr}
    3f0e:	b089      	sub	sp, #36	; 0x24
    3f10:	460d      	mov	r5, r1
    3f12:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    3f14:	4669      	mov	r1, sp
    3f16:	f7ff ffcf 	bl	3eb8 <FatFile::dirEntry(DirFat_t*)>
    3f1a:	b128      	cbz	r0, 3f28 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    3f1c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  *ptime = getLe16(dir.createTime);
    3f20:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  *pdate = getLe16(dir.createDate);
    3f24:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    3f26:	8023      	strh	r3, [r4, #0]
}
    3f28:	b009      	add	sp, #36	; 0x24
    3f2a:	bd30      	pop	{r4, r5, pc}

00003f2c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    3f2c:	b530      	push	{r4, r5, lr}
    3f2e:	b089      	sub	sp, #36	; 0x24
    3f30:	460d      	mov	r5, r1
    3f32:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    3f34:	4669      	mov	r1, sp
    3f36:	f7ff ffbf 	bl	3eb8 <FatFile::dirEntry(DirFat_t*)>
    3f3a:	b128      	cbz	r0, 3f48 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    3f3c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    3f40:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  *pdate = getLe16(dir.modifyDate);
    3f44:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    3f46:	8023      	strh	r3, [r4, #0]
}
    3f48:	b009      	add	sp, #36	; 0x24
    3f4a:	bd30      	pop	{r4, r5, pc}

00003f4c <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    3f4c:	780b      	ldrb	r3, [r1, #0]
    3f4e:	f013 0f70 	tst.w	r3, #112	; 0x70
    3f52:	d101      	bne.n	3f58 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    3f54:	2000      	movs	r0, #0
    3f56:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    3f58:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    3f5a:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    3f5e:	b089      	sub	sp, #36	; 0x24
    3f60:	460d      	mov	r5, r1
    3f62:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    3f64:	f001 f8f0 	bl	5148 <FatFile::open(FatFile*, FatLfn_t*, int)>
    3f68:	b138      	cbz	r0, 3f7a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    3f6a:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    3f6c:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    3f6e:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    3f70:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    3f72:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    3f74:	f7ff ff44 	bl	3e00 <FatFile::addDirCluster()>
    3f78:	b910      	cbnz	r0, 3f80 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    3f7a:	2000      	movs	r0, #0
    3f7c:	b009      	add	sp, #36	; 0x24
    3f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    3f80:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    3f82:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    3f84:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    3f86:	b16b      	cbz	r3, 3fa4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    3f88:	6963      	ldr	r3, [r4, #20]
    3f8a:	b133      	cbz	r3, 3f9a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3f8c:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    3f8e:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3f90:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    3f94:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3f98:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    3f9a:	4620      	mov	r0, r4
    3f9c:	f7ff febc 	bl	3d18 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    3fa0:	2800      	cmp	r0, #0
    3fa2:	d0ea      	beq.n	3f7a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    3fa4:	68a0      	ldr	r0, [r4, #8]
    3fa6:	2201      	movs	r2, #1
    3fa8:	69a1      	ldr	r1, [r4, #24]
    3faa:	3028      	adds	r0, #40	; 0x28
    3fac:	f004 fdc2 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    3fb0:	2800      	cmp	r0, #0
    3fb2:	d0e2      	beq.n	3f7a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    3fb4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    3fb8:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    3fba:	f00c 0c0f 	and.w	ip, ip, #15
    3fbe:	ea4f 134c 	mov.w	r3, ip, lsl #5
    3fc2:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    3fc6:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    3fca:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    3fcc:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3fce:	6a23      	ldr	r3, [r4, #32]
    3fd0:	f897 e006 	ldrb.w	lr, [r7, #6]
    3fd4:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    3fd6:	f8dc 1004 	ldr.w	r1, [ip, #4]
    3fda:	f8dc 2008 	ldr.w	r2, [ip, #8]
    3fde:	f8dc 300c 	ldr.w	r3, [ip, #12]
    3fe2:	fa06 f60e 	lsl.w	r6, r6, lr
    3fe6:	46ee      	mov	lr, sp
    3fe8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3fec:	f8dc 0010 	ldr.w	r0, [ip, #16]
    3ff0:	f8dc 1014 	ldr.w	r1, [ip, #20]
    3ff4:	f8dc 2018 	ldr.w	r2, [ip, #24]
    3ff8:	f8dc 301c 	ldr.w	r3, [ip, #28]
    3ffc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    4000:	697b      	ldr	r3, [r7, #20]
    4002:	f107 0028 	add.w	r0, r7, #40	; 0x28
    4006:	2201      	movs	r2, #1
    4008:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    400a:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    400e:	f8cd 3001 	str.w	r3, [sp, #1]
    4012:	f8cd 3005 	str.w	r3, [sp, #5]
    4016:	f8ad 3009 	strh.w	r3, [sp, #9]
    401a:	f004 fd8b 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    401e:	4684      	mov	ip, r0
    4020:	2800      	cmp	r0, #0
    4022:	d0aa      	beq.n	3f7a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    4024:	272e      	movs	r7, #46	; 0x2e
    4026:	46ee      	mov	lr, sp
    4028:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    402c:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    402e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4032:	f8cc 0000 	str.w	r0, [ip]
    4036:	f8cc 1004 	str.w	r1, [ip, #4]
    403a:	f8cc 2008 	str.w	r2, [ip, #8]
    403e:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    4042:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    4046:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    404a:	f8cc 0010 	str.w	r0, [ip, #16]
    404e:	f8cc 1014 	str.w	r1, [ip, #20]
    4052:	f8cc 2018 	str.w	r2, [ip, #24]
    4056:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    405a:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    405c:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    405e:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    4062:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    4066:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    4068:	f8cc 0020 	str.w	r0, [ip, #32]
    406c:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    4070:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    4074:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    4078:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    407a:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    407e:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    4082:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    4086:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    408a:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    408c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4090:	f004 fd24 	bl	8adc <FsCache::sync()>
    4094:	2800      	cmp	r0, #0
    4096:	f43f af70 	beq.w	3f7a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    409a:	f504 700e 	add.w	r0, r4, #568	; 0x238
    409e:	f004 fd1d 	bl	8adc <FsCache::sync()>
    40a2:	2800      	cmp	r0, #0
    40a4:	f43f af69 	beq.w	3f7a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    40a8:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    40aa:	6803      	ldr	r3, [r0, #0]
    40ac:	6a1b      	ldr	r3, [r3, #32]
}
    40ae:	b009      	add	sp, #36	; 0x24
    40b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    40b4:	4718      	bx	r3
    40b6:	bf00      	nop

000040b8 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    40b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 */
/**
 * \class FsName
 * \brief Handle UTF-8 file names.
 */
class FsName {
    40bc:	2600      	movs	r6, #0
    40be:	b094      	sub	sp, #80	; 0x50
    40c0:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    40c2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    40c4:	9201      	str	r2, [sp, #4]
    40c6:	f8ad 6014 	strh.w	r6, [sp, #20]
    40ca:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    40cc:	2b00      	cmp	r3, #0
    40ce:	d141      	bne.n	4154 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    40d0:	780b      	ldrb	r3, [r1, #0]
    40d2:	460d      	mov	r5, r1
    40d4:	f013 0f70 	tst.w	r3, #112	; 0x70
    40d8:	d03c      	beq.n	4154 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    40da:	7813      	ldrb	r3, [r2, #0]
    40dc:	4604      	mov	r4, r0
    40de:	4616      	mov	r6, r2
    40e0:	2b2f      	cmp	r3, #47	; 0x2f
    40e2:	d03b      	beq.n	415c <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    40e4:	2700      	movs	r7, #0
    40e6:	e028      	b.n	413a <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    40e8:	9e01      	ldr	r6, [sp, #4]
    40ea:	7836      	ldrb	r6, [r6, #0]
    40ec:	2e00      	cmp	r6, #0
    40ee:	d050      	beq.n	4192 <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    40f0:	f001 f82a 	bl	5148 <FatFile::open(FatFile*, FatLfn_t*, int)>
    40f4:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    40f6:	aa02      	add	r2, sp, #8
    40f8:	4629      	mov	r1, r5
    40fa:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    40fc:	b92b      	cbnz	r3, 410a <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    40fe:	f1b8 0f00 	cmp.w	r8, #0
    4102:	d027      	beq.n	4154 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    4104:	f7ff ff22 	bl	3f4c <FatFile::mkdir(FatFile*, FatLfn_t*)>
    4108:	b320      	cbz	r0, 4154 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    410a:	46a6      	mov	lr, r4
    410c:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    4110:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4114:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4118:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    411c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4120:	f8de 5000 	ldr.w	r5, [lr]
    4124:	4620      	mov	r0, r4
  if (!isOpen()) {
    4126:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    4128:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    412c:	b10b      	cbz	r3, 4132 <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    412e:	f7ff fdf3 	bl	3d18 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    4132:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    4134:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    4136:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    4138:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    413a:	4631      	mov	r1, r6
    413c:	ab01      	add	r3, sp, #4
    413e:	aa02      	add	r2, sp, #8
    4140:	4620      	mov	r0, r4
    4142:	f001 f94d 	bl	53e0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    4146:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    4148:	aa02      	add	r2, sp, #8
    414a:	4629      	mov	r1, r5
    414c:	2300      	movs	r3, #0
    414e:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    4150:	2e00      	cmp	r6, #0
    4152:	d1c9      	bne.n	40e8 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    4154:	2000      	movs	r0, #0
}
    4156:	b014      	add	sp, #80	; 0x50
    4158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    415c:	3601      	adds	r6, #1
    415e:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    4160:	7833      	ldrb	r3, [r6, #0]
    4162:	2b2f      	cmp	r3, #47	; 0x2f
    4164:	d0fa      	beq.n	415c <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    4166:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    4168:	2224      	movs	r2, #36	; 0x24
    416a:	2100      	movs	r1, #0
    416c:	a80b      	add	r0, sp, #44	; 0x2c
    416e:	f009 f9b9 	bl	d4e4 <memset>
  m_vol = vol;
    4172:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    4174:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    4176:	2b10      	cmp	r3, #16
    4178:	d003      	beq.n	4182 <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    417a:	2b20      	cmp	r3, #32
    417c:	d00f      	beq.n	419e <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    417e:	2b0c      	cmp	r3, #12
    4180:	d1e8      	bne.n	4154 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    4182:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    4184:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    4188:	2301      	movs	r3, #1
    parent = &tmpDir;
    418a:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    418c:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    4190:	e7a8      	b.n	40e4 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    4192:	aa02      	add	r2, sp, #8
    4194:	f7ff feda 	bl	3f4c <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    4198:	b014      	add	sp, #80	; 0x50
    419a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    419e:	2340      	movs	r3, #64	; 0x40
    41a0:	e7f0      	b.n	4184 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    41a2:	bf00      	nop

000041a4 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    41a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41a8:	2500      	movs	r5, #0
    41aa:	b094      	sub	sp, #80	; 0x50
    41ac:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    41ae:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    41b0:	9201      	str	r2, [sp, #4]
    41b2:	9502      	str	r5, [sp, #8]
    41b4:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    41b8:	2b00      	cmp	r3, #0
    41ba:	d137      	bne.n	422c <FatFile::open(FatFile*, char const*, int)+0x88>
    41bc:	780b      	ldrb	r3, [r1, #0]
    41be:	460e      	mov	r6, r1
    41c0:	f013 0f70 	tst.w	r3, #112	; 0x70
    41c4:	d032      	beq.n	422c <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    41c6:	7813      	ldrb	r3, [r2, #0]
    41c8:	4604      	mov	r4, r0
    41ca:	4615      	mov	r5, r2
    41cc:	2b2f      	cmp	r3, #47	; 0x2f
    41ce:	d031      	beq.n	4234 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    41d0:	2700      	movs	r7, #0
    41d2:	e01e      	b.n	4212 <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    41d4:	9d01      	ldr	r5, [sp, #4]
    41d6:	782d      	ldrb	r5, [r5, #0]
    41d8:	2d00      	cmp	r5, #0
    41da:	d040      	beq.n	425e <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    41dc:	f000 ffb4 	bl	5148 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    41e0:	46a6      	mov	lr, r4
    41e2:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    41e6:	b308      	cbz	r0, 422c <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    41e8:	4666      	mov	r6, ip
  if (!isOpen()) {
    41ea:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    41ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    41f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    41f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    41f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    41fc:	f8de 3000 	ldr.w	r3, [lr]
    4200:	4620      	mov	r0, r4
    4202:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    4206:	b10d      	cbz	r5, 420c <FatFile::open(FatFile*, char const*, int)+0x68>
    4208:	f7ff fd86 	bl	3d18 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    420c:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    420e:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    4210:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    4212:	4629      	mov	r1, r5
    4214:	ab01      	add	r3, sp, #4
    4216:	aa0b      	add	r2, sp, #44	; 0x2c
    4218:	4620      	mov	r0, r4
    421a:	f001 f8e1 	bl	53e0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    421e:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    4220:	aa0b      	add	r2, sp, #44	; 0x2c
    4222:	4631      	mov	r1, r6
    4224:	2300      	movs	r3, #0
    4226:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    4228:	2d00      	cmp	r5, #0
    422a:	d1d3      	bne.n	41d4 <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    422c:	2000      	movs	r0, #0
}
    422e:	b014      	add	sp, #80	; 0x50
    4230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    4234:	3501      	adds	r5, #1
    4236:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    4238:	7829      	ldrb	r1, [r5, #0]
    423a:	292f      	cmp	r1, #47	; 0x2f
    423c:	d0fa      	beq.n	4234 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    423e:	b9a9      	cbnz	r1, 426c <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    4240:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    4242:	2224      	movs	r2, #36	; 0x24
    4244:	4620      	mov	r0, r4
    4246:	f009 f94d 	bl	d4e4 <memset>
  m_vol = vol;
    424a:	60a5      	str	r5, [r4, #8]
    424c:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    424e:	2b10      	cmp	r3, #16
    4250:	d003      	beq.n	425a <FatFile::open(FatFile*, char const*, int)+0xb6>
    4252:	2b20      	cmp	r3, #32
    4254:	d022      	beq.n	429c <FatFile::open(FatFile*, char const*, int)+0xf8>
    4256:	2b0c      	cmp	r3, #12
    4258:	d1e8      	bne.n	422c <FatFile::open(FatFile*, char const*, int)+0x88>
    425a:	2220      	movs	r2, #32
    425c:	e01f      	b.n	429e <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    425e:	4643      	mov	r3, r8
    4260:	aa0b      	add	r2, sp, #44	; 0x2c
    4262:	f000 ff71 	bl	5148 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    4266:	b014      	add	sp, #80	; 0x50
    4268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    426c:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    426e:	2224      	movs	r2, #36	; 0x24
    4270:	2100      	movs	r1, #0
    4272:	a802      	add	r0, sp, #8
    4274:	f009 f936 	bl	d4e4 <memset>
  m_vol = vol;
    4278:	9604      	str	r6, [sp, #16]
    427a:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    427c:	2b10      	cmp	r3, #16
    427e:	d003      	beq.n	4288 <FatFile::open(FatFile*, char const*, int)+0xe4>
    4280:	2b20      	cmp	r3, #32
    4282:	d003      	beq.n	428c <FatFile::open(FatFile*, char const*, int)+0xe8>
    4284:	2b0c      	cmp	r3, #12
    4286:	d1d1      	bne.n	422c <FatFile::open(FatFile*, char const*, int)+0x88>
    4288:	2320      	movs	r3, #32
    428a:	e000      	b.n	428e <FatFile::open(FatFile*, char const*, int)+0xea>
    428c:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    428e:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    4292:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    4294:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    4296:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    429a:	e799      	b.n	41d0 <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    429c:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    429e:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    42a0:	7022      	strb	r2, [r4, #0]
  return true;
    42a2:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    42a4:	70a3      	strb	r3, [r4, #2]
  return true;
    42a6:	e7c2      	b.n	422e <FatFile::open(FatFile*, char const*, int)+0x8a>

000042a8 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    42a8:	b119      	cbz	r1, 42b2 <FatFile::open(FatVolume*, char const*, int)+0xa>
    42aa:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    42ae:	f7ff bf79 	b.w	41a4 <FatFile::open(FatFile*, char const*, int)>
}
    42b2:	4608      	mov	r0, r1
    42b4:	4770      	bx	lr
    42b6:	bf00      	nop

000042b8 <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    42b8:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    42ba:	b570      	push	{r4, r5, r6, lr}
    42bc:	460d      	mov	r5, r1
    42be:	4604      	mov	r4, r0
  if (file->m_dirCluster == 0) {
    42c0:	b993      	cbnz	r3, 42e8 <FatFile::openCluster(FatFile*)+0x30>
  if (isOpen()) {
    42c2:	7806      	ldrb	r6, [r0, #0]
    42c4:	b10e      	cbz	r6, 42ca <FatFile::openCluster(FatFile*)+0x12>
  return false;
    42c6:	4618      	mov	r0, r3
}
    42c8:	bd70      	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    42ca:	688d      	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    42cc:	2224      	movs	r2, #36	; 0x24
    42ce:	4631      	mov	r1, r6
    42d0:	f009 f908 	bl	d4e4 <memset>
  m_vol = vol;
    42d4:	60a5      	str	r5, [r4, #8]
    42d6:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    42d8:	2b10      	cmp	r3, #16
    42da:	d018      	beq.n	430e <FatFile::openCluster(FatFile*)+0x56>
    42dc:	2b20      	cmp	r3, #32
    42de:	d010      	beq.n	4302 <FatFile::openCluster(FatFile*)+0x4a>
    42e0:	2b0c      	cmp	r3, #12
    42e2:	d014      	beq.n	430e <FatFile::openCluster(FatFile*)+0x56>
    42e4:	4630      	mov	r0, r6
}
    42e6:	bd70      	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    42e8:	2224      	movs	r2, #36	; 0x24
    42ea:	2100      	movs	r1, #0
    42ec:	f009 f8fa 	bl	d4e4 <memset>
  m_flags = FILE_FLAG_READ;
    42f0:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    42f2:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    42f4:	70a0      	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    42f6:	7023      	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    42f8:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    42fc:	60a2      	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    42fe:	6223      	str	r3, [r4, #32]
}
    4300:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    4302:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    4304:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    4306:	7022      	strb	r2, [r4, #0]
  return true;
    4308:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    430a:	70a3      	strb	r3, [r4, #2]
}
    430c:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    430e:	2220      	movs	r2, #32
    4310:	e7f8      	b.n	4304 <FatFile::openCluster(FatFile*)+0x4c>
    4312:	bf00      	nop

00004314 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    4314:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    4316:	7805      	ldrb	r5, [r0, #0]
    4318:	b10d      	cbz	r5, 431e <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    431a:	2000      	movs	r0, #0
}
    431c:	bd70      	pop	{r4, r5, r6, pc}
    431e:	460e      	mov	r6, r1
    4320:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    4322:	2224      	movs	r2, #36	; 0x24
    4324:	4629      	mov	r1, r5
    4326:	f009 f8dd 	bl	d4e4 <memset>
  m_vol = vol;
    432a:	60a6      	str	r6, [r4, #8]
    432c:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    432e:	2b10      	cmp	r3, #16
    4330:	d00b      	beq.n	434a <FatFile::openRoot(FatVolume*)+0x36>
    4332:	2b20      	cmp	r3, #32
    4334:	d003      	beq.n	433e <FatFile::openRoot(FatVolume*)+0x2a>
    4336:	2b0c      	cmp	r3, #12
    4338:	d007      	beq.n	434a <FatFile::openRoot(FatVolume*)+0x36>
    433a:	4628      	mov	r0, r5
}
    433c:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    433e:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    4340:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    4342:	7022      	strb	r2, [r4, #0]
  return true;
    4344:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    4346:	70a3      	strb	r3, [r4, #2]
}
    4348:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    434a:	2220      	movs	r2, #32
    434c:	e7f8      	b.n	4340 <FatFile::openRoot(FatVolume*)+0x2c>
    434e:	bf00      	nop

00004350 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    4350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4354:	ed2d 8b02 	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    4358:	7883      	ldrb	r3, [r0, #2]
    435a:	b083      	sub	sp, #12
    435c:	4605      	mov	r5, r0
  if (!isReadable()) {
    435e:	07df      	lsls	r7, r3, #31
    4360:	f140 808c 	bpl.w	447c <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    4364:	4688      	mov	r8, r1
    4366:	7801      	ldrb	r1, [r0, #0]
    4368:	4692      	mov	sl, r2
  if (isFile()) {
    436a:	070e      	lsls	r6, r1, #28
    436c:	f100 8091 	bmi.w	4492 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    4370:	068c      	lsls	r4, r1, #26
    4372:	d508      	bpl.n	4386 <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    4374:	6883      	ldr	r3, [r0, #8]
    4376:	895a      	ldrh	r2, [r3, #10]
    4378:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    437a:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    437e:	b29b      	uxth	r3, r3
    4380:	459a      	cmp	sl, r3
    4382:	bf28      	it	cs
    4384:	469a      	movcs	sl, r3
  while (toRead) {
    4386:	f1ba 0f00 	cmp.w	sl, #0
    438a:	f000 80af 	beq.w	44ec <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    438e:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4390:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    4394:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    4396:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    4398:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    439c:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    43a0:	68af      	ldr	r7, [r5, #8]
    43a2:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    43a6:	d53d      	bpl.n	4424 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    43a8:	6a39      	ldr	r1, [r7, #32]
    43aa:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    43ae:	f1bb 0f00 	cmp.w	fp, #0
    43b2:	d151      	bne.n	4458 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    43b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    43b8:	d34e      	bcc.n	4458 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    43ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    43bc:	4291      	cmp	r1, r2
    43be:	d04b      	beq.n	4458 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    43c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    43c4:	f0c0 8082 	bcc.w	44cc <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    43c8:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    43ca:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    43cc:	0680      	lsls	r0, r0, #26
    43ce:	d405      	bmi.n	43dc <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    43d0:	7938      	ldrb	r0, [r7, #4]
    43d2:	eba0 0009 	sub.w	r0, r0, r9
    43d6:	4283      	cmp	r3, r0
    43d8:	bf28      	it	cs
    43da:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    43dc:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    43de:	ea4f 2443 	mov.w	r4, r3, lsl #9
    43e2:	d80c      	bhi.n	43fe <FatFile::read(void*, unsigned int)+0xae>
    43e4:	18c8      	adds	r0, r1, r3
    43e6:	4282      	cmp	r2, r0
    43e8:	d209      	bcs.n	43fe <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    43ea:	f107 0028 	add.w	r0, r7, #40	; 0x28
    43ee:	e9cd 1300 	strd	r1, r3, [sp]
    43f2:	f004 fb73 	bl	8adc <FsCache::sync()>
    43f6:	e9dd 1300 	ldrd	r1, r3, [sp]
    43fa:	2800      	cmp	r0, #0
    43fc:	d03e      	beq.n	447c <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    43fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    4400:	6802      	ldr	r2, [r0, #0]
    4402:	6957      	ldr	r7, [r2, #20]
    4404:	4642      	mov	r2, r8
    4406:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    4408:	2800      	cmp	r0, #0
    440a:	d037      	beq.n	447c <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    440c:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    440e:	1b36      	subs	r6, r6, r4
    dst += n;
    4410:	44a0      	add	r8, r4
    m_curPosition += n;
    4412:	4422      	add	r2, r4
    4414:	616a      	str	r2, [r5, #20]
  while (toRead) {
    4416:	d069      	beq.n	44ec <FatFile::read(void*, unsigned int)+0x19c>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    4418:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    441a:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    441e:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    4420:	0688      	lsls	r0, r1, #26
    4422:	d4c1      	bmi.n	43a8 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    4424:	f897 9005 	ldrb.w	r9, [r7, #5]
    4428:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    442c:	f1bb 0f00 	cmp.w	fp, #0
    4430:	d136      	bne.n	44a0 <FatFile::read(void*, unsigned int)+0x150>
    4432:	f1b9 0f00 	cmp.w	r9, #0
    4436:	d133      	bne.n	44a0 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    4438:	2a00      	cmp	r2, #0
    443a:	d133      	bne.n	44a4 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    443c:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    443e:	bf4c      	ite	mi
    4440:	6a3a      	ldrmi	r2, [r7, #32]
    4442:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    4444:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    4446:	3a02      	subs	r2, #2
    4448:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    444a:	6979      	ldr	r1, [r7, #20]
    444c:	4082      	lsls	r2, r0
    444e:	4449      	add	r1, r9
    4450:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    4452:	f1bb 0f00 	cmp.w	fp, #0
    4456:	d0ad      	beq.n	43b4 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    4458:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    445c:	2200      	movs	r2, #0
    445e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    4462:	42b4      	cmp	r4, r6
    4464:	bf28      	it	cs
    4466:	4634      	movcs	r4, r6
    4468:	f004 fb64 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    446c:	b130      	cbz	r0, 447c <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    446e:	eb00 010b 	add.w	r1, r0, fp
    4472:	4622      	mov	r2, r4
    4474:	4640      	mov	r0, r8
    4476:	f005 fa69 	bl	994c <memcpy>
    447a:	e7c7      	b.n	440c <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    447c:	786b      	ldrb	r3, [r5, #1]
  return -1;
    447e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
    4482:	f043 0302 	orr.w	r3, r3, #2
    4486:	706b      	strb	r3, [r5, #1]
}
    4488:	b003      	add	sp, #12
    448a:	ecbd 8b02 	vpop	{d8}
    448e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    4492:	69c3      	ldr	r3, [r0, #28]
    4494:	6942      	ldr	r2, [r0, #20]
    4496:	1a9b      	subs	r3, r3, r2
    4498:	459a      	cmp	sl, r3
    449a:	bf28      	it	cs
    449c:	469a      	movcs	sl, r3
    449e:	e772      	b.n	4386 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    44a0:	692a      	ldr	r2, [r5, #16]
    44a2:	e7d0      	b.n	4446 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    44a4:	070b      	lsls	r3, r1, #28
    44a6:	d505      	bpl.n	44b4 <FatFile::read(void*, unsigned int)+0x164>
    44a8:	78aa      	ldrb	r2, [r5, #2]
    44aa:	0654      	lsls	r4, r2, #25
    44ac:	d502      	bpl.n	44b4 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    44ae:	692a      	ldr	r2, [r5, #16]
    44b0:	3201      	adds	r2, #1
    44b2:	e7c7      	b.n	4444 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    44b4:	ee18 2a10 	vmov	r2, s16
    44b8:	4638      	mov	r0, r7
    44ba:	6929      	ldr	r1, [r5, #16]
    44bc:	f001 fdfe 	bl	60bc <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    44c0:	2800      	cmp	r0, #0
    44c2:	dbdb      	blt.n	447c <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    44c4:	d00c      	beq.n	44e0 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    44c6:	68af      	ldr	r7, [r5, #8]
    44c8:	692a      	ldr	r2, [r5, #16]
    44ca:	e7bc      	b.n	4446 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    44cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    44ce:	4642      	mov	r2, r8
    44d0:	6803      	ldr	r3, [r0, #0]
    44d2:	691b      	ldr	r3, [r3, #16]
    44d4:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    44d6:	2800      	cmp	r0, #0
    44d8:	d0d0      	beq.n	447c <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    44da:	f44f 7400 	mov.w	r4, #512	; 0x200
    44de:	e795      	b.n	440c <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    44e0:	782b      	ldrb	r3, [r5, #0]
    44e2:	f013 0f70 	tst.w	r3, #112	; 0x70
    44e6:	d0c9      	beq.n	447c <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    44e8:	ebaa 0a06 	sub.w	sl, sl, r6
    44ec:	4650      	mov	r0, sl
}
    44ee:	b003      	add	sp, #12
    44f0:	ecbd 8b02 	vpop	{d8}
    44f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000044f8 <FatFile::peek()>:
int FatFile::peek() {
    44f8:	b570      	push	{r4, r5, r6, lr}
    44fa:	b082      	sub	sp, #8
    return read(&b, 1) == 1 ? b : -1;
    44fc:	2201      	movs	r2, #1
    44fe:	4604      	mov	r4, r0
    4500:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    4504:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    4508:	f7ff ff22 	bl	4350 <FatFile::read(void*, unsigned int)>
    450c:	2801      	cmp	r0, #1
    450e:	bf0c      	ite	eq
    4510:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    4514:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curCluster = curCluster;
    4518:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    451c:	b002      	add	sp, #8
    451e:	bd70      	pop	{r4, r5, r6, pc}

00004520 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    4520:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    4522:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    4526:	b530      	push	{r4, r5, lr}
    4528:	4604      	mov	r4, r0
    452a:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    452c:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    4530:	d009      	beq.n	4546 <FatFile::readDirCache(bool)+0x26>
    4532:	2901      	cmp	r1, #1
    4534:	d107      	bne.n	4546 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    4536:	3320      	adds	r3, #32
    4538:	6143      	str	r3, [r0, #20]
    return m_buffer;
    453a:	68a0      	ldr	r0, [r4, #8]
    453c:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    453e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    4542:	b003      	add	sp, #12
    4544:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    4546:	2201      	movs	r2, #1
    4548:	f10d 0107 	add.w	r1, sp, #7
    454c:	4620      	mov	r0, r4
    454e:	f7ff feff 	bl	4350 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    4552:	b240      	sxtb	r0, r0
    4554:	2801      	cmp	r0, #1
    4556:	d103      	bne.n	4560 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    4558:	6963      	ldr	r3, [r4, #20]
    455a:	331f      	adds	r3, #31
    455c:	6163      	str	r3, [r4, #20]
    455e:	e7ec      	b.n	453a <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    4560:	2000      	movs	r0, #0
    4562:	e7ee      	b.n	4542 <FatFile::readDirCache(bool)+0x22>

00004564 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    4564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    4568:	7803      	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    456a:	b09a      	sub	sp, #104	; 0x68
  FatFile() {}
    456c:	2600      	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    456e:	f013 0f18 	tst.w	r3, #24
    4572:	9608      	str	r6, [sp, #32]
    4574:	9611      	str	r6, [sp, #68]	; 0x44
    4576:	d006      	beq.n	4586 <FatFile::rename(FatFile*, char const*)+0x22>
    4578:	4617      	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    457a:	6883      	ldr	r3, [r0, #8]
    457c:	688a      	ldr	r2, [r1, #8]
    457e:	4604      	mov	r4, r0
    4580:	460d      	mov	r5, r1
    4582:	429a      	cmp	r2, r3
    4584:	d003      	beq.n	458e <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    4586:	2000      	movs	r0, #0
}
    4588:	b01a      	add	sp, #104	; 0x68
    458a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    458e:	f7ff fbc3 	bl	3d18 <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    4592:	46a6      	mov	lr, r4
    4594:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
    4598:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    459c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    45a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    45a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    45a8:	f8de 3000 	ldr.w	r3, [lr]
    45ac:	4632      	mov	r2, r6
    45ae:	69a1      	ldr	r1, [r4, #24]
    45b0:	f8cc 3000 	str.w	r3, [ip]
    45b4:	68a3      	ldr	r3, [r4, #8]
    45b6:	f103 0028 	add.w	r0, r3, #40	; 0x28
    45ba:	f004 fabb 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    45be:	2800      	cmp	r0, #0
    45c0:	d0e1      	beq.n	4586 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    45c2:	88a2      	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    45c4:	46ec      	mov	ip, sp
  if (isFile()) {
    45c6:	f894 8000 	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    45ca:	f002 020f 	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    45ce:	eb00 1e42 	add.w	lr, r0, r2, lsl #5
    45d2:	0152      	lsls	r2, r2, #5
    45d4:	f8de 1004 	ldr.w	r1, [lr, #4]
    45d8:	5880      	ldr	r0, [r0, r2]
    45da:	f8de 300c 	ldr.w	r3, [lr, #12]
    45de:	f8de 2008 	ldr.w	r2, [lr, #8]
    45e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    45e6:	f8de 1014 	ldr.w	r1, [lr, #20]
    45ea:	f8de 2018 	ldr.w	r2, [lr, #24]
    45ee:	f8de 301c 	ldr.w	r3, [lr, #28]
    45f2:	f8de 0010 	ldr.w	r0, [lr, #16]
    45f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    45fa:	f018 0308 	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    45fe:	463a      	mov	r2, r7
    4600:	4629      	mov	r1, r5
  if (isFile()) {
    4602:	f040 809b 	bne.w	473c <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    4606:	a808      	add	r0, sp, #32
    4608:	f7ff fd56 	bl	40b8 <FatFile::mkdir(FatFile*, char const*, bool)>
    460c:	2800      	cmp	r0, #0
    460e:	d0ba      	beq.n	4586 <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    4610:	9e10      	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    4612:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    4616:	2500      	movs	r5, #0
  m_dirSector = file.m_dirSector;
    4618:	990e      	ldr	r1, [sp, #56]	; 0x38
    461a:	2201      	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    461c:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    461e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    4622:	68a0      	ldr	r0, [r4, #8]
    4624:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    4626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4628:	3028      	adds	r0, #40	; 0x28
  m_dirSector = file.m_dirSector;
    462a:	61a1      	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    462c:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    462e:	f88d 5020 	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    4632:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    4636:	f004 fa7d 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    463a:	2800      	cmp	r0, #0
    463c:	d0a3      	beq.n	4586 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    463e:	88a3      	ldrh	r3, [r4, #4]
    4640:	f003 030f 	and.w	r3, r3, #15
    4644:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    4648:	f8dd 300d 	ldr.w	r3, [sp, #13]
    464c:	f8c0 300d 	str.w	r3, [r0, #13]
    4650:	f8dd 3011 	ldr.w	r3, [sp, #17]
    4654:	f8c0 3011 	str.w	r3, [r0, #17]
    4658:	f8dd 3015 	ldr.w	r3, [sp, #21]
    465c:	f8c0 3015 	str.w	r3, [r0, #21]
    4660:	f8dd 3019 	ldr.w	r3, [sp, #25]
    4664:	f8c0 3019 	str.w	r3, [r0, #25]
    4668:	f8bd 301d 	ldrh.w	r3, [sp, #29]
    466c:	f8a0 301d 	strh.w	r3, [r0, #29]
    4670:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4674:	77c3      	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    4676:	f89d 300b 	ldrb.w	r3, [sp, #11]
    467a:	72c3      	strb	r3, [r0, #11]
  if (dirCluster) {
    467c:	2e00      	cmp	r6, #0
    467e:	d03b      	beq.n	46f8 <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    4680:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    4682:	1eb3      	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    4684:	462a      	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    4686:	7981      	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    4688:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    468a:	408b      	lsls	r3, r1
    468c:	f850 1c14 	ldr.w	r1, [r0, #-20]
    return m_cache.prepare(sector, options);
    4690:	4419      	add	r1, r3
    4692:	f004 fa4f 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    4696:	4605      	mov	r5, r0
    4698:	2800      	cmp	r0, #0
    469a:	f43f af74 	beq.w	4586 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    469e:	6a00      	ldr	r0, [r0, #32]
    46a0:	466f      	mov	r7, sp
    46a2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    46a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    46a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    46a8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    46aa:	6b28      	ldr	r0, [r5, #48]	; 0x30
    46ac:	6b69      	ldr	r1, [r5, #52]	; 0x34
    46ae:	6baa      	ldr	r2, [r5, #56]	; 0x38
    46b0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    46b2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    46b4:	4631      	mov	r1, r6
    46b6:	68a0      	ldr	r0, [r4, #8]
    46b8:	f001 fd22 	bl	6100 <FatPartition::freeChain(unsigned long)>
    46bc:	2800      	cmp	r0, #0
    46be:	f43f af62 	beq.w	4586 <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    46c2:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    46c4:	6a23      	ldr	r3, [r4, #32]
    46c6:	7982      	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    46c8:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    46ca:	3b02      	subs	r3, #2
    46cc:	f850 1c14 	ldr.w	r1, [r0, #-20]
    46d0:	4093      	lsls	r3, r2
    return m_cache.prepare(sector, options);
    46d2:	2201      	movs	r2, #1
    46d4:	4419      	add	r1, r3
    46d6:	f004 fa2d 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    46da:	4606      	mov	r6, r0
    46dc:	2800      	cmp	r0, #0
    46de:	f43f af52 	beq.w	4586 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    46e2:	466d      	mov	r5, sp
    46e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    46e6:	6230      	str	r0, [r6, #32]
    46e8:	6271      	str	r1, [r6, #36]	; 0x24
    46ea:	62b2      	str	r2, [r6, #40]	; 0x28
    46ec:	62f3      	str	r3, [r6, #44]	; 0x2c
    46ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    46f0:	6330      	str	r0, [r6, #48]	; 0x30
    46f2:	6371      	str	r1, [r6, #52]	; 0x34
    46f4:	63b2      	str	r2, [r6, #56]	; 0x38
    46f6:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    46f8:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    46fa:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    46fc:	2308      	movs	r3, #8
  if (!oldFile.remove()) {
    46fe:	a811      	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    4700:	9119      	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    4702:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    4706:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    470a:	f000 fed3 	bl	54b4 <FatFile::remove()>
    470e:	2800      	cmp	r0, #0
    4710:	f43f af39 	beq.w	4586 <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    4714:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    4716:	f104 0028 	add.w	r0, r4, #40	; 0x28
    471a:	f004 f9df 	bl	8adc <FsCache::sync()>
    471e:	2800      	cmp	r0, #0
    4720:	f43f af31 	beq.w	4586 <FatFile::rename(FatFile*, char const*)+0x22>
    4724:	f504 700e 	add.w	r0, r4, #568	; 0x238
    4728:	f004 f9d8 	bl	8adc <FsCache::sync()>
    472c:	2800      	cmp	r0, #0
    472e:	f43f af2a 	beq.w	4586 <FatFile::rename(FatFile*, char const*)+0x22>
    4732:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    4734:	6803      	ldr	r3, [r0, #0]
    4736:	6a1b      	ldr	r3, [r3, #32]
    4738:	4798      	blx	r3
    473a:	e725      	b.n	4588 <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    473c:	f640 2301 	movw	r3, #2561	; 0xa01
    4740:	4660      	mov	r0, ip
    4742:	f7ff fd2f 	bl	41a4 <FatFile::open(FatFile*, char const*, int)>
    4746:	2800      	cmp	r0, #0
    4748:	f47f af63 	bne.w	4612 <FatFile::rename(FatFile*, char const*)+0xae>
    474c:	e71b      	b.n	4586 <FatFile::rename(FatFile*, char const*)+0x22>
    474e:	bf00      	nop

00004750 <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    4750:	7803      	ldrb	r3, [r0, #0]
    4752:	06da      	lsls	r2, r3, #27
    4754:	d401      	bmi.n	475a <FatFile::rmdir()+0xa>
}
    4756:	2000      	movs	r0, #0
    4758:	4770      	bx	lr
  if (pos == m_curPosition) {
    475a:	6943      	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    475c:	b530      	push	{r4, r5, lr}
    475e:	4604      	mov	r4, r0
    4760:	b083      	sub	sp, #12
  if (pos == m_curPosition) {
    4762:	b133      	cbz	r3, 4772 <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    4764:	7883      	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    4766:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    4768:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    476c:	e9c0 2204 	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    4770:	7083      	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    4772:	2300      	movs	r3, #0
    4774:	e00f      	b.n	4796 <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    4776:	6163      	str	r3, [r4, #20]
    4778:	68a3      	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    477a:	016a      	lsls	r2, r5, #5
    477c:	3338      	adds	r3, #56	; 0x38
    if (dir->name[0] == FAT_NAME_FREE) {
    477e:	5c9a      	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    4780:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    4784:	b1ea      	cbz	r2, 47c2 <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    4786:	2ae5      	cmp	r2, #229	; 0xe5
    4788:	d004      	beq.n	4794 <FatFile::rmdir()+0x44>
    478a:	2a2e      	cmp	r2, #46	; 0x2e
    478c:	d002      	beq.n	4794 <FatFile::rmdir()+0x44>
    if (isFileOrSubdir(dir)) {
    478e:	7adb      	ldrb	r3, [r3, #11]
    4790:	071b      	lsls	r3, r3, #28
    4792:	d522      	bpl.n	47da <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    4794:	6963      	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    4796:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    479a:	f3c3 1543 	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    479e:	f103 0320 	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    47a2:	d1e8      	bne.n	4776 <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    47a4:	2201      	movs	r2, #1
    47a6:	f10d 0107 	add.w	r1, sp, #7
    47aa:	4620      	mov	r0, r4
    47ac:	f7ff fdd0 	bl	4350 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    47b0:	b240      	sxtb	r0, r0
    47b2:	2801      	cmp	r0, #1
    47b4:	d103      	bne.n	47be <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    47b6:	6963      	ldr	r3, [r4, #20]
    47b8:	331f      	adds	r3, #31
    47ba:	6163      	str	r3, [r4, #20]
    47bc:	e7dc      	b.n	4778 <FatFile::rmdir()+0x28>
      if (!getError()) {
    47be:	7863      	ldrb	r3, [r4, #1]
    47c0:	b95b      	cbnz	r3, 47da <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    47c2:	78a3      	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    47c4:	2208      	movs	r2, #8
  return remove();
    47c6:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    47c8:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    47cc:	7022      	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    47ce:	70a3      	strb	r3, [r4, #2]
}
    47d0:	b003      	add	sp, #12
    47d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    47d6:	f000 be6d 	b.w	54b4 <FatFile::remove()>
}
    47da:	2000      	movs	r0, #0
    47dc:	b003      	add	sp, #12
    47de:	bd30      	pop	{r4, r5, pc}

000047e0 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    47e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    47e4:	7803      	ldrb	r3, [r0, #0]
    47e6:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    47e8:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    47ea:	2b00      	cmp	r3, #0
    47ec:	d039      	beq.n	4862 <FatFile::seekSet(unsigned long)+0x82>
    47ee:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    47f0:	6941      	ldr	r1, [r0, #20]
    47f2:	42a9      	cmp	r1, r5
    47f4:	d042      	beq.n	487c <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    47f6:	2d00      	cmp	r5, #0
    47f8:	d037      	beq.n	486a <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    47fa:	0718      	lsls	r0, r3, #28
    47fc:	d52a      	bpl.n	4854 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    47fe:	69e2      	ldr	r2, [r4, #28]
    4800:	42aa      	cmp	r2, r5
    4802:	d32e      	bcc.n	4862 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    4804:	f8d4 c008 	ldr.w	ip, [r4, #8]
    4808:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    480a:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    480c:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    4810:	f012 0f40 	tst.w	r2, #64	; 0x40
    4814:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    4818:	b2c0      	uxtb	r0, r0
    481a:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    481e:	d130      	bne.n	4882 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    4820:	1e4a      	subs	r2, r1, #1
    4822:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    4824:	b109      	cbz	r1, 482a <FatFile::seekSet(unsigned long)+0x4a>
    4826:	4296      	cmp	r6, r2
    4828:	d22f      	bcs.n	488a <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    482a:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    482c:	bf4c      	ite	mi
    482e:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    4832:	6a23      	ldrpl	r3, [r4, #32]
    4834:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4836:	f104 0810 	add.w	r8, r4, #16
    483a:	e006      	b.n	484a <FatFile::seekSet(unsigned long)+0x6a>
    483c:	6921      	ldr	r1, [r4, #16]
    483e:	3e01      	subs	r6, #1
    4840:	68a0      	ldr	r0, [r4, #8]
    4842:	f001 fc3b 	bl	60bc <FatPartition::fatGet(unsigned long, unsigned long*)>
    4846:	2800      	cmp	r0, #0
    4848:	dd0b      	ble.n	4862 <FatFile::seekSet(unsigned long)+0x82>
    484a:	4642      	mov	r2, r8
  while (nNew--) {
    484c:	2e00      	cmp	r6, #0
    484e:	d1f5      	bne.n	483c <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    4850:	78a2      	ldrb	r2, [r4, #2]
    4852:	e00c      	b.n	486e <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    4854:	069a      	lsls	r2, r3, #26
    4856:	d5d5      	bpl.n	4804 <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    4858:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    485a:	895b      	ldrh	r3, [r3, #10]
    485c:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    4860:	d9f6      	bls.n	4850 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    4862:	2000      	movs	r0, #0
  m_curCluster = tmp;
    4864:	6127      	str	r7, [r4, #16]
}
    4866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    486a:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    486c:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    486e:	f022 0220 	bic.w	r2, r2, #32
  return true;
    4872:	2001      	movs	r0, #1
  m_curPosition = pos;
    4874:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    4876:	70a2      	strb	r2, [r4, #2]
}
    4878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    487c:	2001      	movs	r0, #1
}
    487e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    4882:	6a23      	ldr	r3, [r4, #32]
    4884:	4433      	add	r3, r6
    4886:	6123      	str	r3, [r4, #16]
    goto done;
    4888:	e7f1      	b.n	486e <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    488a:	1ab6      	subs	r6, r6, r2
    488c:	e7d3      	b.n	4836 <FatFile::seekSet(unsigned long)+0x56>
    488e:	bf00      	nop

00004890 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    4890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4894:	460e      	mov	r6, r1
    4896:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    4898:	2100      	movs	r1, #0
    489a:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    489c:	4604      	mov	r4, r0
    489e:	4698      	mov	r8, r3
    48a0:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    48a4:	f008 fe1e 	bl	d4e4 <memset>
  m_vol = dirFile->m_vol;
    48a8:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    48aa:	6a33      	ldr	r3, [r6, #32]
    48ac:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    48b0:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    48b2:	f005 050f 	and.w	r5, r5, #15
    48b6:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    48ba:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    48be:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    48c0:	070b      	lsls	r3, r1, #28
    48c2:	d411      	bmi.n	48e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    48c4:	f001 0117 	and.w	r1, r1, #23
    48c8:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    48ca:	7ad3      	ldrb	r3, [r2, #11]
    48cc:	f013 0f18 	tst.w	r3, #24
    48d0:	d102      	bne.n	48d8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    48d2:	f041 0108 	orr.w	r1, r1, #8
    48d6:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    48d8:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    48dc:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    48de:	2b01      	cmp	r3, #1
    48e0:	d038      	beq.n	4954 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    48e2:	2b02      	cmp	r3, #2
    48e4:	d006      	beq.n	48f4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    48e6:	b1f3      	cbz	r3, 4926 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    48e8:	2300      	movs	r3, #0
  return false;
    48ea:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    48ec:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    48ee:	70a3      	strb	r3, [r4, #2]
}
    48f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    48f4:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    48f6:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    48f8:	06cd      	lsls	r5, r1, #27
    48fa:	d4f5      	bmi.n	48e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    48fc:	07ce      	lsls	r6, r1, #31
    48fe:	d4f3      	bmi.n	48e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    4900:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    4904:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    4908:	ea43 0301 	orr.w	r3, r3, r1
    490c:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    490e:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    4910:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    4912:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    4914:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    4916:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    491a:	d012      	beq.n	4942 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    491c:	bb19      	cbnz	r1, 4966 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    491e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4922:	70a3      	strb	r3, [r4, #2]
    4924:	e010      	b.n	4948 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    4926:	f418 6f80 	tst.w	r8, #1024	; 0x400
    492a:	d1dd      	bne.n	48e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    492c:	f008 0308 	and.w	r3, r8, #8
    4930:	f043 0301 	orr.w	r3, r3, #1
    4934:	70a3      	strb	r3, [r4, #2]
    4936:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    4938:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    493a:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    493c:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    493e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    4942:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    4944:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    4946:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    4948:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    494c:	d104      	bne.n	4958 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
    494e:	2001      	movs	r0, #1
}
    4950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    4954:	2302      	movs	r3, #2
    4956:	e7ce      	b.n	48f6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    4958:	69e1      	ldr	r1, [r4, #28]
    495a:	4620      	mov	r0, r4
    495c:	f7ff ff40 	bl	47e0 <FatFile::seekSet(unsigned long)>
    4960:	2800      	cmp	r0, #0
    4962:	d1f4      	bne.n	494e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
    4964:	e7c0      	b.n	48e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    4966:	f001 fbcb 	bl	6100 <FatPartition::freeChain(unsigned long)>
    496a:	2800      	cmp	r0, #0
    496c:	d0bc      	beq.n	48e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    496e:	78a3      	ldrb	r3, [r4, #2]
    4970:	e7d5      	b.n	491e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    4972:	bf00      	nop

00004974 <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const {return m_attributes;}
    4974:	7803      	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    4976:	2b00      	cmp	r3, #0
    4978:	d145      	bne.n	4a06 <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    497a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    497e:	780b      	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    4980:	b084      	sub	sp, #16
    4982:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    4984:	f013 0f70 	tst.w	r3, #112	; 0x70
    4988:	d030      	beq.n	49ec <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const {return m_curPosition;}
    498a:	694b      	ldr	r3, [r1, #20]
    498c:	f013 051f 	ands.w	r5, r3, #31
    4990:	d12c      	bne.n	49ec <FatFile::openNext(FatFile*, int)+0x78>
    4992:	4606      	mov	r6, r0
    4994:	4690      	mov	r8, r2
    4996:	46a9      	mov	r9, r5
    int8_t n = read(&n, 1);
    4998:	2201      	movs	r2, #1
    499a:	f10d 010f 	add.w	r1, sp, #15
    499e:	4620      	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    49a0:	f3c3 1a43 	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition()/FS_DIR_SIZE;
    49a4:	095f      	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    49a6:	f7ff fcd3 	bl	4350 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    49aa:	b240      	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    49ac:	ea4f 124a 	mov.w	r2, sl, lsl #5
    if  (n != 1) {
    49b0:	2801      	cmp	r0, #1
    49b2:	d11b      	bne.n	49ec <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
    49b4:	6963      	ldr	r3, [r4, #20]
    return m_buffer;
    49b6:	68a1      	ldr	r1, [r4, #8]
    49b8:	331f      	adds	r3, #31
    49ba:	f101 0c38 	add.w	ip, r1, #56	; 0x38
    49be:	6163      	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    49c0:	f81c 2002 	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    49c4:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    49c8:	b182      	cbz	r2, 49ec <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    49ca:	2a2e      	cmp	r2, #46	; 0x2e
    49cc:	d012      	beq.n	49f4 <FatFile::openNext(FatFile*, int)+0x80>
    49ce:	f1a2 00e5 	sub.w	r0, r2, #229	; 0xe5
    49d2:	fab0 f080 	clz	r0, r0
    49d6:	0940      	lsrs	r0, r0, #5
    49d8:	b960      	cbnz	r0, 49f4 <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    49da:	f89c 100b 	ldrb.w	r1, [ip, #11]
    } else if (isFileOrSubdir(dir)) {
    49de:	f011 0e08 	ands.w	lr, r1, #8
    49e2:	d012      	beq.n	4a0a <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isLongName(dir)) {
    49e4:	290f      	cmp	r1, #15
    49e6:	d007      	beq.n	49f8 <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
    49e8:	4605      	mov	r5, r0
    49ea:	e7d5      	b.n	4998 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    49ec:	2000      	movs	r0, #0
}
    49ee:	b004      	add	sp, #16
    49f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    49f4:	2500      	movs	r5, #0
    49f6:	e7cf      	b.n	4998 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    49f8:	0651      	lsls	r1, r2, #25
    49fa:	d5cd      	bpl.n	4998 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    49fc:	f002 051f 	and.w	r5, r2, #31
        checksum = ldir->checksum;
    4a00:	f89c 900d 	ldrb.w	r9, [ip, #13]
    4a04:	e7c8      	b.n	4998 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    4a06:	2000      	movs	r0, #0
}
    4a08:	4770      	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    4a0a:	b185      	cbz	r5, 4a2e <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    4a0c:	f10c 010a 	add.w	r1, ip, #10
    4a10:	e001      	b.n	4a16 <FatFile::openNext(FatFile*, int)+0xa2>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    4a12:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
    4a16:	ea4f 13ce 	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    4a1a:	4561      	cmp	r1, ip
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    4a1c:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
    4a20:	fa52 f383 	uxtab	r3, r2, r3
    4a24:	fa5f fe83 	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
    4a28:	d1f3      	bne.n	4a12 <FatFile::openNext(FatFile*, int)+0x9e>
    4a2a:	45ce      	cmp	lr, r9
    4a2c:	d1de      	bne.n	49ec <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    4a2e:	4643      	mov	r3, r8
    4a30:	b2ba      	uxth	r2, r7
    4a32:	4621      	mov	r1, r4
    4a34:	4630      	mov	r0, r6
    4a36:	9500      	str	r5, [sp, #0]
    4a38:	f7ff ff2a 	bl	4890 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    4a3c:	e7d7      	b.n	49ee <FatFile::openNext(FatFile*, int)+0x7a>
    4a3e:	bf00      	nop

00004a40 <FatFile::sync()>:
  if (!isOpen()) {
    4a40:	7803      	ldrb	r3, [r0, #0]
    4a42:	b10b      	cbz	r3, 4a48 <FatFile::sync()+0x8>
    4a44:	f7ff b968 	b.w	3d18 <FatFile::sync() [clone .part.0]>
}
    4a48:	2001      	movs	r0, #1
    4a4a:	4770      	bx	lr

00004a4c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    4a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a50:	460e      	mov	r6, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    4a52:	7801      	ldrb	r1, [r0, #0]
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    4a54:	b082      	sub	sp, #8
      || second > 59) {
    4a56:	0709      	lsls	r1, r1, #28
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    4a58:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    4a5c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    4a60:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
    4a64:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
      || second > 59) {
    4a68:	d518      	bpl.n	4a9c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || year > 2107
    4a6a:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    4a6e:	b294      	uxth	r4, r2
    4a70:	2c7f      	cmp	r4, #127	; 0x7f
    4a72:	d813      	bhi.n	4a9c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || month > 12
    4a74:	1e5a      	subs	r2, r3, #1
    4a76:	9301      	str	r3, [sp, #4]
    4a78:	2a0b      	cmp	r2, #11
    4a7a:	d80f      	bhi.n	4a9c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || day > 31
    4a7c:	1e7a      	subs	r2, r7, #1
    4a7e:	2a1e      	cmp	r2, #30
    4a80:	d80c      	bhi.n	4a9c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || second > 59) {
    4a82:	f1ba 0f3b 	cmp.w	sl, #59	; 0x3b
    4a86:	bf98      	it	ls
    4a88:	f1b9 0f17 	cmpls.w	r9, #23
    4a8c:	d806      	bhi.n	4a9c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    4a8e:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    4a92:	d803      	bhi.n	4a9c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    4a94:	4605      	mov	r5, r0
  if (!isOpen()) {
    4a96:	f7ff f93f 	bl	3d18 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    4a9a:	b918      	cbnz	r0, 4aa4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x58>
  }
  return m_vol->cacheSync();

 fail:
  return false;
}
    4a9c:	2000      	movs	r0, #0
    4a9e:	b002      	add	sp, #8
    4aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return m_cache.prepare(sector, options);
    4aa4:	68a8      	ldr	r0, [r5, #8]
    4aa6:	2201      	movs	r2, #1
    4aa8:	69a9      	ldr	r1, [r5, #24]
    4aaa:	3028      	adds	r0, #40	; 0x28
    4aac:	f004 f842 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    4ab0:	2800      	cmp	r0, #0
    4ab2:	d0f3      	beq.n	4a9c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    4ab4:	9b01      	ldr	r3, [sp, #4]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    4ab6:	ea4f 0258 	mov.w	r2, r8, lsr #1
  return dir + (m_dirIndex & 0XF);
    4aba:	88a9      	ldrh	r1, [r5, #4]
         year << 9 | month << 5 | day;
    4abc:	ea47 1343 	orr.w	r3, r7, r3, lsl #5
  if (flags & T_ACCESS) {
    4ac0:	07f7      	lsls	r7, r6, #31
  return dir + (m_dirIndex & 0XF);
    4ac2:	f001 010f 	and.w	r1, r1, #15
         hour << 11 | minute << 5 | second >> 1;
    4ac6:	ea42 124a 	orr.w	r2, r2, sl, lsl #5
         year << 9 | month << 5 | day;
    4aca:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
    4ace:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    4ad2:	b29b      	uxth	r3, r3
         hour << 11 | minute << 5 | second >> 1;
    4ad4:	ea42 22c9 	orr.w	r2, r2, r9, lsl #11
  *reinterpret_cast<uint16_t*>(dst) = src;
    4ad8:	bf48      	it	mi
    4ada:	8243      	strhmi	r3, [r0, #18]
  if (flags & T_CREATE) {
    4adc:	07b4      	lsls	r4, r6, #30
    4ade:	b292      	uxth	r2, r2
    4ae0:	d508      	bpl.n	4af4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
    dir->createTimeMs = second & 1 ? 100 : 0;
    4ae2:	f018 0801 	ands.w	r8, r8, #1
    4ae6:	8203      	strh	r3, [r0, #16]
    4ae8:	81c2      	strh	r2, [r0, #14]
    4aea:	bf18      	it	ne
    4aec:	f04f 0864 	movne.w	r8, #100	; 0x64
    4af0:	f880 800d 	strb.w	r8, [r0, #13]
  if (flags & T_WRITE) {
    4af4:	0771      	lsls	r1, r6, #29
    4af6:	d501      	bpl.n	4afc <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb0>
    4af8:	8303      	strh	r3, [r0, #24]
    4afa:	82c2      	strh	r2, [r0, #22]
  return m_vol->cacheSync();
    4afc:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    4afe:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4b02:	f003 ffeb 	bl	8adc <FsCache::sync()>
    4b06:	2800      	cmp	r0, #0
    4b08:	d0c8      	beq.n	4a9c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    4b0a:	f504 700e 	add.w	r0, r4, #568	; 0x238
    4b0e:	f003 ffe5 	bl	8adc <FsCache::sync()>
    4b12:	2800      	cmp	r0, #0
    4b14:	d0c2      	beq.n	4a9c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    4b16:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    4b18:	6803      	ldr	r3, [r0, #0]
    4b1a:	6a1b      	ldr	r3, [r3, #32]
}
    4b1c:	b002      	add	sp, #8
    4b1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b22:	4718      	bx	r3

00004b24 <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    4b24:	7883      	ldrb	r3, [r0, #2]
    4b26:	079b      	lsls	r3, r3, #30
    4b28:	d527      	bpl.n	4b7a <FatFile::truncate()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    4b2a:	6a03      	ldr	r3, [r0, #32]
bool FatFile::truncate() {
    4b2c:	b510      	push	{r4, lr}
    4b2e:	4604      	mov	r4, r0
    4b30:	b082      	sub	sp, #8
  if (m_firstCluster == 0) {
    4b32:	b1ab      	cbz	r3, 4b60 <FatFile::truncate()+0x3c>
      return true;
  }
  if (m_curCluster) {
    4b34:	6901      	ldr	r1, [r0, #16]
    4b36:	bb11      	cbnz	r1, 4b7e <FatFile::truncate()+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    4b38:	9301      	str	r3, [sp, #4]
    m_firstCluster = 0;
    4b3a:	6201      	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    4b3c:	4619      	mov	r1, r3
    4b3e:	68a0      	ldr	r0, [r4, #8]
    4b40:	f001 fade 	bl	6100 <FatPartition::freeChain(unsigned long)>
    4b44:	b1b0      	cbz	r0, 4b74 <FatFile::truncate()+0x50>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4b46:	78a3      	ldrb	r3, [r4, #2]
  m_fileSize = m_curPosition;
    4b48:	6961      	ldr	r1, [r4, #20]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4b4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  if (!isOpen()) {
    4b4e:	7822      	ldrb	r2, [r4, #0]
  m_fileSize = m_curPosition;
    4b50:	61e1      	str	r1, [r4, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4b52:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    4b54:	b122      	cbz	r2, 4b60 <FatFile::truncate()+0x3c>
    4b56:	4620      	mov	r0, r4
    4b58:	f7ff f8de 	bl	3d18 <FatFile::sync() [clone .part.0]>
  return sync();

 fail:
  return false;
}
    4b5c:	b002      	add	sp, #8
    4b5e:	bd10      	pop	{r4, pc}
      return true;
    4b60:	2001      	movs	r0, #1
}
    4b62:	b002      	add	sp, #8
    4b64:	bd10      	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    4b66:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    4b6a:	6921      	ldr	r1, [r4, #16]
    4b6c:	68a0      	ldr	r0, [r4, #8]
    4b6e:	f001 fab7 	bl	60e0 <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    4b72:	b968      	cbnz	r0, 4b90 <FatFile::truncate()+0x6c>
  return false;
    4b74:	2000      	movs	r0, #0
}
    4b76:	b002      	add	sp, #8
    4b78:	bd10      	pop	{r4, pc}
  return false;
    4b7a:	2000      	movs	r0, #0
}
    4b7c:	4770      	bx	lr
    toFree = 0;
    4b7e:	2300      	movs	r3, #0
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4b80:	aa01      	add	r2, sp, #4
    4b82:	6880      	ldr	r0, [r0, #8]
    toFree = 0;
    4b84:	9301      	str	r3, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4b86:	f001 fa99 	bl	60bc <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    4b8a:	2800      	cmp	r0, #0
    4b8c:	dbf2      	blt.n	4b74 <FatFile::truncate()+0x50>
    if (fg) {
    4b8e:	d1ea      	bne.n	4b66 <FatFile::truncate()+0x42>
  if (toFree) {
    4b90:	9b01      	ldr	r3, [sp, #4]
    4b92:	2b00      	cmp	r3, #0
    4b94:	d0d7      	beq.n	4b46 <FatFile::truncate()+0x22>
    4b96:	e7d1      	b.n	4b3c <FatFile::truncate()+0x18>

00004b98 <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    4b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    4b9c:	7883      	ldrb	r3, [r0, #2]
    4b9e:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    4ba0:	079c      	lsls	r4, r3, #30
    4ba2:	d577      	bpl.n	4c94 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    4ba4:	4688      	mov	r8, r1
    4ba6:	0719      	lsls	r1, r3, #28
    4ba8:	4691      	mov	r9, r2
    4baa:	f100 80b5 	bmi.w	4d18 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    4bae:	696b      	ldr	r3, [r5, #20]
    4bb0:	eb13 0209 	adds.w	r2, r3, r9
    4bb4:	d26e      	bcs.n	4c94 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    4bb6:	f1b9 0f00 	cmp.w	r9, #0
    4bba:	d040      	beq.n	4c3e <FatFile::write(void const*, unsigned int)+0xa6>
    4bbc:	464f      	mov	r7, r9
    m_status = 0;
    4bbe:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    4bc2:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    4bc4:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    4bc8:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    4bca:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    4bcc:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    4bd0:	d13f      	bne.n	4c52 <FatFile::write(void const*, unsigned int)+0xba>
    4bd2:	2e00      	cmp	r6, #0
    4bd4:	d13d      	bne.n	4c52 <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    4bd6:	2900      	cmp	r1, #0
    4bd8:	d06e      	beq.n	4cb8 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    4bda:	78aa      	ldrb	r2, [r5, #2]
    4bdc:	0652      	lsls	r2, r2, #25
    4bde:	d576      	bpl.n	4cce <FatFile::write(void const*, unsigned int)+0x136>
    4be0:	69ea      	ldr	r2, [r5, #28]
    4be2:	429a      	cmp	r2, r3
    4be4:	d973      	bls.n	4cce <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    4be6:	3101      	adds	r1, #1
    4be8:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    4bea:	3902      	subs	r1, #2
    4bec:	7982      	ldrb	r2, [r0, #6]
    4bee:	6943      	ldr	r3, [r0, #20]
    4bf0:	4091      	lsls	r1, r2
    4bf2:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    4bf4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    4bf8:	d353      	bcc.n	4ca2 <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    4bfa:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    4bfe:	d370      	bcc.n	4ce2 <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    4c00:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    4c02:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    4c04:	1b1b      	subs	r3, r3, r4
    4c06:	4293      	cmp	r3, r2
    4c08:	bf28      	it	cs
    4c0a:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    4c0c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4c0e:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    4c10:	ea4f 2443 	mov.w	r4, r3, lsl #9
    4c14:	d307      	bcc.n	4c26 <FatFile::write(void const*, unsigned int)+0x8e>
    4c16:	185e      	adds	r6, r3, r1
    4c18:	42b2      	cmp	r2, r6
    4c1a:	d204      	bcs.n	4c26 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    4c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
    4c20:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    4c24:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    4c26:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4c28:	4642      	mov	r2, r8
    4c2a:	6806      	ldr	r6, [r0, #0]
    4c2c:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    4c2e:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    4c30:	b380      	cbz	r0, 4c94 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4c32:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    4c34:	1b3f      	subs	r7, r7, r4
    src += n;
    4c36:	44a0      	add	r8, r4
    m_curPosition += n;
    4c38:	4423      	add	r3, r4
    4c3a:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    4c3c:	d1c1      	bne.n	4bc2 <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    4c3e:	69ea      	ldr	r2, [r5, #28]
    4c40:	429a      	cmp	r2, r3
    4c42:	d276      	bcs.n	4d32 <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4c44:	78aa      	ldrb	r2, [r5, #2]
    4c46:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    4c48:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4c4a:	f062 037f 	orn	r3, r2, #127	; 0x7f
    4c4e:	70ab      	strb	r3, [r5, #2]
    4c50:	e025      	b.n	4c9e <FatFile::write(void const*, unsigned int)+0x106>
    4c52:	7982      	ldrb	r2, [r0, #6]
    4c54:	3902      	subs	r1, #2
    4c56:	6943      	ldr	r3, [r0, #20]
    4c58:	4091      	lsls	r1, r2
    4c5a:	4419      	add	r1, r3
                      + sectorOfCluster;
    4c5c:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    4c5e:	2e00      	cmp	r6, #0
    4c60:	d0c8      	beq.n	4bf4 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    4c62:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    4c66:	2201      	movs	r2, #1
    4c68:	42bc      	cmp	r4, r7
    4c6a:	bf28      	it	cs
    4c6c:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    4c6e:	3028      	adds	r0, #40	; 0x28
    4c70:	f003 ff60 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    4c74:	b170      	cbz	r0, 4c94 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    4c76:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4c78:	4426      	add	r6, r4
      memcpy(dst, src, n);
    4c7a:	4622      	mov	r2, r4
    4c7c:	4641      	mov	r1, r8
    4c7e:	f004 fe65 	bl	994c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4c82:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    4c86:	68a8      	ldr	r0, [r5, #8]
    4c88:	d1d3      	bne.n	4c32 <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
    4c8a:	3028      	adds	r0, #40	; 0x28
    4c8c:	f003 ff26 	bl	8adc <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    4c90:	2800      	cmp	r0, #0
    4c92:	d1ce      	bne.n	4c32 <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    4c94:	786b      	ldrb	r3, [r5, #1]
  return 0;
    4c96:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    4c98:	f043 0301 	orr.w	r3, r3, #1
    4c9c:	706b      	strb	r3, [r5, #1]
}
    4c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    4ca2:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    4ca6:	696a      	ldr	r2, [r5, #20]
    4ca8:	69eb      	ldr	r3, [r5, #28]
    4caa:	42bc      	cmp	r4, r7
    4cac:	bf28      	it	cs
    4cae:	463c      	movcs	r4, r7
    4cb0:	429a      	cmp	r2, r3
    4cb2:	d305      	bcc.n	4cc0 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    4cb4:	2205      	movs	r2, #5
    4cb6:	e7da      	b.n	4c6e <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    4cb8:	6a29      	ldr	r1, [r5, #32]
    4cba:	b321      	cbz	r1, 4d06 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    4cbc:	6129      	str	r1, [r5, #16]
    4cbe:	e794      	b.n	4bea <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    4cc0:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    4cc2:	f013 0f20 	tst.w	r3, #32
    4cc6:	bf14      	ite	ne
    4cc8:	2205      	movne	r2, #5
    4cca:	2201      	moveq	r2, #1
    4ccc:	e7cf      	b.n	4c6e <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4cce:	f105 0210 	add.w	r2, r5, #16
    4cd2:	f001 f9f3 	bl	60bc <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    4cd6:	2800      	cmp	r0, #0
    4cd8:	dbdc      	blt.n	4c94 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    4cda:	d024      	beq.n	4d26 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    4cdc:	68a8      	ldr	r0, [r5, #8]
    4cde:	6929      	ldr	r1, [r5, #16]
    4ce0:	e783      	b.n	4bea <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    4ce2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4ce4:	428b      	cmp	r3, r1
    4ce6:	d104      	bne.n	4cf2 <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    4ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
    4cec:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    4cf0:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    4cf2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4cf4:	4642      	mov	r2, r8
    4cf6:	6803      	ldr	r3, [r0, #0]
    4cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4cfa:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    4cfc:	2800      	cmp	r0, #0
    4cfe:	d0c9      	beq.n	4c94 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    4d00:	f44f 7400 	mov.w	r4, #512	; 0x200
    4d04:	e795      	b.n	4c32 <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    4d06:	4628      	mov	r0, r5
    4d08:	f7ff f860 	bl	3dcc <FatFile::addCluster()>
    4d0c:	2800      	cmp	r0, #0
    4d0e:	d0c1      	beq.n	4c94 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    4d10:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    4d12:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    4d14:	6229      	str	r1, [r5, #32]
    4d16:	e768      	b.n	4bea <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    4d18:	69c1      	ldr	r1, [r0, #28]
    4d1a:	f7ff fd61 	bl	47e0 <FatFile::seekSet(unsigned long)>
    4d1e:	2800      	cmp	r0, #0
    4d20:	f47f af45 	bne.w	4bae <FatFile::write(void const*, unsigned int)+0x16>
    4d24:	e7b6      	b.n	4c94 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    4d26:	4628      	mov	r0, r5
    4d28:	f7ff f850 	bl	3dcc <FatFile::addCluster()>
    4d2c:	2800      	cmp	r0, #0
    4d2e:	d1d5      	bne.n	4cdc <FatFile::write(void const*, unsigned int)+0x144>
    4d30:	e7b0      	b.n	4c94 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    4d32:	4b05      	ldr	r3, [pc, #20]	; (4d48 <FatFile::write(void const*, unsigned int)+0x1b0>)
    4d34:	681b      	ldr	r3, [r3, #0]
    4d36:	b12b      	cbz	r3, 4d44 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4d38:	78ab      	ldrb	r3, [r5, #2]
    4d3a:	4648      	mov	r0, r9
    4d3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4d40:	70ab      	strb	r3, [r5, #2]
    4d42:	e7ac      	b.n	4c9e <FatFile::write(void const*, unsigned int)+0x106>
    4d44:	4648      	mov	r0, r9
    4d46:	e7aa      	b.n	4c9e <FatFile::write(void const*, unsigned int)+0x106>
    4d48:	200091b4 	.word	0x200091b4

00004d4c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    4d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    4d50:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    4d52:	b08d      	sub	sp, #52	; 0x34
    4d54:	4614      	mov	r4, r2
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    4d56:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    4d58:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    4d5a:	4606      	mov	r6, r0
    4d5c:	4689      	mov	r9, r1
  FatFile dir = *this;
    4d5e:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    4d60:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
    4d62:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
    4d66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    4d6a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    4d6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    4d70:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    4d72:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
    4d76:	6065      	str	r5, [r4, #4]
    4d78:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    4d7a:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
    4d7c:	f8a4 e00c 	strh.w	lr, [r4, #12]
    4d80:	2b00      	cmp	r3, #0
    4d82:	d03f      	beq.n	4e04 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    4d84:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    4d88:	eba9 010a 	sub.w	r1, r9, sl
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    4d8c:	a803      	add	r0, sp, #12
    4d8e:	b289      	uxth	r1, r1
    4d90:	0149      	lsls	r1, r1, #5
    4d92:	f7ff fd25 	bl	47e0 <FatFile::seekSet(unsigned long)>
    4d96:	b350      	cbz	r0, 4dee <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    4d98:	2100      	movs	r1, #0
    4d9a:	a803      	add	r0, sp, #12
    4d9c:	f7ff fbc0 	bl	4520 <FatFile::readDirCache(bool)>
    if (!ldir) {
    4da0:	4607      	mov	r7, r0
    4da2:	b320      	cbz	r0, 4dee <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    4da4:	2500      	movs	r5, #0
    4da6:	e00d      	b.n	4dc4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    4da8:	f003 ff02 	bl	8bb0 <FsName::get16()>
    4dac:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    4dae:	4658      	mov	r0, fp
    4db0:	f004 f812 	bl	8dd8 <toUpcase(unsigned short)>
    4db4:	4683      	mov	fp, r0
    4db6:	4640      	mov	r0, r8
    4db8:	f004 f80e 	bl	8dd8 <toUpcase(unsigned short)>
    4dbc:	4583      	cmp	fp, r0
    4dbe:	d116      	bne.n	4dee <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
    4dc0:	2d0d      	cmp	r5, #13
    4dc2:	d018      	beq.n	4df6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
    4dc4:	b2ea      	uxtb	r2, r5
    4dc6:	4639      	mov	r1, r7
    4dc8:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    4dca:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
    4dcc:	f000 fee4 	bl	5b98 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    4dd0:	89a3      	ldrh	r3, [r4, #12]
    4dd2:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
    4dd4:	4620      	mov	r0, r4
    4dd6:	2b00      	cmp	r3, #0
    4dd8:	d1e6      	bne.n	4da8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
    4dda:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    4dde:	4293      	cmp	r3, r2
    4de0:	d1e2      	bne.n	4da8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
    4de2:	fabb f08b 	clz	r0, fp
    4de6:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    4de8:	b00d      	add	sp, #52	; 0x34
    4dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    4dee:	2000      	movs	r0, #0
}
    4df0:	b00d      	add	sp, #52	; 0x34
    4df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    4df6:	f10a 0a01 	add.w	sl, sl, #1
    4dfa:	9b01      	ldr	r3, [sp, #4]
    4dfc:	fa5f fa8a 	uxtb.w	sl, sl
    4e00:	4553      	cmp	r3, sl
    4e02:	d2c1      	bcs.n	4d88 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
    4e04:	2001      	movs	r0, #1
    4e06:	e7ef      	b.n	4de8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

00004e08 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    4e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    4e0c:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    4e0e:	b08d      	sub	sp, #52	; 0x34
    4e10:	4616      	mov	r6, r2
    4e12:	469a      	mov	sl, r3
  FatFile dir = *this;
    4e14:	f10d 0c0c 	add.w	ip, sp, #12
    4e18:	f102 0415 	add.w	r4, r2, #21
    4e1c:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    4e20:	9101      	str	r1, [sp, #4]
    uint8_t sum = 0;
    4e22:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
    4e26:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    4e28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4e2c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    4e2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4e32:	683b      	ldr	r3, [r7, #0]
    4e34:	f8cc 3000 	str.w	r3, [ip]
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    4e38:	ea4f 13c9 	mov.w	r3, r9, lsl #7
    4e3c:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    4e40:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    4e44:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    4e46:	fa52 f383 	uxtab	r3, r2, r3
    4e4a:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
    4e4e:	d1f3      	bne.n	4e38 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
    4e50:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
    4e52:	f04f 0800 	mov.w	r8, #0
    next = begin;
    4e56:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    4e58:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    4e5c:	f1ba 0f00 	cmp.w	sl, #0
    4e60:	d04e      	beq.n	4f00 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
    4e62:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    4e64:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    4e66:	a803      	add	r0, sp, #12
    4e68:	1bd9      	subs	r1, r3, r7
    4e6a:	b289      	uxth	r1, r1
    4e6c:	0149      	lsls	r1, r1, #5
    4e6e:	f7ff fcb7 	bl	47e0 <FatFile::seekSet(unsigned long)>
    4e72:	2800      	cmp	r0, #0
    4e74:	d055      	beq.n	4f22 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    4e76:	2100      	movs	r1, #0
    4e78:	a803      	add	r0, sp, #12
    4e7a:	f7ff fb51 	bl	4520 <FatFile::readDirCache(bool)>
    if (!ldir) {
    4e7e:	2800      	cmp	r0, #0
    4e80:	d04f      	beq.n	4f22 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    4e82:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    4e84:	4557      	cmp	r7, sl
    4e86:	f100 0b01 	add.w	fp, r0, #1
    4e8a:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
    4e8e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    4e92:	f04f 0500 	mov.w	r5, #0
    4e96:	f043 0301 	orr.w	r3, r3, #1
    4e9a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    4e9e:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    4ea2:	bf0c      	ite	eq
    4ea4:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
    4ea8:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    4eaa:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    4eac:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    4eb0:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
    4eb2:	7303      	strb	r3, [r0, #12]
    4eb4:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
    4eb8:	f880 900d 	strb.w	r9, [r0, #13]
    4ebc:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    4ebe:	e006      	b.n	4ece <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    4ec0:	f8ab 0000 	strh.w	r0, [fp]
    4ec4:	3401      	adds	r4, #1
    4ec6:	3501      	adds	r5, #1
    4ec8:	f10b 0b02 	add.w	fp, fp, #2
    4ecc:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
    4ece:	89b0      	ldrh	r0, [r6, #12]
    4ed0:	b918      	cbnz	r0, 4eda <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
    4ed2:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    4ed6:	429a      	cmp	r2, r3
    4ed8:	d016      	beq.n	4f08 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    4eda:	4630      	mov	r0, r6
    4edc:	f003 fe68 	bl	8bb0 <FsName::get16()>
  if (i < 5) {
    4ee0:	2d04      	cmp	r5, #4
    4ee2:	b2eb      	uxtb	r3, r5
    4ee4:	d9ec      	bls.n	4ec0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
    4ee6:	2b0a      	cmp	r3, #10
    4ee8:	d802      	bhi.n	4ef0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    4eea:	f8ab 0003 	strh.w	r0, [fp, #3]
}
    4eee:	e7e9      	b.n	4ec4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
    4ef0:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    4ef2:	f8ab 0005 	strh.w	r0, [fp, #5]
    4ef6:	d1e5      	bne.n	4ec4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    4ef8:	3701      	adds	r7, #1
    4efa:	b2ff      	uxtb	r7, r7
    4efc:	45ba      	cmp	sl, r7
    4efe:	d2b1      	bcs.n	4e64 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    4f00:	2001      	movs	r0, #1

 fail:
  return false;
}
    4f02:	b00d      	add	sp, #52	; 0x34
    4f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    4f08:	f1b8 0f00 	cmp.w	r8, #0
    4f0c:	d006      	beq.n	4f1c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    4f0e:	f108 0801 	add.w	r8, r8, #1
    4f12:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4f16:	fa5f f888 	uxtb.w	r8, r8
    4f1a:	e7e1      	b.n	4ee0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
    4f1c:	f04f 0801 	mov.w	r8, #1
    4f20:	e7de      	b.n	4ee0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
    4f22:	2000      	movs	r0, #0
}
    4f24:	b00d      	add	sp, #52	; 0x34
    4f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f2a:	bf00      	nop

00004f2c <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    4f2c:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    4f2e:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    4f32:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    4f36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    4f3a:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
    4f3e:	4686      	mov	lr, r0
  const char* end = fname->end;
    4f40:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    4f42:	6051      	str	r1, [r2, #4]
    4f44:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    4f48:	781a      	ldrb	r2, [r3, #0]
    4f4a:	2a2e      	cmp	r2, #46	; 0x2e
    4f4c:	bf14      	ite	ne
    4f4e:	2001      	movne	r0, #1
    4f50:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    4f52:	d103      	bne.n	4f5c <FatFile::makeSFN(FatLfn_t*)+0x30>
    4f54:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4f58:	2a2e      	cmp	r2, #46	; 0x2e
    4f5a:	d0fb      	beq.n	4f54 <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    4f5c:	1e61      	subs	r1, r4, #1
    4f5e:	4299      	cmp	r1, r3
    4f60:	d90b      	bls.n	4f7a <FatFile::makeSFN(FatLfn_t*)+0x4e>
    4f62:	460a      	mov	r2, r1
    4f64:	e002      	b.n	4f6c <FatFile::makeSFN(FatLfn_t*)+0x40>
    4f66:	4293      	cmp	r3, r2
    4f68:	4611      	mov	r1, r2
    4f6a:	d006      	beq.n	4f7a <FatFile::makeSFN(FatLfn_t*)+0x4e>
    4f6c:	4611      	mov	r1, r2
    4f6e:	3a01      	subs	r2, #1
    4f70:	f891 c000 	ldrb.w	ip, [r1]
    4f74:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    4f78:	d1f5      	bne.n	4f66 <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
    4f7a:	429c      	cmp	r4, r3
    4f7c:	f04f 0500 	mov.w	r5, #0
    4f80:	f240 8086 	bls.w	5090 <FatFile::makeSFN(FatLfn_t*)+0x164>
    4f84:	2607      	movs	r6, #7
    4f86:	2708      	movs	r7, #8
    4f88:	46a9      	mov	r9, r5
    4f8a:	46a8      	mov	r8, r5
    4f8c:	e006      	b.n	4f9c <FatFile::makeSFN(FatLfn_t*)+0x70>
    4f8e:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    4f90:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
    4f92:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    4f96:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    4f98:	429c      	cmp	r4, r3
    4f9a:	d95b      	bls.n	5054 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    4f9c:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    4f9e:	2a2e      	cmp	r2, #46	; 0x2e
    4fa0:	bf08      	it	eq
    4fa2:	4299      	cmpeq	r1, r3
    4fa4:	d0f3      	beq.n	4f8e <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    4fa6:	2a22      	cmp	r2, #34	; 0x22
    4fa8:	d00d      	beq.n	4fc6 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    4faa:	2a7c      	cmp	r2, #124	; 0x7c
    4fac:	d00b      	beq.n	4fc6 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    4fae:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    4fb2:	f1bc 0f02 	cmp.w	ip, #2
    4fb6:	d906      	bls.n	4fc6 <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    4fb8:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    4fbc:	f1bc 0f05 	cmp.w	ip, #5
    4fc0:	d821      	bhi.n	5006 <FatFile::makeSFN(FatLfn_t*)+0xda>
    4fc2:	2a2d      	cmp	r2, #45	; 0x2d
    4fc4:	d01f      	beq.n	5006 <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    4fc6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    4fca:	2a80      	cmp	r2, #128	; 0x80
    4fcc:	d05d      	beq.n	508a <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    4fce:	454e      	cmp	r6, r9
    4fd0:	d22f      	bcs.n	5032 <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    4fd2:	4299      	cmp	r1, r3
    4fd4:	bf2c      	ite	cs
    4fd6:	2000      	movcs	r0, #0
    4fd8:	2001      	movcc	r0, #1
    4fda:	2e0a      	cmp	r6, #10
    4fdc:	bf08      	it	eq
    4fde:	f040 0001 	orreq.w	r0, r0, #1
    4fe2:	2800      	cmp	r0, #0
    4fe4:	d047      	beq.n	5076 <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    4fe6:	f89e 3016 	ldrb.w	r3, [lr, #22]
    4fea:	2b20      	cmp	r3, #32
    4fec:	d040      	beq.n	5070 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    4fee:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    4ff2:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    4ff4:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    4ff6:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    4ff8:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    4ffa:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    4ffe:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    5000:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
    5002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5006:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    500a:	f1bc 0f05 	cmp.w	ip, #5
    500e:	d9da      	bls.n	4fc6 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    5010:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    5014:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    5018:	d8d5      	bhi.n	4fc6 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    501a:	454e      	cmp	r6, r9
    501c:	d3d9      	bcc.n	4fd2 <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    501e:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    5022:	f1bc 0f19 	cmp.w	ip, #25
    5026:	d828      	bhi.n	507a <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    5028:	3a20      	subs	r2, #32
        lc |= bit;
    502a:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    502c:	b2d2      	uxtb	r2, r2
        lc |= bit;
    502e:	b2ed      	uxtb	r5, r5
    5030:	e001      	b.n	5036 <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    5032:	2000      	movs	r0, #0
        c = '_';
    5034:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    5036:	f109 0c01 	add.w	ip, r9, #1
    503a:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    503c:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    503e:	f889 2016 	strb.w	r2, [r9, #22]
    5042:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    5046:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    5048:	4691      	mov	r9, r2
    504a:	bf98      	it	ls
    504c:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
    5050:	429c      	cmp	r4, r3
    5052:	d8a3      	bhi.n	4f9c <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    5054:	f89e 3016 	ldrb.w	r3, [lr, #22]
    5058:	2b20      	cmp	r3, #32
    505a:	d009      	beq.n	5070 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    505c:	2800      	cmp	r0, #0
    505e:	d0c6      	beq.n	4fee <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    5060:	ea18 0f05 	tst.w	r8, r5
    5064:	bf18      	it	ne
    5066:	2502      	movne	r5, #2
    5068:	f88e 5015 	strb.w	r5, [lr, #21]
}
    506c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    5070:	2000      	movs	r0, #0
}
    5072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5076:	460b      	mov	r3, r1
    5078:	e78e      	b.n	4f98 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    507a:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    507e:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    5082:	bf98      	it	ls
    5084:	ea47 0808 	orrls.w	r8, r7, r8
    5088:	e7d5      	b.n	5036 <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    508a:	3301      	adds	r3, #1
        is83 = false;
    508c:	2000      	movs	r0, #0
    508e:	e783      	b.n	4f98 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    5090:	46a8      	mov	r8, r5
    5092:	e7df      	b.n	5054 <FatFile::makeSFN(FatLfn_t*)+0x128>

00005094 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    5094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    5098:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    509c:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    509e:	460f      	mov	r7, r1
    50a0:	4604      	mov	r4, r0
    50a2:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 5144 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    50a6:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    50aa:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    50ae:	f101 0616 	add.w	r6, r1, #22
	return systick_millis_count;
    50b2:	f1b8 0f03 	cmp.w	r8, #3
    50b6:	f8db 3000 	ldr.w	r3, [fp]
    50ba:	bf28      	it	cs
    50bc:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    50c0:	442b      	add	r3, r5
    50c2:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    50c4:	f108 0304 	add.w	r3, r8, #4
    50c8:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    50ca:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    50ce:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    50d0:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    50d2:	2a09      	cmp	r2, #9
    50d4:	f102 0137 	add.w	r1, r2, #55	; 0x37
    50d8:	bf98      	it	ls
    50da:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    50de:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    50e0:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    50e2:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    50e4:	4598      	cmp	r8, r3
    50e6:	d1f0      	bne.n	50ca <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    50e8:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
    50ec:	2100      	movs	r1, #0
    50ee:	4620      	mov	r0, r4
    50f0:	f883 a016 	strb.w	sl, [r3, #22]
    50f4:	f7ff fb74 	bl	47e0 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    50f8:	2101      	movs	r1, #1
    50fa:	4620      	mov	r0, r4
    50fc:	f7ff fa10 	bl	4520 <FatFile::readDirCache(bool)>
    5100:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    5102:	220b      	movs	r2, #11
    5104:	4630      	mov	r0, r6
      if (!dir) {
    5106:	b19b      	cbz	r3, 5130 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    5108:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    510c:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    510e:	f1bc 0f00 	cmp.w	ip, #0
    5112:	d013      	beq.n	513c <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    5114:	7adb      	ldrb	r3, [r3, #11]
    5116:	071b      	lsls	r3, r3, #28
    5118:	d4ee      	bmi.n	50f8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    511a:	f008 f937 	bl	d38c <memcmp>
    511e:	2800      	cmp	r0, #0
    5120:	d1ea      	bne.n	50f8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    5122:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    5126:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    512a:	d1c2      	bne.n	50b2 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    512c:	4648      	mov	r0, r9
 fail:
    512e:	e003      	b.n	5138 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    5130:	7860      	ldrb	r0, [r4, #1]
    5132:	fab0 f080 	clz	r0, r0
    5136:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
    5138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    513c:	2001      	movs	r0, #1
}
    513e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5142:	bf00      	nop
    5144:	20009600 	.word	0x20009600

00005148 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    5148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    514c:	ed2d 8b02 	vpush	{d8}
    5150:	b08b      	sub	sp, #44	; 0x2c
    5152:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    5156:	688b      	ldr	r3, [r1, #8]
    5158:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    515a:	780b      	ldrb	r3, [r1, #0]
    515c:	f013 0f70 	tst.w	r3, #112	; 0x70
    5160:	d053      	beq.n	520a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
    5162:	9b02      	ldr	r3, [sp, #8]
    5164:	781b      	ldrb	r3, [r3, #0]
    5166:	2b00      	cmp	r3, #0
    5168:	d14f      	bne.n	520a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    516a:	6913      	ldr	r3, [r2, #16]
    516c:	4690      	mov	r8, r2
    516e:	4a9a      	ldr	r2, [pc, #616]	; (53d8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    5170:	460e      	mov	r6, r1
    5172:	330c      	adds	r3, #12
    5174:	fba2 2303 	umull	r2, r3, r2, r3
    5178:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    517c:	f898 3015 	ldrb.w	r3, [r8, #21]
    5180:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
    5182:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    5184:	f000 80a7 	beq.w	52d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    5188:	1c57      	adds	r7, r2, #1
    518a:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    518c:	2300      	movs	r3, #0
    seekSet(0);
    518e:	4630      	mov	r0, r6
    5190:	4619      	mov	r1, r3
    5192:	461c      	mov	r4, r3
    5194:	9306      	str	r3, [sp, #24]
    5196:	f7ff fb23 	bl	47e0 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    519a:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
    519e:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    51a0:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    51a2:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    51a4:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    51a8:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    51aa:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    51ac:	2100      	movs	r1, #0
    51ae:	4630      	mov	r0, r6
    51b0:	f7ff f9b6 	bl	4520 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    51b4:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    51b8:	4603      	mov	r3, r0
    51ba:	b320      	cbz	r0, 5206 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    51bc:	7802      	ldrb	r2, [r0, #0]
    51be:	2ae5      	cmp	r2, #229	; 0xe5
    51c0:	d029      	beq.n	5216 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    51c2:	b342      	cbz	r2, 5216 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    51c4:	42bc      	cmp	r4, r7
    51c6:	bf38      	it	cc
    51c8:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    51ca:	2a2e      	cmp	r2, #46	; 0x2e
    51cc:	d02b      	beq.n	5226 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    51ce:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    51d2:	f1bc 0f0f 	cmp.w	ip, #15
    51d6:	d054      	beq.n	5282 <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
    51d8:	f01c 0c08 	ands.w	ip, ip, #8
    51dc:	d123      	bne.n	5226 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    51de:	f1b9 0f00 	cmp.w	r9, #0
    51e2:	f040 80d5 	bne.w	5390 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    51e6:	220b      	movs	r2, #11
    51e8:	ee18 1a10 	vmov	r1, s16
    51ec:	f008 f8ce 	bl	d38c <memcmp>
    51f0:	2800      	cmp	r0, #0
    51f2:	d1da      	bne.n	51aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    51f4:	f898 3015 	ldrb.w	r3, [r8, #21]
    51f8:	f013 0301 	ands.w	r3, r3, #1
    51fc:	f000 80e4 	beq.w	53c8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    5200:	2301      	movs	r3, #1
    5202:	9305      	str	r3, [sp, #20]
    5204:	e7d1      	b.n	51aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    5206:	7873      	ldrb	r3, [r6, #1]
    5208:	b183      	cbz	r3, 522c <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
    520a:	2000      	movs	r0, #0
}
    520c:	b00b      	add	sp, #44	; 0x2c
    520e:	ecbd 8b02 	vpop	{d8}
    5212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    5216:	2c00      	cmp	r4, #0
    5218:	bf08      	it	eq
    521a:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    521c:	42bc      	cmp	r4, r7
    521e:	d201      	bcs.n	5224 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    5220:	3401      	adds	r4, #1
    5222:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    5224:	b112      	cbz	r2, 522c <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    5226:	f04f 0900 	mov.w	r9, #0
    522a:	e7be      	b.n	51aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    522c:	9b03      	ldr	r3, [sp, #12]
    522e:	059a      	lsls	r2, r3, #22
    5230:	d5eb      	bpl.n	520a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    5232:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    5236:	3b01      	subs	r3, #1
    5238:	2b01      	cmp	r3, #1
    523a:	d8e6      	bhi.n	520a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    523c:	2c00      	cmp	r4, #0
    523e:	bf08      	it	eq
    5240:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    5242:	42bc      	cmp	r4, r7
    5244:	d303      	bcc.n	524e <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    5246:	e048      	b.n	52da <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    5248:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    524a:	42a7      	cmp	r7, r4
    524c:	d045      	beq.n	52da <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    524e:	2100      	movs	r1, #0
    5250:	4630      	mov	r0, r6
    5252:	f7ff f965 	bl	4520 <FatFile::readDirCache(bool)>
    freeFound++;
    5256:	1c63      	adds	r3, r4, #1
    if (!dir) {
    5258:	2800      	cmp	r0, #0
    525a:	d1f5      	bne.n	5248 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    525c:	7873      	ldrb	r3, [r6, #1]
    525e:	2b00      	cmp	r3, #0
    5260:	d1d3      	bne.n	520a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    5262:	42a7      	cmp	r7, r4
    5264:	d939      	bls.n	52da <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    5266:	9d07      	ldr	r5, [sp, #28]
    5268:	e005      	b.n	5276 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    526a:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    526c:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    5270:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    5272:	42a7      	cmp	r7, r4
    5274:	d931      	bls.n	52da <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    5276:	4630      	mov	r0, r6
    5278:	f7fe fdc2 	bl	3e00 <FatFile::addDirCluster()>
    527c:	2800      	cmp	r0, #0
    527e:	d1f4      	bne.n	526a <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    5280:	e7c3      	b.n	520a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    5282:	f1b9 0f00 	cmp.w	r9, #0
    5286:	d119      	bne.n	52bc <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    5288:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    528c:	9904      	ldr	r1, [sp, #16]
    528e:	4559      	cmp	r1, fp
    5290:	d18b      	bne.n	51aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    5292:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    5296:	d088      	beq.n	51aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    5298:	7b43      	ldrb	r3, [r0, #13]
    529a:	4689      	mov	r9, r1
    529c:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    529e:	f1bb 0f01 	cmp.w	fp, #1
    52a2:	d182      	bne.n	51aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    52a4:	1c69      	adds	r1, r5, #1
    52a6:	464b      	mov	r3, r9
    52a8:	4642      	mov	r2, r8
    52aa:	4630      	mov	r0, r6
    52ac:	b289      	uxth	r1, r1
    52ae:	f7ff fd4d 	bl	4d4c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    52b2:	2800      	cmp	r0, #0
    52b4:	bf08      	it	eq
    52b6:	f04f 0900 	moveq.w	r9, #0
    52ba:	e776      	b.n	51aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    52bc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    52c0:	fa5f fb8b 	uxtb.w	fp, fp
    52c4:	455a      	cmp	r2, fp
    52c6:	d1ae      	bne.n	5226 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    52c8:	7b43      	ldrb	r3, [r0, #13]
    52ca:	9a06      	ldr	r2, [sp, #24]
    52cc:	4293      	cmp	r3, r2
    52ce:	d0e6      	beq.n	529e <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    52d0:	f04f 0900 	mov.w	r9, #0
    52d4:	e769      	b.n	51aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    52d6:	2701      	movs	r7, #1
    52d8:	e758      	b.n	518c <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    52da:	9b05      	ldr	r3, [sp, #20]
    52dc:	b12b      	cbz	r3, 52ea <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    52de:	4641      	mov	r1, r8
    52e0:	4630      	mov	r0, r6
    52e2:	f7ff fed7 	bl	5094 <FatFile::makeUniqueSfn(FatLfn_t*)>
    52e6:	2800      	cmp	r0, #0
    52e8:	d08f      	beq.n	520a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    52ea:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    52ec:	4642      	mov	r2, r8
    52ee:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    52f0:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    52f2:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    52f6:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    52f8:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    52fa:	4629      	mov	r1, r5
    52fc:	f7ff fd84 	bl	4e08 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    5300:	2800      	cmp	r0, #0
    5302:	d082      	beq.n	520a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    5304:	0169      	lsls	r1, r5, #5
    5306:	4630      	mov	r0, r6
    5308:	f7ff fa6a 	bl	47e0 <FatFile::seekSet(unsigned long)>
    530c:	2800      	cmp	r0, #0
    530e:	f43f af7c 	beq.w	520a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    5312:	2100      	movs	r1, #0
    5314:	4630      	mov	r0, r6
    5316:	f7ff f903 	bl	4520 <FatFile::readDirCache(bool)>
  if (!dir) {
    531a:	4604      	mov	r4, r0
    531c:	2800      	cmp	r0, #0
    531e:	f43f af74 	beq.w	520a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    5322:	2220      	movs	r2, #32
    5324:	2100      	movs	r1, #0
    5326:	f008 f8dd 	bl	d4e4 <memset>
  memcpy(dir->name, fname->sfn, 11);
    532a:	f8d8 2016 	ldr.w	r2, [r8, #22]
    532e:	f8d8 301a 	ldr.w	r3, [r8, #26]
    5332:	6022      	str	r2, [r4, #0]
    5334:	6063      	str	r3, [r4, #4]
    5336:	f898 3020 	ldrb.w	r3, [r8, #32]
    533a:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    533e:	72a3      	strb	r3, [r4, #10]
    5340:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    5342:	f898 3015 	ldrb.w	r3, [r8, #21]
    5346:	f003 0318 	and.w	r3, r3, #24
    534a:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    534c:	4b23      	ldr	r3, [pc, #140]	; (53dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    534e:	681b      	ldr	r3, [r3, #0]
    5350:	2b00      	cmp	r3, #0
    5352:	d03b      	beq.n	53cc <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    5354:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5358:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    535c:	a809      	add	r0, sp, #36	; 0x24
    535e:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    5360:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    5364:	8223      	strh	r3, [r4, #16]
    5366:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    536a:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    536c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    5370:	7363      	strb	r3, [r4, #13]
    5372:	9a07      	ldr	r2, [sp, #28]
    5374:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    5378:	f043 0301 	orr.w	r3, r3, #1
    537c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    5380:	9b03      	ldr	r3, [sp, #12]
    5382:	462a      	mov	r2, r5
    5384:	4631      	mov	r1, r6
    5386:	9802      	ldr	r0, [sp, #8]
    5388:	9700      	str	r7, [sp, #0]
    538a:	f7ff fa81 	bl	4890 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    538e:	e73d      	b.n	520c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    5390:	f1bb 0f01 	cmp.w	fp, #1
    5394:	f47f af39 	bne.w	520a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    5398:	300a      	adds	r0, #10
    539a:	e001      	b.n	53a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    539c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    53a0:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    53a4:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    53a6:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    53aa:	fa52 f281 	uxtab	r2, r2, r1
    53ae:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    53b2:	d1f3      	bne.n	539c <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    53b4:	9b06      	ldr	r3, [sp, #24]
    53b6:	4563      	cmp	r3, ip
    53b8:	f47f af27 	bne.w	520a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    53bc:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    53be:	9b03      	ldr	r3, [sp, #12]
    53c0:	0519      	lsls	r1, r3, #20
    53c2:	f53f af22 	bmi.w	520a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    53c6:	e7db      	b.n	5380 <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    53c8:	461f      	mov	r7, r3
    53ca:	e7f8      	b.n	53be <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    53cc:	f645 0321 	movw	r3, #22561	; 0x5821
    53d0:	8223      	strh	r3, [r4, #16]
    53d2:	8323      	strh	r3, [r4, #24]
    53d4:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    53d6:	e7cc      	b.n	5372 <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    53d8:	4ec4ec4f 	.word	0x4ec4ec4f
    53dc:	200091b4 	.word	0x200091b4

000053e0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    53e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53e4:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    53e6:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
    53e8:	b082      	sub	sp, #8
    53ea:	460c      	mov	r4, r1
  while (*path == ' ') {
    53ec:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
    53ee:	4615      	mov	r5, r2
  while (*path == ' ') {
    53f0:	d103      	bne.n	53fa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    53f2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    53f6:	2b20      	cmp	r3, #32
    53f8:	d0fb      	beq.n	53f2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    53fa:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    53fc:	7823      	ldrb	r3, [r4, #0]
    53fe:	b363      	cbz	r3, 545a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    5400:	2b2f      	cmp	r3, #47	; 0x2f
    5402:	d02a      	beq.n	545a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
    5404:	f04f 0800 	mov.w	r8, #0
    5408:	4e29      	ldr	r6, [pc, #164]	; (54b0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    540a:	1d21      	adds	r1, r4, #4
    540c:	4620      	mov	r0, r4
    540e:	aa01      	add	r2, sp, #4
    5410:	f003 fc96 	bl	8d40 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    5414:	4604      	mov	r4, r0
    5416:	b170      	cbz	r0, 5436 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    5418:	9b01      	ldr	r3, [sp, #4]
    541a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    541e:	d240      	bcs.n	54a2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
    5420:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    5422:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    5426:	d831      	bhi.n	548c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
    5428:	2b3c      	cmp	r3, #60	; 0x3c
    542a:	b2d9      	uxtb	r1, r3
    542c:	d829      	bhi.n	5482 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    542e:	2921      	cmp	r1, #33	; 0x21
    5430:	d805      	bhi.n	543e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
    5432:	291f      	cmp	r1, #31
    5434:	d809      	bhi.n	544a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    5436:	2000      	movs	r0, #0
    5438:	b002      	add	sp, #8
    543a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    543e:	3922      	subs	r1, #34	; 0x22
    5440:	b2c9      	uxtb	r1, r1
    5442:	fa26 f101 	lsr.w	r1, r6, r1
    5446:	07ca      	lsls	r2, r1, #31
    5448:	d4f5      	bmi.n	5436 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
    544a:	2b2e      	cmp	r3, #46	; 0x2e
    544c:	d001      	beq.n	5452 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    544e:	2b20      	cmp	r3, #32
    5450:	d11c      	bne.n	548c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
    5452:	7823      	ldrb	r3, [r4, #0]
    5454:	b10b      	cbz	r3, 545a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    5456:	2b2f      	cmp	r3, #47	; 0x2f
    5458:	d1d7      	bne.n	540a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    545a:	692b      	ldr	r3, [r5, #16]
    545c:	3b01      	subs	r3, #1
    545e:	2bfe      	cmp	r3, #254	; 0xfe
    5460:	d8e9      	bhi.n	5436 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    5462:	7823      	ldrb	r3, [r4, #0]
    5464:	2b20      	cmp	r3, #32
    5466:	d103      	bne.n	5470 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    5468:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    546c:	2b20      	cmp	r3, #32
    546e:	d0fb      	beq.n	5468 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
    5470:	2b2f      	cmp	r3, #47	; 0x2f
    5472:	d0f9      	beq.n	5468 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
    5474:	4628      	mov	r0, r5
  *ptr = path;
    5476:	603c      	str	r4, [r7, #0]
}
    5478:	b002      	add	sp, #8
    547a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
    547e:	f7ff bd55 	b.w	4f2c <FatFile::makeSFN(FatLfn_t*)>
    5482:	295c      	cmp	r1, #92	; 0x5c
    5484:	d0d7      	beq.n	5436 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    5486:	d905      	bls.n	5494 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
    5488:	297c      	cmp	r1, #124	; 0x7c
    548a:	d0d4      	beq.n	5436 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
    548c:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    5490:	60ac      	str	r4, [r5, #8]
    5492:	e7de      	b.n	5452 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    5494:	393e      	subs	r1, #62	; 0x3e
    5496:	2901      	cmp	r1, #1
    5498:	d8f8      	bhi.n	548c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
    549a:	2000      	movs	r0, #0
    549c:	b002      	add	sp, #8
    549e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
    54a2:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
    54a6:	60ac      	str	r4, [r5, #8]
      fname->len = len;
    54a8:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    54ac:	e7d1      	b.n	5452 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    54ae:	bf00      	nop
    54b0:	05002101 	.word	0x05002101

000054b4 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    54b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    54b6:	2300      	movs	r3, #0
    54b8:	b08b      	sub	sp, #44	; 0x2c
    54ba:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    54bc:	7883      	ldrb	r3, [r0, #2]
    54be:	079a      	lsls	r2, r3, #30
    54c0:	d524      	bpl.n	550c <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    54c2:	6a01      	ldr	r1, [r0, #32]
    54c4:	4605      	mov	r5, r0
    54c6:	b119      	cbz	r1, 54d0 <FatFile::remove()+0x1c>
    54c8:	6880      	ldr	r0, [r0, #8]
    54ca:	f000 fe19 	bl	6100 <FatPartition::freeChain(unsigned long)>
    54ce:	b1e8      	cbz	r0, 550c <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    54d0:	2101      	movs	r1, #1
    54d2:	4628      	mov	r0, r5
    54d4:	f7fe fcd0 	bl	3e78 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    54d8:	b1c0      	cbz	r0, 550c <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
    54da:	1e42      	subs	r2, r0, #1
    54dc:	f100 0c0a 	add.w	ip, r0, #10
    uint8_t sum = 0;
    54e0:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    54e2:	01e3      	lsls	r3, r4, #7
    54e4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    54e8:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    54ec:	4594      	cmp	ip, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    54ee:	fa51 f383 	uxtab	r3, r1, r3
    54f2:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    54f4:	d1f5      	bne.n	54e2 <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    54f6:	26e5      	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    54f8:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
    54fa:	7006      	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    54fc:	68af      	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
    54fe:	702b      	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5500:	f107 0028 	add.w	r0, r7, #40	; 0x28
  m_flags = 0;
    5504:	70ab      	strb	r3, [r5, #2]
    5506:	f003 fae9 	bl	8adc <FsCache::sync()>
    550a:	b910      	cbnz	r0, 5512 <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    550c:	2000      	movs	r0, #0
}
    550e:	b00b      	add	sp, #44	; 0x2c
    5510:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5512:	f507 700e 	add.w	r0, r7, #568	; 0x238
    5516:	f003 fae1 	bl	8adc <FsCache::sync()>
    551a:	2800      	cmp	r0, #0
    551c:	d0f6      	beq.n	550c <FatFile::remove()+0x58>
    551e:	6838      	ldr	r0, [r7, #0]
    return m_blockDev->syncDevice();
    5520:	6803      	ldr	r3, [r0, #0]
    5522:	6a1b      	ldr	r3, [r3, #32]
    5524:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5526:	2800      	cmp	r0, #0
    5528:	d0f0      	beq.n	550c <FatFile::remove()+0x58>
  if (!isLFN()) {
    552a:	78eb      	ldrb	r3, [r5, #3]
    552c:	2b00      	cmp	r3, #0
    552e:	d0ee      	beq.n	550e <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
    5530:	4629      	mov	r1, r5
    5532:	a801      	add	r0, sp, #4
    5534:	f7fe fec0 	bl	42b8 <FatFile::openCluster(FatFile*)>
    5538:	2800      	cmp	r0, #0
    553a:	d0e7      	beq.n	550c <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    553c:	78eb      	ldrb	r3, [r5, #3]
    553e:	2b00      	cmp	r3, #0
    5540:	d0e4      	beq.n	550c <FatFile::remove()+0x58>
    5542:	2701      	movs	r7, #1
    5544:	e021      	b.n	558a <FatFile::remove()+0xd6>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    5546:	a801      	add	r0, sp, #4
    5548:	f7fe ffea 	bl	4520 <FatFile::readDirCache(bool)>
    554c:	1c7b      	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    554e:	b2f9      	uxtb	r1, r7
    if (!ldir) {
    5550:	2800      	cmp	r0, #0
    5552:	d0db      	beq.n	550c <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    5554:	7ac2      	ldrb	r2, [r0, #11]
    5556:	2a0f      	cmp	r2, #15
    5558:	d1d8      	bne.n	550c <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    555a:	7802      	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    555c:	fa5f fc83 	uxtb.w	ip, r3
    5560:	b29f      	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    5562:	f002 031f 	and.w	r3, r2, #31
    5566:	428b      	cmp	r3, r1
    5568:	d1d0      	bne.n	550c <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    556a:	7b43      	ldrb	r3, [r0, #13]
    556c:	42a3      	cmp	r3, r4
    556e:	d1cd      	bne.n	550c <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
    5570:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    5572:	68a9      	ldr	r1, [r5, #8]
    5574:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    5578:	f043 0301 	orr.w	r3, r3, #1
    557c:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    5580:	0653      	lsls	r3, r2, #25
    5582:	d40d      	bmi.n	55a0 <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    5584:	78eb      	ldrb	r3, [r5, #3]
    5586:	4563      	cmp	r3, ip
    5588:	d3c0      	bcc.n	550c <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    558a:	88a9      	ldrh	r1, [r5, #4]
    558c:	a801      	add	r0, sp, #4
    558e:	1bc9      	subs	r1, r1, r7
    5590:	b289      	uxth	r1, r1
    5592:	0149      	lsls	r1, r1, #5
    5594:	f7ff f924 	bl	47e0 <FatFile::seekSet(unsigned long)>
    5598:	2100      	movs	r1, #0
    559a:	2800      	cmp	r0, #0
    559c:	d1d3      	bne.n	5546 <FatFile::remove()+0x92>
    559e:	e7b5      	b.n	550c <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
    55a0:	68ac      	ldr	r4, [r5, #8]
    55a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    55a6:	f003 fa99 	bl	8adc <FsCache::sync()>
    55aa:	2800      	cmp	r0, #0
    55ac:	d0ae      	beq.n	550c <FatFile::remove()+0x58>
    55ae:	f504 700e 	add.w	r0, r4, #568	; 0x238
    55b2:	f003 fa93 	bl	8adc <FsCache::sync()>
    55b6:	2800      	cmp	r0, #0
    55b8:	d0a8      	beq.n	550c <FatFile::remove()+0x58>
    55ba:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    55bc:	6803      	ldr	r3, [r0, #0]
    55be:	6a1b      	ldr	r3, [r3, #32]
    55c0:	4798      	blx	r3
    55c2:	e7a4      	b.n	550e <FatFile::remove()+0x5a>

000055c4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    55c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    55c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    55cc:	b1a2      	cbz	r2, 55f8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    55ce:	4605      	mov	r5, r0
    55d0:	460c      	mov	r4, r1
    55d2:	4698      	mov	r8, r3
    55d4:	1857      	adds	r7, r2, r1
    55d6:	e001      	b.n	55dc <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
    55d8:	42bc      	cmp	r4, r7
    55da:	d00d      	beq.n	55f8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    55dc:	682b      	ldr	r3, [r5, #0]
    55de:	4620      	mov	r0, r4
    55e0:	4649      	mov	r1, r9
    55e2:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    55e4:	47c0      	blx	r8
    55e6:	4621      	mov	r1, r4
    55e8:	4602      	mov	r2, r0
    55ea:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
    55ec:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    55ee:	47b0      	blx	r6
    55f0:	2800      	cmp	r0, #0
    55f2:	d1f1      	bne.n	55d8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    55f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    55f8:	2001      	movs	r0, #1
  }
    55fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    55fe:	bf00      	nop

00005600 <initFatDirCallback(unsigned long, void*)>:
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    5600:	6848      	ldr	r0, [r1, #4]
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
    5602:	b510      	push	{r4, lr}
    5604:	460c      	mov	r4, r1
  if (state->pr && ++state->count >= state->dotcount) {
    5606:	b130      	cbz	r0, 5616 <initFatDirCallback(unsigned long, void*)+0x16>
    5608:	890b      	ldrh	r3, [r1, #8]
    560a:	894a      	ldrh	r2, [r1, #10]
    560c:	3301      	adds	r3, #1
    560e:	b29b      	uxth	r3, r3
    5610:	429a      	cmp	r2, r3
    5612:	810b      	strh	r3, [r1, #8]
    5614:	d901      	bls.n	561a <initFatDirCallback(unsigned long, void*)+0x1a>
    state->pr->write(".");
    state->count = 0;
  }
  return state->buffer;
}
    5616:	6820      	ldr	r0, [r4, #0]
    5618:	bd10      	pop	{r4, pc}
    561a:	6803      	ldr	r3, [r0, #0]
    561c:	2201      	movs	r2, #1
    561e:	4903      	ldr	r1, [pc, #12]	; (562c <initFatDirCallback(unsigned long, void*)+0x2c>)
    5620:	685b      	ldr	r3, [r3, #4]
    5622:	4798      	blx	r3
    state->count = 0;
    5624:	2300      	movs	r3, #0
}
    5626:	6820      	ldr	r0, [r4, #0]
    state->count = 0;
    5628:	8123      	strh	r3, [r4, #8]
}
    562a:	bd10      	pop	{r4, pc}
    562c:	200007f8 	.word	0x200007f8

00005630 <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    5630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5634:	4605      	mov	r5, r0
    5636:	b087      	sub	sp, #28
    5638:	4688      	mov	r8, r1
    563a:	4692      	mov	sl, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    563c:	2100      	movs	r1, #0
    563e:	f44f 7200 	mov.w	r2, #512	; 0x200
    5642:	6a40      	ldr	r0, [r0, #36]	; 0x24
    5644:	f007 ff4e 	bl	d4e4 <memset>
  writeMsg("Writing FAT ");
    5648:	6a28      	ldr	r0, [r5, #32]
    564a:	b128      	cbz	r0, 5658 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x28>
    564c:	6803      	ldr	r3, [r0, #0]
    564e:	220c      	movs	r2, #12
    5650:	493a      	ldr	r1, [pc, #232]	; (573c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x10c>)
    5652:	685b      	ldr	r3, [r3, #4]
    5654:	4798      	blx	r3
  struct initFatDirState state;
  state.buffer = m_secBuf;
  state.pr = m_pr;
    5656:	6a28      	ldr	r0, [r5, #32]
  state.buffer = m_secBuf;
    5658:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  state.count = 0;
    565a:	f04f 0900 	mov.w	r9, #0
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    565e:	69ee      	ldr	r6, [r5, #28]
    5660:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
    5664:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 5748 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x118>
    5668:	68e9      	ldr	r1, [r5, #12]
  state.count = 0;
    566a:	f8ad 9014 	strh.w	r9, [sp, #20]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    566e:	1c4c      	adds	r4, r1, #1
  state.buffer = m_secBuf;
    5670:	e9cd 3003 	strd	r3, r0, [sp, #12]
  state.dotcount = sectorCount/32;
    5674:	ea4f 135a 	mov.w	r3, sl, lsr #5
    5678:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    567c:	6833      	ldr	r3, [r6, #0]
    567e:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    5680:	4567      	cmp	r7, ip
    5682:	d126      	bne.n	56d2 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa2>
     for (size_t i = 0; i < ns; i++) {
    5684:	b36a      	cbz	r2, 56e2 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb2>
    5686:	eb01 070a 	add.w	r7, r1, sl
    568a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 574c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x11c>
    568e:	e00a      	b.n	56a6 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x76>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    5690:	4621      	mov	r1, r4
    5692:	9a03      	ldr	r2, [sp, #12]
    5694:	4630      	mov	r0, r6
     for (size_t i = 0; i < ns; i++) {
    5696:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    5698:	47d8      	blx	fp
    569a:	2800      	cmp	r0, #0
    569c:	d03f      	beq.n	571e <FatFormatter::initFatDir(unsigned char, unsigned long)+0xee>
     for (size_t i = 0; i < ns; i++) {
    569e:	42a7      	cmp	r7, r4
    56a0:	d01e      	beq.n	56e0 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb0>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    56a2:	6833      	ldr	r3, [r6, #0]
  if (state->pr && ++state->count >= state->dotcount) {
    56a4:	9804      	ldr	r0, [sp, #16]
    56a6:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    56aa:	2800      	cmp	r0, #0
    56ac:	d0f0      	beq.n	5690 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
    56ae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    56b2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    56b6:	3301      	adds	r3, #1
    56b8:	b29b      	uxth	r3, r3
    56ba:	429a      	cmp	r2, r3
    56bc:	f8ad 3014 	strh.w	r3, [sp, #20]
    56c0:	d8e6      	bhi.n	5690 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
    56c2:	6803      	ldr	r3, [r0, #0]
    56c4:	4651      	mov	r1, sl
    56c6:	2201      	movs	r2, #1
    56c8:	685b      	ldr	r3, [r3, #4]
    56ca:	4798      	blx	r3
    state->count = 0;
    56cc:	f8ad 9014 	strh.w	r9, [sp, #20]
    56d0:	e7de      	b.n	5690 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    56d2:	ab03      	add	r3, sp, #12
    56d4:	4621      	mov	r1, r4
    56d6:	4630      	mov	r0, r6
    56d8:	9300      	str	r3, [sp, #0]
    56da:	4b19      	ldr	r3, [pc, #100]	; (5740 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x110>)
    56dc:	47b8      	blx	r7
    56de:	b1f0      	cbz	r0, 571e <FatFormatter::initFatDir(unsigned char, unsigned long)+0xee>
     return false;
  }
  writeMsg("\r\n");
    56e0:	6a28      	ldr	r0, [r5, #32]
    56e2:	b120      	cbz	r0, 56ee <FatFormatter::initFatDir(unsigned char, unsigned long)+0xbe>
    56e4:	6803      	ldr	r3, [r0, #0]
    56e6:	2202      	movs	r2, #2
    56e8:	4916      	ldr	r1, [pc, #88]	; (5744 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x114>)
    56ea:	685b      	ldr	r3, [r3, #4]
    56ec:	4798      	blx	r3
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
  n = fatType == 16 ? 4 : 12;
    56ee:	f1b8 0f10 	cmp.w	r8, #16
  m_secBuf[0] = 0XF8;
    56f2:	f04f 01f8 	mov.w	r1, #248	; 0xf8
    56f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  for (size_t i = 1; i < n; i++) {
    56f8:	f04f 0301 	mov.w	r3, #1
  n = fatType == 16 ? 4 : 12;
    56fc:	bf0c      	ite	eq
    56fe:	2004      	moveq	r0, #4
    5700:	200c      	movne	r0, #12
  m_secBuf[0] = 0XF8;
    5702:	7011      	strb	r1, [r2, #0]
    m_secBuf[i] = 0XFF;
    5704:	21ff      	movs	r1, #255	; 0xff
    5706:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5708:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
    570a:	3301      	adds	r3, #1
    570c:	4298      	cmp	r0, r3
    570e:	d1fa      	bne.n	5706 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xd6>
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    5710:	69e8      	ldr	r0, [r5, #28]
    5712:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5714:	6803      	ldr	r3, [r0, #0]
    5716:	68e9      	ldr	r1, [r5, #12]
    5718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    571a:	4798      	blx	r3
    571c:	b918      	cbnz	r0, 5726 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xf6>
     return false;
    571e:	2000      	movs	r0, #0
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
    5720:	b007      	add	sp, #28
    5722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    5726:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    572a:	69e8      	ldr	r0, [r5, #28]
    572c:	4419      	add	r1, r3
    572e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5730:	6803      	ldr	r3, [r0, #0]
    5732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5734:	4798      	blx	r3
}
    5736:	b007      	add	sp, #28
    5738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    573c:	200007e8 	.word	0x200007e8
    5740:	00005601 	.word	0x00005601
    5744:	20000810 	.word	0x20000810
    5748:	000055c5 	.word	0x000055c5
    574c:	200007f8 	.word	0x200007f8

00005750 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    5750:	b538      	push	{r3, r4, r5, lr}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    5752:	6a43      	ldr	r3, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5754:	f44f 7500 	mov.w	r5, #512	; 0x200
void FatFormatter::initPbs() {
    5758:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    575a:	2100      	movs	r1, #0
    575c:	462a      	mov	r2, r5
    575e:	4618      	mov	r0, r3
    5760:	f007 fec0 	bl	d4e4 <memset>
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    5764:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  pbs->jmpInstruction[0] = 0XEB;
    5768:	22eb      	movs	r2, #235	; 0xeb
    576a:	f8a0 500b 	strh.w	r5, [r0, #11]
    pbs->oemName[i] = ' ';
    576e:	f8c0 1003 	str.w	r1, [r0, #3]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5772:	4603      	mov	r3, r0
    pbs->oemName[i] = ' ';
    5774:	f8c0 1007 	str.w	r1, [r0, #7]
  pbs->jmpInstruction[2] = 0X90;
    5778:	2190      	movs	r1, #144	; 0x90
  pbs->jmpInstruction[0] = 0XEB;
    577a:	7002      	strb	r2, [r0, #0]
  pbs->jmpInstruction[1] = 0X76;
    577c:	2076      	movs	r0, #118	; 0x76
  pbs->jmpInstruction[2] = 0X90;
    577e:	7099      	strb	r1, [r3, #2]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
  pbs->bpb.bpb16.fatCount = 2;
    5780:	2202      	movs	r2, #2
  pbs->jmpInstruction[1] = 0X76;
    5782:	7058      	strb	r0, [r3, #1]
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    5784:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
    5788:	7359      	strb	r1, [r3, #13]
    578a:	f64a 2155 	movw	r1, #43605	; 0xaa55
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    578e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  pbs->bpb.bpb16.fatCount = 2;
    5790:	741a      	strb	r2, [r3, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    5792:	22f8      	movs	r2, #248	; 0xf8
    5794:	81d8      	strh	r0, [r3, #14]
    5796:	755a      	strb	r2, [r3, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    5798:	6922      	ldr	r2, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    579a:	61da      	str	r2, [r3, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    579c:	69a2      	ldr	r2, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    579e:	f8a3 11fe 	strh.w	r1, [r3, #510]	; 0x1fe
  *reinterpret_cast<uint32_t*>(dst) = src;
    57a2:	621a      	str	r2, [r3, #32]
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    57a4:	bd38      	pop	{r3, r4, r5, pc}
    57a6:	bf00      	nop

000057a8 <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    57a8:	b570      	push	{r4, r5, r6, lr}
    57aa:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    57ac:	f44f 7200 	mov.w	r2, #512	; 0x200
    57b0:	2100      	movs	r1, #0
    57b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
    57b4:	f007 fe96 	bl	d4e4 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    57b8:	6a65      	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    57ba:	6922      	ldr	r2, [r4, #16]
    57bc:	6821      	ldr	r1, [r4, #0]
    57be:	f205 10bf 	addw	r0, r5, #447	; 0x1bf
    57c2:	f003 fa1b 	bl	8bfc <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
    57c6:	69a3      	ldr	r3, [r4, #24]
    57c8:	6922      	ldr	r2, [r4, #16]
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    57ca:	f205 10c3 	addw	r0, r5, #451	; 0x1c3
    57ce:	6821      	ldr	r1, [r4, #0]
              m_relativeSectors + m_totalSectors -1);
    57d0:	441a      	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    57d2:	3a01      	subs	r2, #1
    57d4:	f003 fa12 	bl	8bfc <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    57d8:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  *reinterpret_cast<uint16_t*>(dst) = src;
    57dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
    57e0:	f885 21c2 	strb.w	r2, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    57e4:	6922      	ldr	r2, [r4, #16]
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    57e6:	69e0      	ldr	r0, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    57e8:	f8c5 21c6 	str.w	r2, [r5, #454]	; 0x1c6
    57ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
  setLe32(mbr->part->totalSectors, m_totalSectors);
    57ee:	69a1      	ldr	r1, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    57f0:	f8a5 31fe 	strh.w	r3, [r5, #510]	; 0x1fe
  return m_dev->writeSector(0, m_secBuf);
    57f4:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    57f6:	f8c5 11ca 	str.w	r1, [r5, #458]	; 0x1ca
    57fa:	2100      	movs	r1, #0
    57fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    57fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_dev->writeSector(0, m_secBuf);
    5802:	4718      	bx	r3

00005804 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    5804:	b570      	push	{r4, r5, r6, lr}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    5806:	6946      	ldr	r6, [r0, #20]
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    5808:	f44f 7380 	mov.w	r3, #256	; 0x100
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    580c:	f890 e02b 	ldrb.w	lr, [r0, #43]	; 0x2b
bool FatFormatter::makeFat16() {
    5810:	4604      	mov	r4, r0
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    5812:	f5a6 7280 	sub.w	r2, r6, #256	; 0x100
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    5816:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    5818:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    581a:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    581e:	f202 1c01 	addw	ip, r2, #257	; 0x101
    5822:	ea4f 211c 	mov.w	r1, ip, lsr #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    5826:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    582a:	6081      	str	r1, [r0, #8]
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    582c:	f10c 00a1 	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    5830:	4298      	cmp	r0, r3
    5832:	d90e      	bls.n	5852 <FatFormatter::makeFat16()+0x4e>
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    5834:	3380      	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    5836:	1af2      	subs	r2, r6, r3
    5838:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    583c:	f202 1101 	addw	r1, r2, #257	; 0x101
    5840:	0a09      	lsrs	r1, r1, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    5842:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    5846:	f10c 00a1 	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    584a:	4283      	cmp	r3, r0
    584c:	d3f2      	bcc.n	5834 <FatFormatter::makeFat16()+0x30>
    584e:	e9c4 3101 	strd	r3, r1, [r4, #4]
      m_relativeSectors = m_dataStart - r + BU16;
    5852:	1a1b      	subs	r3, r3, r0
  if (nc < 4085 || nc >= 65525) {
    5854:	f6a2 71f5 	subw	r1, r2, #4085	; 0xff5
      m_relativeSectors = m_dataStart - r + BU16;
    5858:	f103 0080 	add.w	r0, r3, #128	; 0x80
  if (nc < 4085 || nc >= 65525) {
    585c:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
      m_relativeSectors = m_dataStart - r + BU16;
    5860:	6120      	str	r0, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    5862:	d24f      	bcs.n	5904 <FatFormatter::makeFat16()+0x100>
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    5864:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    5868:	3381      	adds	r3, #129	; 0x81
  if (!writeMbr()) {
    586a:	4620      	mov	r0, r4
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    586c:	fb02 c20e 	mla	r2, r2, lr, ip
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    5870:	60e3      	str	r3, [r4, #12]
    m_partType = 0X06;
    5872:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  m_totalSectors = nc*m_sectorsPerCluster
    5876:	61a2      	str	r2, [r4, #24]
    m_partType = 0X06;
    5878:	bf34      	ite	cc
    587a:	2304      	movcc	r3, #4
    587c:	2306      	movcs	r3, #6
    587e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  m_reservedSectorCount = 1;
    5882:	2301      	movs	r3, #1
    5884:	8523      	strh	r3, [r4, #40]	; 0x28
  if (!writeMbr()) {
    5886:	f7ff ff8f 	bl	57a8 <FatFormatter::writeMbr()>
    588a:	b908      	cbnz	r0, 5890 <FatFormatter::makeFat16()+0x8c>
}
    588c:	2000      	movs	r0, #0
    588e:	bd70      	pop	{r4, r5, r6, pc}
  initPbs();
    5890:	4620      	mov	r0, r4
    5892:	f7ff ff5d 	bl	5750 <FatFormatter::initPbs()>
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    5896:	2229      	movs	r2, #41	; 0x29
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    5898:	68a1      	ldr	r1, [r4, #8]
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    589a:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    589e:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
  pbs->bpb.bpb16.volumeType[0] = 'F';
    58a2:	2246      	movs	r2, #70	; 0x46
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    58a4:	f8c5 302f 	str.w	r3, [r5, #47]	; 0x2f
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    58a8:	2080      	movs	r0, #128	; 0x80
  pbs->bpb.bpb16.volumeType[0] = 'F';
    58aa:	f885 2036 	strb.w	r2, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[2] = 'T';
    58ae:	2254      	movs	r2, #84	; 0x54
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    58b0:	f8c5 302b 	str.w	r3, [r5, #43]	; 0x2b
    58b4:	f8c5 3032 	str.w	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb16.volumeType[3] = '1';
    58b8:	2331      	movs	r3, #49	; 0x31
  pbs->bpb.bpb16.volumeType[2] = 'T';
    58ba:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[4] = '6';
    58be:	2236      	movs	r2, #54	; 0x36
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    58c0:	82e9      	strh	r1, [r5, #22]
  pbs->bpb.bpb16.volumeType[1] = 'A';
    58c2:	2141      	movs	r1, #65	; 0x41
  pbs->bpb.bpb16.volumeType[3] = '1';
    58c4:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[1] = 'A';
    58c8:	f885 1037 	strb.w	r1, [r5, #55]	; 0x37
  *reinterpret_cast<uint16_t*>(dst) = src;
    58cc:	f44f 7100 	mov.w	r1, #512	; 0x200
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    58d0:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
  pbs->bpb.bpb16.volumeType[4] = '6';
    58d4:	f885 203a 	strb.w	r2, [r5, #58]	; 0x3a
  *reinterpret_cast<uint32_t*>(dst) = src;
    58d8:	4b0f      	ldr	r3, [pc, #60]	; (5918 <FatFormatter::makeFat16()+0x114>)
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    58da:	69e0      	ldr	r0, [r4, #28]
    58dc:	f8c5 3027 	str.w	r3, [r5, #39]	; 0x27
    58e0:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint16_t*>(dst) = src;
    58e2:	f8a5 1011 	strh.w	r1, [r5, #17]
    58e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    58e8:	6921      	ldr	r1, [r4, #16]
    58ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    58ec:	4798      	blx	r3
    58ee:	2800      	cmp	r0, #0
    58f0:	d0cc      	beq.n	588c <FatFormatter::makeFat16()+0x88>
  return initFatDir(16, m_dataStart - m_fatStart);
    58f2:	6862      	ldr	r2, [r4, #4]
    58f4:	4620      	mov	r0, r4
    58f6:	68e3      	ldr	r3, [r4, #12]
    58f8:	2110      	movs	r1, #16
    58fa:	1ad2      	subs	r2, r2, r3
}
    58fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return initFatDir(16, m_dataStart - m_fatStart);
    5900:	f7ff be96 	b.w	5630 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    5904:	6a20      	ldr	r0, [r4, #32]
    5906:	2800      	cmp	r0, #0
    5908:	d0c0      	beq.n	588c <FatFormatter::makeFat16()+0x88>
    590a:	6803      	ldr	r3, [r0, #0]
    590c:	2213      	movs	r2, #19
    590e:	4903      	ldr	r1, [pc, #12]	; (591c <FatFormatter::makeFat16()+0x118>)
    5910:	685b      	ldr	r3, [r3, #4]
    5912:	4798      	blx	r3
}
    5914:	2000      	movs	r0, #0
    5916:	bd70      	pop	{r4, r5, r6, pc}
    5918:	0012d687 	.word	0x0012d687
    591c:	200007bc 	.word	0x200007bc

00005920 <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    5920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    5922:	6946      	ldr	r6, [r0, #20]
  m_relativeSectors = BU32;
    5924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    5928:	f890 c02b 	ldrb.w	ip, [r0, #43]	; 0x2b
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    592c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    5930:	f5a6 4180 	sub.w	r1, r6, #16384	; 0x4000
  m_relativeSectors = BU32;
    5934:	6103      	str	r3, [r0, #16]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    5936:	f242 0e09 	movw	lr, #8201	; 0x2009
bool FatFormatter::makeFat32() {
    593a:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    593c:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    593e:	6042      	str	r2, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    5940:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    5944:	f101 0381 	add.w	r3, r1, #129	; 0x81
    5948:	09db      	lsrs	r3, r3, #7
    594a:	6083      	str	r3, [r0, #8]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    594c:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    5950:	4290      	cmp	r0, r2
    5952:	f240 80b6 	bls.w	5ac2 <FatFormatter::makeFat32()+0x1a2>
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    5956:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    595a:	1ab1      	subs	r1, r6, r2
    595c:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    5960:	f101 0381 	add.w	r3, r1, #129	; 0x81
    5964:	09db      	lsrs	r3, r3, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
    5966:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    596a:	005f      	lsls	r7, r3, #1
    if (m_dataStart >= r) {
    596c:	4282      	cmp	r2, r0
    596e:	d3f2      	bcc.n	5956 <FatFormatter::makeFat32()+0x36>
    5970:	e9c4 2301 	strd	r2, r3, [r4, #4]
  if (nc < 65525) {
    5974:	f64f 73f4 	movw	r3, #65524	; 0xfff4
    5978:	4299      	cmp	r1, r3
    597a:	f240 8097 	bls.w	5aac <FatFormatter::makeFat32()+0x18c>
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    597e:	fb01 2c0c 	mla	ip, r1, ip, r2
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    5982:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  if (!writeMbr()) {
    5986:	4620      	mov	r0, r4
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    5988:	1bd2      	subs	r2, r2, r7
    598a:	b292      	uxth	r2, r2
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    598c:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    5990:	8522      	strh	r2, [r4, #40]	; 0x28
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    5992:	4a4d      	ldr	r2, [pc, #308]	; (5ac8 <FatFormatter::makeFat32()+0x1a8>)
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    5994:	60e3      	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    5996:	f5ac 5300 	sub.w	r3, ip, #8192	; 0x2000
    m_partType = 0X0C;
    599a:	4594      	cmp	ip, r2
    599c:	bf94      	ite	ls
    599e:	f04f 0c0b 	movls.w	ip, #11
    59a2:	f04f 0c0c 	movhi.w	ip, #12
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    59a6:	61a3      	str	r3, [r4, #24]
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    59a8:	f884 c02a 	strb.w	ip, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    59ac:	f7ff fefc 	bl	57a8 <FatFormatter::writeMbr()>
    59b0:	b908      	cbnz	r0, 59b6 <FatFormatter::makeFat32()+0x96>
}
    59b2:	2000      	movs	r0, #0
    59b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  initPbs();
    59b6:	4620      	mov	r0, r4
    59b8:	f7ff feca 	bl	5750 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    59bc:	68a1      	ldr	r1, [r4, #8]
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    59be:	2229      	movs	r2, #41	; 0x29
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    59c0:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    59c4:	2080      	movs	r0, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    59c6:	6269      	str	r1, [r5, #36]	; 0x24
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    59c8:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
  pbs->bpb.bpb32.volumeType[2] = 'T';
    59cc:	2154      	movs	r1, #84	; 0x54
  pbs->bpb.bpb32.volumeType[0] = 'F';
    59ce:	2246      	movs	r2, #70	; 0x46
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    59d0:	f8c5 304b 	str.w	r3, [r5, #75]	; 0x4b
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    59d4:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  pbs->bpb.bpb32.volumeType[1] = 'A';
    59d8:	2041      	movs	r0, #65	; 0x41
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    59da:	f8c5 3047 	str.w	r3, [r5, #71]	; 0x47
    59de:	f8c5 304e 	str.w	r3, [r5, #78]	; 0x4e
    59e2:	2302      	movs	r3, #2
  pbs->bpb.bpb32.volumeType[0] = 'F';
    59e4:	f885 2052 	strb.w	r2, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[3] = '3';
    59e8:	2233      	movs	r2, #51	; 0x33
  pbs->bpb.bpb32.volumeType[2] = 'T';
    59ea:	f885 1054 	strb.w	r1, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[4] = '2';
    59ee:	2132      	movs	r1, #50	; 0x32
  pbs->bpb.bpb32.volumeType[3] = '3';
    59f0:	f885 2055 	strb.w	r2, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[1] = 'A';
    59f4:	f885 0053 	strb.w	r0, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[4] = '2';
    59f8:	f885 1056 	strb.w	r1, [r5, #86]	; 0x56
    59fc:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    59fe:	69e0      	ldr	r0, [r4, #28]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5a00:	4b32      	ldr	r3, [pc, #200]	; (5acc <FatFormatter::makeFat32()+0x1ac>)
  *reinterpret_cast<uint32_t*>(dst) = src;
    5a02:	4a33      	ldr	r2, [pc, #204]	; (5ad0 <FatFormatter::makeFat32()+0x1b0>)
  *reinterpret_cast<uint16_t*>(dst) = src;
    5a04:	632b      	str	r3, [r5, #48]	; 0x30
    5a06:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5a08:	f8c5 2043 	str.w	r2, [r5, #67]	; 0x43
    5a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5a0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5a10:	6921      	ldr	r1, [r4, #16]
    5a12:	4798      	blx	r3
    5a14:	2800      	cmp	r0, #0
    5a16:	d0cc      	beq.n	59b2 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    5a18:	69e0      	ldr	r0, [r4, #28]
    5a1a:	6921      	ldr	r1, [r4, #16]
    5a1c:	6803      	ldr	r3, [r0, #0]
    5a1e:	3106      	adds	r1, #6
    5a20:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5a24:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    5a26:	2800      	cmp	r0, #0
    5a28:	d0c3      	beq.n	59b2 <FatFormatter::makeFat32()+0x92>
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
    5a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
    5a2e:	2100      	movs	r1, #0
    5a30:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5a32:	f007 fd57 	bl	d4e4 <memset>
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    5a36:	69e0      	ldr	r0, [r4, #28]
    5a38:	4a26      	ldr	r2, [pc, #152]	; (5ad4 <FatFormatter::makeFat32()+0x1b4>)
    5a3a:	6803      	ldr	r3, [r0, #0]
    5a3c:	f8c5 21fc 	str.w	r2, [r5, #508]	; 0x1fc
    5a40:	6921      	ldr	r1, [r4, #16]
    5a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5a44:	3102      	adds	r1, #2
    5a46:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5a48:	4798      	blx	r3
    5a4a:	2800      	cmp	r0, #0
    5a4c:	d0b1      	beq.n	59b2 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    5a4e:	69e0      	ldr	r0, [r4, #28]
    5a50:	6921      	ldr	r1, [r4, #16]
    5a52:	6803      	ldr	r3, [r0, #0]
    5a54:	3108      	adds	r1, #8
    5a56:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5a5a:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    5a5c:	2800      	cmp	r0, #0
    5a5e:	d0a8      	beq.n	59b2 <FatFormatter::makeFat32()+0x92>
    5a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    5a64:	69e0      	ldr	r0, [r4, #28]
    5a66:	4a1c      	ldr	r2, [pc, #112]	; (5ad8 <FatFormatter::makeFat32()+0x1b8>)
    5a68:	e9c5 337a 	strd	r3, r3, [r5, #488]	; 0x1e8
    5a6c:	4b1b      	ldr	r3, [pc, #108]	; (5adc <FatFormatter::makeFat32()+0x1bc>)
    5a6e:	602a      	str	r2, [r5, #0]
    5a70:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
    5a74:	6803      	ldr	r3, [r0, #0]
    5a76:	6921      	ldr	r1, [r4, #16]
    5a78:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5a7c:	3101      	adds	r1, #1
    5a7e:	4798      	blx	r3
    5a80:	2800      	cmp	r0, #0
    5a82:	d096      	beq.n	59b2 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    5a84:	69e0      	ldr	r0, [r4, #28]
    5a86:	6921      	ldr	r1, [r4, #16]
    5a88:	6803      	ldr	r3, [r0, #0]
    5a8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5a8c:	3107      	adds	r1, #7
    5a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5a90:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    5a92:	2800      	cmp	r0, #0
    5a94:	d08d      	beq.n	59b2 <FatFormatter::makeFat32()+0x92>
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    5a96:	68a2      	ldr	r2, [r4, #8]
    5a98:	4620      	mov	r0, r4
    5a9a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    5a9e:	2120      	movs	r1, #32
    5aa0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
}
    5aa4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    5aa8:	f7ff bdc2 	b.w	5630 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    5aac:	6a20      	ldr	r0, [r4, #32]
    5aae:	2800      	cmp	r0, #0
    5ab0:	f43f af7f 	beq.w	59b2 <FatFormatter::makeFat32()+0x92>
    5ab4:	6803      	ldr	r3, [r0, #0]
    5ab6:	2213      	movs	r2, #19
    5ab8:	4909      	ldr	r1, [pc, #36]	; (5ae0 <FatFormatter::makeFat32()+0x1c0>)
    5aba:	685b      	ldr	r3, [r3, #4]
    5abc:	4798      	blx	r3
}
    5abe:	2000      	movs	r0, #0
    5ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ac2:	005f      	lsls	r7, r3, #1
    5ac4:	e756      	b.n	5974 <FatFormatter::makeFat32()+0x54>
    5ac6:	bf00      	nop
    5ac8:	00fb0400 	.word	0x00fb0400
    5acc:	00060001 	.word	0x00060001
    5ad0:	0012d687 	.word	0x0012d687
    5ad4:	aa550000 	.word	0xaa550000
    5ad8:	41615252 	.word	0x41615252
    5adc:	61417272 	.word	0x61417272
    5ae0:	200007bc 	.word	0x200007bc

00005ae4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    5ae4:	b538      	push	{r3, r4, r5, lr}
    5ae6:	4604      	mov	r4, r0
  m_sectorCount = m_dev->sectorCount();
    5ae8:	680d      	ldr	r5, [r1, #0]
  m_dev = dev;
    5aea:	61c1      	str	r1, [r0, #28]
  m_sectorCount = m_dev->sectorCount();
    5aec:	4608      	mov	r0, r1
  m_secBuf = secBuf;
    5aee:	6262      	str	r2, [r4, #36]	; 0x24
  m_sectorCount = m_dev->sectorCount();
    5af0:	69ea      	ldr	r2, [r5, #28]
  m_pr = pr;
    5af2:	6223      	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    5af4:	4790      	blx	r2
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    5af6:	f200 73ff 	addw	r3, r0, #2047	; 0x7ff
  m_sectorCount = m_dev->sectorCount();
    5afa:	6160      	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    5afc:	0adb      	lsrs	r3, r3, #11
  if (m_capacityMB <= 6) {
    5afe:	2b06      	cmp	r3, #6
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    5b00:	6023      	str	r3, [r4, #0]
  if (m_capacityMB <= 6) {
    5b02:	d924      	bls.n	5b4e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  } else if (m_capacityMB <= 16) {
    5b04:	2b10      	cmp	r3, #16
    5b06:	d813      	bhi.n	5b30 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c>
    5b08:	2302      	movs	r3, #2
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    5b0a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    m_sectorsPerCluster = 2;
    5b0e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    5b12:	4620      	mov	r0, r4
    5b14:	d22e      	bcs.n	5b74 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
    5b16:	f7ff fe75 	bl	5804 <FatFormatter::makeFat16()>
    5b1a:	4605      	mov	r5, r0
    writeMsg("Format Done\r\n");
    5b1c:	6a20      	ldr	r0, [r4, #32]
  if (rtn) {
    5b1e:	b305      	cbz	r5, 5b62 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7e>
    writeMsg("Format Done\r\n");
    5b20:	b120      	cbz	r0, 5b2c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48>
    5b22:	6803      	ldr	r3, [r0, #0]
    5b24:	220d      	movs	r2, #13
    5b26:	4919      	ldr	r1, [pc, #100]	; (5b8c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa8>)
    5b28:	685b      	ldr	r3, [r3, #4]
    5b2a:	4798      	blx	r3
}
    5b2c:	4628      	mov	r0, r5
    5b2e:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_capacityMB <= 32) {
    5b30:	2b20      	cmp	r3, #32
    5b32:	d923      	bls.n	5b7c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x98>
  } else if (m_capacityMB <= 64) {
    5b34:	2b40      	cmp	r3, #64	; 0x40
    5b36:	d923      	bls.n	5b80 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9c>
  } else if (m_capacityMB <= 128) {
    5b38:	2b80      	cmp	r3, #128	; 0x80
    5b3a:	d923      	bls.n	5b84 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa0>
  } else if (m_capacityMB <= 1024) {
    5b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    5b40:	d922      	bls.n	5b88 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa4>
  } else if (m_capacityMB <= 32768) {
    5b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5b46:	bf8c      	ite	hi
    5b48:	2380      	movhi	r3, #128	; 0x80
    5b4a:	2340      	movls	r3, #64	; 0x40
    5b4c:	e7dd      	b.n	5b0a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    writeMsg("Card is too small.\r\n");
    5b4e:	6a20      	ldr	r0, [r4, #32]
    5b50:	b120      	cbz	r0, 5b5c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    5b52:	6803      	ldr	r3, [r0, #0]
    5b54:	2214      	movs	r2, #20
    5b56:	490e      	ldr	r1, [pc, #56]	; (5b90 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xac>)
    5b58:	685b      	ldr	r3, [r3, #4]
    5b5a:	4798      	blx	r3
    return false;
    5b5c:	2500      	movs	r5, #0
}
    5b5e:	4628      	mov	r0, r5
    5b60:	bd38      	pop	{r3, r4, r5, pc}
    writeMsg("Format Failed\r\n");
    5b62:	2800      	cmp	r0, #0
    5b64:	d0fa      	beq.n	5b5c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    5b66:	6803      	ldr	r3, [r0, #0]
    5b68:	220f      	movs	r2, #15
    5b6a:	490a      	ldr	r1, [pc, #40]	; (5b94 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb0>)
    5b6c:	685b      	ldr	r3, [r3, #4]
    5b6e:	4798      	blx	r3
}
    5b70:	4628      	mov	r0, r5
    5b72:	bd38      	pop	{r3, r4, r5, pc}
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    5b74:	f7ff fed4 	bl	5920 <FatFormatter::makeFat32()>
    5b78:	4605      	mov	r5, r0
    5b7a:	e7cf      	b.n	5b1c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x38>
    5b7c:	2304      	movs	r3, #4
    5b7e:	e7c4      	b.n	5b0a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    5b80:	2308      	movs	r3, #8
    5b82:	e7c2      	b.n	5b0a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    5b84:	2310      	movs	r3, #16
    5b86:	e7c0      	b.n	5b0a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    5b88:	2320      	movs	r3, #32
    5b8a:	e7be      	b.n	5b0a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    5b8c:	2000079c 	.word	0x2000079c
    5b90:	20000784 	.word	0x20000784
    5b94:	200007ac 	.word	0x200007ac

00005b98 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    5b98:	2a04      	cmp	r2, #4
    5b9a:	d804      	bhi.n	5ba6 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    5b9c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    5ba0:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    5ba4:	4770      	bx	lr
  } else if (i < 11) {
    5ba6:	2a0a      	cmp	r2, #10
    5ba8:	d803      	bhi.n	5bb2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    5baa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    5bae:	8890      	ldrh	r0, [r2, #4]
    5bb0:	4770      	bx	lr
  } else if (i < 13) {
    5bb2:	2a0c      	cmp	r2, #12
    5bb4:	d803      	bhi.n	5bbe <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
    5bb6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    5bba:	88c8      	ldrh	r0, [r1, #6]
    5bbc:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    5bbe:	2000      	movs	r0, #0
}
    5bc0:	4770      	bx	lr
    5bc2:	bf00      	nop

00005bc4 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    5bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    5bc6:	7804      	ldrb	r4, [r0, #0]
    5bc8:	460e      	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    5bca:	b17c      	cbz	r4, 5bec <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    5bcc:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    5bd0:	4617      	mov	r7, r2
    5bd2:	d007      	beq.n	5be4 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    5bd4:	2a01      	cmp	r2, #1
    5bd6:	d909      	bls.n	5bec <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    5bd8:	222f      	movs	r2, #47	; 0x2f
    name[1] = '\0';
    5bda:	2300      	movs	r3, #0
    return 1;
    5bdc:	2001      	movs	r0, #1
    name[0] = '/';
    5bde:	700a      	strb	r2, [r1, #0]
    name[1] = '\0';
    5be0:	704b      	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    5be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    5be4:	4621      	mov	r1, r4
    5be6:	f7fe f947 	bl	3e78 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5bea:	b918      	cbnz	r0, 5bf4 <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
    5bec:	2300      	movs	r3, #0
  return 0;
    5bee:	4618      	mov	r0, r3
  name[0] = '\0';
    5bf0:	7033      	strb	r3, [r6, #0]
}
    5bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    5bf4:	4603      	mov	r3, r0
    5bf6:	46a4      	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    5bf8:	2108      	movs	r1, #8
    5bfa:	e011      	b.n	5c20 <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    5bfc:	7b02      	ldrb	r2, [r0, #12]
    5bfe:	4211      	tst	r1, r2
    5c00:	d003      	beq.n	5c0a <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
    5c02:	f10e 0e20 	add.w	lr, lr, #32
    5c06:	fa5f fe8e 	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    5c0a:	1c65      	adds	r5, r4, #1
    5c0c:	42bd      	cmp	r5, r7
    5c0e:	d2ed      	bcs.n	5bec <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
    5c10:	f10c 0c01 	add.w	ip, ip, #1
    name[j++] = c;
    5c14:	f806 e004 	strb.w	lr, [r6, r4]
    5c18:	b2ec      	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    5c1a:	f1bc 0f0c 	cmp.w	ip, #12
    5c1e:	d010      	beq.n	5c42 <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
    5c20:	f1bc 0f08 	cmp.w	ip, #8
    5c24:	d011      	beq.n	5c4a <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
    5c26:	f813 eb01 	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    5c2a:	f1ae 0241 	sub.w	r2, lr, #65	; 0x41
    5c2e:	2a19      	cmp	r2, #25
    5c30:	d9e4      	bls.n	5bfc <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
    5c32:	f1be 0f20 	cmp.w	lr, #32
    5c36:	d1e8      	bne.n	5c0a <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
    5c38:	f10c 0c01 	add.w	ip, ip, #1
    5c3c:	f1bc 0f0c 	cmp.w	ip, #12
    5c40:	d1ee      	bne.n	5c20 <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
    5c42:	2300      	movs	r3, #0
    5c44:	4620      	mov	r0, r4
    5c46:	5533      	strb	r3, [r6, r4]
}
    5c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    5c4a:	781a      	ldrb	r2, [r3, #0]
    5c4c:	2a20      	cmp	r2, #32
    5c4e:	d0f8      	beq.n	5c42 <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
    5c50:	2110      	movs	r1, #16
      c = '.';
    5c52:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
    5c56:	e7d8      	b.n	5c0a <FatFile::getSFN(char*, unsigned int)+0x46>

00005c58 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    5c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    5c5c:	2400      	movs	r4, #0
    5c5e:	b08b      	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    5c60:	7803      	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    5c62:	4689      	mov	r9, r1
    5c64:	9401      	str	r4, [sp, #4]
  if (!isOpen()) {
    5c66:	2b00      	cmp	r3, #0
    5c68:	d055      	beq.n	5d16 <FatFile::getName8(char*, unsigned int)+0xbe>
  if (!isLFN()) {
    5c6a:	78c3      	ldrb	r3, [r0, #3]
    5c6c:	4606      	mov	r6, r0
    5c6e:	2b00      	cmp	r3, #0
    5c70:	d058      	beq.n	5d24 <FatFile::getName8(char*, unsigned int)+0xcc>
  if (!dir.openCluster(this)) {
    5c72:	4601      	mov	r1, r0
    5c74:	a801      	add	r0, sp, #4
    5c76:	4690      	mov	r8, r2
    5c78:	f7fe fb1e 	bl	42b8 <FatFile::openCluster(FatFile*)>
    5c7c:	2800      	cmp	r0, #0
    5c7e:	d04a      	beq.n	5d16 <FatFile::getName8(char*, unsigned int)+0xbe>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    5c80:	78f0      	ldrb	r0, [r6, #3]
    5c82:	2800      	cmp	r0, #0
    5c84:	d043      	beq.n	5d0e <FatFile::getName8(char*, unsigned int)+0xb6>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5c86:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  char* str = name;
    5c8a:	46cb      	mov	fp, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    5c8c:	f04f 0a01 	mov.w	sl, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5c90:	44c8      	add	r8, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    5c92:	88b1      	ldrh	r1, [r6, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    5c94:	a801      	add	r0, sp, #4
    5c96:	eba1 010a 	sub.w	r1, r1, sl
    5c9a:	b289      	uxth	r1, r1
    5c9c:	0149      	lsls	r1, r1, #5
    5c9e:	f7fe fd9f 	bl	47e0 <FatFile::seekSet(unsigned long)>
    5ca2:	b3c0      	cbz	r0, 5d16 <FatFile::getName8(char*, unsigned int)+0xbe>
    5ca4:	2100      	movs	r1, #0
    5ca6:	a801      	add	r0, sp, #4
    5ca8:	f7fe fc3a 	bl	4520 <FatFile::readDirCache(bool)>
    if (!ldir) {
    5cac:	b398      	cbz	r0, 5d16 <FatFile::getName8(char*, unsigned int)+0xbe>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    5cae:	7ac3      	ldrb	r3, [r0, #11]
    5cb0:	2b0f      	cmp	r3, #15
    5cb2:	d130      	bne.n	5d16 <FatFile::getName8(char*, unsigned int)+0xbe>
    5cb4:	7803      	ldrb	r3, [r0, #0]
    5cb6:	fa5f f18a 	uxtb.w	r1, sl
    5cba:	f003 031f 	and.w	r3, r3, #31
    5cbe:	428b      	cmp	r3, r1
    5cc0:	d129      	bne.n	5d16 <FatFile::getName8(char*, unsigned int)+0xbe>
    5cc2:	1c47      	adds	r7, r0, #1
    5cc4:	2500      	movs	r5, #0
  if (i < 5) {
    5cc6:	2d04      	cmp	r5, #4
    5cc8:	b2eb      	uxtb	r3, r5
    5cca:	d83f      	bhi.n	5d4c <FatFile::getName8(char*, unsigned int)+0xf4>
    5ccc:	883b      	ldrh	r3, [r7, #0]
      if (hs) {
    5cce:	bb74      	cbnz	r4, 5d2e <FatFile::getName8(char*, unsigned int)+0xd6>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
    5cd0:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
    5cd4:	b289      	uxth	r1, r1
      } else if (!FsUtf::isSurrogate(c)) {
    5cd6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    5cda:	d33e      	bcc.n	5d5a <FatFile::getName8(char*, unsigned int)+0x102>
        if (c == 0) {
    5cdc:	b1a3      	cbz	r3, 5d08 <FatFile::getName8(char*, unsigned int)+0xb0>
        cp = c;
    5cde:	4618      	mov	r0, r3
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5ce0:	4659      	mov	r1, fp
    5ce2:	4642      	mov	r2, r8
    5ce4:	f002 ffda 	bl	8c9c <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    5ce8:	4683      	mov	fp, r0
    5cea:	b1a0      	cbz	r0, 5d16 <FatFile::getName8(char*, unsigned int)+0xbe>
    5cec:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < 13; i++) {
    5cee:	3501      	adds	r5, #1
    5cf0:	3702      	adds	r7, #2
    5cf2:	2d0d      	cmp	r5, #13
    5cf4:	d1e7      	bne.n	5cc6 <FatFile::getName8(char*, unsigned int)+0x6e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    5cf6:	f10a 0a01 	add.w	sl, sl, #1
    5cfa:	78f1      	ldrb	r1, [r6, #3]
    5cfc:	fa5f f38a 	uxtb.w	r3, sl
    5d00:	fa1f fa8a 	uxth.w	sl, sl
    5d04:	4299      	cmp	r1, r3
    5d06:	d2c4      	bcs.n	5c92 <FatFile::getName8(char*, unsigned int)+0x3a>
  return str - name;
    5d08:	ebab 0009 	sub.w	r0, fp, r9
    5d0c:	46d9      	mov	r9, fp
  *str = '\0';
    5d0e:	2300      	movs	r3, #0
    5d10:	f889 3000 	strb.w	r3, [r9]
  return str - name;
    5d14:	e003      	b.n	5d1e <FatFile::getName8(char*, unsigned int)+0xc6>
  *name = 0;
    5d16:	2300      	movs	r3, #0
  return 0;
    5d18:	4618      	mov	r0, r3
  *name = 0;
    5d1a:	f889 3000 	strb.w	r3, [r9]
}
    5d1e:	b00b      	add	sp, #44	; 0x2c
    5d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return getSFN(name, size);
    5d24:	f7ff ff4e 	bl	5bc4 <FatFile::getSFN(char*, unsigned int)>
}
    5d28:	b00b      	add	sp, #44	; 0x2c
    5d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   /** Check for UTF-16 low surrogate.
   * \param[in] c UTF-16 unit..
   * \return true if c is a low surrogate else false.
   */
  inline bool isLowSurrogate(uint16_t c) {
    return 0XDC00 <= c && c <= 0XDFFF;
    5d2e:	f503 5110 	add.w	r1, r3, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    5d32:	b289      	uxth	r1, r1
    5d34:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    5d38:	d2ed      	bcs.n	5d16 <FatFile::getName8(char*, unsigned int)+0xbe>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5d3a:	4a0a      	ldr	r2, [pc, #40]	; (5d64 <FatFile::getName8(char*, unsigned int)+0x10c>)
    5d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5d40:	ea02 2084 	and.w	r0, r2, r4, lsl #10
    5d44:	4318      	orrs	r0, r3
    5d46:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
        hs = 0;
    5d4a:	e7c9      	b.n	5ce0 <FatFile::getName8(char*, unsigned int)+0x88>
  } else if (i < 11) {
    5d4c:	2b0a      	cmp	r3, #10
    5d4e:	bf94      	ite	ls
    5d50:	f8b7 3003 	ldrhls.w	r3, [r7, #3]
    5d54:	f8b7 3005 	ldrhhi.w	r3, [r7, #5]
    return getLe16(ldir->unicode3 + 2*i - 22);
    5d58:	e7b9      	b.n	5cce <FatFile::getName8(char*, unsigned int)+0x76>
      } else if (FsUtf::isHighSurrogate(c)) {
    5d5a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    5d5e:	d2da      	bcs.n	5d16 <FatFile::getName8(char*, unsigned int)+0xbe>
    5d60:	461c      	mov	r4, r3
    5d62:	e7c4      	b.n	5cee <FatFile::getName8(char*, unsigned int)+0x96>
    5d64:	000ffc00 	.word	0x000ffc00

00005d68 <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    5d68:	f7ff bf76 	b.w	5c58 <FatFile::getName8(char*, unsigned int)>

00005d6c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    5d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5d70:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
    5d74:	b1c3      	cbz	r3, 5da8 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    5d76:	4681      	mov	r9, r0
    5d78:	460c      	mov	r4, r1
    5d7a:	4615      	mov	r5, r2
    5d7c:	185e      	adds	r6, r3, r1
    5d7e:	e002      	b.n	5d86 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
    5d80:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    5d82:	42b4      	cmp	r4, r6
    5d84:	d010      	beq.n	5da8 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
    5d86:	f8d9 3000 	ldr.w	r3, [r9]
    5d8a:	4621      	mov	r1, r4
    5d8c:	462a      	mov	r2, r5
    5d8e:	4648      	mov	r0, r9
    5d90:	691b      	ldr	r3, [r3, #16]
    5d92:	4798      	blx	r3
    5d94:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
    5d96:	463a      	mov	r2, r7
    5d98:	4620      	mov	r0, r4
    5d9a:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
    5d9c:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
    5d9e:	2b00      	cmp	r3, #0
    5da0:	d1ee      	bne.n	5d80 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
    5da2:	4618      	mov	r0, r3
    5da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
    5da8:	2301      	movs	r3, #1
  }
    5daa:	4618      	mov	r0, r3
    5dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00005db0 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    5db0:	b410      	push	{r4}
  unsigned int n = state->clusters_to_do;
    5db2:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    5db4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    5db8:	46a4      	mov	ip, r4
    5dba:	bf28      	it	cs
    5dbc:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    5dc0:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    5dc4:	4281      	cmp	r1, r0
    5dc6:	d207      	bcs.n	5dd8 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
    5dc8:	f831 3b02 	ldrh.w	r3, [r1], #2
    5dcc:	b913      	cbnz	r3, 5dd4 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    5dce:	6853      	ldr	r3, [r2, #4]
    5dd0:	3301      	adds	r3, #1
    5dd2:	6053      	str	r3, [r2, #4]
  while (p < e) {
    5dd4:	4288      	cmp	r0, r1
    5dd6:	d8f7      	bhi.n	5dc8 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
  state->clusters_to_do -= n;
    5dd8:	eba4 040c 	sub.w	r4, r4, ip
    5ddc:	6014      	str	r4, [r2, #0]
}
    5dde:	f85d 4b04 	ldr.w	r4, [sp], #4
    5de2:	4770      	bx	lr

00005de4 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    5de4:	b410      	push	{r4}
  unsigned int n = state->clusters_to_do;
    5de6:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    5de8:	2c80      	cmp	r4, #128	; 0x80
    5dea:	46a4      	mov	ip, r4
    5dec:	bf28      	it	cs
    5dee:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    5df2:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    5df6:	4281      	cmp	r1, r0
    5df8:	d207      	bcs.n	5e0a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
    5dfa:	f851 3b04 	ldr.w	r3, [r1], #4
    5dfe:	b913      	cbnz	r3, 5e06 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    5e00:	6853      	ldr	r3, [r2, #4]
    5e02:	3301      	adds	r3, #1
    5e04:	6053      	str	r3, [r2, #4]
  while (p < e) {
    5e06:	4288      	cmp	r0, r1
    5e08:	d8f7      	bhi.n	5dfa <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
  state->clusters_to_do -= n;
    5e0a:	eba4 040c 	sub.w	r4, r4, ip
    5e0e:	6014      	str	r4, [r2, #0]
}
    5e10:	f85d 4b04 	ldr.w	r4, [sp], #4
    5e14:	4770      	bx	lr
    5e16:	bf00      	nop

00005e18 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    5e1c:	79c3      	ldrb	r3, [r0, #7]
    5e1e:	4604      	mov	r4, r0
    5e20:	460d      	mov	r5, r1
    5e22:	4617      	mov	r7, r2
  if (fatType() == 32) {
    5e24:	2b20      	cmp	r3, #32
    5e26:	d059      	beq.n	5edc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
    5e28:	2b10      	cmp	r3, #16
    5e2a:	d030      	beq.n	5e8e <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    5e2c:	2b0c      	cmp	r3, #12
    5e2e:	d151      	bne.n	5ed4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5e30:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
    5e32:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    5e36:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    5e38:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    5e3c:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5e40:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    5e44:	4648      	mov	r0, r9
    5e46:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5e48:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    5e4c:	f3c1 2146 	ubfx	r1, r1, #9, #7
    5e50:	0952      	lsrs	r2, r2, #5
    5e52:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
    5e56:	0052      	lsls	r2, r2, #1
    5e58:	4641      	mov	r1, r8
    5e5a:	f002 fe6b 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    5e5e:	2800      	cmp	r0, #0
    5e60:	d038      	beq.n	5ed4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
    5e62:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
    5e66:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
    5e68:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
    5e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5e6e:	d023      	beq.n	5eb8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
    5e70:	4418      	add	r0, r3
    5e72:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    5e74:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
    5e76:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
    5e78:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    5e7c:	bf4c      	ite	mi
    5e7e:	091b      	lsrmi	r3, r3, #4
    5e80:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
    5e84:	429a      	cmp	r2, r3
    5e86:	d240      	bcs.n	5f0a <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
    5e88:	2000      	movs	r0, #0
}
    5e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5e8e:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5e90:	f3c1 2107 	ubfx	r1, r1, #8, #8
    5e94:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    5e96:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5e9a:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    5e9e:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5ea0:	fab2 f282 	clz	r2, r2
    5ea4:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    5ea6:	0052      	lsls	r2, r2, #1
    5ea8:	f002 fe44 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    5eac:	b190      	cbz	r0, 5ed4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    5eae:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
    5eb0:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    5eb4:	5b43      	ldrh	r3, [r0, r5]
    5eb6:	e025      	b.n	5f04 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5eb8:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
    5eba:	f108 0101 	add.w	r1, r8, #1
    5ebe:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5ec0:	f1a2 0202 	sub.w	r2, r2, #2
    5ec4:	fab2 f282 	clz	r2, r2
    5ec8:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    5eca:	0052      	lsls	r2, r2, #1
    5ecc:	f002 fe32 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    5ed0:	2800      	cmp	r0, #0
    5ed2:	d1ce      	bne.n	5e72 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
    5ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5edc:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5ede:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    5ee0:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5ee4:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    5ee8:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5eec:	fab2 f282 	clz	r2, r2
    5ef0:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    5ef2:	0052      	lsls	r2, r2, #1
    5ef4:	f002 fe1e 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    5ef8:	2800      	cmp	r0, #0
    5efa:	d0eb      	beq.n	5ed4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    5efc:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
    5efe:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    5f02:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
    5f04:	69e2      	ldr	r2, [r4, #28]
    5f06:	429a      	cmp	r2, r3
    5f08:	d3be      	bcc.n	5e88 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
    5f0a:	2001      	movs	r0, #1
  *value = next;
    5f0c:	603b      	str	r3, [r7, #0]
}
    5f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5f12:	bf00      	nop

00005f14 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    5f18:	79c3      	ldrb	r3, [r0, #7]
    5f1a:	4605      	mov	r5, r0
    5f1c:	460c      	mov	r4, r1
    5f1e:	4616      	mov	r6, r2
  if (fatType() == 32) {
    5f20:	2b20      	cmp	r3, #32
    5f22:	d048      	beq.n	5fb6 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
    5f24:	2b10      	cmp	r3, #16
    5f26:	d02d      	beq.n	5f84 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
    5f28:	2b0c      	cmp	r3, #12
    5f2a:	d141      	bne.n	5fb0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
    5f2c:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    5f30:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    5f32:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    5f36:	fa11 f184 	uxtah	r1, r1, r4
    5f3a:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    5f3e:	f3c1 2146 	ubfx	r1, r1, #9, #7
    5f42:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5f44:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    5f46:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5f48:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    5f4a:	4639      	mov	r1, r7
    5f4c:	bf14      	ite	ne
    5f4e:	2201      	movne	r2, #1
    5f50:	2203      	moveq	r2, #3
    5f52:	f002 fdef 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    5f56:	b358      	cbz	r0, 5fb0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
    5f58:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
    5f5c:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
    5f60:	d03f      	beq.n	5fe2 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    5f62:	5cc2      	ldrb	r2, [r0, r3]
    5f64:	f002 020f 	and.w	r2, r2, #15
    5f68:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
    5f6c:	54c2      	strb	r2, [r0, r3]
    index++;
    5f6e:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    5f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5f74:	d03a      	beq.n	5fec <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
    5f76:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    5f7a:	4403      	add	r3, r0
    return true;
    5f7c:	2001      	movs	r0, #1
    pc[index] = tmp;
    5f7e:	701a      	strb	r2, [r3, #0]
}
    5f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5f84:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    5f86:	f3c1 2107 	ubfx	r1, r1, #8, #8
    5f8a:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    5f8c:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5f90:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    5f92:	4419      	add	r1, r3
    5f94:	bf14      	ite	ne
    5f96:	2201      	movne	r2, #1
    5f98:	2203      	moveq	r2, #3
    5f9a:	f002 fdcb 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    5f9e:	4603      	mov	r3, r0
    5fa0:	b130      	cbz	r0, 5fb0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    5fa2:	0064      	lsls	r4, r4, #1
    return true;
    5fa4:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    5fa6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    5faa:	531e      	strh	r6, [r3, r4]
}
    5fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    5fb0:	2000      	movs	r0, #0
}
    5fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5fb6:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5fb8:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    5fba:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5fbe:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    5fc0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    5fc4:	bf14      	ite	ne
    5fc6:	2201      	movne	r2, #1
    5fc8:	2203      	moveq	r2, #3
    5fca:	f002 fdb3 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    5fce:	4603      	mov	r3, r0
    5fd0:	2800      	cmp	r0, #0
    5fd2:	d0ed      	beq.n	5fb0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    5fd4:	00a4      	lsls	r4, r4, #2
    return true;
    5fd6:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    5fd8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    5fdc:	511e      	str	r6, [r3, r4]
}
    5fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
    5fe2:	54c6      	strb	r6, [r0, r3]
    index++;
    5fe4:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    5fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5fea:	d115      	bne.n	6018 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5fec:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    5fee:	1c79      	adds	r1, r7, #1
    5ff0:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    5ff2:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    5ff4:	bf14      	ite	ne
    5ff6:	2201      	movne	r2, #1
    5ff8:	2203      	moveq	r2, #3
    5ffa:	f002 fd9b 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    5ffe:	4603      	mov	r3, r0
    6000:	2800      	cmp	r0, #0
    6002:	d0d5      	beq.n	5fb0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
    6004:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
    6008:	2c00      	cmp	r4, #0
    600a:	d1b7      	bne.n	5f7c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    600c:	7819      	ldrb	r1, [r3, #0]
    600e:	f021 010f 	bic.w	r1, r1, #15
    6012:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
    6016:	e7b1      	b.n	5f7c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
    6018:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    601c:	4403      	add	r3, r0
    601e:	e7f5      	b.n	600c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

00006020 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    6024:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6026:	b082      	sub	sp, #8
    6028:	4605      	mov	r5, r0
    602a:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    602c:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    602e:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    6030:	d340      	bcc.n	60b4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
    6032:	2701      	movs	r7, #1
    find++;
    6034:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    6036:	69eb      	ldr	r3, [r5, #28]
    6038:	aa01      	add	r2, sp, #4
    603a:	4628      	mov	r0, r5
    603c:	42a3      	cmp	r3, r4
    603e:	d205      	bcs.n	604c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    6040:	bb9f      	cbnz	r7, 60aa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
    6042:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    6044:	2701      	movs	r7, #1
    find++;
    6046:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    6048:	42a3      	cmp	r3, r4
    604a:	d32e      	bcc.n	60aa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
    604c:	42a6      	cmp	r6, r4
    604e:	bf18      	it	ne
    6050:	2c01      	cmpne	r4, #1
    6052:	4621      	mov	r1, r4
    6054:	d929      	bls.n	60aa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    6056:	f7ff fedf 	bl	5e18 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    605a:	2800      	cmp	r0, #0
    605c:	db25      	blt.n	60aa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
    605e:	d0e9      	beq.n	6034 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    6060:	9b01      	ldr	r3, [sp, #4]
    6062:	2b00      	cmp	r3, #0
    6064:	d1e6      	bne.n	6034 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    6066:	b107      	cbz	r7, 606a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    6068:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
    606a:	69eb      	ldr	r3, [r5, #28]
    606c:	42a3      	cmp	r3, r4
    606e:	d31c      	bcc.n	60aa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    6070:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    6074:	4621      	mov	r1, r4
    6076:	4628      	mov	r0, r5
    6078:	f7ff ff4c 	bl	5f14 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
    607c:	4607      	mov	r7, r0
    607e:	b1a0      	cbz	r0, 60aa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
    6080:	b93e      	cbnz	r6, 6092 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
    6082:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6084:	2b00      	cmp	r3, #0
    6086:	db01      	blt.n	608c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
    6088:	3b01      	subs	r3, #1
    608a:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    608c:	f8c8 4000 	str.w	r4, [r8]
  return true;
    6090:	e00c      	b.n	60ac <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
    6092:	2e01      	cmp	r6, #1
    6094:	d009      	beq.n	60aa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    6096:	69eb      	ldr	r3, [r5, #28]
    6098:	429e      	cmp	r6, r3
    609a:	d806      	bhi.n	60aa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    609c:	4631      	mov	r1, r6
    609e:	4622      	mov	r2, r4
    60a0:	4628      	mov	r0, r5
    60a2:	f7ff ff37 	bl	5f14 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
    60a6:	2800      	cmp	r0, #0
    60a8:	d1eb      	bne.n	6082 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
    60aa:	2700      	movs	r7, #0
}
    60ac:	4638      	mov	r0, r7
    60ae:	b002      	add	sp, #8
    60b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    60b4:	460c      	mov	r4, r1
    setStart = false;
    60b6:	2700      	movs	r7, #0
    60b8:	e7bc      	b.n	6034 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    60ba:	bf00      	nop

000060bc <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    60bc:	2901      	cmp	r1, #1
    60be:	d90c      	bls.n	60da <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    60c0:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    60c2:	69c4      	ldr	r4, [r0, #28]
    60c4:	428c      	cmp	r4, r1
    60c6:	d303      	bcc.n	60d0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    60c8:	f85d 4b04 	ldr.w	r4, [sp], #4
    60cc:	f7ff bea4 	b.w	5e18 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    60d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    60d4:	f85d 4b04 	ldr.w	r4, [sp], #4
    60d8:	4770      	bx	lr
    60da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    60de:	4770      	bx	lr

000060e0 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    60e0:	2901      	cmp	r1, #1
    60e2:	d90b      	bls.n	60fc <FatPartition::fatPut(unsigned long, unsigned long)+0x1c>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    60e4:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    60e6:	69c4      	ldr	r4, [r0, #28]
    60e8:	428c      	cmp	r4, r1
    60ea:	d303      	bcc.n	60f4 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
}
    60ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    60f0:	f7ff bf10 	b.w	5f14 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    60f4:	2000      	movs	r0, #0
    60f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    60fa:	4770      	bx	lr
    60fc:	2000      	movs	r0, #0
    60fe:	4770      	bx	lr

00006100 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    6100:	b570      	push	{r4, r5, r6, lr}
    6102:	4605      	mov	r5, r0
    6104:	b082      	sub	sp, #8
    6106:	460c      	mov	r4, r1
    6108:	e01d      	b.n	6146 <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    610a:	69eb      	ldr	r3, [r5, #28]
    610c:	429c      	cmp	r4, r3
    610e:	d81f      	bhi.n	6150 <FatPartition::freeChain(unsigned long)+0x50>
    6110:	f7ff fe82 	bl	5e18 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    6114:	4606      	mov	r6, r0
    if (fg < 0) {
    6116:	4621      	mov	r1, r4
    6118:	2200      	movs	r2, #0
    611a:	2e00      	cmp	r6, #0
    611c:	4628      	mov	r0, r5
    611e:	db17      	blt.n	6150 <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
    6120:	69eb      	ldr	r3, [r5, #28]
    6122:	429c      	cmp	r4, r3
    6124:	d814      	bhi.n	6150 <FatPartition::freeChain(unsigned long)+0x50>
    6126:	f7ff fef5 	bl	5f14 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
    612a:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    612c:	b180      	cbz	r0, 6150 <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
    612e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6130:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
    6132:	f103 0301 	add.w	r3, r3, #1
    6136:	bfa8      	it	ge
    6138:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    613a:	68eb      	ldr	r3, [r5, #12]
    613c:	42a3      	cmp	r3, r4
    cluster = next;
    613e:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    6140:	bf88      	it	hi
    6142:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    6144:	b12e      	cbz	r6, 6152 <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
    6146:	2c01      	cmp	r4, #1
    6148:	4621      	mov	r1, r4
    614a:	aa01      	add	r2, sp, #4
    614c:	4628      	mov	r0, r5
    614e:	d8dc      	bhi.n	610a <FatPartition::freeChain(unsigned long)+0xa>
  return false;
    6150:	2000      	movs	r0, #0
}
    6152:	b002      	add	sp, #8
    6154:	bd70      	pop	{r4, r5, r6, pc}
    6156:	bf00      	nop

00006158 <FatPartition::freeClusterCount()>:
int32_t FatPartition::freeClusterCount() {
    6158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    615c:	4606      	mov	r6, r0
  if (m_freeClusterCount >= 0) {
    615e:	6a40      	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    6160:	b084      	sub	sp, #16
  if (m_freeClusterCount >= 0) {
    6162:	2800      	cmp	r0, #0
    6164:	da1b      	bge.n	619e <FatPartition::freeClusterCount()+0x46>
    return m_fatType;
    6166:	79f2      	ldrb	r2, [r6, #7]
 if (FAT12_SUPPORT && fatType() == 12) {
    6168:	2a0c      	cmp	r2, #12
    616a:	d11b      	bne.n	61a4 <FatPartition::freeClusterCount()+0x4c>
    uint32_t todo = m_lastCluster + 1;
    616c:	69f7      	ldr	r7, [r6, #28]
    616e:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    6170:	2b02      	cmp	r3, #2
    6172:	f240 80cd 	bls.w	6310 <FatPartition::freeClusterCount()+0x1b8>
    6176:	2402      	movs	r4, #2
    uint32_t free = 0;
    6178:	2500      	movs	r5, #0
    617a:	4621      	mov	r1, r4
    617c:	aa02      	add	r2, sp, #8
    617e:	4630      	mov	r0, r6
    6180:	f7ff fe4a 	bl	5e18 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
      if (fg < 0) {
    6184:	2800      	cmp	r0, #0
    for (unsigned i = 2; i < todo; i++) {
    6186:	f104 0301 	add.w	r3, r4, #1
      if (fg < 0) {
    618a:	db06      	blt.n	619a <FatPartition::freeClusterCount()+0x42>
      if (fg && c == 0) {
    618c:	d157      	bne.n	623e <FatPartition::freeClusterCount()+0xe6>
    for (unsigned i = 2; i < todo; i++) {
    618e:	42a7      	cmp	r7, r4
    6190:	461c      	mov	r4, r3
    6192:	d05c      	beq.n	624e <FatPartition::freeClusterCount()+0xf6>
  if (cluster < 2 || cluster > m_lastCluster) {
    6194:	69f2      	ldr	r2, [r6, #28]
    6196:	4293      	cmp	r3, r2
    6198:	d9ef      	bls.n	617a <FatPartition::freeClusterCount()+0x22>
  if (buf == nullptr) return -1;
    619a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    619e:	b004      	add	sp, #16
    61a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  state.clusters_to_do = m_lastCluster + 1;
    61a4:	69f1      	ldr	r1, [r6, #28]
  state.free_count = 0;
    61a6:	2000      	movs	r0, #0
    return m_status & CACHE_STATUS_DIRTY;
    61a8:	f896 3238 	ldrb.w	r3, [r6, #568]	; 0x238
  state.clusters_to_do = m_lastCluster + 1;
    61ac:	3101      	adds	r1, #1
  num_sectors = m_sectorsPerFat;
    61ae:	6934      	ldr	r4, [r6, #16]
    if (isDirty() && !sync()) {
    61b0:	07db      	lsls	r3, r3, #31
  state.clusters_to_do = m_lastCluster + 1;
    61b2:	e9cd 1002 	strd	r1, r0, [sp, #8]
    61b6:	f100 8085 	bmi.w	62c4 <FatPartition::freeClusterCount()+0x16c>
    m_status = 0;
    61ba:	2100      	movs	r1, #0
    m_sector = 0XFFFFFFFF;
    61bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (fatType() == FAT_TYPE_FAT32) {
    61c0:	2a20      	cmp	r2, #32
    return m_buffer;
    61c2:	f506 7712 	add.w	r7, r6, #584	; 0x248
    m_status = 0;
    61c6:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    61ca:	f8c6 3244 	str.w	r3, [r6, #580]	; 0x244
    61ce:	d042      	beq.n	6256 <FatPartition::freeClusterCount()+0xfe>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    61d0:	f8d6 8000 	ldr.w	r8, [r6]
    61d4:	4b4f      	ldr	r3, [pc, #316]	; (6314 <FatPartition::freeClusterCount()+0x1bc>)
    61d6:	f8d8 2000 	ldr.w	r2, [r8]
    61da:	f8d6 a018 	ldr.w	sl, [r6, #24]
    61de:	6995      	ldr	r5, [r2, #24]
    61e0:	429d      	cmp	r5, r3
    61e2:	d178      	bne.n	62d6 <FatPartition::freeClusterCount()+0x17e>
     for (size_t i = 0; i < ns; i++) {
    61e4:	2c00      	cmp	r4, #0
    61e6:	f000 8082 	beq.w	62ee <FatPartition::freeClusterCount()+0x196>
    61ea:	eb0a 0904 	add.w	r9, sl, r4
       if (!readSector(sector + i, dst)) return false;
    61ee:	6913      	ldr	r3, [r2, #16]
    61f0:	4651      	mov	r1, sl
    61f2:	463a      	mov	r2, r7
    61f4:	4640      	mov	r0, r8
    61f6:	4798      	blx	r3
    61f8:	2800      	cmp	r0, #0
    61fa:	d0ce      	beq.n	619a <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    61fc:	9902      	ldr	r1, [sp, #8]
  if (n > 256) n = 256;
    61fe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    6202:	468e      	mov	lr, r1
    6204:	bf28      	it	cs
    6206:	f44f 7e80 	movcs.w	lr, #256	; 0x100
  uint16_t *e = p + n;
    620a:	eb07 0c4e 	add.w	ip, r7, lr, lsl #1
  while (p < e) {
    620e:	45bc      	cmp	ip, r7
    6210:	d90b      	bls.n	622a <FatPartition::freeClusterCount()+0xd2>
    6212:	9d03      	ldr	r5, [sp, #12]
    6214:	463b      	mov	r3, r7
    6216:	2200      	movs	r2, #0
    if (*p++ == 0) state->free_count++;
    6218:	f833 4b02 	ldrh.w	r4, [r3], #2
    621c:	b90c      	cbnz	r4, 6222 <FatPartition::freeClusterCount()+0xca>
    621e:	3501      	adds	r5, #1
    6220:	4602      	mov	r2, r0
  while (p < e) {
    6222:	459c      	cmp	ip, r3
    6224:	d8f8      	bhi.n	6218 <FatPartition::freeClusterCount()+0xc0>
    6226:	b102      	cbz	r2, 622a <FatPartition::freeClusterCount()+0xd2>
    6228:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    622a:	f10a 0a01 	add.w	sl, sl, #1
  state->clusters_to_do -= n;
    622e:	eba1 010e 	sub.w	r1, r1, lr
    6232:	45d1      	cmp	r9, sl
    6234:	9102      	str	r1, [sp, #8]
    6236:	d05a      	beq.n	62ee <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    6238:	f8d8 2000 	ldr.w	r2, [r8]
    623c:	e7d7      	b.n	61ee <FatPartition::freeClusterCount()+0x96>
      if (fg && c == 0) {
    623e:	9a02      	ldr	r2, [sp, #8]
    6240:	2a00      	cmp	r2, #0
    6242:	d1a4      	bne.n	618e <FatPartition::freeClusterCount()+0x36>
    for (unsigned i = 2; i < todo; i++) {
    6244:	42a7      	cmp	r7, r4
        free++;
    6246:	f105 0501 	add.w	r5, r5, #1
    for (unsigned i = 2; i < todo; i++) {
    624a:	461c      	mov	r4, r3
    624c:	d1a2      	bne.n	6194 <FatPartition::freeClusterCount()+0x3c>
    return free;
    624e:	4628      	mov	r0, r5
}
    6250:	b004      	add	sp, #16
    6252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    6256:	f8d6 a000 	ldr.w	sl, [r6]
    625a:	4b2e      	ldr	r3, [pc, #184]	; (6314 <FatPartition::freeClusterCount()+0x1bc>)
    625c:	f8da 2000 	ldr.w	r2, [sl]
    6260:	f8d6 9018 	ldr.w	r9, [r6, #24]
    6264:	6995      	ldr	r5, [r2, #24]
    6266:	429d      	cmp	r5, r3
    6268:	d146      	bne.n	62f8 <FatPartition::freeClusterCount()+0x1a0>
     for (size_t i = 0; i < ns; i++) {
    626a:	2c00      	cmp	r4, #0
    626c:	d03f      	beq.n	62ee <FatPartition::freeClusterCount()+0x196>
    626e:	eb09 0804 	add.w	r8, r9, r4
       if (!readSector(sector + i, dst)) return false;
    6272:	6913      	ldr	r3, [r2, #16]
    6274:	4649      	mov	r1, r9
    6276:	463a      	mov	r2, r7
    6278:	4650      	mov	r0, sl
    627a:	4798      	blx	r3
    627c:	2800      	cmp	r0, #0
    627e:	d08c      	beq.n	619a <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    6280:	f8dd c008 	ldr.w	ip, [sp, #8]
  if (n > 128) n = 128;
    6284:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    6288:	46e6      	mov	lr, ip
    628a:	bf28      	it	cs
    628c:	f04f 0e80 	movcs.w	lr, #128	; 0x80
  uint32_t *e = p + n;
    6290:	eb07 028e 	add.w	r2, r7, lr, lsl #2
  while (p < e) {
    6294:	42ba      	cmp	r2, r7
    6296:	d90b      	bls.n	62b0 <FatPartition::freeClusterCount()+0x158>
    6298:	9d03      	ldr	r5, [sp, #12]
    629a:	463b      	mov	r3, r7
    629c:	2100      	movs	r1, #0
    if (*p++ == 0) state->free_count++;
    629e:	f853 4b04 	ldr.w	r4, [r3], #4
    62a2:	b90c      	cbnz	r4, 62a8 <FatPartition::freeClusterCount()+0x150>
    62a4:	3501      	adds	r5, #1
    62a6:	4601      	mov	r1, r0
  while (p < e) {
    62a8:	429a      	cmp	r2, r3
    62aa:	d8f8      	bhi.n	629e <FatPartition::freeClusterCount()+0x146>
    62ac:	b101      	cbz	r1, 62b0 <FatPartition::freeClusterCount()+0x158>
    62ae:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    62b0:	f109 0901 	add.w	r9, r9, #1
  state->clusters_to_do -= n;
    62b4:	ebac 030e 	sub.w	r3, ip, lr
    62b8:	45c8      	cmp	r8, r9
    62ba:	9302      	str	r3, [sp, #8]
    62bc:	d017      	beq.n	62ee <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    62be:	f8da 2000 	ldr.w	r2, [sl]
    62c2:	e7d6      	b.n	6272 <FatPartition::freeClusterCount()+0x11a>
    if (isDirty() && !sync()) {
    62c4:	f506 700e 	add.w	r0, r6, #568	; 0x238
    62c8:	f002 fc08 	bl	8adc <FsCache::sync()>
    62cc:	2800      	cmp	r0, #0
    62ce:	f43f af64 	beq.w	619a <FatPartition::freeClusterCount()+0x42>
    62d2:	79f2      	ldrb	r2, [r6, #7]
    62d4:	e771      	b.n	61ba <FatPartition::freeClusterCount()+0x62>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    62d6:	4623      	mov	r3, r4
    62d8:	ac02      	add	r4, sp, #8
    62da:	463a      	mov	r2, r7
    62dc:	4651      	mov	r1, sl
    62de:	9401      	str	r4, [sp, #4]
    62e0:	4640      	mov	r0, r8
    62e2:	4c0d      	ldr	r4, [pc, #52]	; (6318 <FatPartition::freeClusterCount()+0x1c0>)
    62e4:	9400      	str	r4, [sp, #0]
    62e6:	47a8      	blx	r5
    62e8:	2800      	cmp	r0, #0
    62ea:	f43f af56 	beq.w	619a <FatPartition::freeClusterCount()+0x42>
  setFreeClusterCount(state.free_count);
    62ee:	9803      	ldr	r0, [sp, #12]
    m_freeClusterCount = value;
    62f0:	6270      	str	r0, [r6, #36]	; 0x24
}
    62f2:	b004      	add	sp, #16
    62f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    62f8:	4623      	mov	r3, r4
    62fa:	ac02      	add	r4, sp, #8
    62fc:	463a      	mov	r2, r7
    62fe:	4649      	mov	r1, r9
    6300:	9401      	str	r4, [sp, #4]
    6302:	4650      	mov	r0, sl
    6304:	4c05      	ldr	r4, [pc, #20]	; (631c <FatPartition::freeClusterCount()+0x1c4>)
    6306:	9400      	str	r4, [sp, #0]
    6308:	47a8      	blx	r5
    630a:	2800      	cmp	r0, #0
    630c:	d1ef      	bne.n	62ee <FatPartition::freeClusterCount()+0x196>
    630e:	e744      	b.n	619a <FatPartition::freeClusterCount()+0x42>
    for (unsigned i = 2; i < todo; i++) {
    6310:	2000      	movs	r0, #0
    6312:	e744      	b.n	619e <FatPartition::freeClusterCount()+0x46>
    6314:	00005d6d 	.word	0x00005d6d
    6318:	00005db1 	.word	0x00005db1
    631c:	00005de5 	.word	0x00005de5

00006320 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6320:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
    6322:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6324:	4604      	mov	r4, r0
  if (part) {
    6326:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
    6328:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
    632a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  m_cache.init(dev);
    632e:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
    6332:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
    6334:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
    6336:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
    6338:	62e1      	str	r1, [r4, #44]	; 0x2c
    633a:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    633e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    6342:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    6346:	6362      	str	r2, [r4, #52]	; 0x34
    6348:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
    634c:	b1cd      	cbz	r5, 6382 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    634e:	2d04      	cmp	r5, #4
    6350:	d901      	bls.n	6356 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  return false;
    6352:	2000      	movs	r0, #0
}
    6354:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    6356:	461a      	mov	r2, r3
    6358:	4619      	mov	r1, r3
    635a:	4630      	mov	r0, r6
    635c:	f002 fbea 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    6360:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    6364:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    6368:	442b      	add	r3, r5
    636a:	011d      	lsls	r5, r3, #4
    636c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    6370:	2800      	cmp	r0, #0
    6372:	d0ee      	beq.n	6352 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    6374:	7919      	ldrb	r1, [r3, #4]
    6376:	2900      	cmp	r1, #0
    6378:	d0eb      	beq.n	6352 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    637a:	5d52      	ldrb	r2, [r2, r5]
    637c:	0652      	lsls	r2, r2, #25
    637e:	d1e8      	bne.n	6352 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    6380:	689d      	ldr	r5, [r3, #8]
    6382:	2200      	movs	r2, #0
    6384:	4629      	mov	r1, r5
    6386:	4630      	mov	r0, r6
    6388:	f002 fbd4 	bl	8b34 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    638c:	2800      	cmp	r0, #0
    638e:	d0e0      	beq.n	6352 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    6390:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    6394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6398:	d1db      	bne.n	6352 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    639a:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    639c:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
    639e:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    63a0:	2a01      	cmp	r2, #1
    63a2:	d8d6      	bhi.n	6352 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    63a4:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    63a6:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    63a8:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    63aa:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    63ac:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    63ae:	f04f 0300 	mov.w	r3, #0
    63b2:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    63b4:	d044      	beq.n	6440 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
    63b6:	2201      	movs	r2, #1
    63b8:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    63ba:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    63bc:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    63be:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    63c0:	4291      	cmp	r1, r2
    63c2:	d004      	beq.n	63ce <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
    63c4:	2b08      	cmp	r3, #8
    63c6:	d1f7      	bne.n	63b8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
    63c8:	2000      	movs	r0, #0
    63ca:	71a3      	strb	r3, [r4, #6]
}
    63cc:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
    63ce:	461e      	mov	r6, r3
    63d0:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    63d2:	8ac1      	ldrh	r1, [r0, #22]
    63d4:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    63d6:	b909      	cbnz	r1, 63dc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
    63d8:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    63da:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    63dc:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    63de:	f8b0 3011 	ldrh.w	r3, [r0, #17]
    63e2:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    63e4:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    63e6:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    63e8:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    63ea:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    63ee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    63f2:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
    63f6:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    63fa:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
    63fc:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    6400:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    6402:	b902      	cbnz	r2, 6406 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
    6404:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    6406:	1aed      	subs	r5, r5, r3
    6408:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
    640a:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
    640c:	1c5a      	adds	r2, r3, #1
    640e:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    6410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6414:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    6416:	f640 72f4 	movw	r2, #4084	; 0xff4
    641a:	4293      	cmp	r3, r2
    641c:	d90c      	bls.n	6438 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    641e:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    6422:	4293      	cmp	r3, r2
    6424:	d90a      	bls.n	643c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
    6426:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    6428:	2320      	movs	r3, #32
    642a:	6222      	str	r2, [r4, #32]
  return true;
    642c:	2001      	movs	r0, #1
    m_fatType = 12;
    642e:	71e3      	strb	r3, [r4, #7]
    m_mirrorOffset = offset;
    6430:	6321      	str	r1, [r4, #48]	; 0x30
    6432:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    6436:	bd70      	pop	{r4, r5, r6, pc}
    6438:	230c      	movs	r3, #12
    643a:	e7f7      	b.n	642c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
    643c:	2310      	movs	r3, #16
    643e:	e7f5      	b.n	642c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6440:	461e      	mov	r6, r3
    6442:	e7c6      	b.n	63d2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

00006444 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    6444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6446:	2600      	movs	r6, #0
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    6448:	6b8f      	ldr	r7, [r1, #56]	; 0x38
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    644a:	460d      	mov	r5, r1
    644c:	4604      	mov	r4, r0
    644e:	e9c0 660e 	strd	r6, r6, [r0, #56]	; 0x38
  if (from.m_fFile) {
    6452:	b19f      	cbz	r7, 647c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    6454:	4601      	mov	r1, r0
    6456:	2024      	movs	r0, #36	; 0x24
    6458:	f000 f8dc 	bl	6614 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    645c:	8006      	strh	r6, [r0, #0]
    645e:	7086      	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
    6460:	4684      	mov	ip, r0
    6462:	6bad      	ldr	r5, [r5, #56]	; 0x38
    m_fFile = new (m_fileMem) FatFile;
    6464:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    6466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6468:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    646c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    646e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6472:	682b      	ldr	r3, [r5, #0]
    6474:	f8cc 3000 	str.w	r3, [ip]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    6478:	4620      	mov	r0, r4
    647a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (from.m_xFile) {
    647c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    647e:	2b00      	cmp	r3, #0
    6480:	d0fa      	beq.n	6478 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    6482:	4601      	mov	r1, r0
    6484:	2038      	movs	r0, #56	; 0x38
    6486:	f000 f8c5 	bl	6614 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    648a:	f880 7031 	strb.w	r7, [r0, #49]	; 0x31
    648e:	8647      	strh	r7, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    6490:	4602      	mov	r2, r0
    6492:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    m_xFile = new (m_fileMem) ExFatFile;
    6494:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    6496:	f103 0730 	add.w	r7, r3, #48	; 0x30
    649a:	681e      	ldr	r6, [r3, #0]
    649c:	3310      	adds	r3, #16
    649e:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    64a2:	3210      	adds	r2, #16
    64a4:	f853 0c08 	ldr.w	r0, [r3, #-8]
    64a8:	f853 1c04 	ldr.w	r1, [r3, #-4]
    64ac:	42bb      	cmp	r3, r7
    64ae:	f842 6c10 	str.w	r6, [r2, #-16]
    64b2:	f842 5c0c 	str.w	r5, [r2, #-12]
    64b6:	f842 0c08 	str.w	r0, [r2, #-8]
    64ba:	f842 1c04 	str.w	r1, [r2, #-4]
    64be:	d1ec      	bne.n	649a <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x56>
    64c0:	681b      	ldr	r3, [r3, #0]
}
    64c2:	4620      	mov	r0, r4
    *m_xFile = *from.m_xFile;
    64c4:	6013      	str	r3, [r2, #0]
}
    64c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000064c8 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    64c8:	b510      	push	{r4, lr}
    64ca:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    64cc:	6b80      	ldr	r0, [r0, #56]	; 0x38
    64ce:	b110      	cbz	r0, 64d6 <FsBaseFile::close()+0xe>
    64d0:	f7fd fce2 	bl	3e98 <FatFile::close()>
    64d4:	b930      	cbnz	r0, 64e4 <FsBaseFile::close()+0x1c>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    64d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    64d8:	b110      	cbz	r0, 64e0 <FsBaseFile::close()+0x18>
    64da:	f7fb fbcf 	bl	1c7c <ExFatFile::close()>
    64de:	b920      	cbnz	r0, 64ea <FsBaseFile::close()+0x22>
    m_xFile = nullptr;
    return true;
  }
  return false;
    64e0:	2000      	movs	r0, #0
}
    64e2:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
    64e4:	2300      	movs	r3, #0
    64e6:	63a3      	str	r3, [r4, #56]	; 0x38
}
    64e8:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
    64ea:	2300      	movs	r3, #0
    64ec:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    64ee:	bd10      	pop	{r4, pc}

000064f0 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    64f0:	2900      	cmp	r1, #0
    64f2:	d052      	beq.n	659a <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    64f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64f8:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    64fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
    64fc:	460d      	mov	r5, r1
    64fe:	4617      	mov	r7, r2
    6500:	461e      	mov	r6, r3
    6502:	b110      	cbz	r0, 650a <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
    6504:	f7fd fcc8 	bl	3e98 <FatFile::close()>
    6508:	bba0      	cbnz	r0, 6574 <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
    650a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    650c:	b110      	cbz	r0, 6514 <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
    650e:	f7fb fbb5 	bl	1c7c <ExFatFile::close()>
    6512:	bbb8      	cbnz	r0, 6584 <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
    return false;
  }
  close();
  if (vol->m_fVol) {
    6514:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    6518:	f1b8 0f00 	cmp.w	r8, #0
    651c:	d011      	beq.n	6542 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
    651e:	4621      	mov	r1, r4
    6520:	2024      	movs	r0, #36	; 0x24
    6522:	f000 f877 	bl	6614 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    6526:	4633      	mov	r3, r6
    6528:	2600      	movs	r6, #0
    652a:	463a      	mov	r2, r7
    652c:	8006      	strh	r6, [r0, #0]
    652e:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    6530:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    6532:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    6536:	f7fd feb7 	bl	42a8 <FatFile::open(FatVolume*, char const*, int)>
    653a:	bb58      	cbnz	r0, 6594 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
      return true;
    }
    m_fFile = nullptr;
    653c:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    653e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    6542:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    6546:	b193      	cbz	r3, 656e <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
    6548:	4621      	mov	r1, r4
    654a:	2038      	movs	r0, #56	; 0x38
    654c:	f000 f862 	bl	6614 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    6550:	4633      	mov	r3, r6
    6552:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
    6556:	463a      	mov	r2, r7
    6558:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    655c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    655e:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    6562:	f7fb ffbf 	bl	24e4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6566:	b9a8      	cbnz	r0, 6594 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
    6568:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    656a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    656e:	2000      	movs	r0, #0
}
    6570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    6574:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    6576:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
    657a:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    657c:	f1b8 0f00 	cmp.w	r8, #0
    6580:	d1cd      	bne.n	651e <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    6582:	e7de      	b.n	6542 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
    6584:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    6586:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
    658a:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
    658c:	f1b8 0f00 	cmp.w	r8, #0
    6590:	d1c5      	bne.n	651e <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    6592:	e7d6      	b.n	6542 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
    6594:	2001      	movs	r0, #1
}
    6596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    659a:	2000      	movs	r0, #0
}
    659c:	4770      	bx	lr
    659e:	bf00      	nop

000065a0 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    65a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65a2:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    65a4:	6b80      	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    65a6:	460d      	mov	r5, r1
    65a8:	4617      	mov	r7, r2
  if (m_fFile && m_fFile->close()) {
    65aa:	b110      	cbz	r0, 65b2 <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    65ac:	f7fd fc74 	bl	3e98 <FatFile::close()>
    65b0:	bb38      	cbnz	r0, 6602 <FsBaseFile::openNext(FsBaseFile*, int)+0x62>
  if (m_xFile && m_xFile->close()) {
    65b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    65b4:	b110      	cbz	r0, 65bc <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    65b6:	f7fb fb61 	bl	1c7c <ExFatFile::close()>
    65ba:	bb38      	cbnz	r0, 660c <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
  close();
  if (dir->m_fFile) {
    65bc:	6bae      	ldr	r6, [r5, #56]	; 0x38
    65be:	b176      	cbz	r6, 65de <FsBaseFile::openNext(FsBaseFile*, int)+0x3e>
    m_fFile = new (m_fileMem) FatFile;
    65c0:	4621      	mov	r1, r4
    65c2:	2024      	movs	r0, #36	; 0x24
    65c4:	f000 f826 	bl	6614 <operator new(unsigned int, unsigned long*)>
    65c8:	2100      	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    65ca:	463a      	mov	r2, r7
    65cc:	8001      	strh	r1, [r0, #0]
    65ce:	7081      	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    65d0:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    65d2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    65d4:	f7fe f9ce 	bl	4974 <FatFile::openNext(FatFile*, int)>
    65d8:	b988      	cbnz	r0, 65fe <FsBaseFile::openNext(FsBaseFile*, int)+0x5e>
      return true;
    }
    m_fFile = nullptr;
    65da:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    65dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    65de:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    65e0:	2800      	cmp	r0, #0
    65e2:	d0fb      	beq.n	65dc <FsBaseFile::openNext(FsBaseFile*, int)+0x3c>
    m_xFile = new (m_fileMem) ExFatFile;
    65e4:	4621      	mov	r1, r4
    65e6:	2038      	movs	r0, #56	; 0x38
    65e8:	f000 f814 	bl	6614 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    65ec:	463a      	mov	r2, r7
    65ee:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    65f2:	8646      	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    65f4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    65f6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    65f8:	f7fb ff7c 	bl	24f4 <ExFatFile::openNext(ExFatFile*, int)>
    65fc:	b120      	cbz	r0, 6608 <FsBaseFile::openNext(FsBaseFile*, int)+0x68>
      return true;
    65fe:	2001      	movs	r0, #1
}
    6600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fFile = nullptr;
    6602:	2300      	movs	r3, #0
    6604:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    6606:	e7d9      	b.n	65bc <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    m_xFile = nullptr;
    6608:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    660a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_xFile = nullptr;
    660c:	2300      	movs	r3, #0
    660e:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    6610:	e7d4      	b.n	65bc <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    6612:	bf00      	nop

00006614 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    6614:	4608      	mov	r0, r1
    6616:	4770      	bx	lr

00006618 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    6618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    661c:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    661e:	4604      	mov	r4, r0
    6620:	4698      	mov	r8, r3
  m_blockDev = blockDev;
    6622:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    6626:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    662a:	4601      	mov	r1, r0
    662c:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    6630:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
    6632:	f7ff ffef 	bl	6614 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6636:	4642      	mov	r2, r8
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    6638:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    663c:	4605      	mov	r5, r0
    663e:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    6642:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
    6646:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    664a:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    664e:	f7fd fae7 	bl	3c20 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    6652:	bba0      	cbnz	r0, 66be <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    6654:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    6656:	4621      	mov	r1, r4
    6658:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    665c:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    6660:	f7ff ffd8 	bl	6614 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    6664:	2302      	movs	r3, #2
    6666:	71c6      	strb	r6, [r0, #7]
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6668:	4642      	mov	r2, r8
    666a:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
    666e:	4605      	mov	r5, r0
    6670:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
    6674:	7203      	strb	r3, [r0, #8]
    6676:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    667a:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    667e:	f7ff fe4f 	bl	6320 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    6682:	b938      	cbnz	r0, 6694 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    6684:	2300      	movs	r3, #0
    6686:	4a1a      	ldr	r2, [pc, #104]	; (66f0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  m_fVol = nullptr;
  return false;
    6688:	4618      	mov	r0, r3
  m_cwv = nullptr;
    668a:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
    668c:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    6690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    6694:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    6698:	4630      	mov	r0, r6
    669a:	f7fd fbfd 	bl	3e98 <FatFile::close()>
    return m_vwd.openRoot(this);
    669e:	4629      	mov	r1, r5
    66a0:	4630      	mov	r0, r6
    66a2:	f7fd fe37 	bl	4314 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    66a6:	2800      	cmp	r0, #0
    66a8:	d0ec      	beq.n	6684 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    66aa:	4b12      	ldr	r3, [pc, #72]	; (66f4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
    66ac:	681a      	ldr	r2, [r3, #0]
    66ae:	b9aa      	cbnz	r2, 66dc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
    66b0:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
    66b2:	4b0f      	ldr	r3, [pc, #60]	; (66f0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    66b4:	b1af      	cbz	r7, 66e2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
    66b6:	2001      	movs	r0, #1
    m_cwv = this;
    66b8:	601c      	str	r4, [r3, #0]
}
    66ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    66be:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    66c2:	4630      	mov	r0, r6
    66c4:	f7fb fada 	bl	1c7c <ExFatFile::close()>
    return m_vwd.openRoot(this);
    66c8:	4629      	mov	r1, r5
    66ca:	4630      	mov	r0, r6
    66cc:	f7fb fb04 	bl	1cd8 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    66d0:	2800      	cmp	r0, #0
    66d2:	d0bf      	beq.n	6654 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
    66d4:	4b08      	ldr	r3, [pc, #32]	; (66f8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    66d6:	681a      	ldr	r2, [r3, #0]
    66d8:	2a00      	cmp	r2, #0
    66da:	d0e9      	beq.n	66b0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
    66dc:	4b04      	ldr	r3, [pc, #16]	; (66f0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    66de:	2f00      	cmp	r7, #0
    66e0:	d1e9      	bne.n	66b6 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    66e2:	681a      	ldr	r2, [r3, #0]
    66e4:	2a00      	cmp	r2, #0
    66e6:	d0e6      	beq.n	66b6 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
    66e8:	2001      	movs	r0, #1
}
    66ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66ee:	bf00      	nop
    66f0:	200091f0 	.word	0x200091f0
    66f4:	200091f4 	.word	0x200091f4
    66f8:	200091bc 	.word	0x200091bc

000066fc <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    66fc:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    66fe:	2500      	movs	r5, #0
    6700:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    6704:	4604      	mov	r4, r0
    6706:	6045      	str	r5, [r0, #4]
    6708:	7305      	strb	r5, [r0, #12]
    670a:	6086      	str	r6, [r0, #8]
  FsBaseFile() {}
    670c:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6710:	4d03      	ldr	r5, [pc, #12]	; (6720 <FsVolume::open(char const*, int)+0x24>)
    6712:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    6716:	f7ff feeb 	bl	64f0 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    671a:	4620      	mov	r0, r4
    671c:	bd70      	pop	{r4, r5, r6, pc}
    671e:	bf00      	nop
    6720:	200009ac 	.word	0x200009ac

00006724 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    6724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6728:	4770      	bx	lr
    672a:	bf00      	nop

0000672c <SharedSpiCard::errorCode() const>:
  }
    672c:	7c40      	ldrb	r0, [r0, #17]
    672e:	4770      	bx	lr

00006730 <SharedSpiCard::errorData() const>:
  }
    6730:	7d00      	ldrb	r0, [r0, #20]
    6732:	4770      	bx	lr

00006734 <SharedSpiCard::type() const>:
  }
    6734:	7d40      	ldrb	r0, [r0, #21]
    6736:	4770      	bx	lr

00006738 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    6738:	2001      	movs	r0, #1
    673a:	4770      	bx	lr

0000673c <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    673c:	7f00      	ldrb	r0, [r0, #28]
    673e:	4770      	bx	lr

00006740 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    6740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6744:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    6746:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    6748:	4605      	mov	r5, r0
    674a:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    674c:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    674e:	4691      	mov	r9, r2
    6750:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    6752:	d028      	beq.n	67a6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
    6754:	682b      	ldr	r3, [r5, #0]
    6756:	4621      	mov	r1, r4
    6758:	4628      	mov	r0, r5
    675a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    675c:	4798      	blx	r3
    675e:	b198      	cbz	r0, 6788 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    6760:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    6762:	f1b9 0f00 	cmp.w	r9, #0
    6766:	d012      	beq.n	678e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    6768:	eb04 0809 	add.w	r8, r4, r9
    676c:	e001      	b.n	6772 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    676e:	45a0      	cmp	r8, r4
    6770:	d00d      	beq.n	678e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    6772:	4639      	mov	r1, r7
    6774:	4620      	mov	r0, r4
    6776:	47b0      	blx	r6
    if (!writeData(src)) {
    6778:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
    677a:	4601      	mov	r1, r0
    if (!writeData(src)) {
    677c:	4628      	mov	r0, r5
    677e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
    6780:	3401      	adds	r4, #1
    if (!writeData(src)) {
    6782:	4798      	blx	r3
    6784:	2800      	cmp	r0, #0
    6786:	d1f2      	bne.n	676e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    6788:	2000      	movs	r0, #0
}
    678a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
    678e:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    6790:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    6792:	444b      	add	r3, r9
    6794:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    6796:	2800      	cmp	r0, #0
    6798:	d1f7      	bne.n	678a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    679a:	682b      	ldr	r3, [r5, #0]
    679c:	4628      	mov	r0, r5
    679e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    67a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    67a4:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    67a6:	6983      	ldr	r3, [r0, #24]
    67a8:	428b      	cmp	r3, r1
    67aa:	d1d3      	bne.n	6754 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    67ac:	e7d9      	b.n	6762 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    67ae:	bf00      	nop

000067b0 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    67b0:	4770      	bx	lr
    67b2:	bf00      	nop

000067b4 <SharedSpiCard::end()>:
    m_spiDriver.end();
    67b4:	3004      	adds	r0, #4
    67b6:	f002 b93d 	b.w	8a34 <SdSpiArduinoDriver::end()>
    67ba:	bf00      	nop

000067bc <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    67bc:	b510      	push	{r4, lr}
    67be:	4604      	mov	r4, r0
    67c0:	2120      	movs	r1, #32
    67c2:	f003 f95f 	bl	9a84 <operator delete(void*, unsigned int)>
    67c6:	4620      	mov	r0, r4
    67c8:	bd10      	pop	{r4, pc}
    67ca:	bf00      	nop

000067cc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    67cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67d0:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    67d2:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    67d4:	4605      	mov	r5, r0
    67d6:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    67d8:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    67da:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    67dc:	d024      	beq.n	6828 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
    67de:	682b      	ldr	r3, [r5, #0]
    67e0:	4631      	mov	r1, r6
    67e2:	4628      	mov	r0, r5
    67e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    67e6:	4798      	blx	r3
    67e8:	b178      	cbz	r0, 680a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
    67ea:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
    67ec:	b187      	cbz	r7, 6810 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
    67ee:	2600      	movs	r6, #0
    67f0:	e001      	b.n	67f6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
    67f2:	42b7      	cmp	r7, r6
    67f4:	d00c      	beq.n	6810 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    67f6:	682a      	ldr	r2, [r5, #0]
    67f8:	4621      	mov	r1, r4
    67fa:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
    67fc:	3601      	adds	r6, #1
    if (!writeData(src)) {
    67fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
    6800:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    6804:	4790      	blx	r2
    6806:	2800      	cmp	r0, #0
    6808:	d1f3      	bne.n	67f2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
    680a:	2000      	movs	r0, #0
}
    680c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
    6810:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    6812:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    6814:	443b      	add	r3, r7
    6816:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    6818:	2800      	cmp	r0, #0
    681a:	d1f7      	bne.n	680c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    681c:	682b      	ldr	r3, [r5, #0]
    681e:	4628      	mov	r0, r5
    6820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    6822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    6826:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    6828:	6983      	ldr	r3, [r0, #24]
    682a:	428b      	cmp	r3, r1
    682c:	d1d7      	bne.n	67de <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    682e:	e7dd      	b.n	67ec <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

00006830 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    6830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6834:	4e20      	ldr	r6, [pc, #128]	; (68b8 <SharedSpiCard::writeStop()+0x88>)
    6836:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    6838:	f100 0804 	add.w	r8, r0, #4
    683c:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
    683e:	f505 7516 	add.w	r5, r5, #600	; 0x258
    6842:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    6844:	e003      	b.n	684e <SharedSpiCard::writeStop()+0x1e>
    6846:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    6848:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    684a:	041b      	lsls	r3, r3, #16
    684c:	d410      	bmi.n	6870 <SharedSpiCard::writeStop()+0x40>
    684e:	4640      	mov	r0, r8
    6850:	f002 f8f4 	bl	8a3c <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    6854:	28ff      	cmp	r0, #255	; 0xff
    6856:	4604      	mov	r4, r0
    6858:	d1f5      	bne.n	6846 <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    685a:	21fd      	movs	r1, #253	; 0xfd
    685c:	4640      	mov	r0, r8
    685e:	f002 f90b 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    6862:	7cbb      	ldrb	r3, [r7, #18]
    6864:	b9cb      	cbnz	r3, 689a <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
    6866:	2300      	movs	r3, #0
    6868:	2001      	movs	r0, #1
    686a:	74fb      	strb	r3, [r7, #19]
}
    686c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    6870:	231e      	movs	r3, #30
  if (m_spiActive) {
    6872:	7cb8      	ldrb	r0, [r7, #18]
    6874:	747b      	strb	r3, [r7, #17]
    6876:	2800      	cmp	r0, #0
    6878:	d0f8      	beq.n	686c <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
    687a:	7c38      	ldrb	r0, [r7, #16]
    687c:	2101      	movs	r1, #1
    687e:	f002 f809 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    6882:	21ff      	movs	r1, #255	; 0xff
    6884:	4640      	mov	r0, r8
    6886:	f002 f8f7 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    688a:	4640      	mov	r0, r8
    688c:	f002 f8aa 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    6890:	2300      	movs	r3, #0
  return false;
    6892:	4618      	mov	r0, r3
    m_spiActive = false;
    6894:	74bb      	strb	r3, [r7, #18]
}
    6896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
    689a:	2101      	movs	r1, #1
    689c:	7c38      	ldrb	r0, [r7, #16]
    689e:	f001 fff9 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    68a2:	4621      	mov	r1, r4
    68a4:	4640      	mov	r0, r8
    68a6:	f002 f8e7 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    68aa:	4640      	mov	r0, r8
    68ac:	f002 f89a 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    68b0:	2300      	movs	r3, #0
    68b2:	74bb      	strb	r3, [r7, #18]
}
    68b4:	e7d7      	b.n	6866 <SharedSpiCard::writeStop()+0x36>
    68b6:	bf00      	nop
    68b8:	20009600 	.word	0x20009600

000068bc <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    68bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    68c0:	7cc3      	ldrb	r3, [r0, #19]
    68c2:	2b01      	cmp	r3, #1
    68c4:	d035      	beq.n	6932 <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    68c6:	7c86      	ldrb	r6, [r0, #18]
    68c8:	4604      	mov	r4, r0
    68ca:	b14e      	cbz	r6, 68e0 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    68cc:	3004      	adds	r0, #4
    68ce:	f002 f8b5 	bl	8a3c <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    68d2:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    68d6:	bf18      	it	ne
    68d8:	2501      	movne	r5, #1
}
    68da:	4628      	mov	r0, r5
    68dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
    68e0:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    68e2:	f04f 0801 	mov.w	r8, #1
    68e6:	4638      	mov	r0, r7
    68e8:	f002 f85e 	bl	89a8 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    68ec:	4631      	mov	r1, r6
    68ee:	7c20      	ldrb	r0, [r4, #16]
    68f0:	f001 ffd0 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    68f4:	21ff      	movs	r1, #255	; 0xff
    68f6:	4638      	mov	r0, r7
    68f8:	f002 f8be 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    68fc:	4638      	mov	r0, r7
    68fe:	f884 8012 	strb.w	r8, [r4, #18]
    6902:	f002 f89b 	bl	8a3c <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    6906:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
    6908:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    690c:	bf18      	it	ne
    690e:	2501      	movne	r5, #1
  if (m_spiActive) {
    6910:	2b00      	cmp	r3, #0
    6912:	d0e2      	beq.n	68da <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
    6914:	4641      	mov	r1, r8
    6916:	7c20      	ldrb	r0, [r4, #16]
    6918:	f001 ffbc 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    691c:	21ff      	movs	r1, #255	; 0xff
    691e:	4638      	mov	r0, r7
    6920:	f002 f8aa 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    6924:	4638      	mov	r0, r7
    6926:	f002 f85d 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
}
    692a:	4628      	mov	r0, r5
    m_spiActive = false;
    692c:	74a6      	strb	r6, [r4, #18]
}
    692e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    6932:	2500      	movs	r5, #0
}
    6934:	4628      	mov	r0, r5
    6936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    693a:	bf00      	nop

0000693c <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    693c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6940:	4f20      	ldr	r7, [pc, #128]	; (69c4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    6942:	4604      	mov	r4, r0
    6944:	4688      	mov	r8, r1
    6946:	4691      	mov	r9, r2
    6948:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    694a:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
    694c:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    6950:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    6952:	e003      	b.n	695c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    6954:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    6956:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    6958:	041b      	lsls	r3, r3, #16
    695a:	d40d      	bmi.n	6978 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    695c:	4630      	mov	r0, r6
    695e:	f002 f86d 	bl	8a3c <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    6962:	28ff      	cmp	r0, #255	; 0xff
    6964:	7520      	strb	r0, [r4, #20]
    6966:	d0f5      	beq.n	6954 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    6968:	28fe      	cmp	r0, #254	; 0xfe
    696a:	d01a      	beq.n	69a2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    696c:	2318      	movs	r3, #24
  if (m_spiActive) {
    696e:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
    6970:	7463      	strb	r3, [r4, #17]
    6972:	b930      	cbnz	r0, 6982 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    6974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6978:	231d      	movs	r3, #29
  if (m_spiActive) {
    697a:	7ca0      	ldrb	r0, [r4, #18]
    697c:	7463      	strb	r3, [r4, #17]
    697e:	2800      	cmp	r0, #0
    6980:	d0f8      	beq.n	6974 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
    6982:	7c20      	ldrb	r0, [r4, #16]
    6984:	2101      	movs	r1, #1
    6986:	f001 ff85 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    698a:	21ff      	movs	r1, #255	; 0xff
    698c:	4630      	mov	r0, r6
    698e:	f002 f873 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    6992:	4630      	mov	r0, r6
    6994:	f002 f826 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    6998:	2300      	movs	r3, #0
  return false;
    699a:	4618      	mov	r0, r3
    m_spiActive = false;
    699c:	74a3      	strb	r3, [r4, #18]
}
    699e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    69a2:	464a      	mov	r2, r9
    69a4:	4641      	mov	r1, r8
    69a6:	4630      	mov	r0, r6
    69a8:	f002 f854 	bl	8a54 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    69ac:	7520      	strb	r0, [r4, #20]
    69ae:	b938      	cbnz	r0, 69c0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    69b0:	4630      	mov	r0, r6
    69b2:	f002 f843 	bl	8a3c <SdSpiArduinoDriver::receive()>
    69b6:	4630      	mov	r0, r6
    69b8:	f002 f840 	bl	8a3c <SdSpiArduinoDriver::receive()>
  return true;
    69bc:	2001      	movs	r0, #1
    69be:	e7d9      	b.n	6974 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    69c0:	2325      	movs	r3, #37	; 0x25
    69c2:	e7d4      	b.n	696e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    69c4:	20009600 	.word	0x20009600

000069c8 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    69c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    69ca:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    69cc:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    69ce:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    69d0:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    69d2:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    69d4:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    69d6:	f000 f85b 	bl	6a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    69da:	b9b0      	cbnz	r0, 6a0a <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    69dc:	7ca6      	ldrb	r6, [r4, #18]
    69de:	b91e      	cbnz	r6, 69e8 <SharedSpiCard::readStop()+0x20>
  return true;
    69e0:	2601      	movs	r6, #1
}
    69e2:	4630      	mov	r0, r6
    69e4:	b003      	add	sp, #12
    69e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    69e8:	4605      	mov	r5, r0
    69ea:	2101      	movs	r1, #1
    69ec:	7c20      	ldrb	r0, [r4, #16]
    69ee:	f001 ff51 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    69f2:	1d20      	adds	r0, r4, #4
    69f4:	21ff      	movs	r1, #255	; 0xff
    69f6:	9001      	str	r0, [sp, #4]
    69f8:	f002 f83e 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    69fc:	9801      	ldr	r0, [sp, #4]
    69fe:	f001 fff1 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    6a02:	4630      	mov	r0, r6
    m_spiActive = false;
    6a04:	74a5      	strb	r5, [r4, #18]
}
    6a06:	b003      	add	sp, #12
    6a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    6a0a:	2309      	movs	r3, #9
  if (m_spiActive) {
    6a0c:	7ca6      	ldrb	r6, [r4, #18]
    6a0e:	7463      	strb	r3, [r4, #17]
    6a10:	2e00      	cmp	r6, #0
    6a12:	d0e6      	beq.n	69e2 <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    6a14:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    6a16:	7c20      	ldrb	r0, [r4, #16]
    6a18:	2101      	movs	r1, #1
}
    6a1a:	463e      	mov	r6, r7
    6a1c:	f001 ff3a 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    6a20:	21ff      	movs	r1, #255	; 0xff
    6a22:	4628      	mov	r0, r5
    6a24:	f002 f828 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    6a28:	4628      	mov	r0, r5
    6a2a:	f001 ffdb 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
}
    6a2e:	4630      	mov	r0, r6
    m_spiActive = false;
    6a30:	74a7      	strb	r7, [r4, #18]
}
    6a32:	b003      	add	sp, #12
    6a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a36:	bf00      	nop

00006a38 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    6a38:	7cc2      	ldrb	r2, [r0, #19]
    6a3a:	2a02      	cmp	r2, #2
    6a3c:	d003      	beq.n	6a46 <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    6a3e:	2a01      	cmp	r2, #1
    6a40:	d004      	beq.n	6a4c <SharedSpiCard::syncDevice()+0x14>
}
    6a42:	2001      	movs	r0, #1
    6a44:	4770      	bx	lr
    return writeStop();
    6a46:	6803      	ldr	r3, [r0, #0]
    6a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    6a4a:	4718      	bx	r3
    return readStop();
    6a4c:	f7ff bfbc 	b.w	69c8 <SharedSpiCard::readStop()>

00006a50 <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    6a50:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    6a52:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    6a54:	460d      	mov	r5, r1
    6a56:	490d      	ldr	r1, [pc, #52]	; (6a8c <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
    6a58:	4604      	mov	r4, r0
  if (!syncDevice()) {
    6a5a:	6a1a      	ldr	r2, [r3, #32]
    6a5c:	428a      	cmp	r2, r1
    6a5e:	d10c      	bne.n	6a7a <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
    6a60:	7cc2      	ldrb	r2, [r0, #19]
    6a62:	2a02      	cmp	r2, #2
    6a64:	d004      	beq.n	6a70 <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
    6a66:	2a01      	cmp	r2, #1
    6a68:	d00b      	beq.n	6a82 <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
    6a6a:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    6a6c:	7725      	strb	r5, [r4, #28]
}
    6a6e:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
    6a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    6a72:	4798      	blx	r3
  if (!syncDevice()) {
    6a74:	2800      	cmp	r0, #0
    6a76:	d1f8      	bne.n	6a6a <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
    6a78:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
    6a7a:	4790      	blx	r2
    6a7c:	2800      	cmp	r0, #0
    6a7e:	d0fb      	beq.n	6a78 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    6a80:	e7f3      	b.n	6a6a <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
    6a82:	f7ff ffa1 	bl	69c8 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    6a86:	2800      	cmp	r0, #0
    6a88:	d0f6      	beq.n	6a78 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    6a8a:	e7ee      	b.n	6a6a <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    6a8c:	00006a39 	.word	0x00006a39

00006a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    6a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    6a94:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    6a96:	b082      	sub	sp, #8
    6a98:	460f      	mov	r7, r1
    6a9a:	4935      	ldr	r1, [pc, #212]	; (6b70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
    6a9c:	9201      	str	r2, [sp, #4]
    6a9e:	4606      	mov	r6, r0
  if (!syncDevice()) {
    6aa0:	6a1a      	ldr	r2, [r3, #32]
    6aa2:	428a      	cmp	r2, r1
    6aa4:	d15e      	bne.n	6b64 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
    6aa6:	7cc2      	ldrb	r2, [r0, #19]
    6aa8:	2a02      	cmp	r2, #2
    6aaa:	d041      	beq.n	6b30 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
    6aac:	2a01      	cmp	r2, #1
    6aae:	d05b      	beq.n	6b68 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
    6ab0:	7cb4      	ldrb	r4, [r6, #18]
    6ab2:	2c00      	cmp	r4, #0
    6ab4:	d047      	beq.n	6b46 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
    6ab6:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
    6ab8:	2f0c      	cmp	r7, #12
    6aba:	d011      	beq.n	6ae0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    6abc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6b74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
    6ac0:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
    6ac4:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    6ac8:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    6aca:	e004      	b.n	6ad6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
    6acc:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    6ad0:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    6ad2:	041a      	lsls	r2, r3, #16
    6ad4:	d434      	bmi.n	6b40 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
    6ad6:	4628      	mov	r0, r5
    6ad8:	f001 ffb0 	bl	8a3c <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    6adc:	28ff      	cmp	r0, #255	; 0xff
    6ade:	d1f5      	bne.n	6acc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
    6ae0:	f10d 0804 	add.w	r8, sp, #4
    6ae4:	ac02      	add	r4, sp, #8
    6ae6:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    6aea:	4628      	mov	r0, r5
    6aec:	f001 ffc4 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    6af0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    6af4:	4628      	mov	r0, r5
    6af6:	f001 ffbf 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    6afa:	45a0      	cmp	r8, r4
    6afc:	d1f8      	bne.n	6af0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    6afe:	2f00      	cmp	r7, #0
    6b00:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    6b02:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    6b06:	bf0c      	ite	eq
    6b08:	2195      	moveq	r1, #149	; 0x95
    6b0a:	2187      	movne	r1, #135	; 0x87
    6b0c:	f001 ffb4 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    6b10:	4628      	mov	r0, r5
    6b12:	f001 ff93 	bl	8a3c <SdSpiArduinoDriver::receive()>
    6b16:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
    6b18:	3c01      	subs	r4, #1
    6b1a:	f001 ff8f 	bl	8a3c <SdSpiArduinoDriver::receive()>
    6b1e:	0603      	lsls	r3, r0, #24
    6b20:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
    6b22:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    6b24:	d501      	bpl.n	6b2a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    6b26:	2c00      	cmp	r4, #0
    6b28:	d1f5      	bne.n	6b16 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
    6b2a:	b002      	add	sp, #8
    6b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    6b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    6b32:	4798      	blx	r3
  if (!syncDevice()) {
    6b34:	2800      	cmp	r0, #0
    6b36:	d1bb      	bne.n	6ab0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    6b38:	20ff      	movs	r0, #255	; 0xff
}
    6b3a:	b002      	add	sp, #8
    6b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    6b40:	2f00      	cmp	r7, #0
    6b42:	d0cd      	beq.n	6ae0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    6b44:	e7f8      	b.n	6b38 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
    6b46:	1d35      	adds	r5, r6, #4
    6b48:	4628      	mov	r0, r5
    6b4a:	f001 ff2d 	bl	89a8 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    6b4e:	4621      	mov	r1, r4
    6b50:	7c30      	ldrb	r0, [r6, #16]
    6b52:	f001 fe9f 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    6b56:	21ff      	movs	r1, #255	; 0xff
    6b58:	4628      	mov	r0, r5
    6b5a:	f001 ff8d 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    6b5e:	2301      	movs	r3, #1
    6b60:	74b3      	strb	r3, [r6, #18]
}
    6b62:	e7a9      	b.n	6ab8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    6b64:	4790      	blx	r2
    6b66:	e7e5      	b.n	6b34 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
    6b68:	f7ff ff2e 	bl	69c8 <SharedSpiCard::readStop()>
    6b6c:	e7e2      	b.n	6b34 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    6b6e:	bf00      	nop
    6b70:	00006a39 	.word	0x00006a39
    6b74:	20009600 	.word	0x20009600

00006b78 <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    6b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b7c:	b088      	sub	sp, #32
    6b7e:	4605      	mov	r5, r0
  m_spiActive = false;
    6b80:	f04f 0800 	mov.w	r8, #0
    6b84:	4617      	mov	r7, r2
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    6b86:	ac01      	add	r4, sp, #4
    m_spiDriver.begin(spiConfig);
    6b88:	1d2e      	adds	r6, r5, #4
  m_spiActive = false;
    6b8a:	f885 8012 	strb.w	r8, [r5, #18]
  m_errorCode = SD_CARD_ERROR_NONE;
    6b8e:	f885 8011 	strb.w	r8, [r5, #17]
  m_type = 0;
    6b92:	f885 8015 	strb.w	r8, [r5, #21]
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    6b96:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    6b9a:	f89d 0004 	ldrb.w	r0, [sp, #4]
  m_csPin = spiConfig.csPin;
    6b9e:	7428      	strb	r0, [r5, #16]
  sdCsInit(m_csPin);
    6ba0:	f001 fe74 	bl	888c <sdCsInit(unsigned char)>
    sdCsWrite(m_csPin, true);
    6ba4:	2101      	movs	r1, #1
    6ba6:	7c28      	ldrb	r0, [r5, #16]
    6ba8:	f001 fe74 	bl	8894 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    6bac:	496c      	ldr	r1, [pc, #432]	; (6d60 <SharedSpiCard::begin(SdSpiConfig)+0x1e8>)
    6bae:	2307      	movs	r3, #7
    6bb0:	e9c5 1302 	strd	r1, r3, [r5, #8]
  spiBegin(spiConfig);
    6bb4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    6bb8:	ab05      	add	r3, sp, #20
    6bba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    m_spiDriver.begin(spiConfig);
    6bbe:	4630      	mov	r0, r6
    6bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
    6bc2:	f001 fefb 	bl	89bc <SdSpiArduinoDriver::begin(SdSpiConfig)>
  if (!m_spiActive) {
    6bc6:	7cac      	ldrb	r4, [r5, #18]
  m_state = IDLE_STATE;
    6bc8:	f885 8013 	strb.w	r8, [r5, #19]
  if (!m_spiActive) {
    6bcc:	2c00      	cmp	r4, #0
    6bce:	d067      	beq.n	6ca0 <SharedSpiCard::begin(SdSpiConfig)+0x128>
    sdCsWrite(m_csPin, true);
    6bd0:	240a      	movs	r4, #10
    6bd2:	2101      	movs	r1, #1
    6bd4:	7c28      	ldrb	r0, [r5, #16]
    6bd6:	f001 fe5d 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    6bda:	21ff      	movs	r1, #255	; 0xff
    6bdc:	4630      	mov	r0, r6
    6bde:	f001 ff4b 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
  for (uint8_t i = 0; i < 10; i++) {
    6be2:	1e61      	subs	r1, r4, #1
    6be4:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
    6be8:	d1f7      	bne.n	6bda <SharedSpiCard::begin(SdSpiConfig)+0x62>
    sdCsWrite(m_csPin, false);
    6bea:	4621      	mov	r1, r4
    6bec:	240a      	movs	r4, #10
    6bee:	7c28      	ldrb	r0, [r5, #16]
    6bf0:	f001 fe50 	bl	8894 <sdCsWrite(unsigned char, bool)>
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    6bf4:	2200      	movs	r2, #0
    6bf6:	4628      	mov	r0, r5
    6bf8:	4611      	mov	r1, r2
    6bfa:	f7ff ff49 	bl	6a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    6bfe:	2801      	cmp	r0, #1
    if (i == SD_CMD0_RETRY) {
    6c00:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    6c04:	4604      	mov	r4, r0
    6c06:	d00a      	beq.n	6c1e <SharedSpiCard::begin(SdSpiConfig)+0xa6>
    if (i == SD_CMD0_RETRY) {
    6c08:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    6c0c:	d1f2      	bne.n	6bf4 <SharedSpiCard::begin(SdSpiConfig)+0x7c>
    6c0e:	2301      	movs	r3, #1
  if (m_spiActive) {
    6c10:	7ca8      	ldrb	r0, [r5, #18]
    m_errorCode = code;
    6c12:	746b      	strb	r3, [r5, #17]
    6c14:	2800      	cmp	r0, #0
    6c16:	d151      	bne.n	6cbc <SharedSpiCard::begin(SdSpiConfig)+0x144>
}
    6c18:	b008      	add	sp, #32
    6c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    6c1e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    6c22:	2108      	movs	r1, #8
    6c24:	4628      	mov	r0, r5
    6c26:	f7ff ff33 	bl	6a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    6c2a:	0742      	lsls	r2, r0, #29
    6c2c:	d557      	bpl.n	6cde <SharedSpiCard::begin(SdSpiConfig)+0x166>
    m_type = value;
    6c2e:	756c      	strb	r4, [r5, #21]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    6c30:	682b      	ldr	r3, [r5, #0]
    6c32:	f8df a130 	ldr.w	sl, [pc, #304]	; 6d64 <SharedSpiCard::begin(SdSpiConfig)+0x1ec>
    6c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    6c38:	4553      	cmp	r3, sl
    6c3a:	d161      	bne.n	6d00 <SharedSpiCard::begin(SdSpiConfig)+0x188>
    return m_type;
    6c3c:	7d68      	ldrb	r0, [r5, #21]
    6c3e:	f1a0 0402 	sub.w	r4, r0, #2
    6c42:	f8df 9124 	ldr.w	r9, [pc, #292]	; 6d68 <SharedSpiCard::begin(SdSpiConfig)+0x1f0>
    6c46:	fab4 f484 	clz	r4, r4
    6c4a:	f8d9 3000 	ldr.w	r3, [r9]
    6c4e:	0964      	lsrs	r4, r4, #5
    m_endTime = ms + millis16();
    6c50:	f503 68fa 	add.w	r8, r3, #2000	; 0x7d0
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    6c54:	07a4      	lsls	r4, r4, #30
    m_endTime = ms + millis16();
    6c56:	fa1f f888 	uxth.w	r8, r8
  }
    6c5a:	e005      	b.n	6c68 <SharedSpiCard::begin(SdSpiConfig)+0xf0>
    6c5c:	f8d9 3000 	ldr.w	r3, [r9]
    return (int16_t)(m_endTime - millis16()) < 0;
    6c60:	eba8 0303 	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    6c64:	041b      	lsls	r3, r3, #16
    6c66:	d449      	bmi.n	6cfc <SharedSpiCard::begin(SdSpiConfig)+0x184>
    cardCommand(CMD55, 0);
    6c68:	2137      	movs	r1, #55	; 0x37
    6c6a:	2200      	movs	r2, #0
    6c6c:	4628      	mov	r0, r5
    6c6e:	f7ff ff0f 	bl	6a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    6c72:	4622      	mov	r2, r4
    6c74:	2129      	movs	r1, #41	; 0x29
    6c76:	4628      	mov	r0, r5
    6c78:	f7ff ff0a 	bl	6a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    6c7c:	2800      	cmp	r0, #0
    6c7e:	d1ed      	bne.n	6c5c <SharedSpiCard::begin(SdSpiConfig)+0xe4>
  if (type() == SD_CARD_TYPE_SD2) {
    6c80:	682b      	ldr	r3, [r5, #0]
    6c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    6c84:	4553      	cmp	r3, sl
    6c86:	d165      	bne.n	6d54 <SharedSpiCard::begin(SdSpiConfig)+0x1dc>
    return m_type;
    6c88:	7d68      	ldrb	r0, [r5, #21]
    6c8a:	2802      	cmp	r0, #2
    6c8c:	d049      	beq.n	6d22 <SharedSpiCard::begin(SdSpiConfig)+0x1aa>
  if (m_spiActive) {
    6c8e:	7cab      	ldrb	r3, [r5, #18]
    6c90:	bbcb      	cbnz	r3, 6d06 <SharedSpiCard::begin(SdSpiConfig)+0x18e>
    6c92:	2307      	movs	r3, #7
  return true;
    6c94:	2001      	movs	r0, #1
    6c96:	e9c5 7302 	strd	r7, r3, [r5, #8]
}
    6c9a:	b008      	add	sp, #32
    6c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_spiDriver.activate();
    6ca0:	4630      	mov	r0, r6
    6ca2:	f001 fe81 	bl	89a8 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    6ca6:	4621      	mov	r1, r4
    6ca8:	7c28      	ldrb	r0, [r5, #16]
    6caa:	f001 fdf3 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    6cae:	21ff      	movs	r1, #255	; 0xff
    6cb0:	4630      	mov	r0, r6
    6cb2:	f001 fee1 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    6cb6:	2301      	movs	r3, #1
    6cb8:	74ab      	strb	r3, [r5, #18]
}
    6cba:	e789      	b.n	6bd0 <SharedSpiCard::begin(SdSpiConfig)+0x58>
    sdCsWrite(m_csPin, true);
    6cbc:	7c28      	ldrb	r0, [r5, #16]
    6cbe:	2101      	movs	r1, #1
    6cc0:	f001 fde8 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    6cc4:	21ff      	movs	r1, #255	; 0xff
    6cc6:	4630      	mov	r0, r6
    6cc8:	f001 fed6 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    6ccc:	4630      	mov	r0, r6
    6cce:	f001 fe89 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    6cd2:	2300      	movs	r3, #0
  return false;
    6cd4:	4618      	mov	r0, r3
    m_spiActive = false;
    6cd6:	74ab      	strb	r3, [r5, #18]
}
    6cd8:	b008      	add	sp, #32
    6cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_type = value;
    6cde:	2302      	movs	r3, #2
    6ce0:	2404      	movs	r4, #4
    6ce2:	756b      	strb	r3, [r5, #21]
    return m_spiDriver.receive();
    6ce4:	4630      	mov	r0, r6
    6ce6:	f001 fea9 	bl	8a3c <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 4; i++) {
    6cea:	1e63      	subs	r3, r4, #1
      m_status = spiReceive();
    6cec:	7528      	strb	r0, [r5, #20]
    for (uint8_t i = 0; i < 4; i++) {
    6cee:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    6cf2:	d1f7      	bne.n	6ce4 <SharedSpiCard::begin(SdSpiConfig)+0x16c>
    if (m_status != 0XAA) {
    6cf4:	28aa      	cmp	r0, #170	; 0xaa
    6cf6:	d09b      	beq.n	6c30 <SharedSpiCard::begin(SdSpiConfig)+0xb8>
    6cf8:	2306      	movs	r3, #6
    6cfa:	e789      	b.n	6c10 <SharedSpiCard::begin(SdSpiConfig)+0x98>
    6cfc:	2317      	movs	r3, #23
    6cfe:	e787      	b.n	6c10 <SharedSpiCard::begin(SdSpiConfig)+0x98>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    6d00:	4628      	mov	r0, r5
    6d02:	4798      	blx	r3
    6d04:	e79b      	b.n	6c3e <SharedSpiCard::begin(SdSpiConfig)+0xc6>
    sdCsWrite(m_csPin, true);
    6d06:	2101      	movs	r1, #1
    6d08:	7c28      	ldrb	r0, [r5, #16]
    6d0a:	f001 fdc3 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    6d0e:	21ff      	movs	r1, #255	; 0xff
    6d10:	4630      	mov	r0, r6
    6d12:	f001 feb1 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    6d16:	4630      	mov	r0, r6
    6d18:	f001 fe64 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    6d1c:	2300      	movs	r3, #0
    6d1e:	74ab      	strb	r3, [r5, #18]
}
    6d20:	e7b7      	b.n	6c92 <SharedSpiCard::begin(SdSpiConfig)+0x11a>
    if (cardCommand(CMD58, 0)) {
    6d22:	2200      	movs	r2, #0
    6d24:	213a      	movs	r1, #58	; 0x3a
    6d26:	4628      	mov	r0, r5
    6d28:	f7ff feb2 	bl	6a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    6d2c:	b9a8      	cbnz	r0, 6d5a <SharedSpiCard::begin(SdSpiConfig)+0x1e2>
    return m_spiDriver.receive();
    6d2e:	4630      	mov	r0, r6
    6d30:	f001 fe84 	bl	8a3c <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    6d34:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    6d38:	28c0      	cmp	r0, #192	; 0xc0
    6d3a:	d101      	bne.n	6d40 <SharedSpiCard::begin(SdSpiConfig)+0x1c8>
    m_type = value;
    6d3c:	2303      	movs	r3, #3
    6d3e:	756b      	strb	r3, [r5, #21]
    return m_spiDriver.receive();
    6d40:	4630      	mov	r0, r6
    6d42:	f001 fe7b 	bl	8a3c <SdSpiArduinoDriver::receive()>
    6d46:	4630      	mov	r0, r6
    6d48:	f001 fe78 	bl	8a3c <SdSpiArduinoDriver::receive()>
    6d4c:	4630      	mov	r0, r6
    6d4e:	f001 fe75 	bl	8a3c <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    6d52:	e79c      	b.n	6c8e <SharedSpiCard::begin(SdSpiConfig)+0x116>
  if (type() == SD_CARD_TYPE_SD2) {
    6d54:	4628      	mov	r0, r5
    6d56:	4798      	blx	r3
    6d58:	e797      	b.n	6c8a <SharedSpiCard::begin(SdSpiConfig)+0x112>
    6d5a:	2312      	movs	r3, #18
    6d5c:	e758      	b.n	6c10 <SharedSpiCard::begin(SdSpiConfig)+0x98>
    6d5e:	bf00      	nop
    6d60:	00061a80 	.word	0x00061a80
    6d64:	00006735 	.word	0x00006735
    6d68:	20009600 	.word	0x20009600

00006d6c <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    6d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    6d6e:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    6d70:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    6d72:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    6d74:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    6d76:	f7ff fe8b 	bl	6a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    6d7a:	b9e0      	cbnz	r0, 6db6 <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
    6d7c:	1d37      	adds	r7, r6, #4
    6d7e:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    6d80:	4638      	mov	r0, r7
    6d82:	f001 fe5b 	bl	8a3c <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    6d86:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    6d8a:	42a5      	cmp	r5, r4
    6d8c:	d1f8      	bne.n	6d80 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    6d8e:	7cb4      	ldrb	r4, [r6, #18]
    6d90:	b914      	cbnz	r4, 6d98 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    6d92:	2401      	movs	r4, #1
}
    6d94:	4620      	mov	r0, r4
    6d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    6d98:	7c30      	ldrb	r0, [r6, #16]
    6d9a:	2101      	movs	r1, #1
    6d9c:	f001 fd7a 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    6da0:	21ff      	movs	r1, #255	; 0xff
    6da2:	4638      	mov	r0, r7
    6da4:	f001 fe68 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    6da8:	4638      	mov	r0, r7
    6daa:	f001 fe1b 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    6dae:	2300      	movs	r3, #0
}
    6db0:	4620      	mov	r0, r4
    m_spiActive = false;
    6db2:	74b3      	strb	r3, [r6, #18]
}
    6db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    6db6:	2312      	movs	r3, #18
  if (m_spiActive) {
    6db8:	7cb4      	ldrb	r4, [r6, #18]
    6dba:	7473      	strb	r3, [r6, #17]
    6dbc:	2c00      	cmp	r4, #0
    6dbe:	d0e9      	beq.n	6d94 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    6dc0:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
    6dc2:	7c30      	ldrb	r0, [r6, #16]
    6dc4:	2101      	movs	r1, #1
    6dc6:	f001 fd65 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    6dca:	21ff      	movs	r1, #255	; 0xff
    6dcc:	4620      	mov	r0, r4
    6dce:	f001 fe53 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    6dd2:	4620      	mov	r0, r4
    6dd4:	f001 fe06 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    6dd8:	2300      	movs	r3, #0
  return false;
    6dda:	461c      	mov	r4, r3
    m_spiActive = false;
    6ddc:	74b3      	strb	r3, [r6, #18]
}
    6dde:	4620      	mov	r0, r4
    6de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6de2:	bf00      	nop

00006de4 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    6de4:	b570      	push	{r4, r5, r6, lr}
    6de6:	4616      	mov	r6, r2
    6de8:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    6dea:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    6dec:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    6dee:	f7ff fe4f 	bl	6a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    6df2:	b1b0      	cbz	r0, 6e22 <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    6df4:	231b      	movs	r3, #27
    6df6:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    6df8:	7ca0      	ldrb	r0, [r4, #18]
    6dfa:	b908      	cbnz	r0, 6e00 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    6dfc:	b002      	add	sp, #8
    6dfe:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    6e00:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    6e02:	7c20      	ldrb	r0, [r4, #16]
    6e04:	2101      	movs	r1, #1
    6e06:	f001 fd45 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    6e0a:	21ff      	movs	r1, #255	; 0xff
    6e0c:	4628      	mov	r0, r5
    6e0e:	f001 fe33 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    6e12:	4628      	mov	r0, r5
    6e14:	f001 fde6 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    6e18:	2300      	movs	r3, #0
  return false;
    6e1a:	4618      	mov	r0, r3
    m_spiActive = false;
    6e1c:	74a3      	strb	r3, [r4, #18]
}
    6e1e:	b002      	add	sp, #8
    6e20:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    6e22:	4605      	mov	r5, r0
    6e24:	2210      	movs	r2, #16
    6e26:	4631      	mov	r1, r6
    6e28:	4620      	mov	r0, r4
    6e2a:	f7ff fd87 	bl	693c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    6e2e:	2800      	cmp	r0, #0
    6e30:	d0e2      	beq.n	6df8 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    6e32:	7ca6      	ldrb	r6, [r4, #18]
    6e34:	2e00      	cmp	r6, #0
    6e36:	d0e1      	beq.n	6dfc <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
    6e38:	7c20      	ldrb	r0, [r4, #16]
    6e3a:	2101      	movs	r1, #1
    6e3c:	f001 fd2a 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    6e40:	1d20      	adds	r0, r4, #4
    6e42:	21ff      	movs	r1, #255	; 0xff
    6e44:	9001      	str	r0, [sp, #4]
    6e46:	f001 fe17 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    6e4a:	9801      	ldr	r0, [sp, #4]
    6e4c:	f001 fdca 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
}
    6e50:	4630      	mov	r0, r6
    m_spiActive = false;
    6e52:	74a5      	strb	r5, [r4, #18]
}
    6e54:	b002      	add	sp, #8
    6e56:	bd70      	pop	{r4, r5, r6, pc}

00006e58 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    6e58:	6803      	ldr	r3, [r0, #0]
    6e5a:	4a25      	ldr	r2, [pc, #148]	; (6ef0 <SharedSpiCard::sectorCount()+0x98>)
    6e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    6e5e:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    6e60:	b500      	push	{lr}
    6e62:	b085      	sub	sp, #20
    6e64:	d10f      	bne.n	6e86 <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
    6e66:	466a      	mov	r2, sp
    6e68:	2109      	movs	r1, #9
    6e6a:	f7ff ffbb 	bl	6de4 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    6e6e:	b138      	cbz	r0, 6e80 <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    6e70:	f89d 3000 	ldrb.w	r3, [sp]
    6e74:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    6e78:	d008      	beq.n	6e8c <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    6e7a:	2b40      	cmp	r3, #64	; 0x40
    6e7c:	d027      	beq.n	6ece <SharedSpiCard::sectorCount()+0x76>
    6e7e:	2000      	movs	r0, #0
}
    6e80:	b005      	add	sp, #20
    6e82:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    6e86:	4669      	mov	r1, sp
    6e88:	4798      	blx	r3
    6e8a:	e7f0      	b.n	6e6e <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    6e8c:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
    6e90:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    6e94:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
    6e98:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    6e9c:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
    6ea0:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
    6ea2:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    6ea6:	0080      	lsls	r0, r0, #2
    6ea8:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    6eac:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    6eb0:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    6eb4:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    6eb8:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    6ebc:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    6ec0:	4413      	add	r3, r2
    6ec2:	3001      	adds	r0, #1
    6ec4:	3b07      	subs	r3, #7
    6ec6:	4098      	lsls	r0, r3
}
    6ec8:	b005      	add	sp, #20
    6eca:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    6ece:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    6ed2:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    6ed6:	3001      	adds	r0, #1
    6ed8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    6edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    6ee0:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    6ee4:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    6ee8:	0280      	lsls	r0, r0, #10
    6eea:	b005      	add	sp, #20
    6eec:	f85d fb04 	ldr.w	pc, [sp], #4
    6ef0:	00007215 	.word	0x00007215

00006ef4 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    6ef4:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    6ef6:	460a      	mov	r2, r1
    6ef8:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    6efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
    6efc:	b083      	sub	sp, #12
    6efe:	4d16      	ldr	r5, [pc, #88]	; (6f58 <SharedSpiCard::readStart(unsigned long)+0x64>)
    6f00:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    6f02:	42ab      	cmp	r3, r5
    6f04:	d124      	bne.n	6f50 <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
    6f06:	7d40      	ldrb	r0, [r0, #21]
    6f08:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    6f0a:	f04f 0112 	mov.w	r1, #18
    6f0e:	4620      	mov	r0, r4
    sector <<= 9;
    6f10:	bf18      	it	ne
    6f12:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    6f14:	f7ff fdbc 	bl	6a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    6f18:	b920      	cbnz	r0, 6f24 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    6f1a:	2301      	movs	r3, #1
  return true;
    6f1c:	4618      	mov	r0, r3
  m_state = READ_STATE;
    6f1e:	74e3      	strb	r3, [r4, #19]
}
    6f20:	b003      	add	sp, #12
    6f22:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    6f24:	230c      	movs	r3, #12
  if (m_spiActive) {
    6f26:	7ca0      	ldrb	r0, [r4, #18]
    6f28:	7463      	strb	r3, [r4, #17]
    6f2a:	2800      	cmp	r0, #0
    6f2c:	d0f8      	beq.n	6f20 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    6f2e:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    6f30:	7c20      	ldrb	r0, [r4, #16]
    6f32:	2101      	movs	r1, #1
    6f34:	f001 fcae 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    6f38:	21ff      	movs	r1, #255	; 0xff
    6f3a:	4628      	mov	r0, r5
    6f3c:	f001 fd9c 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    6f40:	4628      	mov	r0, r5
    6f42:	f001 fd4f 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    6f46:	2300      	movs	r3, #0
}
    6f48:	4618      	mov	r0, r3
    m_spiActive = false;
    6f4a:	74a3      	strb	r3, [r4, #18]
}
    6f4c:	b003      	add	sp, #12
    6f4e:	bd30      	pop	{r4, r5, pc}
    6f50:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    6f52:	4798      	blx	r3
    6f54:	9a01      	ldr	r2, [sp, #4]
    6f56:	e7d7      	b.n	6f08 <SharedSpiCard::readStart(unsigned long)+0x14>
    6f58:	00006735 	.word	0x00006735

00006f5c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    6f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f5e:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    6f60:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    6f62:	4606      	mov	r6, r0
    6f64:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    6f66:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    6f68:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    6f6a:	d102      	bne.n	6f72 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    6f6c:	6983      	ldr	r3, [r0, #24]
    6f6e:	428b      	cmp	r3, r1
    6f70:	d005      	beq.n	6f7e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
    6f72:	4629      	mov	r1, r5
    6f74:	4630      	mov	r0, r6
    6f76:	f7ff ffbd 	bl	6ef4 <SharedSpiCard::readStart(unsigned long)>
    6f7a:	b180      	cbz	r0, 6f9e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
    6f7c:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    6f7e:	b187      	cbz	r7, 6fa2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    6f80:	2500      	movs	r5, #0
    6f82:	e001      	b.n	6f88 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    6f84:	42af      	cmp	r7, r5
    6f86:	d00c      	beq.n	6fa2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
    6f88:	4621      	mov	r1, r4
    6f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
    6f8e:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    6f90:	3501      	adds	r5, #1
    6f92:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
    6f96:	f7ff fcd1 	bl	693c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    6f9a:	2800      	cmp	r0, #0
    6f9c:	d1f2      	bne.n	6f84 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
    6f9e:	2000      	movs	r0, #0
}
    6fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
    6fa2:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    6fa4:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    6fa6:	443b      	add	r3, r7
    6fa8:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    6faa:	2800      	cmp	r0, #0
    6fac:	d1f8      	bne.n	6fa0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    6fae:	4630      	mov	r0, r6
}
    6fb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    6fb4:	f7ff bd08 	b.w	69c8 <SharedSpiCard::readStop()>

00006fb8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    6fb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fbc:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    6fbe:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    6fc0:	4606      	mov	r6, r0
    6fc2:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    6fc4:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    6fc6:	4615      	mov	r5, r2
    6fc8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    6fcc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
    6fd0:	d102      	bne.n	6fd8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    6fd2:	6983      	ldr	r3, [r0, #24]
    6fd4:	428b      	cmp	r3, r1
    6fd6:	d005      	beq.n	6fe4 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    6fd8:	4621      	mov	r1, r4
    6fda:	4630      	mov	r0, r6
    6fdc:	f7ff ff8a 	bl	6ef4 <SharedSpiCard::readStart(unsigned long)>
    6fe0:	b1b0      	cbz	r0, 7010 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
    6fe2:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    6fe4:	f1bb 0f00 	cmp.w	fp, #0
    6fe8:	d015      	beq.n	7016 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
    6fea:	eb04 0a0b 	add.w	sl, r4, fp
    6fee:	e002      	b.n	6ff6 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
    6ff0:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
    6ff2:	45a2      	cmp	sl, r4
    6ff4:	d00f      	beq.n	7016 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
    6ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
    6ffa:	4629      	mov	r1, r5
    6ffc:	4630      	mov	r0, r6
    6ffe:	f7ff fc9d 	bl	693c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    7002:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
    7004:	4642      	mov	r2, r8
    7006:	4620      	mov	r0, r4
    7008:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
    700a:	3401      	adds	r4, #1
    if (readData(dst)) {
    700c:	2f00      	cmp	r7, #0
    700e:	d1ef      	bne.n	6ff0 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
    7010:	2000      	movs	r0, #0
}
    7012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
    7016:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    7018:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    701a:	445b      	add	r3, fp
    701c:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    701e:	2800      	cmp	r0, #0
    7020:	d1f7      	bne.n	7012 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    7022:	4630      	mov	r0, r6
}
    7024:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
    7028:	f7ff bcce 	b.w	69c8 <SharedSpiCard::readStop()>

0000702c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    702c:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    702e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    7032:	695f      	ldr	r7, [r3, #20]
    7034:	4b16      	ldr	r3, [pc, #88]	; (7090 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    7036:	429f      	cmp	r7, r3
    7038:	d11f      	bne.n	707a <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
    703a:	7cc3      	ldrb	r3, [r0, #19]
    703c:	4604      	mov	r4, r0
    703e:	460d      	mov	r5, r1
    7040:	4616      	mov	r6, r2
    7042:	2b01      	cmp	r3, #1
    7044:	d102      	bne.n	704c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    7046:	6983      	ldr	r3, [r0, #24]
    7048:	4299      	cmp	r1, r3
    704a:	d005      	beq.n	7058 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    704c:	4629      	mov	r1, r5
    704e:	4620      	mov	r0, r4
    7050:	f7ff ff50 	bl	6ef4 <SharedSpiCard::readStart(unsigned long)>
    7054:	b170      	cbz	r0, 7074 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
    7056:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
    7058:	f44f 7200 	mov.w	r2, #512	; 0x200
    705c:	4631      	mov	r1, r6
    705e:	4620      	mov	r0, r4
    7060:	f7ff fc6c 	bl	693c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    7064:	b130      	cbz	r0, 7074 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
    7066:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    7068:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    706a:	3301      	adds	r3, #1
    706c:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    706e:	b148      	cbz	r0, 7084 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    7070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    7074:	2000      	movs	r0, #0
}
    7076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    707a:	46bc      	mov	ip, r7
    707c:	2301      	movs	r3, #1
}
    707e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    7082:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    7084:	4620      	mov	r0, r4
}
    7086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    708a:	f7ff bc9d 	b.w	69c8 <SharedSpiCard::readStop()>
    708e:	bf00      	nop
    7090:	00006f5d 	.word	0x00006f5d

00007094 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    7094:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    7096:	460a      	mov	r2, r1
    7098:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    709a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
    709c:	b083      	sub	sp, #12
    709e:	4d16      	ldr	r5, [pc, #88]	; (70f8 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    70a0:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    70a2:	42ab      	cmp	r3, r5
    70a4:	d124      	bne.n	70f0 <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
    70a6:	7d40      	ldrb	r0, [r0, #21]
    70a8:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    70aa:	f04f 0119 	mov.w	r1, #25
    70ae:	4620      	mov	r0, r4
    sector <<= 9;
    70b0:	bf18      	it	ne
    70b2:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    70b4:	f7ff fcec 	bl	6a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    70b8:	b920      	cbnz	r0, 70c4 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    70ba:	2302      	movs	r3, #2
  return true;
    70bc:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    70be:	74e3      	strb	r3, [r4, #19]
}
    70c0:	b003      	add	sp, #12
    70c2:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    70c4:	230e      	movs	r3, #14
  if (m_spiActive) {
    70c6:	7ca0      	ldrb	r0, [r4, #18]
    70c8:	7463      	strb	r3, [r4, #17]
    70ca:	2800      	cmp	r0, #0
    70cc:	d0f8      	beq.n	70c0 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    70ce:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    70d0:	7c20      	ldrb	r0, [r4, #16]
    70d2:	2101      	movs	r1, #1
    70d4:	f001 fbde 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    70d8:	21ff      	movs	r1, #255	; 0xff
    70da:	4628      	mov	r0, r5
    70dc:	f001 fccc 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    70e0:	4628      	mov	r0, r5
    70e2:	f001 fc7f 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    70e6:	2300      	movs	r3, #0
}
    70e8:	4618      	mov	r0, r3
    m_spiActive = false;
    70ea:	74a3      	strb	r3, [r4, #18]
}
    70ec:	b003      	add	sp, #12
    70ee:	bd30      	pop	{r4, r5, pc}
    70f0:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    70f2:	4798      	blx	r3
    70f4:	9a01      	ldr	r2, [sp, #4]
    70f6:	e7d7      	b.n	70a8 <SharedSpiCard::writeStart(unsigned long)+0x14>
    70f8:	00006735 	.word	0x00006735

000070fc <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    70fc:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    70fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    7102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7104:	4617      	mov	r7, r2
    7106:	4a41      	ldr	r2, [pc, #260]	; (720c <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    7108:	b085      	sub	sp, #20
    710a:	4604      	mov	r4, r0
    710c:	460e      	mov	r6, r1
    710e:	4293      	cmp	r3, r2
    7110:	d145      	bne.n	719e <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
    7112:	466a      	mov	r2, sp
    7114:	2109      	movs	r1, #9
    7116:	f7ff fe65 	bl	6de4 <SharedSpiCard::readRegister(unsigned char, void*)>
    711a:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    711c:	b1b5      	cbz	r5, 714c <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
    711e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7122:	065a      	lsls	r2, r3, #25
    7124:	d518      	bpl.n	7158 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    7126:	7d63      	ldrb	r3, [r4, #21]
    7128:	2b03      	cmp	r3, #3
    712a:	d001      	beq.n	7130 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    712c:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    712e:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
    7130:	4632      	mov	r2, r6
    7132:	2120      	movs	r1, #32
    7134:	4620      	mov	r0, r4
    7136:	f7ff fcab 	bl	6a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    713a:	b928      	cbnz	r0, 7148 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
    713c:	463a      	mov	r2, r7
    713e:	2121      	movs	r1, #33	; 0x21
    7140:	4620      	mov	r0, r4
    7142:	f7ff fca5 	bl	6a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7146:	b370      	cbz	r0, 71a6 <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    7148:	2326      	movs	r3, #38	; 0x26
    714a:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    714c:	7ca5      	ldrb	r5, [r4, #18]
    714e:	b99d      	cbnz	r5, 7178 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    7150:	4628      	mov	r0, r5
    7152:	b005      	add	sp, #20
    7154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    7158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    715c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7160:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7162:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    7166:	1c7a      	adds	r2, r7, #1
    7168:	4332      	orrs	r2, r6
    716a:	4213      	tst	r3, r2
    716c:	d0db      	beq.n	7126 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    716e:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
    7170:	7ca5      	ldrb	r5, [r4, #18]
    7172:	7463      	strb	r3, [r4, #17]
    7174:	2d00      	cmp	r5, #0
    7176:	d0eb      	beq.n	7150 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    7178:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    717a:	7c20      	ldrb	r0, [r4, #16]
    717c:	2101      	movs	r1, #1
    717e:	f001 fb89 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7182:	21ff      	movs	r1, #255	; 0xff
    7184:	4628      	mov	r0, r5
    7186:	f001 fc77 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    718a:	4628      	mov	r0, r5
    718c:	f001 fc2a 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7190:	2300      	movs	r3, #0
  return false;
    7192:	461d      	mov	r5, r3
    m_spiActive = false;
    7194:	74a3      	strb	r3, [r4, #18]
}
    7196:	4628      	mov	r0, r5
    7198:	b005      	add	sp, #20
    719a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    719e:	4669      	mov	r1, sp
    71a0:	4798      	blx	r3
    71a2:	4605      	mov	r5, r0
    71a4:	e7ba      	b.n	711c <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
    71a6:	4602      	mov	r2, r0
    71a8:	2126      	movs	r1, #38	; 0x26
    71aa:	4620      	mov	r0, r4
    71ac:	f7ff fc70 	bl	6a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    71b0:	2800      	cmp	r0, #0
    71b2:	d1c9      	bne.n	7148 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    71b4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 7210 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
    71b8:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    71bc:	f104 0904 	add.w	r9, r4, #4
    71c0:	f8d8 3000 	ldr.w	r3, [r8]
    71c4:	441f      	add	r7, r3
    71c6:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
    71c8:	e004      	b.n	71d4 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    71ca:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    71ce:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    71d0:	041b      	lsls	r3, r3, #16
    71d2:	d417      	bmi.n	7204 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    71d4:	4648      	mov	r0, r9
    71d6:	f001 fc31 	bl	8a3c <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    71da:	28ff      	cmp	r0, #255	; 0xff
    71dc:	4606      	mov	r6, r0
    71de:	d1f4      	bne.n	71ca <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    71e0:	7ca3      	ldrb	r3, [r4, #18]
    71e2:	2b00      	cmp	r3, #0
    71e4:	d0b4      	beq.n	7150 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
    71e6:	2101      	movs	r1, #1
    71e8:	7c20      	ldrb	r0, [r4, #16]
  return true;
    71ea:	461d      	mov	r5, r3
    71ec:	f001 fb52 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    71f0:	4631      	mov	r1, r6
    71f2:	4648      	mov	r0, r9
    71f4:	f001 fc40 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    71f8:	4648      	mov	r0, r9
    71fa:	f001 fbf3 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    71fe:	2300      	movs	r3, #0
    7200:	74a3      	strb	r3, [r4, #18]
}
    7202:	e7a5      	b.n	7150 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    7204:	2328      	movs	r3, #40	; 0x28
    7206:	7463      	strb	r3, [r4, #17]
    goto fail;
    7208:	e7a0      	b.n	714c <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    720a:	bf00      	nop
    720c:	00007215 	.word	0x00007215
    7210:	20009600 	.word	0x20009600

00007214 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    7214:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    7216:	2200      	movs	r2, #0
    7218:	b082      	sub	sp, #8
    721a:	460e      	mov	r6, r1
    721c:	2109      	movs	r1, #9
    721e:	4604      	mov	r4, r0
    7220:	f7ff fc36 	bl	6a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7224:	b1b0      	cbz	r0, 7254 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    7226:	231b      	movs	r3, #27
    7228:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    722a:	7ca0      	ldrb	r0, [r4, #18]
    722c:	b908      	cbnz	r0, 7232 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
    722e:	b002      	add	sp, #8
    7230:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    7232:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    7234:	7c20      	ldrb	r0, [r4, #16]
    7236:	2101      	movs	r1, #1
    7238:	f001 fb2c 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    723c:	21ff      	movs	r1, #255	; 0xff
    723e:	4628      	mov	r0, r5
    7240:	f001 fc1a 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    7244:	4628      	mov	r0, r5
    7246:	f001 fbcd 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    724a:	2300      	movs	r3, #0
  return false;
    724c:	4618      	mov	r0, r3
    m_spiActive = false;
    724e:	74a3      	strb	r3, [r4, #18]
  }
    7250:	b002      	add	sp, #8
    7252:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    7254:	4605      	mov	r5, r0
    7256:	2210      	movs	r2, #16
    7258:	4631      	mov	r1, r6
    725a:	4620      	mov	r0, r4
    725c:	f7ff fb6e 	bl	693c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    7260:	2800      	cmp	r0, #0
    7262:	d0e2      	beq.n	722a <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    7264:	7ca6      	ldrb	r6, [r4, #18]
    7266:	2e00      	cmp	r6, #0
    7268:	d0e1      	beq.n	722e <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
    726a:	7c20      	ldrb	r0, [r4, #16]
    726c:	2101      	movs	r1, #1
    726e:	f001 fb11 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7272:	1d20      	adds	r0, r4, #4
    7274:	21ff      	movs	r1, #255	; 0xff
    7276:	9001      	str	r0, [sp, #4]
    7278:	f001 fbfe 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    727c:	9801      	ldr	r0, [sp, #4]
    727e:	f001 fbb1 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
}
    7282:	4630      	mov	r0, r6
    m_spiActive = false;
    7284:	74a5      	strb	r5, [r4, #18]
  }
    7286:	b002      	add	sp, #8
    7288:	bd70      	pop	{r4, r5, r6, pc}
    728a:	bf00      	nop

0000728c <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    728c:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    728e:	2200      	movs	r2, #0
    7290:	b082      	sub	sp, #8
    7292:	460e      	mov	r6, r1
    7294:	210a      	movs	r1, #10
    7296:	4604      	mov	r4, r0
    7298:	f7ff fbfa 	bl	6a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    729c:	b1b0      	cbz	r0, 72cc <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
    729e:	231b      	movs	r3, #27
    72a0:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    72a2:	7ca0      	ldrb	r0, [r4, #18]
    72a4:	b908      	cbnz	r0, 72aa <SharedSpiCard::readCID(CID*)+0x1e>
  }
    72a6:	b002      	add	sp, #8
    72a8:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    72aa:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    72ac:	7c20      	ldrb	r0, [r4, #16]
    72ae:	2101      	movs	r1, #1
    72b0:	f001 faf0 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    72b4:	21ff      	movs	r1, #255	; 0xff
    72b6:	4628      	mov	r0, r5
    72b8:	f001 fbde 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    72bc:	4628      	mov	r0, r5
    72be:	f001 fb91 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    72c2:	2300      	movs	r3, #0
  return false;
    72c4:	4618      	mov	r0, r3
    m_spiActive = false;
    72c6:	74a3      	strb	r3, [r4, #18]
  }
    72c8:	b002      	add	sp, #8
    72ca:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    72cc:	4605      	mov	r5, r0
    72ce:	2210      	movs	r2, #16
    72d0:	4631      	mov	r1, r6
    72d2:	4620      	mov	r0, r4
    72d4:	f7ff fb32 	bl	693c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    72d8:	2800      	cmp	r0, #0
    72da:	d0e2      	beq.n	72a2 <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
    72dc:	7ca6      	ldrb	r6, [r4, #18]
    72de:	2e00      	cmp	r6, #0
    72e0:	d0e1      	beq.n	72a6 <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
    72e2:	7c20      	ldrb	r0, [r4, #16]
    72e4:	2101      	movs	r1, #1
    72e6:	f001 fad5 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    72ea:	1d20      	adds	r0, r4, #4
    72ec:	21ff      	movs	r1, #255	; 0xff
    72ee:	9001      	str	r0, [sp, #4]
    72f0:	f001 fbc2 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    72f4:	9801      	ldr	r0, [sp, #4]
    72f6:	f001 fb75 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
}
    72fa:	4630      	mov	r0, r6
    m_spiActive = false;
    72fc:	74a5      	strb	r5, [r4, #18]
  }
    72fe:	b002      	add	sp, #8
    7300:	bd70      	pop	{r4, r5, r6, pc}
    7302:	bf00      	nop

00007304 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    7304:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    7306:	1d05      	adds	r5, r0, #4
    7308:	4616      	mov	r6, r2
    730a:	4604      	mov	r4, r0
    730c:	4628      	mov	r0, r5
    730e:	f001 fbb3 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    7312:	f44f 7200 	mov.w	r2, #512	; 0x200
    7316:	4631      	mov	r1, r6
    7318:	4628      	mov	r0, r5
    731a:	f001 fbb7 	bl	8a8c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    731e:	21ff      	movs	r1, #255	; 0xff
    7320:	4628      	mov	r0, r5
    7322:	f001 fba9 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    7326:	21ff      	movs	r1, #255	; 0xff
    7328:	4628      	mov	r0, r5
    732a:	f001 fba5 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    732e:	4628      	mov	r0, r5
    7330:	f001 fb84 	bl	8a3c <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7334:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    7338:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    733a:	2b05      	cmp	r3, #5
    733c:	d004      	beq.n	7348 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    733e:	2320      	movs	r3, #32
  if (m_spiActive) {
    7340:	7ca0      	ldrb	r0, [r4, #18]
    7342:	7463      	strb	r3, [r4, #17]
    7344:	b910      	cbnz	r0, 734c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    7346:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    7348:	2001      	movs	r0, #1
}
    734a:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
    734c:	7c20      	ldrb	r0, [r4, #16]
    734e:	2101      	movs	r1, #1
    7350:	f001 faa0 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7354:	21ff      	movs	r1, #255	; 0xff
    7356:	4628      	mov	r0, r5
    7358:	f001 fb8e 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    735c:	4628      	mov	r0, r5
    735e:	f001 fb41 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7362:	2300      	movs	r3, #0
}
    7364:	4618      	mov	r0, r3
    m_spiActive = false;
    7366:	74a3      	strb	r3, [r4, #18]
}
    7368:	bd70      	pop	{r4, r5, r6, pc}
    736a:	bf00      	nop

0000736c <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    736c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7370:	4d17      	ldr	r5, [pc, #92]	; (73d0 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    7372:	4606      	mov	r6, r0
    7374:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    7376:	f100 0804 	add.w	r8, r0, #4
    737a:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
    737c:	f504 7416 	add.w	r4, r4, #600	; 0x258
    7380:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    7382:	e003      	b.n	738c <SharedSpiCard::writeData(unsigned char const*)+0x20>
    7384:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    7386:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    7388:	041b      	lsls	r3, r3, #16
    738a:	d40c      	bmi.n	73a6 <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    738c:	4640      	mov	r0, r8
    738e:	f001 fb55 	bl	8a3c <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7392:	28ff      	cmp	r0, #255	; 0xff
    7394:	d1f6      	bne.n	7384 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    7396:	463a      	mov	r2, r7
    7398:	21fc      	movs	r1, #252	; 0xfc
    739a:	4630      	mov	r0, r6
    739c:	f7ff ffb2 	bl	7304 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    73a0:	b118      	cbz	r0, 73aa <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    73a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    73a6:	2324      	movs	r3, #36	; 0x24
    73a8:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
    73aa:	7cb0      	ldrb	r0, [r6, #18]
    73ac:	2800      	cmp	r0, #0
    73ae:	d0f8      	beq.n	73a2 <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
    73b0:	7c30      	ldrb	r0, [r6, #16]
    73b2:	2101      	movs	r1, #1
    73b4:	f001 fa6e 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    73b8:	21ff      	movs	r1, #255	; 0xff
    73ba:	4640      	mov	r0, r8
    73bc:	f001 fb5c 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    73c0:	4640      	mov	r0, r8
    73c2:	f001 fb0f 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    73c6:	2300      	movs	r3, #0
}
    73c8:	4618      	mov	r0, r3
    m_spiActive = false;
    73ca:	74b3      	strb	r3, [r6, #18]
}
    73cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73d0:	20009600 	.word	0x20009600

000073d4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    73d4:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    73d6:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    73d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    73da:	4616      	mov	r6, r2
    73dc:	4a22      	ldr	r2, [pc, #136]	; (7468 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    73de:	b082      	sub	sp, #8
    73e0:	4604      	mov	r4, r0
    73e2:	460d      	mov	r5, r1
    73e4:	4293      	cmp	r3, r2
    73e6:	d13c      	bne.n	7462 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
    73e8:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    73ea:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    73ec:	f04f 0118 	mov.w	r1, #24
    73f0:	4620      	mov	r0, r4
    sector <<= 9;
    73f2:	bf18      	it	ne
    73f4:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    73f6:	462a      	mov	r2, r5
    73f8:	f7ff fb4a 	bl	6a90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    73fc:	4605      	mov	r5, r0
    73fe:	b1b0      	cbz	r0, 742e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
    7400:	230d      	movs	r3, #13
    7402:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    7404:	7ca0      	ldrb	r0, [r4, #18]
    7406:	b908      	cbnz	r0, 740c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
    7408:	b002      	add	sp, #8
    740a:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    740c:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    740e:	7c20      	ldrb	r0, [r4, #16]
    7410:	2101      	movs	r1, #1
    7412:	f001 fa3f 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7416:	21ff      	movs	r1, #255	; 0xff
    7418:	4628      	mov	r0, r5
    741a:	f001 fb2d 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    741e:	4628      	mov	r0, r5
    7420:	f001 fae0 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7424:	2300      	movs	r3, #0
  return false;
    7426:	4618      	mov	r0, r3
    m_spiActive = false;
    7428:	74a3      	strb	r3, [r4, #18]
}
    742a:	b002      	add	sp, #8
    742c:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    742e:	4632      	mov	r2, r6
    7430:	21fe      	movs	r1, #254	; 0xfe
    7432:	4620      	mov	r0, r4
    7434:	f7ff ff66 	bl	7304 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    7438:	2800      	cmp	r0, #0
    743a:	d0e3      	beq.n	7404 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
    743c:	7ca6      	ldrb	r6, [r4, #18]
    743e:	2e00      	cmp	r6, #0
    7440:	d0e2      	beq.n	7408 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
    7442:	7c20      	ldrb	r0, [r4, #16]
    7444:	2101      	movs	r1, #1
    7446:	f001 fa25 	bl	8894 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    744a:	1d20      	adds	r0, r4, #4
    744c:	21ff      	movs	r1, #255	; 0xff
    744e:	9001      	str	r0, [sp, #4]
    7450:	f001 fb12 	bl	8a78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    7454:	9801      	ldr	r0, [sp, #4]
    7456:	f001 fac5 	bl	89e4 <SdSpiArduinoDriver::deactivate()>
  return true;
    745a:	4630      	mov	r0, r6
    m_spiActive = false;
    745c:	74a5      	strb	r5, [r4, #18]
}
    745e:	b002      	add	sp, #8
    7460:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    7462:	4798      	blx	r3
    7464:	e7c1      	b.n	73ea <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    7466:	bf00      	nop
    7468:	00006735 	.word	0x00006735

0000746c <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    746c:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    746e:	7f04      	ldrb	r4, [r0, #28]
    7470:	b134      	cbz	r4, 7480 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    7472:	6804      	ldr	r4, [r0, #0]
    7474:	2301      	movs	r3, #1
    7476:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    7478:	46a4      	mov	ip, r4
}
    747a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    747e:	4760      	bx	ip
}
    7480:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    7484:	f7ff bfa6 	b.w	73d4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

00007488 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    7488:	b510      	push	{r4, lr}
    748a:	b084      	sub	sp, #16
    748c:	4604      	mov	r4, r0
    748e:	f10d 0c04 	add.w	ip, sp, #4
    7492:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    7496:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
    749a:	f7ff fb6d 	bl	6b78 <SharedSpiCard::begin(SdSpiConfig)>
    749e:	b120      	cbz	r0, 74aa <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) {return opt & DEDICATED_SPI;}
    74a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    74a4:	f003 0301 	and.w	r3, r3, #1
    74a8:	7723      	strb	r3, [r4, #28]
}
    74aa:	b004      	add	sp, #16
    74ac:	bd10      	pop	{r4, pc}
    74ae:	bf00      	nop

000074b0 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    74b0:	2000      	movs	r0, #0
    74b2:	4770      	bx	lr

000074b4 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    74b4:	2000      	movs	r0, #0
    74b6:	4770      	bx	lr

000074b8 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    74b8:	2000      	movs	r0, #0
    74ba:	4770      	bx	lr

000074bc <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    74bc:	4770      	bx	lr
    74be:	bf00      	nop

000074c0 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    74c0:	4b08      	ldr	r3, [pc, #32]	; (74e4 <sdIrs()+0x24>)
    74c2:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    74c4:	4a08      	ldr	r2, [pc, #32]	; (74e8 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    74c6:	4809      	ldr	r0, [pc, #36]	; (74ec <sdIrs()+0x2c>)
static void sdIrs() {
    74c8:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    74ca:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    74cc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    74ce:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    74d0:	6812      	ldr	r2, [r2, #0]
}
    74d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    74d6:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    74d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    74da:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    74de:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    74e0:	7001      	strb	r1, [r0, #0]
}
    74e2:	4770      	bx	lr
    74e4:	402c0000 	.word	0x402c0000
    74e8:	200091b0 	.word	0x200091b0
    74ec:	20009626 	.word	0x20009626

000074f0 <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    74f0:	4b03      	ldr	r3, [pc, #12]	; (7500 <isBusyDat()+0x10>)
    74f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
    74f4:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    74f8:	f3c0 6000 	ubfx	r0, r0, #24, #1
    74fc:	4770      	bx	lr
    74fe:	bf00      	nop
    7500:	402c0000 	.word	0x402c0000

00007504 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    7504:	4b01      	ldr	r3, [pc, #4]	; (750c <isBusyDMA()+0x8>)
    7506:	7818      	ldrb	r0, [r3, #0]
}
    7508:	4770      	bx	lr
    750a:	bf00      	nop
    750c:	20009626 	.word	0x20009626

00007510 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    7510:	4a2b      	ldr	r2, [pc, #172]	; (75c0 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    7512:	4b2c      	ldr	r3, [pc, #176]	; (75c4 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    7514:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    7516:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    751a:	492b      	ldr	r1, [pc, #172]	; (75c8 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    751c:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    7520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    7524:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    7526:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    7528:	4c28      	ldr	r4, [pc, #160]	; (75cc <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    752a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    752e:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
    7532:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    7536:	089b      	lsrs	r3, r3, #2
    7538:	fbb1 fef3 	udiv	lr, r1, r3
    753c:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7540:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    7544:	d235      	bcs.n	75b2 <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    7546:	2301      	movs	r3, #1
    sdclkfs <<= 1;
    7548:	461e      	mov	r6, r3
    754a:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    754c:	011a      	lsls	r2, r3, #4
    754e:	fbbe f2f2 	udiv	r2, lr, r2
    7552:	4282      	cmp	r2, r0
    7554:	d901      	bls.n	755a <setSdclk(unsigned long)+0x4a>
    7556:	2bff      	cmp	r3, #255	; 0xff
    7558:	d9f6      	bls.n	7548 <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    755a:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    755e:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7560:	4290      	cmp	r0, r2
    7562:	d22a      	bcs.n	75ba <setSdclk(unsigned long)+0xaa>
    7564:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    7568:	2201      	movs	r2, #1
    756a:	e000      	b.n	756e <setSdclk(unsigned long)+0x5e>
    756c:	46a4      	mov	ip, r4
    dvs++;
    756e:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7570:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    7574:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7576:	fbbe f1fc 	udiv	r1, lr, ip
    757a:	4281      	cmp	r1, r0
    757c:	d917      	bls.n	75ae <setSdclk(unsigned long)+0x9e>
    757e:	2a10      	cmp	r2, #16
    7580:	d1f4      	bne.n	756c <setSdclk(unsigned long)+0x5c>
    7582:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    7584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    7588:	4911      	ldr	r1, [pc, #68]	; (75d0 <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    758a:	4a12      	ldr	r2, [pc, #72]	; (75d4 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    758c:	fb03 fc0c 	mul.w	ip, r3, ip
    7590:	fbbe f3fc 	udiv	r3, lr, ip
    7594:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    7596:	4b10      	ldr	r3, [pc, #64]	; (75d8 <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    7598:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    759a:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    759c:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    759e:	4333      	orrs	r3, r6
    75a0:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    75a4:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    75a6:	6a53      	ldr	r3, [r2, #36]	; 0x24
    75a8:	071b      	lsls	r3, r3, #28
    75aa:	d5fc      	bpl.n	75a6 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    75ac:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    75ae:	012d      	lsls	r5, r5, #4
    75b0:	e7e8      	b.n	7584 <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    75b2:	4672      	mov	r2, lr
    75b4:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    75b6:	2301      	movs	r3, #1
    75b8:	e7d2      	b.n	7560 <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    75ba:	469c      	mov	ip, r3
    75bc:	2500      	movs	r5, #0
    75be:	e7e1      	b.n	7584 <setSdclk(unsigned long)+0x74>
    75c0:	400fc000 	.word	0x400fc000
    75c4:	400d8000 	.word	0x400d8000
    75c8:	5e69ec00 	.word	0x5e69ec00
    75cc:	aaaaaaab 	.word	0xaaaaaaab
    75d0:	2000917c 	.word	0x2000917c
    75d4:	402c0000 	.word	0x402c0000
    75d8:	fff0000f 	.word	0xfff0000f

000075dc <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    75dc:	4b01      	ldr	r3, [pc, #4]	; (75e4 <SdioCard::errorCode() const+0x8>)
}
    75de:	7818      	ldrb	r0, [r3, #0]
    75e0:	4770      	bx	lr
    75e2:	bf00      	nop
    75e4:	20008702 	.word	0x20008702

000075e8 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    75e8:	4b01      	ldr	r3, [pc, #4]	; (75f0 <SdioCard::errorData() const+0x8>)
    75ea:	6818      	ldr	r0, [r3, #0]
}
    75ec:	4770      	bx	lr
    75ee:	bf00      	nop
    75f0:	200091b0 	.word	0x200091b0

000075f4 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    75f4:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
    75f6:	4c07      	ldr	r4, [pc, #28]	; (7614 <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    75f8:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    75fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    75fc:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    7600:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
    7602:	f8cc 1004 	str.w	r1, [ip, #4]
    7606:	f8cc 2008 	str.w	r2, [ip, #8]
    760a:	f8cc 300c 	str.w	r3, [ip, #12]
}
    760e:	f85d 4b04 	ldr.w	r4, [sp], #4
    7612:	4770      	bx	lr
    7614:	20009184 	.word	0x20009184

00007618 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7618:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
    761a:	4c07      	ldr	r4, [pc, #28]	; (7638 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    761c:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    761e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    7620:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    7624:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
    7626:	f8cc 1004 	str.w	r1, [ip, #4]
    762a:	f8cc 2008 	str.w	r2, [ip, #8]
    762e:	f8cc 300c 	str.w	r3, [ip, #12]
}
    7632:	f85d 4b04 	ldr.w	r4, [sp], #4
    7636:	4770      	bx	lr
    7638:	20009194 	.word	0x20009194

0000763c <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    763c:	4b02      	ldr	r3, [pc, #8]	; (7648 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    763e:	2001      	movs	r0, #1
  *ocr = m_ocr;
    7640:	681b      	ldr	r3, [r3, #0]
    7642:	600b      	str	r3, [r1, #0]
}
    7644:	4770      	bx	lr
    7646:	bf00      	nop
    7648:	200091a4 	.word	0x200091a4

0000764c <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    764c:	4770      	bx	lr
    764e:	bf00      	nop

00007650 <SdioCard::~SdioCard()>:
    7650:	b510      	push	{r4, lr}
    7652:	4604      	mov	r4, r0
    7654:	210c      	movs	r1, #12
    7656:	f002 fa15 	bl	9a84 <operator delete(void*, unsigned int)>
    765a:	4620      	mov	r0, r4
    765c:	bd10      	pop	{r4, pc}
    765e:	bf00      	nop

00007660 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    7660:	4b04      	ldr	r3, [pc, #16]	; (7674 <SdioCard::type() const+0x14>)
    7662:	781b      	ldrb	r3, [r3, #0]
    7664:	b123      	cbz	r3, 7670 <SdioCard::type() const+0x10>
    7666:	4b04      	ldr	r3, [pc, #16]	; (7678 <SdioCard::type() const+0x18>)
    7668:	7818      	ldrb	r0, [r3, #0]
    766a:	3002      	adds	r0, #2
    766c:	b2c0      	uxtb	r0, r0
    766e:	4770      	bx	lr
    7670:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    7672:	4770      	bx	lr
    7674:	20009623 	.word	0x20009623
    7678:	20009624 	.word	0x20009624

0000767c <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    767c:	4b18      	ldr	r3, [pc, #96]	; (76e0 <SdioCard::sectorCount()+0x64>)
    767e:	781a      	ldrb	r2, [r3, #0]
    7680:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    7684:	d00f      	beq.n	76a6 <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
    7686:	2a40      	cmp	r2, #64	; 0x40
    7688:	d001      	beq.n	768e <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
    768a:	2000      	movs	r0, #0
}
    768c:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    768e:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7690:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7692:	7a19      	ldrb	r1, [r3, #8]
    7694:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7696:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    769a:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    769e:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    76a2:	0280      	lsls	r0, r0, #10
    76a4:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    76a6:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    76a8:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    76aa:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    76ac:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    76b0:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    76b4:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    76b8:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
    76ba:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    76bc:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
    76c0:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
    76c2:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    76c6:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
    76ca:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    76cc:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
    76d0:	3001      	adds	r0, #1
    76d2:	f003 030f 	and.w	r3, r3, #15
    76d6:	4413      	add	r3, r2
    76d8:	3b07      	subs	r3, #7
    76da:	4098      	lsls	r0, r3
}
    76dc:	f85d fb04 	ldr.w	pc, [sp], #4
    76e0:	20009194 	.word	0x20009194

000076e4 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    76e4:	4a40      	ldr	r2, [pc, #256]	; (77e8 <initSDHC()+0x104>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    76e6:	2005      	movs	r0, #5
    76e8:	4940      	ldr	r1, [pc, #256]	; (77ec <initSDHC()+0x108>)
static void initSDHC() {
    76ea:	b538      	push	{r3, r4, r5, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    76ec:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    76f0:	4b3f      	ldr	r3, [pc, #252]	; (77f0 <initSDHC()+0x10c>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    76f2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    76f6:	4d3f      	ldr	r5, [pc, #252]	; (77f4 <initSDHC()+0x110>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    76f8:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    76fc:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    7700:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
    7704:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    7708:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    770c:	f044 0418 	orr.w	r4, r4, #24
    7710:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    7714:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    7718:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    771c:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    7720:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    7724:	f042 020c 	orr.w	r2, r2, #12
    7728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    772c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    772e:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    7732:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    7734:	69da      	ldr	r2, [r3, #28]
    7736:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    773a:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    773c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    773e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    7742:	625a      	str	r2, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    7744:	f8c1 01cc 	str.w	r0, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    7748:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    774c:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    7750:	f8c1 01c0 	str.w	r0, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    7754:	f8c1 01c4 	str.w	r0, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    7758:	f8c1 01c8 	str.w	r0, [r1, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    775c:	6caa      	ldr	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    775e:	4b26      	ldr	r3, [pc, #152]	; (77f8 <initSDHC()+0x114>)
  SDHC_MIX_CTRL |= 0x80000000;
    7760:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    7764:	64aa      	str	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7766:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    7768:	4313      	orrs	r3, r2
    776a:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    776c:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    776e:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
    7772:	d1fb      	bne.n	776c <initSDHC()+0x88>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    7774:	f44f 70c8 	mov.w	r0, #400	; 0x190
    7778:	f7ff feca 	bl	7510 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    777c:	4b1b      	ldr	r3, [pc, #108]	; (77ec <initSDHC()+0x108>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    777e:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    7782:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    7786:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    778a:	481c      	ldr	r0, [pc, #112]	; (77fc <initSDHC()+0x118>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    778c:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    7790:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    7794:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    7798:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    779c:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    77a0:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    77a4:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    77a8:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    77ac:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    77b0:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    77b4:	4912      	ldr	r1, [pc, #72]	; (7800 <initSDHC()+0x11c>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    77b6:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    77ba:	4b12      	ldr	r3, [pc, #72]	; (7804 <initSDHC()+0x120>)
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    77bc:	6368      	str	r0, [r5, #52]	; 0x34
    77be:	f8c1 31f8 	str.w	r3, [r1, #504]	; 0x1f8
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    77c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    77c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    77ca:	490f      	ldr	r1, [pc, #60]	; (7808 <initSDHC()+0x124>)
    77cc:	2060      	movs	r0, #96	; 0x60
    77ce:	f881 006e 	strb.w	r0, [r1, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    77d2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    77d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    77d8:	4a06      	ldr	r2, [pc, #24]	; (77f4 <initSDHC()+0x110>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    77da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    77de:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    77e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    77e2:	011b      	lsls	r3, r3, #4
    77e4:	d4fc      	bmi.n	77e0 <initSDHC()+0xfc>
}
    77e6:	bd38      	pop	{r3, r4, r5, pc}
    77e8:	400d8000 	.word	0x400d8000
    77ec:	401f8000 	.word	0x401f8000
    77f0:	400fc000 	.word	0x400fc000
    77f4:	402c0000 	.word	0x402c0000
    77f8:	01008000 	.word	0x01008000
    77fc:	117f000b 	.word	0x117f000b
    7800:	20008800 	.word	0x20008800
    7804:	000074c1 	.word	0x000074c1
    7808:	e000e400 	.word	0xe000e400

0000780c <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    780c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    7810:	f001 fef6 	bl	9600 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    7814:	4e17      	ldr	r6, [pc, #92]	; (7874 <waitTransferComplete() [clone .part.0]+0x68>)
    7816:	4d18      	ldr	r5, [pc, #96]	; (7878 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    7818:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    781a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 7890 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    781e:	e004      	b.n	782a <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7820:	f001 feee 	bl	9600 <micros>
    7824:	1bc0      	subs	r0, r0, r7
    7826:	4540      	cmp	r0, r8
    7828:	d81b      	bhi.n	7862 <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    782a:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    782c:	402c      	ands	r4, r5
    782e:	d0f7      	beq.n	7820 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    7830:	4a12      	ldr	r2, [pc, #72]	; (787c <waitTransferComplete() [clone .part.0]+0x70>)
    7832:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    7834:	4b12      	ldr	r3, [pc, #72]	; (7880 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    7836:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    7838:	6b32      	ldr	r2, [r6, #48]	; 0x30
    783a:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    783c:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    783e:	4a11      	ldr	r2, [pc, #68]	; (7884 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    7840:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    7842:	681b      	ldr	r3, [r3, #0]
    7844:	4213      	tst	r3, r2
    7846:	d009      	beq.n	785c <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    7848:	490f      	ldr	r1, [pc, #60]	; (7888 <waitTransferComplete() [clone .part.0]+0x7c>)
    784a:	241f      	movs	r4, #31
  m_errorLine = line;
    784c:	4b0f      	ldr	r3, [pc, #60]	; (788c <waitTransferComplete() [clone .part.0]+0x80>)
    784e:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    7852:	2000      	movs	r0, #0
  m_errorCode = code;
    7854:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    7856:	601a      	str	r2, [r3, #0]
}
    7858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    785c:	2001      	movs	r0, #1
}
    785e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    7862:	4a06      	ldr	r2, [pc, #24]	; (787c <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    7864:	4b06      	ldr	r3, [pc, #24]	; (7880 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    7866:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    7868:	6b32      	ldr	r2, [r6, #48]	; 0x30
    786a:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    786c:	681b      	ldr	r3, [r3, #0]
    786e:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    7870:	e7ea      	b.n	7848 <waitTransferComplete() [clone .part.0]+0x3c>
    7872:	bf00      	nop
    7874:	402c0000 	.word	0x402c0000
    7878:	117f0002 	.word	0x117f0002
    787c:	20009625 	.word	0x20009625
    7880:	200091b0 	.word	0x200091b0
    7884:	117f0000 	.word	0x117f0000
    7888:	20008702 	.word	0x20008702
    788c:	20009180 	.word	0x20009180
    7890:	000f4240 	.word	0x000f4240

00007894 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    7894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    7898:	4c26      	ldr	r4, [pc, #152]	; (7934 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    789a:	460f      	mov	r7, r1
  if (!m_transferActive) {
    789c:	7823      	ldrb	r3, [r4, #0]
    789e:	2b00      	cmp	r3, #0
    78a0:	d138      	bne.n	7914 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    78a2:	4b25      	ldr	r3, [pc, #148]	; (7938 <SdioCard::writeData(unsigned char const*)+0xa4>)
    78a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    78a6:	05d2      	lsls	r2, r2, #23
    78a8:	d52b      	bpl.n	7902 <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    78aa:	4d23      	ldr	r5, [pc, #140]	; (7938 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    78ac:	f8df 8094 	ldr.w	r8, [pc, #148]	; 7944 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    78b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    78b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    78b6:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    78b8:	f001 fea2 	bl	9600 <micros>
    78bc:	4606      	mov	r6, r0
  while (fcn()) {
    78be:	e004      	b.n	78ca <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    78c0:	f001 fe9e 	bl	9600 <micros>
    78c4:	1b80      	subs	r0, r0, r6
    78c6:	4540      	cmp	r0, r8
    78c8:	d82a      	bhi.n	7920 <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    78ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    78cc:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    78d0:	d0f6      	beq.n	78c0 <SdioCard::writeData(unsigned char const*)+0x2c>
    78d2:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    78d6:	4818      	ldr	r0, [pc, #96]	; (7938 <SdioCard::writeData(unsigned char const*)+0xa4>)
    78d8:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    78dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    78de:	055b      	lsls	r3, r3, #21
    78e0:	d5fc      	bpl.n	78dc <SdioCard::writeData(unsigned char const*)+0x48>
    78e2:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    78e6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    78ea:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    78ec:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    78ee:	d1fa      	bne.n	78e6 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    78f0:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    78f4:	45bc      	cmp	ip, r7
    78f6:	d1f1      	bne.n	78dc <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    78f8:	2301      	movs	r3, #1
  return true;
    78fa:	4618      	mov	r0, r3
  m_transferActive = true;
    78fc:	7023      	strb	r3, [r4, #0]
}
    78fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7904:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    7908:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    790a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    790c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    7910:	629a      	str	r2, [r3, #40]	; 0x28
    7912:	e7ca      	b.n	78aa <SdioCard::writeData(unsigned char const*)+0x16>
    7914:	f7ff ff7a 	bl	780c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    7918:	2800      	cmp	r0, #0
    791a:	d1c2      	bne.n	78a2 <SdioCard::writeData(unsigned char const*)+0xe>
}
    791c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    7920:	4906      	ldr	r1, [pc, #24]	; (793c <SdioCard::writeData(unsigned char const*)+0xa8>)
    7922:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    7924:	4b06      	ldr	r3, [pc, #24]	; (7940 <SdioCard::writeData(unsigned char const*)+0xac>)
    7926:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    792a:	4648      	mov	r0, r9
  m_errorCode = code;
    792c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    792e:	601a      	str	r2, [r3, #0]
}
    7930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7934:	20009625 	.word	0x20009625
    7938:	402c0000 	.word	0x402c0000
    793c:	20008702 	.word	0x20008702
    7940:	20009180 	.word	0x20009180
    7944:	000f4240 	.word	0x000f4240

00007948 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    794c:	4607      	mov	r7, r0
    794e:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    7950:	4c1f      	ldr	r4, [pc, #124]	; (79d0 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    7952:	f001 fe55 	bl	9600 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7956:	4e1f      	ldr	r6, [pc, #124]	; (79d4 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    7958:	4605      	mov	r5, r0
  while (fcn()) {
    795a:	e004      	b.n	7966 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    795c:	f001 fe50 	bl	9600 <micros>
    7960:	1b43      	subs	r3, r0, r5
    7962:	42b3      	cmp	r3, r6
    7964:	d824      	bhi.n	79b0 <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    7966:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    7968:	07d9      	lsls	r1, r3, #31
    796a:	d4f7      	bmi.n	795c <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    796c:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    796e:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    7972:	d420      	bmi.n	79b6 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    7974:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    7978:	4c15      	ldr	r4, [pc, #84]	; (79d0 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    797a:	4e17      	ldr	r6, [pc, #92]	; (79d8 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    797c:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    797e:	f001 fe3f 	bl	9600 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7982:	4f14      	ldr	r7, [pc, #80]	; (79d4 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    7984:	4605      	mov	r5, r0
  while (fcn()) {
    7986:	e004      	b.n	7992 <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7988:	f001 fe3a 	bl	9600 <micros>
    798c:	1b40      	subs	r0, r0, r5
    798e:	42b8      	cmp	r0, r7
    7990:	d80e      	bhi.n	79b0 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    7992:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    7994:	4233      	tst	r3, r6
    7996:	d0f7      	beq.n	7988 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    7998:	6b22      	ldr	r2, [r4, #48]	; 0x30
    799a:	4b10      	ldr	r3, [pc, #64]	; (79dc <cardCommand(unsigned long, unsigned long)+0x94>)
    799c:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    799e:	681a      	ldr	r2, [r3, #0]
    79a0:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    79a2:	681a      	ldr	r2, [r3, #0]
    79a4:	07d2      	lsls	r2, r2, #31
    79a6:	d503      	bpl.n	79b0 <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    79a8:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    79aa:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    79ae:	d00b      	beq.n	79c8 <cardCommand(unsigned long, unsigned long)+0x80>
    79b0:	2000      	movs	r0, #0
}
    79b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    79b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    79b8:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    79ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    79be:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    79c0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    79c2:	4313      	orrs	r3, r2
    79c4:	64a3      	str	r3, [r4, #72]	; 0x48
    79c6:	e7d5      	b.n	7974 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    79c8:	2001      	movs	r0, #1
}
    79ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    79ce:	bf00      	nop
    79d0:	402c0000 	.word	0x402c0000
    79d4:	000f4240 	.word	0x000f4240
    79d8:	000f0001 	.word	0x000f0001
    79dc:	200091b0 	.word	0x200091b0

000079e0 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    79e0:	4b15      	ldr	r3, [pc, #84]	; (7a38 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    79e2:	b530      	push	{r4, r5, lr}
    79e4:	460d      	mov	r5, r1
    79e6:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    79e8:	6819      	ldr	r1, [r3, #0]
    79ea:	f7ff ffad 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    79ee:	b308      	cbz	r0, 7a34 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    79f0:	4b12      	ldr	r3, [pc, #72]	; (7a3c <readReg16(unsigned long, void*)+0x5c>)
    79f2:	f105 040f 	add.w	r4, r5, #15
    79f6:	691a      	ldr	r2, [r3, #16]
    79f8:	9200      	str	r2, [sp, #0]
    79fa:	6959      	ldr	r1, [r3, #20]
    79fc:	9101      	str	r1, [sp, #4]
    79fe:	6999      	ldr	r1, [r3, #24]
    7a00:	9102      	str	r1, [sp, #8]
    7a02:	69db      	ldr	r3, [r3, #28]
    7a04:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    7a06:	2300      	movs	r3, #0
    7a08:	e001      	b.n	7a0e <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7a0a:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    7a0e:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    7a12:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7a14:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    7a18:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    7a1c:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7a1e:	fa22 f20c 	lsr.w	r2, r2, ip
    7a22:	f10e 0110 	add.w	r1, lr, #16
    7a26:	f804 2d01 	strb.w	r2, [r4, #-1]!
    7a2a:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    7a2e:	d1ec      	bne.n	7a0a <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    7a30:	2300      	movs	r3, #0
    7a32:	73eb      	strb	r3, [r5, #15]
}
    7a34:	b005      	add	sp, #20
    7a36:	bd30      	pop	{r4, r5, pc}
    7a38:	200091a8 	.word	0x200091a8
    7a3c:	402c0000 	.word	0x402c0000

00007a40 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    7a40:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    7a42:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    7a44:	07db      	lsls	r3, r3, #31
    7a46:	d505      	bpl.n	7a54 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    7a48:	4b15      	ldr	r3, [pc, #84]	; (7aa0 <SdioCard::isBusy()+0x60>)
    7a4a:	681b      	ldr	r3, [r3, #0]
    7a4c:	b1b3      	cbz	r3, 7a7c <SdioCard::isBusy()+0x3c>
}
    7a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    7a52:	4718      	bx	r3
    if (m_transferActive) {
    7a54:	4b13      	ldr	r3, [pc, #76]	; (7aa4 <SdioCard::isBusy()+0x64>)
    7a56:	781b      	ldrb	r3, [r3, #0]
    7a58:	b93b      	cbnz	r3, 7a6a <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    7a5a:	4b13      	ldr	r3, [pc, #76]	; (7aa8 <SdioCard::isBusy()+0x68>)
    7a5c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    7a5e:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    7a62:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    7a66:	4620      	mov	r0, r4
    7a68:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    7a6a:	4b0f      	ldr	r3, [pc, #60]	; (7aa8 <SdioCard::isBusy()+0x68>)
    7a6c:	4c0f      	ldr	r4, [pc, #60]	; (7aac <SdioCard::isBusy()+0x6c>)
    7a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7a70:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    7a72:	fab4 f484 	clz	r4, r4
    7a76:	0964      	lsrs	r4, r4, #5
}
    7a78:	4620      	mov	r0, r4
    7a7a:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    7a7c:	4b0c      	ldr	r3, [pc, #48]	; (7ab0 <SdioCard::isBusy()+0x70>)
    7a7e:	781c      	ldrb	r4, [r3, #0]
    7a80:	2c00      	cmp	r4, #0
    7a82:	d0f0      	beq.n	7a66 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7a84:	4b0b      	ldr	r3, [pc, #44]	; (7ab4 <SdioCard::isBusy()+0x74>)
    7a86:	480c      	ldr	r0, [pc, #48]	; (7ab8 <SdioCard::isBusy()+0x78>)
    7a88:	6819      	ldr	r1, [r3, #0]
    7a8a:	f7ff ff5d 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    7a8e:	2800      	cmp	r0, #0
    7a90:	d0e9      	beq.n	7a66 <SdioCard::isBusy()+0x26>
    7a92:	4b05      	ldr	r3, [pc, #20]	; (7aa8 <SdioCard::isBusy()+0x68>)
    7a94:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    7a96:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    7a9a:	f3c4 2400 	ubfx	r4, r4, #8, #1
    7a9e:	e7e2      	b.n	7a66 <SdioCard::isBusy()+0x26>
    7aa0:	200091ac 	.word	0x200091ac
    7aa4:	20009625 	.word	0x20009625
    7aa8:	402c0000 	.word	0x402c0000
    7aac:	117f0002 	.word	0x117f0002
    7ab0:	20009622 	.word	0x20009622
    7ab4:	200091a8 	.word	0x200091a8
    7ab8:	0d1a0000 	.word	0x0d1a0000

00007abc <SdioCard::status()>:
uint32_t SdioCard::status() {
    7abc:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7abe:	4b04      	ldr	r3, [pc, #16]	; (7ad0 <SdioCard::status()+0x14>)
    7ac0:	4804      	ldr	r0, [pc, #16]	; (7ad4 <SdioCard::status()+0x18>)
    7ac2:	6819      	ldr	r1, [r3, #0]
    7ac4:	f7ff ff40 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    7ac8:	b108      	cbz	r0, 7ace <SdioCard::status()+0x12>
    7aca:	4b03      	ldr	r3, [pc, #12]	; (7ad8 <SdioCard::status()+0x1c>)
    7acc:	6918      	ldr	r0, [r3, #16]
}
    7ace:	bd08      	pop	{r3, pc}
    7ad0:	200091a8 	.word	0x200091a8
    7ad4:	0d1a0000 	.word	0x0d1a0000
    7ad8:	402c0000 	.word	0x402c0000

00007adc <isBusyCMD13()>:
static bool isBusyCMD13() {
    7adc:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7ade:	4b07      	ldr	r3, [pc, #28]	; (7afc <isBusyCMD13()+0x20>)
    7ae0:	4807      	ldr	r0, [pc, #28]	; (7b00 <isBusyCMD13()+0x24>)
    7ae2:	6819      	ldr	r1, [r3, #0]
    7ae4:	f7ff ff30 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    7ae8:	b130      	cbz	r0, 7af8 <isBusyCMD13()+0x1c>
    7aea:	4b06      	ldr	r3, [pc, #24]	; (7b04 <isBusyCMD13()+0x28>)
    7aec:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    7aee:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    7af2:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    7af6:	bd08      	pop	{r3, pc}
    7af8:	2001      	movs	r0, #1
    7afa:	bd08      	pop	{r3, pc}
    7afc:	200091a8 	.word	0x200091a8
    7b00:	0d1a0000 	.word	0x0d1a0000
    7b04:	402c0000 	.word	0x402c0000

00007b08 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    7b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    7b0c:	4b29      	ldr	r3, [pc, #164]	; (7bb4 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    7b0e:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    7b10:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 7bd4 <SdioCard::writeStart(unsigned long)+0xcc>
    7b14:	4e28      	ldr	r6, [pc, #160]	; (7bb8 <SdioCard::writeStart(unsigned long)+0xb0>)
    7b16:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    7b1a:	f001 fd71 	bl	9600 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7b1e:	4d27      	ldr	r5, [pc, #156]	; (7bbc <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    7b20:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7b22:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 7bd8 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7b26:	4f26      	ldr	r7, [pc, #152]	; (7bc0 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    7b28:	e006      	b.n	7b38 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7b2a:	f001 fd69 	bl	9600 <micros>
    7b2e:	1b00      	subs	r0, r0, r4
    7b30:	42b8      	cmp	r0, r7
    7b32:	d829      	bhi.n	7b88 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    7b34:	f003 f970 	bl	ae18 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7b38:	6831      	ldr	r1, [r6, #0]
    7b3a:	4628      	mov	r0, r5
    7b3c:	f7ff ff04 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    7b40:	2800      	cmp	r0, #0
    7b42:	d0f2      	beq.n	7b2a <SdioCard::writeStart(unsigned long)+0x22>
    7b44:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    7b48:	05db      	lsls	r3, r3, #23
    7b4a:	d5ee      	bpl.n	7b2a <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    7b4c:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    7b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    7b52:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7b56:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    7b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    7b5e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7b62:	4b18      	ldr	r3, [pc, #96]	; (7bc4 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    7b64:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7b68:	781b      	ldrb	r3, [r3, #0]
    7b6a:	b1cb      	cbz	r3, 7ba0 <SdioCard::writeStart(unsigned long)+0x98>
    7b6c:	4649      	mov	r1, r9
    7b6e:	4816      	ldr	r0, [pc, #88]	; (7bc8 <SdioCard::writeStart(unsigned long)+0xc0>)
    7b70:	f7ff feea 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    7b74:	b930      	cbnz	r0, 7b84 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    7b76:	4915      	ldr	r1, [pc, #84]	; (7bcc <SdioCard::writeStart(unsigned long)+0xc4>)
    7b78:	240e      	movs	r4, #14
  m_errorLine = line;
    7b7a:	4b15      	ldr	r3, [pc, #84]	; (7bd0 <SdioCard::writeStart(unsigned long)+0xc8>)
    7b7c:	f240 4257 	movw	r2, #1111	; 0x457
  m_errorCode = code;
    7b80:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    7b82:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    7b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    7b88:	4a10      	ldr	r2, [pc, #64]	; (7bcc <SdioCard::writeStart(unsigned long)+0xc4>)
    7b8a:	210a      	movs	r1, #10
      m_busyFcn = 0;
    7b8c:	2000      	movs	r0, #0
  m_errorLine = line;
    7b8e:	4b10      	ldr	r3, [pc, #64]	; (7bd0 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    7b90:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    7b92:	f240 424b 	movw	r2, #1099	; 0x44b
      m_busyFcn = 0;
    7b96:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    7b9a:	601a      	str	r2, [r3, #0]
}
    7b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7ba0:	ea4f 2949 	mov.w	r9, r9, lsl #9
    7ba4:	4808      	ldr	r0, [pc, #32]	; (7bc8 <SdioCard::writeStart(unsigned long)+0xc0>)
    7ba6:	4649      	mov	r1, r9
    7ba8:	f7ff fece 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    7bac:	2800      	cmp	r0, #0
    7bae:	d1e9      	bne.n	7b84 <SdioCard::writeStart(unsigned long)+0x7c>
    7bb0:	e7e1      	b.n	7b76 <SdioCard::writeStart(unsigned long)+0x6e>
    7bb2:	bf00      	nop
    7bb4:	00007add 	.word	0x00007add
    7bb8:	200091a8 	.word	0x200091a8
    7bbc:	0d1a0000 	.word	0x0d1a0000
    7bc0:	000f4240 	.word	0x000f4240
    7bc4:	20009624 	.word	0x20009624
    7bc8:	193a0020 	.word	0x193a0020
    7bcc:	20008702 	.word	0x20008702
    7bd0:	20009180 	.word	0x20009180
    7bd4:	200091ac 	.word	0x200091ac
    7bd8:	402c0000 	.word	0x402c0000

00007bdc <SdioCard::readStop()>:
bool SdioCard::readStop() {
    7bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7be0:	4c25      	ldr	r4, [pc, #148]	; (7c78 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    7be2:	2100      	movs	r1, #0
    7be4:	4825      	ldr	r0, [pc, #148]	; (7c7c <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7be6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    7bec:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    7bee:	f7ff feab 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    7bf2:	4605      	mov	r5, r0
    7bf4:	b948      	cbnz	r0, 7c0a <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    7bf6:	4922      	ldr	r1, [pc, #136]	; (7c80 <SdioCard::readStop()+0xa4>)
    7bf8:	2009      	movs	r0, #9
  m_errorLine = line;
    7bfa:	4b22      	ldr	r3, [pc, #136]	; (7c84 <SdioCard::readStop()+0xa8>)
    7bfc:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
    7c00:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    7c02:	601a      	str	r2, [r3, #0]
}
    7c04:	4628      	mov	r0, r5
    7c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    7c0a:	4b1f      	ldr	r3, [pc, #124]	; (7c88 <SdioCard::readStop()+0xac>)
    7c0c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 7c90 <SdioCard::readStop()+0xb4>
    7c10:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    7c14:	f001 fcf4 	bl	9600 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    7c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    7c1a:	4606      	mov	r6, r0
  while (fcn()) {
    7c1c:	01d8      	lsls	r0, r3, #7
    7c1e:	d418      	bmi.n	7c52 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7c20:	4f1a      	ldr	r7, [pc, #104]	; (7c8c <SdioCard::readStop()+0xb0>)
    7c22:	e004      	b.n	7c2e <SdioCard::readStop()+0x52>
    yield();
    7c24:	f003 f8f8 	bl	ae18 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    7c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    7c2a:	01d9      	lsls	r1, r3, #7
    7c2c:	d411      	bmi.n	7c52 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7c2e:	f001 fce7 	bl	9600 <micros>
    7c32:	1b83      	subs	r3, r0, r6
    7c34:	42bb      	cmp	r3, r7
    7c36:	d9f5      	bls.n	7c24 <SdioCard::readStop()+0x48>
  m_errorCode = code;
    7c38:	4a11      	ldr	r2, [pc, #68]	; (7c80 <SdioCard::readStop()+0xa4>)
    7c3a:	210a      	movs	r1, #10
      m_busyFcn = 0;
    7c3c:	2500      	movs	r5, #0
  m_errorLine = line;
    7c3e:	4b11      	ldr	r3, [pc, #68]	; (7c84 <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    7c40:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    7c42:	f44f 7210 	mov.w	r2, #576	; 0x240
}
    7c46:	4628      	mov	r0, r5
      m_busyFcn = 0;
    7c48:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    7c4c:	601a      	str	r2, [r3, #0]
}
    7c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    7c52:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    7c54:	4b08      	ldr	r3, [pc, #32]	; (7c78 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    7c56:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    7c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7c5c:	0792      	lsls	r2, r2, #30
    7c5e:	d5d1      	bpl.n	7c04 <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    7c60:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7c62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7c66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7c6a:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    7c6e:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    7c70:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    7c72:	629a      	str	r2, [r3, #40]	; 0x28
    7c74:	e7c6      	b.n	7c04 <SdioCard::readStop()+0x28>
    7c76:	bf00      	nop
    7c78:	402c0000 	.word	0x402c0000
    7c7c:	0cdb0000 	.word	0x0cdb0000
    7c80:	20008702 	.word	0x20008702
    7c84:	20009180 	.word	0x20009180
    7c88:	000074f1 	.word	0x000074f1
    7c8c:	000f4240 	.word	0x000f4240
    7c90:	200091ac 	.word	0x200091ac

00007c94 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    7c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c98:	4682      	mov	sl, r0
    7c9a:	4689      	mov	r9, r1
    7c9c:	4e36      	ldr	r6, [pc, #216]	; (7d78 <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    7c9e:	f001 fcaf 	bl	9600 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7ca2:	4d36      	ldr	r5, [pc, #216]	; (7d7c <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    7ca4:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7ca6:	f8df 8100 	ldr.w	r8, [pc, #256]	; 7da8 <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7caa:	4f35      	ldr	r7, [pc, #212]	; (7d80 <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    7cac:	e004      	b.n	7cb8 <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7cae:	f001 fca7 	bl	9600 <micros>
    7cb2:	1b03      	subs	r3, r0, r4
    7cb4:	42bb      	cmp	r3, r7
    7cb6:	d827      	bhi.n	7d08 <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7cb8:	6831      	ldr	r1, [r6, #0]
    7cba:	4628      	mov	r0, r5
    7cbc:	f7ff fe44 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    7cc0:	2800      	cmp	r0, #0
    7cc2:	d0f4      	beq.n	7cae <cardCMD6(unsigned long, unsigned char*)+0x1a>
    7cc4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    7cc8:	05da      	lsls	r2, r3, #23
    7cca:	d5f0      	bpl.n	7cae <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    7ccc:	2301      	movs	r3, #1
    7cce:	4d2d      	ldr	r5, [pc, #180]	; (7d84 <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    7cd0:	4f2d      	ldr	r7, [pc, #180]	; (7d88 <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7cd2:	4651      	mov	r1, sl
  m_dmaBusy = true;
    7cd4:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
    7cd6:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7cd8:	482c      	ldr	r0, [pc, #176]	; (7d8c <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    7cda:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7cdc:	4b2c      	ldr	r3, [pc, #176]	; (7d90 <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
    7cde:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7ce2:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7ce6:	4b2b      	ldr	r3, [pc, #172]	; (7d94 <cardCMD6(unsigned long, unsigned char*)+0x100>)
    7ce8:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7cec:	f7ff fe2c 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    7cf0:	4604      	mov	r4, r0
    7cf2:	b9a0      	cbnz	r0, 7d1e <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    7cf4:	4928      	ldr	r1, [pc, #160]	; (7d98 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    7cf6:	2004      	movs	r0, #4
  m_errorLine = line;
    7cf8:	4b28      	ldr	r3, [pc, #160]	; (7d9c <cardCMD6(unsigned long, unsigned char*)+0x108>)
    7cfa:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
    7cfe:	7008      	strb	r0, [r1, #0]
}
    7d00:	4620      	mov	r0, r4
  m_errorLine = line;
    7d02:	601a      	str	r2, [r3, #0]
}
    7d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    7d08:	4923      	ldr	r1, [pc, #140]	; (7d98 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    7d0a:	200a      	movs	r0, #10
  m_errorLine = line;
    7d0c:	4b23      	ldr	r3, [pc, #140]	; (7d9c <cardCMD6(unsigned long, unsigned char*)+0x108>)
    7d0e:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
    7d12:	2400      	movs	r4, #0
  m_errorCode = code;
    7d14:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    7d16:	601a      	str	r2, [r3, #0]
}
    7d18:	4620      	mov	r0, r4
    7d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    7d1e:	4b20      	ldr	r3, [pc, #128]	; (7da0 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
    7d20:	f8df 9088 	ldr.w	r9, [pc, #136]	; 7dac <cardCMD6(unsigned long, unsigned char*)+0x118>
    7d24:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
    7d28:	f001 fc6a 	bl	9600 <micros>
  return m_dmaBusy;
    7d2c:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    7d2e:	4606      	mov	r6, r0
  while (fcn()) {
    7d30:	b1bb      	cbz	r3, 7d62 <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7d32:	f8df 804c 	ldr.w	r8, [pc, #76]	; 7d80 <cardCMD6(unsigned long, unsigned char*)+0xec>
    7d36:	e003      	b.n	7d40 <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    7d38:	f003 f86e 	bl	ae18 <yield>
  return m_dmaBusy;
    7d3c:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    7d3e:	b183      	cbz	r3, 7d62 <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7d40:	f001 fc5e 	bl	9600 <micros>
    7d44:	1b83      	subs	r3, r0, r6
    7d46:	4543      	cmp	r3, r8
    7d48:	d9f6      	bls.n	7d38 <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    7d4a:	2300      	movs	r3, #0
    7d4c:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
    7d50:	4911      	ldr	r1, [pc, #68]	; (7d98 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    7d52:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    7d54:	4b11      	ldr	r3, [pc, #68]	; (7d9c <cardCMD6(unsigned long, unsigned char*)+0x108>)
    7d56:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
    7d5a:	2400      	movs	r4, #0
  m_errorCode = code;
    7d5c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    7d5e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    7d60:	e7da      	b.n	7d18 <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7d62:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    7d64:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7d66:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
    7d68:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7d6c:	d5f0      	bpl.n	7d50 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    7d6e:	683a      	ldr	r2, [r7, #0]
    7d70:	4b0c      	ldr	r3, [pc, #48]	; (7da4 <cardCMD6(unsigned long, unsigned char*)+0x110>)
    7d72:	421a      	tst	r2, r3
    7d74:	d0d0      	beq.n	7d18 <cardCMD6(unsigned long, unsigned char*)+0x84>
    7d76:	e7eb      	b.n	7d50 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    7d78:	200091a8 	.word	0x200091a8
    7d7c:	0d1a0000 	.word	0x0d1a0000
    7d80:	000f4240 	.word	0x000f4240
    7d84:	20009626 	.word	0x20009626
    7d88:	200091b0 	.word	0x200091b0
    7d8c:	063a0011 	.word	0x063a0011
    7d90:	00010040 	.word	0x00010040
    7d94:	117f0002 	.word	0x117f0002
    7d98:	20008702 	.word	0x20008702
    7d9c:	20009180 	.word	0x20009180
    7da0:	00007505 	.word	0x00007505
    7da4:	117f0000 	.word	0x117f0000
    7da8:	402c0000 	.word	0x402c0000
    7dac:	200091ac 	.word	0x200091ac

00007db0 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
    7db4:	4d32      	ldr	r5, [pc, #200]	; (7e80 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7db6:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    7db8:	7aab      	ldrb	r3, [r5, #10]
    7dba:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    7dbe:	d112      	bne.n	7de6 <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    7dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7dc4:	7aea      	ldrb	r2, [r5, #11]
    7dc6:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7dc8:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    7dcc:	1c62      	adds	r2, r4, #1
    7dce:	430a      	orrs	r2, r1
    7dd0:	4213      	tst	r3, r2
    7dd2:	d008      	beq.n	7de6 <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    7dd4:	492b      	ldr	r1, [pc, #172]	; (7e84 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    7dd6:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
    7dd8:	4b2b      	ldr	r3, [pc, #172]	; (7e88 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    7dda:	f240 3202 	movw	r2, #770	; 0x302
  m_errorCode = code;
    7dde:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    7de0:	601a      	str	r2, [r3, #0]
}
    7de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    7de6:	4b29      	ldr	r3, [pc, #164]	; (7e8c <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    7de8:	781b      	ldrb	r3, [r3, #0]
    7dea:	b90b      	cbnz	r3, 7df0 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    7dec:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    7dee:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    7df0:	4827      	ldr	r0, [pc, #156]	; (7e90 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    7df2:	f7ff fda9 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    7df6:	b940      	cbnz	r0, 7e0a <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
    7df8:	4922      	ldr	r1, [pc, #136]	; (7e84 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    7dfa:	240f      	movs	r4, #15
  m_errorLine = line;
    7dfc:	4b22      	ldr	r3, [pc, #136]	; (7e88 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    7dfe:	f240 320a 	movw	r2, #778	; 0x30a
  m_errorCode = code;
    7e02:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    7e04:	601a      	str	r2, [r3, #0]
}
    7e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    7e0a:	4621      	mov	r1, r4
    7e0c:	4821      	ldr	r0, [pc, #132]	; (7e94 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    7e0e:	f7ff fd9b 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    7e12:	b940      	cbnz	r0, 7e26 <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
    7e14:	491b      	ldr	r1, [pc, #108]	; (7e84 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    7e16:	2410      	movs	r4, #16
  m_errorLine = line;
    7e18:	4b1b      	ldr	r3, [pc, #108]	; (7e88 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    7e1a:	f240 320d 	movw	r2, #781	; 0x30d
  m_errorCode = code;
    7e1e:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    7e20:	601a      	str	r2, [r3, #0]
}
    7e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    7e26:	2100      	movs	r1, #0
    7e28:	481b      	ldr	r0, [pc, #108]	; (7e98 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    7e2a:	f7ff fd8d 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    7e2e:	b938      	cbnz	r0, 7e40 <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
    7e30:	4914      	ldr	r1, [pc, #80]	; (7e84 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    7e32:	2411      	movs	r4, #17
  m_errorLine = line;
    7e34:	4b14      	ldr	r3, [pc, #80]	; (7e88 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    7e36:	f44f 7244 	mov.w	r2, #784	; 0x310
  m_errorCode = code;
    7e3a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    7e3c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    7e3e:	e7e2      	b.n	7e06 <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
    7e40:	f001 fbde 	bl	9600 <micros>
    7e44:	4e15      	ldr	r6, [pc, #84]	; (7e9c <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7e46:	4d16      	ldr	r5, [pc, #88]	; (7ea0 <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
    7e48:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7e4a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 7ea8 <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7e4e:	4f15      	ldr	r7, [pc, #84]	; (7ea4 <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7e50:	6831      	ldr	r1, [r6, #0]
    7e52:	4628      	mov	r0, r5
    7e54:	f7ff fd78 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    7e58:	b118      	cbz	r0, 7e62 <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    7e5a:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    7e5e:	05db      	lsls	r3, r3, #23
    7e60:	d4d1      	bmi.n	7e06 <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7e62:	f001 fbcd 	bl	9600 <micros>
    7e66:	1b00      	subs	r0, r0, r4
    7e68:	42b8      	cmp	r0, r7
    7e6a:	d9f1      	bls.n	7e50 <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    7e6c:	4905      	ldr	r1, [pc, #20]	; (7e84 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    7e6e:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    7e70:	4b05      	ldr	r3, [pc, #20]	; (7e88 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    7e72:	f240 3213 	movw	r2, #787	; 0x313
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    7e76:	2000      	movs	r0, #0
  m_errorCode = code;
    7e78:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    7e7a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    7e7c:	e7c3      	b.n	7e06 <SdioCard::erase(unsigned long, unsigned long)+0x56>
    7e7e:	bf00      	nop
    7e80:	20009194 	.word	0x20009194
    7e84:	20008702 	.word	0x20008702
    7e88:	20009180 	.word	0x20009180
    7e8c:	20009624 	.word	0x20009624
    7e90:	201a0000 	.word	0x201a0000
    7e94:	211a0000 	.word	0x211a0000
    7e98:	261b0000 	.word	0x261b0000
    7e9c:	200091a8 	.word	0x200091a8
    7ea0:	0d1a0000 	.word	0x0d1a0000
    7ea4:	000f4240 	.word	0x000f4240
    7ea8:	402c0000 	.word	0x402c0000

00007eac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    7eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    7eb0:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
    7eb4:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    7eb6:	bf18      	it	ne
    7eb8:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
    7eba:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    7ebc:	9300      	str	r3, [sp, #0]
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	bf08      	it	eq
    7ec2:	f044 0401 	orreq.w	r4, r4, #1
    7ec6:	b15c      	cbz	r4, 7ee0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    7ec8:	4940      	ldr	r1, [pc, #256]	; (7fcc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    7eca:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    7ecc:	4b40      	ldr	r3, [pc, #256]	; (7fd0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    7ece:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
    7ed2:	2400      	movs	r4, #0
  m_errorCode = code;
    7ed4:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    7ed6:	601a      	str	r2, [r3, #0]
}
    7ed8:	4620      	mov	r0, r4
    7eda:	b003      	add	sp, #12
    7edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    7ee0:	4b3c      	ldr	r3, [pc, #240]	; (7fd4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    7ee2:	4615      	mov	r5, r2
    7ee4:	4a3c      	ldr	r2, [pc, #240]	; (7fd8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    7ee6:	460e      	mov	r6, r1
    7ee8:	f8df 910c 	ldr.w	r9, [pc, #268]	; 7ff8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    7eec:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    7eee:	f001 fb87 	bl	9600 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7ef2:	f8df 8108 	ldr.w	r8, [pc, #264]	; 7ffc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    7ef6:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7ef8:	f8df b104 	ldr.w	fp, [pc, #260]	; 8000 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7efc:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 7ff0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    7f00:	e006      	b.n	7f10 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7f02:	f001 fb7d 	bl	9600 <micros>
    7f06:	1bc0      	subs	r0, r0, r7
    7f08:	4550      	cmp	r0, sl
    7f0a:	d844      	bhi.n	7f96 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    7f0c:	f002 ff84 	bl	ae18 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7f10:	f8d9 1000 	ldr.w	r1, [r9]
    7f14:	4640      	mov	r0, r8
    7f16:	f7ff fd17 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    7f1a:	2800      	cmp	r0, #0
    7f1c:	d0f1      	beq.n	7f02 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    7f1e:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    7f22:	05da      	lsls	r2, r3, #23
    7f24:	d5ed      	bpl.n	7f02 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7f26:	9a00      	ldr	r2, [sp, #0]
    7f28:	4b2c      	ldr	r3, [pc, #176]	; (7fdc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    7f2a:	492b      	ldr	r1, [pc, #172]	; (7fd8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7f2c:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    7f30:	2200      	movs	r2, #0
  m_dmaBusy = true;
    7f32:	4f2b      	ldr	r7, [pc, #172]	; (7fe0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    7f34:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    7f3a:	2101      	movs	r1, #1
  m_irqstat = 0;
    7f3c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8004 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    7f40:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
    7f42:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
    7f46:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7f4a:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7f4e:	4b25      	ldr	r3, [pc, #148]	; (7fe4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    7f50:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7f54:	4b24      	ldr	r3, [pc, #144]	; (7fe8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    7f56:	781b      	ldrb	r3, [r3, #0]
    7f58:	b343      	cbz	r3, 7fac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    7f5a:	4631      	mov	r1, r6
    7f5c:	9801      	ldr	r0, [sp, #4]
    7f5e:	f7ff fcf3 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    7f62:	4681      	mov	r9, r0
    7f64:	2800      	cmp	r0, #0
    7f66:	d0b7      	beq.n	7ed8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    7f68:	4b20      	ldr	r3, [pc, #128]	; (7fec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    7f6a:	4a1b      	ldr	r2, [pc, #108]	; (7fd8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    7f6c:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    7f6e:	f001 fb47 	bl	9600 <micros>
  return m_dmaBusy;
    7f72:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    7f74:	4605      	mov	r5, r0
  while (fcn()) {
    7f76:	b1db      	cbz	r3, 7fb0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7f78:	4e1d      	ldr	r6, [pc, #116]	; (7ff0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    7f7a:	e003      	b.n	7f84 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    7f7c:	f002 ff4c 	bl	ae18 <yield>
  return m_dmaBusy;
    7f80:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
    7f82:	b1ab      	cbz	r3, 7fb0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7f84:	f001 fb3c 	bl	9600 <micros>
    7f88:	1b40      	subs	r0, r0, r5
    7f8a:	42b0      	cmp	r0, r6
    7f8c:	d9f6      	bls.n	7f7c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    7f8e:	2300      	movs	r3, #0
    7f90:	4a11      	ldr	r2, [pc, #68]	; (7fd8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    7f92:	6013      	str	r3, [r2, #0]
      return true;
    7f94:	e7a0      	b.n	7ed8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    7f96:	4b0d      	ldr	r3, [pc, #52]	; (7fcc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    7f98:	220a      	movs	r2, #10
      m_busyFcn = 0;
    7f9a:	2100      	movs	r1, #0
    7f9c:	480e      	ldr	r0, [pc, #56]	; (7fd8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    7f9e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    7fa0:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    7fa4:	4b0a      	ldr	r3, [pc, #40]	; (7fd0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    7fa6:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
    7fa8:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    7faa:	e795      	b.n	7ed8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7fac:	0276      	lsls	r6, r6, #9
    7fae:	e7d4      	b.n	7f5a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    7fb0:	2300      	movs	r3, #0
    7fb2:	4a09      	ldr	r2, [pc, #36]	; (7fd8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    7fb4:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7fb6:	f8d8 3000 	ldr.w	r3, [r8]
    7fba:	079b      	lsls	r3, r3, #30
    7fbc:	d58c      	bpl.n	7ed8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    7fbe:	f8d8 2000 	ldr.w	r2, [r8]
    7fc2:	4b0c      	ldr	r3, [pc, #48]	; (7ff4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    7fc4:	421a      	tst	r2, r3
    7fc6:	bf08      	it	eq
    7fc8:	464c      	moveq	r4, r9
    7fca:	e785      	b.n	7ed8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    7fcc:	20008702 	.word	0x20008702
    7fd0:	20009180 	.word	0x20009180
    7fd4:	00007add 	.word	0x00007add
    7fd8:	200091ac 	.word	0x200091ac
    7fdc:	1fff0000 	.word	0x1fff0000
    7fe0:	20009626 	.word	0x20009626
    7fe4:	117f0002 	.word	0x117f0002
    7fe8:	20009624 	.word	0x20009624
    7fec:	00007505 	.word	0x00007505
    7ff0:	000f4240 	.word	0x000f4240
    7ff4:	117f0000 	.word	0x117f0000
    7ff8:	200091a8 	.word	0x200091a8
    7ffc:	0d1a0000 	.word	0x0d1a0000
    8000:	402c0000 	.word	0x402c0000
    8004:	200091b0 	.word	0x200091b0

00008008 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    800a:	4606      	mov	r6, r0
    800c:	7a00      	ldrb	r0, [r0, #8]
    800e:	460c      	mov	r4, r1
    8010:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    8012:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8014:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    8016:	d413      	bmi.n	8040 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    8018:	b183      	cbz	r3, 803c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    801a:	440f      	add	r7, r1
    801c:	e001      	b.n	8022 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    801e:	42bc      	cmp	r4, r7
    8020:	d00c      	beq.n	803c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    8022:	6833      	ldr	r3, [r6, #0]
    8024:	462a      	mov	r2, r5
    8026:	4621      	mov	r1, r4
    8028:	4630      	mov	r0, r6
    802a:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    802c:	3401      	adds	r4, #1
    802e:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
    8032:	4798      	blx	r3
    8034:	2800      	cmp	r0, #0
    8036:	d1f2      	bne.n	801e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    8038:	2000      	movs	r0, #0
}
    803a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    803c:	2001      	movs	r0, #1
}
    803e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    8040:	0790      	lsls	r0, r2, #30
    8042:	d012      	beq.n	806a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    8044:	2b00      	cmp	r3, #0
    8046:	d0f9      	beq.n	803c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    8048:	440f      	add	r7, r1
    804a:	e001      	b.n	8050 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    804c:	42bc      	cmp	r4, r7
    804e:	d0f5      	beq.n	803c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    8050:	6833      	ldr	r3, [r6, #0]
    8052:	462a      	mov	r2, r5
    8054:	4621      	mov	r1, r4
    8056:	4630      	mov	r0, r6
    8058:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    805a:	3401      	adds	r4, #1
    805c:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    8060:	4798      	blx	r3
    8062:	2800      	cmp	r0, #0
    8064:	d1f2      	bne.n	804c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    8066:	2000      	movs	r0, #0
    8068:	e7e7      	b.n	803a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    806a:	4806      	ldr	r0, [pc, #24]	; (8084 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    806c:	f7ff ff1e 	bl	7eac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8070:	2800      	cmp	r0, #0
    8072:	d1e3      	bne.n	803c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    8074:	4904      	ldr	r1, [pc, #16]	; (8088 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    8076:	240c      	movs	r4, #12
  m_errorLine = line;
    8078:	4b04      	ldr	r3, [pc, #16]	; (808c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    807a:	f240 32a1 	movw	r2, #929	; 0x3a1
  m_errorCode = code;
    807e:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    8080:	601a      	str	r2, [r3, #0]
}
    8082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8084:	123a0037 	.word	0x123a0037
    8088:	20008702 	.word	0x20008702
    808c:	20009180 	.word	0x20009180

00008090 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    8090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8092:	4606      	mov	r6, r0
    8094:	7a00      	ldrb	r0, [r0, #8]
    8096:	460c      	mov	r4, r1
    8098:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    809a:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    809c:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    809e:	d413      	bmi.n	80c8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    80a0:	b183      	cbz	r3, 80c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    80a2:	440f      	add	r7, r1
    80a4:	e001      	b.n	80aa <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    80a6:	42bc      	cmp	r4, r7
    80a8:	d00c      	beq.n	80c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    80aa:	6833      	ldr	r3, [r6, #0]
    80ac:	462a      	mov	r2, r5
    80ae:	4621      	mov	r1, r4
    80b0:	4630      	mov	r0, r6
    80b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
    80b4:	3401      	adds	r4, #1
    80b6:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
    80ba:	4798      	blx	r3
    80bc:	2800      	cmp	r0, #0
    80be:	d1f2      	bne.n	80a6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    80c0:	2000      	movs	r0, #0
}
    80c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    80c4:	2001      	movs	r0, #1
}
    80c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    80c8:	0790      	lsls	r0, r2, #30
    80ca:	d012      	beq.n	80f2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    80cc:	2b00      	cmp	r3, #0
    80ce:	d0f9      	beq.n	80c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    80d0:	440f      	add	r7, r1
    80d2:	e001      	b.n	80d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    80d4:	42bc      	cmp	r4, r7
    80d6:	d0f5      	beq.n	80c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    80d8:	6833      	ldr	r3, [r6, #0]
    80da:	462a      	mov	r2, r5
    80dc:	4621      	mov	r1, r4
    80de:	4630      	mov	r0, r6
    80e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    80e2:	3401      	adds	r4, #1
    80e4:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    80e8:	4798      	blx	r3
    80ea:	2800      	cmp	r0, #0
    80ec:	d1f2      	bne.n	80d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    80ee:	2000      	movs	r0, #0
    80f0:	e7e7      	b.n	80c2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    80f2:	4806      	ldr	r0, [pc, #24]	; (810c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    80f4:	f7ff feda 	bl	7eac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    80f8:	2800      	cmp	r0, #0
    80fa:	d1e3      	bne.n	80c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    80fc:	4904      	ldr	r1, [pc, #16]	; (8110 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    80fe:	240e      	movs	r4, #14
  m_errorLine = line;
    8100:	4b04      	ldr	r3, [pc, #16]	; (8114 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    8102:	f240 423d 	movw	r2, #1085	; 0x43d
  m_errorCode = code;
    8106:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    8108:	601a      	str	r2, [r3, #0]
}
    810a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    810c:	193a0027 	.word	0x193a0027
    8110:	20008702 	.word	0x20008702
    8114:	20009180 	.word	0x20009180

00008118 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    8118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    811c:	2500      	movs	r5, #0
  m_initDone = false;
    811e:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 83e0 <SdioCard::begin(SdioConfig)+0x2c8>
  m_errorCode = SD_CARD_ERROR_NONE;
    8122:	4c9b      	ldr	r4, [pc, #620]	; (8390 <SdioCard::begin(SdioConfig)+0x278>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    8124:	b091      	sub	sp, #68	; 0x44
  m_highCapacity = false;
    8126:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 83e4 <SdioCard::begin(SdioConfig)+0x2cc>
  m_version2 = false;
    812a:	4e9a      	ldr	r6, [pc, #616]	; (8394 <SdioCard::begin(SdioConfig)+0x27c>)
  m_sdioConfig = sdioConfig;
    812c:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    812e:	7245      	strb	r5, [r0, #9]
  m_initDone = false;
    8130:	f889 5000 	strb.w	r5, [r9]
  m_errorCode = SD_CARD_ERROR_NONE;
    8134:	7025      	strb	r5, [r4, #0]
  m_highCapacity = false;
    8136:	f888 5000 	strb.w	r5, [r8]
  m_version2 = false;
    813a:	7035      	strb	r5, [r6, #0]
  initSDHC();
    813c:	f7ff fad2 	bl	76e4 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    8140:	4629      	mov	r1, r5
    8142:	4628      	mov	r0, r5
    8144:	f7ff fc00 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    8148:	b950      	cbnz	r0, 8160 <SdioCard::begin(SdioConfig)+0x48>
  m_errorCode = code;
    814a:	2101      	movs	r1, #1
  m_errorLine = line;
    814c:	4b92      	ldr	r3, [pc, #584]	; (8398 <SdioCard::begin(SdioConfig)+0x280>)
    814e:	f240 228e 	movw	r2, #654	; 0x28e
    8152:	4605      	mov	r5, r0
  m_errorCode = code;
    8154:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    8156:	601a      	str	r2, [r3, #0]
}
    8158:	4628      	mov	r0, r5
    815a:	b011      	add	sp, #68	; 0x44
    815c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8160:	2503      	movs	r5, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    8162:	4f8e      	ldr	r7, [pc, #568]	; (839c <SdioCard::begin(SdioConfig)+0x284>)
    8164:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    8168:	4638      	mov	r0, r7
    816a:	f7ff fbed 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    816e:	2800      	cmp	r0, #0
    8170:	d14e      	bne.n	8210 <SdioCard::begin(SdioConfig)+0xf8>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    8172:	3d01      	subs	r5, #1
    8174:	d1f6      	bne.n	8164 <SdioCard::begin(SdioConfig)+0x4c>
  if (!m_version2) {
    8176:	7833      	ldrb	r3, [r6, #0]
    8178:	2b00      	cmp	r3, #0
    817a:	d03d      	beq.n	81f8 <SdioCard::begin(SdioConfig)+0xe0>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    817c:	f8df b268 	ldr.w	fp, [pc, #616]	; 83e8 <SdioCard::begin(SdioConfig)+0x2d0>
  int m = micros();
    8180:	f001 fa3e 	bl	9600 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8184:	4e86      	ldr	r6, [pc, #536]	; (83a0 <SdioCard::begin(SdioConfig)+0x288>)
  int m = micros();
    8186:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8188:	f8df a260 	ldr.w	sl, [pc, #608]	; 83ec <SdioCard::begin(SdioConfig)+0x2d4>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    818c:	4f85      	ldr	r7, [pc, #532]	; (83a4 <SdioCard::begin(SdioConfig)+0x28c>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    818e:	2100      	movs	r1, #0
    8190:	4630      	mov	r0, r6
    8192:	f7ff fbd9 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    8196:	b950      	cbnz	r0, 81ae <SdioCard::begin(SdioConfig)+0x96>
      return sdError(SD_CARD_ERROR_ACMD41);
    8198:	2500      	movs	r5, #0
  m_errorCode = code;
    819a:	2117      	movs	r1, #23
  m_errorLine = line;
    819c:	4b7e      	ldr	r3, [pc, #504]	; (8398 <SdioCard::begin(SdioConfig)+0x280>)
    819e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
}
    81a2:	4628      	mov	r0, r5
  m_errorCode = code;
    81a4:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    81a6:	601a      	str	r2, [r3, #0]
}
    81a8:	b011      	add	sp, #68	; 0x44
    81aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    81ae:	4659      	mov	r1, fp
    81b0:	4650      	mov	r0, sl
    81b2:	f7ff fbc9 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    81b6:	2800      	cmp	r0, #0
    81b8:	d0ee      	beq.n	8198 <SdioCard::begin(SdioConfig)+0x80>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    81ba:	f001 fa21 	bl	9600 <micros>
    81be:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    81c0:	4b79      	ldr	r3, [pc, #484]	; (83a8 <SdioCard::begin(SdioConfig)+0x290>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    81c2:	42b8      	cmp	r0, r7
    81c4:	d8e8      	bhi.n	8198 <SdioCard::begin(SdioConfig)+0x80>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    81c6:	691a      	ldr	r2, [r3, #16]
    81c8:	2a00      	cmp	r2, #0
    81ca:	dae0      	bge.n	818e <SdioCard::begin(SdioConfig)+0x76>
  m_ocr = SDHC_CMDRSP0;
    81cc:	6919      	ldr	r1, [r3, #16]
    81ce:	4a77      	ldr	r2, [pc, #476]	; (83ac <SdioCard::begin(SdioConfig)+0x294>)
    81d0:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    81d2:	691b      	ldr	r3, [r3, #16]
    81d4:	005a      	lsls	r2, r3, #1
    81d6:	d502      	bpl.n	81de <SdioCard::begin(SdioConfig)+0xc6>
    m_highCapacity = true;
    81d8:	2301      	movs	r3, #1
    81da:	f888 3000 	strb.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    81de:	2100      	movs	r1, #0
    81e0:	4873      	ldr	r0, [pc, #460]	; (83b0 <SdioCard::begin(SdioConfig)+0x298>)
    81e2:	f7ff fbb1 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    81e6:	4605      	mov	r5, r0
    81e8:	bb10      	cbnz	r0, 8230 <SdioCard::begin(SdioConfig)+0x118>
  m_errorCode = code;
    81ea:	2102      	movs	r1, #2
  m_errorLine = line;
    81ec:	4b6a      	ldr	r3, [pc, #424]	; (8398 <SdioCard::begin(SdioConfig)+0x280>)
    81ee:	f240 22b1 	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    81f2:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    81f4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    81f6:	e7af      	b.n	8158 <SdioCard::begin(SdioConfig)+0x40>
    initSDHC();
    81f8:	f7ff fa74 	bl	76e4 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    81fc:	4629      	mov	r1, r5
    81fe:	4628      	mov	r0, r5
    8200:	f7ff fba2 	bl	7948 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8204:	7833      	ldrb	r3, [r6, #0]
    8206:	2b00      	cmp	r3, #0
    8208:	d1b8      	bne.n	817c <SdioCard::begin(SdioConfig)+0x64>
    820a:	f44f 1b40 	mov.w	fp, #3145728	; 0x300000
    820e:	e7b7      	b.n	8180 <SdioCard::begin(SdioConfig)+0x68>
      if (SDHC_CMDRSP0 != 0X1AA) {
    8210:	4b65      	ldr	r3, [pc, #404]	; (83a8 <SdioCard::begin(SdioConfig)+0x290>)
    8212:	691b      	ldr	r3, [r3, #16]
    8214:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    8218:	d007      	beq.n	822a <SdioCard::begin(SdioConfig)+0x112>
  m_errorCode = code;
    821a:	2106      	movs	r1, #6
  m_errorLine = line;
    821c:	4b5e      	ldr	r3, [pc, #376]	; (8398 <SdioCard::begin(SdioConfig)+0x280>)
    821e:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
    8222:	2500      	movs	r5, #0
  m_errorCode = code;
    8224:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    8226:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    8228:	e796      	b.n	8158 <SdioCard::begin(SdioConfig)+0x40>
      m_version2 = true;
    822a:	2301      	movs	r3, #1
    822c:	7033      	strb	r3, [r6, #0]
  if (!m_version2) {
    822e:	e7a5      	b.n	817c <SdioCard::begin(SdioConfig)+0x64>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    8230:	2100      	movs	r1, #0
    8232:	4860      	ldr	r0, [pc, #384]	; (83b4 <SdioCard::begin(SdioConfig)+0x29c>)
    8234:	f7ff fb88 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    8238:	4605      	mov	r5, r0
    823a:	b930      	cbnz	r0, 824a <SdioCard::begin(SdioConfig)+0x132>
  m_errorCode = code;
    823c:	2103      	movs	r1, #3
  m_errorLine = line;
    823e:	4b56      	ldr	r3, [pc, #344]	; (8398 <SdioCard::begin(SdioConfig)+0x280>)
    8240:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    8244:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    8246:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    8248:	e786      	b.n	8158 <SdioCard::begin(SdioConfig)+0x40>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    824a:	4e57      	ldr	r6, [pc, #348]	; (83a8 <SdioCard::begin(SdioConfig)+0x290>)
    824c:	4b5a      	ldr	r3, [pc, #360]	; (83b8 <SdioCard::begin(SdioConfig)+0x2a0>)
    824e:	6932      	ldr	r2, [r6, #16]
    8250:	4f5a      	ldr	r7, [pc, #360]	; (83bc <SdioCard::begin(SdioConfig)+0x2a4>)
    8252:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    8254:	495a      	ldr	r1, [pc, #360]	; (83c0 <SdioCard::begin(SdioConfig)+0x2a8>)
    8256:	485b      	ldr	r0, [pc, #364]	; (83c4 <SdioCard::begin(SdioConfig)+0x2ac>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8258:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    825a:	f7ff fbc1 	bl	79e0 <readReg16(unsigned long, void*)>
    825e:	4605      	mov	r5, r0
    8260:	b930      	cbnz	r0, 8270 <SdioCard::begin(SdioConfig)+0x158>
  m_errorCode = code;
    8262:	2107      	movs	r1, #7
  m_errorLine = line;
    8264:	4b4c      	ldr	r3, [pc, #304]	; (8398 <SdioCard::begin(SdioConfig)+0x280>)
    8266:	f240 22b9 	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    826a:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    826c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    826e:	e773      	b.n	8158 <SdioCard::begin(SdioConfig)+0x40>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    8270:	4955      	ldr	r1, [pc, #340]	; (83c8 <SdioCard::begin(SdioConfig)+0x2b0>)
    8272:	4856      	ldr	r0, [pc, #344]	; (83cc <SdioCard::begin(SdioConfig)+0x2b4>)
    8274:	f7ff fbb4 	bl	79e0 <readReg16(unsigned long, void*)>
    8278:	4605      	mov	r5, r0
    827a:	b930      	cbnz	r0, 828a <SdioCard::begin(SdioConfig)+0x172>
  m_errorCode = code;
    827c:	2108      	movs	r1, #8
  m_errorLine = line;
    827e:	4b46      	ldr	r3, [pc, #280]	; (8398 <SdioCard::begin(SdioConfig)+0x280>)
    8280:	f44f 722f 	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    8284:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    8286:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    8288:	e766      	b.n	8158 <SdioCard::begin(SdioConfig)+0x40>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    828a:	6839      	ldr	r1, [r7, #0]
    828c:	4850      	ldr	r0, [pc, #320]	; (83d0 <SdioCard::begin(SdioConfig)+0x2b8>)
    828e:	f7ff fb5b 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    8292:	4605      	mov	r5, r0
    8294:	b930      	cbnz	r0, 82a4 <SdioCard::begin(SdioConfig)+0x18c>
  m_errorCode = code;
    8296:	2105      	movs	r1, #5
  m_errorLine = line;
    8298:	4b3f      	ldr	r3, [pc, #252]	; (8398 <SdioCard::begin(SdioConfig)+0x280>)
    829a:	f240 22bf 	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    829e:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    82a0:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    82a2:	e759      	b.n	8158 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    82a4:	6839      	ldr	r1, [r7, #0]
    82a6:	483e      	ldr	r0, [pc, #248]	; (83a0 <SdioCard::begin(SdioConfig)+0x288>)
    82a8:	f7ff fb4e 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    82ac:	b938      	cbnz	r0, 82be <SdioCard::begin(SdioConfig)+0x1a6>
  m_errorCode = code;
    82ae:	2114      	movs	r1, #20
  m_errorLine = line;
    82b0:	4b39      	ldr	r3, [pc, #228]	; (8398 <SdioCard::begin(SdioConfig)+0x280>)
    82b2:	f240 22c3 	movw	r2, #707	; 0x2c3
    return sdError(SD_CARD_ERROR_ACMD6);
    82b6:	2500      	movs	r5, #0
  m_errorCode = code;
    82b8:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    82ba:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    82bc:	e74c      	b.n	8158 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    82be:	2102      	movs	r1, #2
    82c0:	4844      	ldr	r0, [pc, #272]	; (83d4 <SdioCard::begin(SdioConfig)+0x2bc>)
    82c2:	f7ff fb41 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    82c6:	4605      	mov	r5, r0
    82c8:	2800      	cmp	r0, #0
    82ca:	d0f0      	beq.n	82ae <SdioCard::begin(SdioConfig)+0x196>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    82cc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    82ce:	4669      	mov	r1, sp
    82d0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    82d4:	f023 0306 	bic.w	r3, r3, #6
    82d8:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    82da:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    82dc:	f043 0302 	orr.w	r3, r3, #2
    82e0:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    82e2:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    82e6:	6473      	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    82e8:	f7ff fcd4 	bl	7c94 <cardCMD6(unsigned long, unsigned char*)>
  bool highspeedModeSupported = (2 & status[13]);
    82ec:	f89d 300d 	ldrb.w	r3, [sp, #13]
  if (highSpeedModeAsk && highspeedModeSupported) {
    82f0:	079b      	lsls	r3, r3, #30
    82f2:	d543      	bpl.n	837c <SdioCard::begin(SdioConfig)+0x264>
    82f4:	2800      	cmp	r0, #0
    82f6:	d041      	beq.n	837c <SdioCard::begin(SdioConfig)+0x264>
    uint32_t m_errorLine_before = m_errorLine;
    82f8:	4e27      	ldr	r6, [pc, #156]	; (8398 <SdioCard::begin(SdioConfig)+0x280>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    82fa:	4669      	mov	r1, sp
    82fc:	4836      	ldr	r0, [pc, #216]	; (83d8 <SdioCard::begin(SdioConfig)+0x2c0>)
    uint8_t err_code_before = m_errorCode;
    82fe:	f894 8000 	ldrb.w	r8, [r4]
    uint32_t m_errorLine_before = m_errorLine;
    8302:	6837      	ldr	r7, [r6, #0]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    8304:	f7ff fcc6 	bl	7c94 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    8308:	f89d 3010 	ldrb.w	r3, [sp, #16]
    830c:	f003 030f 	and.w	r3, r3, #15
    if (switchRequestAsk && switchRequestDone) {
    8310:	2b01      	cmp	r3, #1
    8312:	d136      	bne.n	8382 <SdioCard::begin(SdioConfig)+0x26a>
    8314:	b3a8      	cbz	r0, 8382 <SdioCard::begin(SdioConfig)+0x26a>
      kHzSdClk = 50000;
    8316:	f24c 3050 	movw	r0, #50000	; 0xc350
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    831a:	4c30      	ldr	r4, [pc, #192]	; (83dc <SdioCard::begin(SdioConfig)+0x2c4>)
    831c:	2305      	movs	r3, #5
    831e:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    8322:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    8326:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    832a:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    832e:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    8332:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    8336:	f7ff f8eb 	bl	7510 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    833a:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    833c:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    8340:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    8344:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    8348:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    834c:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    8350:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    8354:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    8358:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    835c:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    8360:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    8364:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    8368:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    836c:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    836e:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    8372:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    8376:	f889 3000 	strb.w	r3, [r9]
  return true;
    837a:	e6ed      	b.n	8158 <SdioCard::begin(SdioConfig)+0x40>
  kHzSdClk = 25000;
    837c:	f246 10a8 	movw	r0, #25000	; 0x61a8
    8380:	e7cb      	b.n	831a <SdioCard::begin(SdioConfig)+0x202>
    8382:	f246 10a8 	movw	r0, #25000	; 0x61a8
      m_errorCode = err_code_before;
    8386:	f884 8000 	strb.w	r8, [r4]
      m_errorLine = m_errorLine_before;
    838a:	6037      	str	r7, [r6, #0]
    838c:	e7c5      	b.n	831a <SdioCard::begin(SdioConfig)+0x202>
    838e:	bf00      	nop
    8390:	20008702 	.word	0x20008702
    8394:	20009623 	.word	0x20009623
    8398:	20009180 	.word	0x20009180
    839c:	081a0000 	.word	0x081a0000
    83a0:	371a0000 	.word	0x371a0000
    83a4:	000f4240 	.word	0x000f4240
    83a8:	402c0000 	.word	0x402c0000
    83ac:	200091a4 	.word	0x200091a4
    83b0:	02090000 	.word	0x02090000
    83b4:	031a0000 	.word	0x031a0000
    83b8:	ffff0000 	.word	0xffff0000
    83bc:	200091a8 	.word	0x200091a8
    83c0:	20009194 	.word	0x20009194
    83c4:	09090000 	.word	0x09090000
    83c8:	20009184 	.word	0x20009184
    83cc:	0a090000 	.word	0x0a090000
    83d0:	071b0000 	.word	0x071b0000
    83d4:	061a0000 	.word	0x061a0000
    83d8:	80fffff1 	.word	0x80fffff1
    83dc:	401f8000 	.word	0x401f8000
    83e0:	20009622 	.word	0x20009622
    83e4:	20009624 	.word	0x20009624
    83e8:	40300000 	.word	0x40300000
    83ec:	29020000 	.word	0x29020000

000083f0 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    83f0:	4b37      	ldr	r3, [pc, #220]	; (84d0 <SdioCard::readData(unsigned char*)+0xe0>)
    83f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    83f4:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    83f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83fa:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    83fc:	d40d      	bmi.n	841a <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    83fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8400:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    8404:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    8406:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    840a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    840e:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8412:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    8416:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    8418:	b662      	cpsie	i
  uint32_t m = micros();
    841a:	f001 f8f1 	bl	9600 <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    841e:	4e2c      	ldr	r6, [pc, #176]	; (84d0 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8420:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 84e8 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    8424:	4605      	mov	r5, r0
  while (fcn()) {
    8426:	e004      	b.n	8432 <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8428:	f001 f8ea 	bl	9600 <micros>
    842c:	1b43      	subs	r3, r0, r5
    842e:	4543      	cmp	r3, r8
    8430:	d837      	bhi.n	84a2 <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    8432:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    8434:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    8438:	d0f6      	beq.n	8428 <SdioCard::readData(unsigned char*)+0x38>
    843a:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    843e:	4824      	ldr	r0, [pc, #144]	; (84d0 <SdioCard::readData(unsigned char*)+0xe0>)
    8440:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    8444:	6a43      	ldr	r3, [r0, #36]	; 0x24
    8446:	051b      	lsls	r3, r3, #20
    8448:	d5fc      	bpl.n	8444 <SdioCard::readData(unsigned char*)+0x54>
    844a:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    844e:	6a02      	ldr	r2, [r0, #32]
    8450:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8454:	459c      	cmp	ip, r3
    8456:	d1fa      	bne.n	844e <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8458:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    845c:	4567      	cmp	r7, ip
    845e:	d1f1      	bne.n	8444 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    8460:	f001 f8ce 	bl	9600 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8464:	4f1a      	ldr	r7, [pc, #104]	; (84d0 <SdioCard::readData(unsigned char*)+0xe0>)
    8466:	4d1b      	ldr	r5, [pc, #108]	; (84d4 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    8468:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    846a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 84e8 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    846e:	e004      	b.n	847a <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8470:	f001 f8c6 	bl	9600 <micros>
    8474:	1b83      	subs	r3, r0, r6
    8476:	4543      	cmp	r3, r8
    8478:	d81d      	bhi.n	84b6 <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    847a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    847c:	402c      	ands	r4, r5
    847e:	d0f7      	beq.n	8470 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    8480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8482:	4a15      	ldr	r2, [pc, #84]	; (84d8 <SdioCard::readData(unsigned char*)+0xe8>)
    8484:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    8486:	6813      	ldr	r3, [r2, #0]
    8488:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    848a:	6813      	ldr	r3, [r2, #0]
    848c:	f013 0302 	ands.w	r3, r3, #2
    8490:	d01b      	beq.n	84ca <SdioCard::readData(unsigned char*)+0xda>
    8492:	6812      	ldr	r2, [r2, #0]
    8494:	4b11      	ldr	r3, [pc, #68]	; (84dc <SdioCard::readData(unsigned char*)+0xec>)
    8496:	421a      	tst	r2, r3
    8498:	bf0c      	ite	eq
    849a:	2001      	moveq	r0, #1
    849c:	2000      	movne	r0, #0
}
    849e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    84a2:	490f      	ldr	r1, [pc, #60]	; (84e0 <SdioCard::readData(unsigned char*)+0xf0>)
    84a4:	251a      	movs	r5, #26
  m_errorLine = line;
    84a6:	4b0f      	ldr	r3, [pc, #60]	; (84e4 <SdioCard::readData(unsigned char*)+0xf4>)
    84a8:	f240 3256 	movw	r2, #854	; 0x356
    return sdError(SD_CARD_ERROR_READ_FIFO);
    84ac:	4620      	mov	r0, r4
  m_errorCode = code;
    84ae:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    84b0:	601a      	str	r2, [r3, #0]
}
    84b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    84b6:	490a      	ldr	r1, [pc, #40]	; (84e0 <SdioCard::readData(unsigned char*)+0xf0>)
    84b8:	251d      	movs	r5, #29
  m_errorLine = line;
    84ba:	4b0a      	ldr	r3, [pc, #40]	; (84e4 <SdioCard::readData(unsigned char*)+0xf4>)
    84bc:	f240 3261 	movw	r2, #865	; 0x361
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    84c0:	4620      	mov	r0, r4
  m_errorCode = code;
    84c2:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    84c4:	601a      	str	r2, [r3, #0]
}
    84c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    84ca:	4618      	mov	r0, r3
}
    84cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84d0:	402c0000 	.word	0x402c0000
    84d4:	117f0002 	.word	0x117f0002
    84d8:	200091b0 	.word	0x200091b0
    84dc:	117f0000 	.word	0x117f0000
    84e0:	20008702 	.word	0x20008702
    84e4:	20009180 	.word	0x20009180
    84e8:	000f4240 	.word	0x000f4240

000084ec <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    84ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    84f0:	4b29      	ldr	r3, [pc, #164]	; (8598 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    84f2:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    84f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 85b8 <SdioCard::readStart(unsigned long)+0xcc>
    84f8:	4e28      	ldr	r6, [pc, #160]	; (859c <SdioCard::readStart(unsigned long)+0xb0>)
    84fa:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    84fe:	f001 f87f 	bl	9600 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8502:	4d27      	ldr	r5, [pc, #156]	; (85a0 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    8504:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8506:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 85bc <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    850a:	4f26      	ldr	r7, [pc, #152]	; (85a4 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    850c:	e006      	b.n	851c <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    850e:	f001 f877 	bl	9600 <micros>
    8512:	1b00      	subs	r0, r0, r4
    8514:	42b8      	cmp	r0, r7
    8516:	d829      	bhi.n	856c <SdioCard::readStart(unsigned long)+0x80>
    yield();
    8518:	f002 fc7e 	bl	ae18 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    851c:	6831      	ldr	r1, [r6, #0]
    851e:	4628      	mov	r0, r5
    8520:	f7ff fa12 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    8524:	2800      	cmp	r0, #0
    8526:	d0f2      	beq.n	850e <SdioCard::readStart(unsigned long)+0x22>
    8528:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    852c:	05db      	lsls	r3, r3, #23
    852e:	d5ee      	bpl.n	850e <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    8530:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    8532:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    8536:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    853a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    853e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8542:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8546:	4b18      	ldr	r3, [pc, #96]	; (85a8 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    8548:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    854c:	781b      	ldrb	r3, [r3, #0]
    854e:	b1cb      	cbz	r3, 8584 <SdioCard::readStart(unsigned long)+0x98>
    8550:	4649      	mov	r1, r9
    8552:	4816      	ldr	r0, [pc, #88]	; (85ac <SdioCard::readStart(unsigned long)+0xc0>)
    8554:	f7ff f9f8 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    8558:	b930      	cbnz	r0, 8568 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    855a:	4915      	ldr	r1, [pc, #84]	; (85b0 <SdioCard::readStart(unsigned long)+0xc4>)
    855c:	240c      	movs	r4, #12
  m_errorLine = line;
    855e:	4b15      	ldr	r3, [pc, #84]	; (85b4 <SdioCard::readStart(unsigned long)+0xc8>)
    8560:	f240 32bd 	movw	r2, #957	; 0x3bd
  m_errorCode = code;
    8564:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    8566:	601a      	str	r2, [r3, #0]
}
    8568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    856c:	4a10      	ldr	r2, [pc, #64]	; (85b0 <SdioCard::readStart(unsigned long)+0xc4>)
    856e:	210a      	movs	r1, #10
      m_busyFcn = 0;
    8570:	2000      	movs	r0, #0
  m_errorLine = line;
    8572:	4b10      	ldr	r3, [pc, #64]	; (85b4 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    8574:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    8576:	f240 32b1 	movw	r2, #945	; 0x3b1
      m_busyFcn = 0;
    857a:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    857e:	601a      	str	r2, [r3, #0]
}
    8580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8584:	ea4f 2949 	mov.w	r9, r9, lsl #9
    8588:	4808      	ldr	r0, [pc, #32]	; (85ac <SdioCard::readStart(unsigned long)+0xc0>)
    858a:	4649      	mov	r1, r9
    858c:	f7ff f9dc 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    8590:	2800      	cmp	r0, #0
    8592:	d1e9      	bne.n	8568 <SdioCard::readStart(unsigned long)+0x7c>
    8594:	e7e1      	b.n	855a <SdioCard::readStart(unsigned long)+0x6e>
    8596:	bf00      	nop
    8598:	00007add 	.word	0x00007add
    859c:	200091a8 	.word	0x200091a8
    85a0:	0d1a0000 	.word	0x0d1a0000
    85a4:	000f4240 	.word	0x000f4240
    85a8:	20009624 	.word	0x20009624
    85ac:	123a0030 	.word	0x123a0030
    85b0:	20008702 	.word	0x20008702
    85b4:	20009180 	.word	0x20009180
    85b8:	200091ac 	.word	0x200091ac
    85bc:	402c0000 	.word	0x402c0000

000085c0 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    85c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    85c4:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    85c6:	4c1d      	ldr	r4, [pc, #116]	; (863c <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    85c8:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    85ca:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    85cc:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    85ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    85d0:	481b      	ldr	r0, [pc, #108]	; (8640 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    85d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    85d6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    85d8:	f7ff f9b6 	bl	7948 <cardCommand(unsigned long, unsigned long)>
    85dc:	b940      	cbnz	r0, 85f0 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    85de:	4919      	ldr	r1, [pc, #100]	; (8644 <SdioCard::stopTransmission(bool)+0x84>)
    85e0:	2409      	movs	r4, #9
  m_errorLine = line;
    85e2:	4b19      	ldr	r3, [pc, #100]	; (8648 <SdioCard::stopTransmission(bool)+0x88>)
    85e4:	f240 32d3 	movw	r2, #979	; 0x3d3
  m_errorCode = code;
    85e8:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    85ea:	601a      	str	r2, [r3, #0]
}
    85ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    85f0:	2d00      	cmp	r5, #0
    85f2:	d0fb      	beq.n	85ec <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    85f4:	4b15      	ldr	r3, [pc, #84]	; (864c <SdioCard::stopTransmission(bool)+0x8c>)
    85f6:	4e16      	ldr	r6, [pc, #88]	; (8650 <SdioCard::stopTransmission(bool)+0x90>)
    85f8:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    85fa:	f001 f801 	bl	9600 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    85fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    8600:	4607      	mov	r7, r0
  while (fcn()) {
    8602:	01da      	lsls	r2, r3, #7
    8604:	d416      	bmi.n	8634 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8606:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8654 <SdioCard::stopTransmission(bool)+0x94>
    860a:	e004      	b.n	8616 <SdioCard::stopTransmission(bool)+0x56>
    yield();
    860c:	f002 fc04 	bl	ae18 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8610:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    8612:	01db      	lsls	r3, r3, #7
    8614:	d40e      	bmi.n	8634 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8616:	f000 fff3 	bl	9600 <micros>
    861a:	1bc0      	subs	r0, r0, r7
    861c:	4540      	cmp	r0, r8
    861e:	d9f5      	bls.n	860c <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    8620:	4a08      	ldr	r2, [pc, #32]	; (8644 <SdioCard::stopTransmission(bool)+0x84>)
    8622:	210a      	movs	r1, #10
      m_busyFcn = 0;
    8624:	2000      	movs	r0, #0
  m_errorLine = line;
    8626:	4b08      	ldr	r3, [pc, #32]	; (8648 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    8628:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    862a:	f240 32d7 	movw	r2, #983	; 0x3d7
      m_busyFcn = 0;
    862e:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    8630:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    8632:	e7db      	b.n	85ec <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    8634:	2300      	movs	r3, #0
  return true;
    8636:	4628      	mov	r0, r5
  m_busyFcn = 0;
    8638:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    863a:	e7d7      	b.n	85ec <SdioCard::stopTransmission(bool)+0x2c>
    863c:	402c0000 	.word	0x402c0000
    8640:	0cdb0000 	.word	0x0cdb0000
    8644:	20008702 	.word	0x20008702
    8648:	20009180 	.word	0x20009180
    864c:	000074f1 	.word	0x000074f1
    8650:	200091ac 	.word	0x200091ac
    8654:	000f4240 	.word	0x000f4240

00008658 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    8658:	4b0a      	ldr	r3, [pc, #40]	; (8684 <SdioCard::syncDevice()+0x2c>)
    865a:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    865c:	b510      	push	{r4, lr}
    865e:	4604      	mov	r4, r0
  if (!m_transferActive) {
    8660:	b91b      	cbnz	r3, 866a <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    8662:	7a63      	ldrb	r3, [r4, #9]
    8664:	b943      	cbnz	r3, 8678 <SdioCard::syncDevice()+0x20>
  return true;
    8666:	2001      	movs	r0, #1
}
    8668:	bd10      	pop	{r4, pc}
    866a:	f7ff f8cf 	bl	780c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    866e:	2800      	cmp	r0, #0
    8670:	d0fa      	beq.n	8668 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    8672:	7a63      	ldrb	r3, [r4, #9]
    8674:	2b00      	cmp	r3, #0
    8676:	d0f6      	beq.n	8666 <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    8678:	4620      	mov	r0, r4
    867a:	2101      	movs	r1, #1
}
    867c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    8680:	f7ff bf9e 	b.w	85c0 <SdioCard::stopTransmission(bool)>
    8684:	20009625 	.word	0x20009625

00008688 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    8688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    868c:	4604      	mov	r4, r0
    868e:	7a00      	ldrb	r0, [r0, #8]
    8690:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    8694:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    8696:	f010 0501 	ands.w	r5, r0, #1
    869a:	d013      	beq.n	86c4 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    869c:	0793      	lsls	r3, r2, #30
    869e:	d03c      	beq.n	871a <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    86a0:	2301      	movs	r3, #1
    86a2:	4838      	ldr	r0, [pc, #224]	; (8784 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    86a4:	466a      	mov	r2, sp
    86a6:	f7ff fc01 	bl	7eac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    86aa:	2800      	cmp	r0, #0
    86ac:	d03a      	beq.n	8724 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    86ae:	f44f 7200 	mov.w	r2, #512	; 0x200
    86b2:	4669      	mov	r1, sp
    86b4:	4630      	mov	r0, r6
    86b6:	f001 f949 	bl	994c <memcpy>
}
    86ba:	4628      	mov	r0, r5
    86bc:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    86c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    86c4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8794 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    86c8:	460f      	mov	r7, r1
    86ca:	f898 3000 	ldrb.w	r3, [r8]
    86ce:	2b00      	cmp	r3, #0
    86d0:	d135      	bne.n	873e <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    86d2:	7a63      	ldrb	r3, [r4, #9]
    86d4:	2b01      	cmp	r3, #1
    86d6:	d039      	beq.n	874c <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    86d8:	6822      	ldr	r2, [r4, #0]
    86da:	492b      	ldr	r1, [pc, #172]	; (8788 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    86dc:	6a12      	ldr	r2, [r2, #32]
    86de:	428a      	cmp	r2, r1
    86e0:	d14a      	bne.n	8778 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    86e2:	f898 2000 	ldrb.w	r2, [r8]
    86e6:	2a00      	cmp	r2, #0
    86e8:	d134      	bne.n	8754 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    86ea:	2b00      	cmp	r3, #0
    86ec:	d139      	bne.n	8762 <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    86ee:	4639      	mov	r1, r7
    86f0:	4620      	mov	r0, r4
    86f2:	f7ff fefb 	bl	84ec <SdioCard::readStart(unsigned long)>
    86f6:	b1e8      	cbz	r0, 8734 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    86f8:	2301      	movs	r3, #1
      m_curSector = sector;
    86fa:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    86fc:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    86fe:	4631      	mov	r1, r6
    8700:	4620      	mov	r0, r4
    8702:	f7ff fe75 	bl	83f0 <SdioCard::readData(unsigned char*)>
    8706:	b1a8      	cbz	r0, 8734 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    8708:	6863      	ldr	r3, [r4, #4]
  return true;
    870a:	4605      	mov	r5, r0
    m_curSector++;
    870c:	3301      	adds	r3, #1
}
    870e:	4628      	mov	r0, r5
    m_curSector++;
    8710:	6063      	str	r3, [r4, #4]
}
    8712:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    8716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    871a:	2301      	movs	r3, #1
    871c:	4819      	ldr	r0, [pc, #100]	; (8784 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    871e:	f7ff fbc5 	bl	7eac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8722:	b938      	cbnz	r0, 8734 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    8724:	4919      	ldr	r1, [pc, #100]	; (878c <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    8726:	200b      	movs	r0, #11
  m_errorLine = line;
    8728:	4b19      	ldr	r3, [pc, #100]	; (8790 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    872a:	f44f 725d 	mov.w	r2, #884	; 0x374
      return sdError(SD_CARD_ERROR_CMD17);
    872e:	2500      	movs	r5, #0
  m_errorCode = code;
    8730:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    8732:	601a      	str	r2, [r3, #0]
}
    8734:	4628      	mov	r0, r5
    8736:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    873a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    873e:	f7ff f865 	bl	780c <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    8742:	2800      	cmp	r0, #0
    8744:	d0f6      	beq.n	8734 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    8746:	7a63      	ldrb	r3, [r4, #9]
    8748:	2b01      	cmp	r3, #1
    874a:	d1c5      	bne.n	86d8 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    874c:	6862      	ldr	r2, [r4, #4]
    874e:	42ba      	cmp	r2, r7
    8750:	d1c2      	bne.n	86d8 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    8752:	e7d4      	b.n	86fe <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    8754:	f7ff f85a 	bl	780c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    8758:	2800      	cmp	r0, #0
    875a:	d0eb      	beq.n	8734 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    875c:	7a63      	ldrb	r3, [r4, #9]
    875e:	2b00      	cmp	r3, #0
    8760:	d0c5      	beq.n	86ee <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    8762:	2101      	movs	r1, #1
    8764:	4620      	mov	r0, r4
    8766:	f7ff ff2b 	bl	85c0 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    876a:	2800      	cmp	r0, #0
    876c:	d1bf      	bne.n	86ee <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    876e:	4628      	mov	r0, r5
    8770:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    8774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    8778:	4620      	mov	r0, r4
    877a:	4790      	blx	r2
    877c:	2800      	cmp	r0, #0
    877e:	d0f6      	beq.n	876e <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    8780:	e7b5      	b.n	86ee <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    8782:	bf00      	nop
    8784:	113a0011 	.word	0x113a0011
    8788:	00008659 	.word	0x00008659
    878c:	20008702 	.word	0x20008702
    8790:	20009180 	.word	0x20009180
    8794:	20009625 	.word	0x20009625

00008798 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    879c:	7a04      	ldrb	r4, [r0, #8]
    879e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    87a2:	460f      	mov	r7, r1
    87a4:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    87a6:	f014 0401 	ands.w	r4, r4, #1
    87aa:	d01d      	beq.n	87e8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    87ac:	f012 0f03 	tst.w	r2, #3
    87b0:	d006      	beq.n	87c0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    87b2:	4668      	mov	r0, sp
    87b4:	4611      	mov	r1, r2
    87b6:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    87ba:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    87bc:	f001 f8c6 	bl	994c <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    87c0:	2301      	movs	r3, #1
    87c2:	4642      	mov	r2, r8
    87c4:	4639      	mov	r1, r7
    87c6:	482c      	ldr	r0, [pc, #176]	; (8878 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    87c8:	f7ff fb70 	bl	7eac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    87cc:	4604      	mov	r4, r0
    87ce:	b930      	cbnz	r0, 87de <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    87d0:	492a      	ldr	r1, [pc, #168]	; (887c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    87d2:	200d      	movs	r0, #13
  m_errorLine = line;
    87d4:	4b2a      	ldr	r3, [pc, #168]	; (8880 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    87d6:	f240 4211 	movw	r2, #1041	; 0x411
  m_errorCode = code;
    87da:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    87dc:	601a      	str	r2, [r3, #0]
}
    87de:	4620      	mov	r0, r4
    87e0:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    87e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    87e8:	4d26      	ldr	r5, [pc, #152]	; (8884 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    87ea:	4606      	mov	r6, r0
    87ec:	782b      	ldrb	r3, [r5, #0]
    87ee:	bb2b      	cbnz	r3, 883c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    87f0:	7a73      	ldrb	r3, [r6, #9]
    87f2:	2b02      	cmp	r3, #2
    87f4:	d029      	beq.n	884a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    87f6:	6832      	ldr	r2, [r6, #0]
    87f8:	4923      	ldr	r1, [pc, #140]	; (8888 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    87fa:	6a12      	ldr	r2, [r2, #32]
    87fc:	428a      	cmp	r2, r1
    87fe:	d136      	bne.n	886e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    8800:	782a      	ldrb	r2, [r5, #0]
    8802:	bb32      	cbnz	r2, 8852 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    8804:	2b00      	cmp	r3, #0
    8806:	d12b      	bne.n	8860 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
    8808:	6833      	ldr	r3, [r6, #0]
    880a:	4639      	mov	r1, r7
    880c:	4630      	mov	r0, r6
    880e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8810:	4798      	blx	r3
    8812:	2800      	cmp	r0, #0
    8814:	d0e3      	beq.n	87de <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    8816:	2302      	movs	r3, #2
      m_curSector = sector;
    8818:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    881a:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    881c:	6833      	ldr	r3, [r6, #0]
    881e:	4641      	mov	r1, r8
    8820:	4630      	mov	r0, r6
    8822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8824:	4798      	blx	r3
    8826:	2800      	cmp	r0, #0
    8828:	d0d9      	beq.n	87de <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    882a:	6873      	ldr	r3, [r6, #4]
  return true;
    882c:	4604      	mov	r4, r0
    m_curSector++;
    882e:	3301      	adds	r3, #1
}
    8830:	4620      	mov	r0, r4
    m_curSector++;
    8832:	6073      	str	r3, [r6, #4]
}
    8834:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    8838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    883c:	f7fe ffe6 	bl	780c <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    8840:	2800      	cmp	r0, #0
    8842:	d0cc      	beq.n	87de <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    8844:	7a73      	ldrb	r3, [r6, #9]
    8846:	2b02      	cmp	r3, #2
    8848:	d1d5      	bne.n	87f6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    884a:	6872      	ldr	r2, [r6, #4]
    884c:	42ba      	cmp	r2, r7
    884e:	d1d2      	bne.n	87f6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    8850:	e7e4      	b.n	881c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    8852:	f7fe ffdb 	bl	780c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    8856:	2800      	cmp	r0, #0
    8858:	d0c1      	beq.n	87de <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    885a:	7a73      	ldrb	r3, [r6, #9]
    885c:	2b00      	cmp	r3, #0
    885e:	d0d3      	beq.n	8808 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    8860:	2101      	movs	r1, #1
    8862:	4630      	mov	r0, r6
    8864:	f7ff feac 	bl	85c0 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    8868:	2800      	cmp	r0, #0
    886a:	d0b8      	beq.n	87de <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    886c:	e7cc      	b.n	8808 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    886e:	4630      	mov	r0, r6
    8870:	4790      	blx	r2
    8872:	2800      	cmp	r0, #0
    8874:	d0b3      	beq.n	87de <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    8876:	e7c7      	b.n	8808 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    8878:	183a0001 	.word	0x183a0001
    887c:	20008702 	.word	0x20008702
    8880:	20009180 	.word	0x20009180
    8884:	20009625 	.word	0x20009625
    8888:	00008659 	.word	0x00008659

0000888c <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    888c:	2101      	movs	r1, #1
    888e:	f000 bf1d 	b.w	96cc <pinMode>
    8892:	bf00      	nop

00008894 <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    8894:	f000 bede 	b.w	9654 <digitalWrite>

00008898 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    8898:	b430      	push	{r4, r5}
    889a:	b082      	sub	sp, #8
    889c:	460c      	mov	r4, r1
    889e:	ab02      	add	r3, sp, #8
    88a0:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    88a4:	7cc3      	ldrb	r3, [r0, #19]
    88a6:	2b00      	cmp	r3, #0
    88a8:	d030      	beq.n	890c <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    88aa:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    88ac:	7cc3      	ldrb	r3, [r0, #19]
    88ae:	07da      	lsls	r2, r3, #31
    88b0:	d508      	bpl.n	88c4 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    88b2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    88b6:	6945      	ldr	r5, [r0, #20]
    88b8:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    88bc:	402a      	ands	r2, r5
    88be:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    88c0:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    88c4:	079d      	lsls	r5, r3, #30
    88c6:	d508      	bpl.n	88da <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    88c8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    88cc:	6985      	ldr	r5, [r0, #24]
    88ce:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    88d2:	402a      	ands	r2, r5
    88d4:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    88d6:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    88da:	0759      	lsls	r1, r3, #29
    88dc:	d508      	bpl.n	88f0 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    88de:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    88e2:	69c5      	ldr	r5, [r0, #28]
    88e4:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    88e8:	402a      	ands	r2, r5
    88ea:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    88ec:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    88f0:	071a      	lsls	r2, r3, #28
    88f2:	d508      	bpl.n	8906 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    88f4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    88f8:	6a05      	ldr	r5, [r0, #32]
    88fa:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    88fe:	402a      	ands	r2, r5
    8900:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    8902:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    8906:	06db      	lsls	r3, r3, #27
    8908:	d42f      	bmi.n	896a <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    890a:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    890c:	6883      	ldr	r3, [r0, #8]
    890e:	429c      	cmp	r4, r3
    8910:	d035      	beq.n	897e <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    8912:	4b22      	ldr	r3, [pc, #136]	; (899c <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    8914:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    8916:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    8918:	4a21      	ldr	r2, [pc, #132]	; (89a0 <SPIClass::beginTransaction(SPISettings)+0x108>)
    891a:	f3c3 1101 	ubfx	r1, r3, #4, #2
    891e:	f3c3 6382 	ubfx	r3, r3, #26, #3
    8922:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    8926:	3301      	adds	r3, #1
    8928:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    892c:	b1cc      	cbz	r4, 8962 <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    892e:	4294      	cmp	r4, r2
    8930:	d827      	bhi.n	8982 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    8932:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    8936:	fbb2 f2f3 	udiv	r2, r2, r3
    893a:	4294      	cmp	r4, r2
    893c:	d32c      	bcc.n	8998 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    893e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    8942:	d320      	bcc.n	8986 <SPIClass::beginTransaction(SPISettings)+0xee>
    8944:	4c17      	ldr	r4, [pc, #92]	; (89a4 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    8946:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8948:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    894a:	2203      	movs	r2, #3
		port().CR = 0;
    894c:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    894e:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    8950:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    8952:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    8954:	2201      	movs	r2, #1
		port().CCR = _ccr;
    8956:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    8958:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    895a:	611a      	str	r2, [r3, #16]
	}
    895c:	b002      	add	sp, #8
    895e:	bc30      	pop	{r4, r5}
    8960:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    8962:	4299      	cmp	r1, r3
    8964:	d3ef      	bcc.n	8946 <SPIClass::beginTransaction(SPISettings)+0xae>
    8966:	1c53      	adds	r3, r2, #1
    8968:	e7e9      	b.n	893e <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    896a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    896e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    8970:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    8974:	400b      	ands	r3, r1
    8976:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    8978:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    897c:	e7c5      	b.n	890a <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    897e:	68c4      	ldr	r4, [r0, #12]
    8980:	e7e2      	b.n	8948 <SPIClass::beginTransaction(SPISettings)+0xb0>
    8982:	2400      	movs	r4, #0
    8984:	e7df      	b.n	8946 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    8986:	2b02      	cmp	r3, #2
    8988:	d9fb      	bls.n	8982 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    898a:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    898c:	085a      	lsrs	r2, r3, #1
    898e:	0214      	lsls	r4, r2, #8
    8990:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    8994:	431c      	orrs	r4, r3
    8996:	e7d6      	b.n	8946 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    8998:	461a      	mov	r2, r3
    899a:	e7e4      	b.n	8966 <SPIClass::beginTransaction(SPISettings)+0xce>
    899c:	400fc000 	.word	0x400fc000
    89a0:	20000ae8 	.word	0x20000ae8
    89a4:	007f7fff 	.word	0x007f7fff

000089a8 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    89a8:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    89aa:	4603      	mov	r3, r0
    89ac:	f853 0b04 	ldr.w	r0, [r3], #4
    89b0:	e893 0006 	ldmia.w	r3, {r1, r2}
    89b4:	f7ff ff70 	bl	8898 <SPIClass::beginTransaction(SPISettings)>
}
    89b8:	bd08      	pop	{r3, pc}
    89ba:	bf00      	nop

000089bc <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    89bc:	b084      	sub	sp, #16
    89be:	f10d 0c10 	add.w	ip, sp, #16
    89c2:	e90c 000e 	stmdb	ip, {r1, r2, r3}
    89c6:	4602      	mov	r2, r0
  if (spiConfig.spiPort) {
    89c8:	b123      	cbz	r3, 89d4 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x18>
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    89ca:	4618      	mov	r0, r3
    89cc:	6013      	str	r3, [r2, #0]
}
    89ce:	b004      	add	sp, #16
  m_spi->begin();
    89d0:	f000 bb08 	b.w	8fe4 <SPIClass::begin()>
    m_spi = &SPI;
    89d4:	4b02      	ldr	r3, [pc, #8]	; (89e0 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
  m_spi->begin();
    89d6:	4618      	mov	r0, r3
    89d8:	6013      	str	r3, [r2, #0]
}
    89da:	b004      	add	sp, #16
  m_spi->begin();
    89dc:	f000 bb02 	b.w	8fe4 <SPIClass::begin()>
    89e0:	200080a0 	.word	0x200080a0

000089e4 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    89e4:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    89e6:	7cd3      	ldrb	r3, [r2, #19]
    89e8:	b313      	cbz	r3, 8a30 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    89ea:	07d8      	lsls	r0, r3, #31
    89ec:	d504      	bpl.n	89f8 <SdSpiArduinoDriver::deactivate()+0x14>
    89ee:	6a90      	ldr	r0, [r2, #40]	; 0x28
    89f0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    89f4:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    89f8:	0799      	lsls	r1, r3, #30
    89fa:	d504      	bpl.n	8a06 <SdSpiArduinoDriver::deactivate()+0x22>
    89fc:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    89fe:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8a02:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    8a06:	0758      	lsls	r0, r3, #29
    8a08:	d504      	bpl.n	8a14 <SdSpiArduinoDriver::deactivate()+0x30>
    8a0a:	6b10      	ldr	r0, [r2, #48]	; 0x30
    8a0c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8a10:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    8a14:	0719      	lsls	r1, r3, #28
    8a16:	d504      	bpl.n	8a22 <SdSpiArduinoDriver::deactivate()+0x3e>
    8a18:	6b50      	ldr	r0, [r2, #52]	; 0x34
    8a1a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8a1e:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    8a22:	06db      	lsls	r3, r3, #27
    8a24:	d504      	bpl.n	8a30 <SdSpiArduinoDriver::deactivate()+0x4c>
    8a26:	6b92      	ldr	r2, [r2, #56]	; 0x38
    8a28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8a2c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    8a30:	4770      	bx	lr
    8a32:	bf00      	nop

00008a34 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    8a34:	6800      	ldr	r0, [r0, #0]
    8a36:	f000 bbf3 	b.w	9220 <SPIClass::end()>
    8a3a:	bf00      	nop

00008a3c <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8a3c:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    8a3e:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8a40:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    8a42:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8a44:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8a46:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8a4a:	d0fb      	beq.n	8a44 <SdSpiArduinoDriver::receive()+0x8>
    8a4c:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
    8a4e:	b2c0      	uxtb	r0, r0
    8a50:	4770      	bx	lr
    8a52:	bf00      	nop

00008a54 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    8a54:	b530      	push	{r4, r5, lr}
    8a56:	460c      	mov	r4, r1
    8a58:	b083      	sub	sp, #12
    8a5a:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    8a5c:	21ff      	movs	r1, #255	; 0xff
    8a5e:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    8a60:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    8a62:	f004 fd3f 	bl	d4e4 <memset>
		transfer(buf, buf, count);
    8a66:	6828      	ldr	r0, [r5, #0]
    8a68:	9b01      	ldr	r3, [sp, #4]
    8a6a:	4622      	mov	r2, r4
    8a6c:	4621      	mov	r1, r4
    8a6e:	f000 fbd3 	bl	9218 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    8a72:	2000      	movs	r0, #0
    8a74:	b003      	add	sp, #12
    8a76:	bd30      	pop	{r4, r5, pc}

00008a78 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8a78:	6803      	ldr	r3, [r0, #0]
    8a7a:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    8a7c:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8a7e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8a80:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8a84:	d0fb      	beq.n	8a7e <SdSpiArduinoDriver::send(unsigned char)+0x6>
    8a86:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
    8a88:	4770      	bx	lr
    8a8a:	bf00      	nop

00008a8c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    8a8c:	1e53      	subs	r3, r2, #1
    8a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    8a92:	b530      	push	{r4, r5, lr}
    8a94:	4614      	mov	r4, r2
    8a96:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    8a9a:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    8a9c:	d311      	bcc.n	8ac2 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    8a9e:	b16a      	cbz	r2, 8abc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8aa0:	6803      	ldr	r3, [r0, #0]
    8aa2:	1e48      	subs	r0, r1, #1
    8aa4:	6819      	ldr	r1, [r3, #0]
    8aa6:	1882      	adds	r2, r0, r2
		port().TDR = data;
    8aa8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    8aac:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8aae:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8ab0:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8ab4:	d0fb      	beq.n	8aae <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    8ab6:	4290      	cmp	r0, r2
    8ab8:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    8aba:	d1f5      	bne.n	8aa8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    8abc:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    8ac0:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    8ac2:	4668      	mov	r0, sp
    8ac4:	f000 ff42 	bl	994c <memcpy>
		transfer(buf, buf, count);
    8ac8:	466a      	mov	r2, sp
    8aca:	4623      	mov	r3, r4
    8acc:	6828      	ldr	r0, [r5, #0]
    8ace:	4611      	mov	r1, r2
    8ad0:	f000 fba2 	bl	9218 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    8ad4:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    8ad8:	bd30      	pop	{r4, r5, pc}
    8ada:	bf00      	nop

00008adc <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    8adc:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    8ade:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    8ae0:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    8ae2:	07dc      	lsls	r4, r3, #31
    8ae4:	d51d      	bpl.n	8b22 <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    8ae6:	4604      	mov	r4, r0
    8ae8:	6840      	ldr	r0, [r0, #4]
    8aea:	f104 0210 	add.w	r2, r4, #16
    8aee:	6803      	ldr	r3, [r0, #0]
    8af0:	68e1      	ldr	r1, [r4, #12]
    8af2:	9201      	str	r2, [sp, #4]
    8af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8af6:	4798      	blx	r3
    8af8:	9a01      	ldr	r2, [sp, #4]
    8afa:	4605      	mov	r5, r0
    8afc:	b1a8      	cbz	r0, 8b2a <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    8afe:	7823      	ldrb	r3, [r4, #0]
    8b00:	0799      	lsls	r1, r3, #30
    8b02:	d508      	bpl.n	8b16 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    8b04:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    8b06:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    8b0a:	4419      	add	r1, r3
    8b0c:	6803      	ldr	r3, [r0, #0]
    8b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b10:	4798      	blx	r3
    8b12:	b150      	cbz	r0, 8b2a <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    8b14:	7823      	ldrb	r3, [r4, #0]
    8b16:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    8b1a:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    8b1c:	7023      	strb	r3, [r4, #0]
}
    8b1e:	b003      	add	sp, #12
    8b20:	bd30      	pop	{r4, r5, pc}
  return true;
    8b22:	2501      	movs	r5, #1
}
    8b24:	4628      	mov	r0, r5
    8b26:	b003      	add	sp, #12
    8b28:	bd30      	pop	{r4, r5, pc}
  return false;
    8b2a:	2500      	movs	r5, #0
}
    8b2c:	4628      	mov	r0, r5
    8b2e:	b003      	add	sp, #12
    8b30:	bd30      	pop	{r4, r5, pc}
    8b32:	bf00      	nop

00008b34 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    8b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    8b36:	6843      	ldr	r3, [r0, #4]
    8b38:	b30b      	cbz	r3, 8b7e <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    8b3a:	68c3      	ldr	r3, [r0, #12]
    8b3c:	4604      	mov	r4, r0
    8b3e:	460f      	mov	r7, r1
    8b40:	4615      	mov	r5, r2
    8b42:	428b      	cmp	r3, r1
    8b44:	d106      	bne.n	8b54 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    8b46:	f810 3b10 	ldrb.w	r3, [r0], #16
    8b4a:	f005 0503 	and.w	r5, r5, #3
    8b4e:	432b      	orrs	r3, r5
    8b50:	7023      	strb	r3, [r4, #0]
}
    8b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    8b54:	f7ff ffc2 	bl	8adc <FsCache::sync()>
    8b58:	b188      	cbz	r0, 8b7e <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    8b5a:	076b      	lsls	r3, r5, #29
    8b5c:	d505      	bpl.n	8b6a <FsCache::prepare(unsigned long, unsigned char)+0x36>
    8b5e:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    8b62:	4630      	mov	r0, r6
    m_sector = sector;
    8b64:	2300      	movs	r3, #0
    8b66:	60e7      	str	r7, [r4, #12]
    8b68:	e7ef      	b.n	8b4a <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    8b6a:	6860      	ldr	r0, [r4, #4]
    8b6c:	f104 0610 	add.w	r6, r4, #16
    8b70:	4639      	mov	r1, r7
    8b72:	6803      	ldr	r3, [r0, #0]
    8b74:	4632      	mov	r2, r6
    8b76:	691b      	ldr	r3, [r3, #16]
    8b78:	4798      	blx	r3
    8b7a:	2800      	cmp	r0, #0
    8b7c:	d1f1      	bne.n	8b62 <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    8b7e:	2000      	movs	r0, #0
}
    8b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8b82:	bf00      	nop

00008b84 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
#include "SysCall.h"
#include "FsDateTime.h"
#include "FmtNumber.h"

static void dateTimeMs10(uint16_t* date, uint16_t* time, uint8_t* ms10) {
  *ms10 = 0;
    8b84:	f04f 0c00 	mov.w	ip, #0
  FsDateTime::callback2(date, time);
    8b88:	4b02      	ldr	r3, [pc, #8]	; (8b94 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
  *ms10 = 0;
    8b8a:	f882 c000 	strb.w	ip, [r2]
  FsDateTime::callback2(date, time);
    8b8e:	681b      	ldr	r3, [r3, #0]
    8b90:	4718      	bx	r3
    8b92:	bf00      	nop
    8b94:	200091b8 	.word	0x200091b8

00008b98 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
  void (*callback2)(uint16_t* date, uint16_t* time) = nullptr;
  void clearCallback() {
    callback = nullptr;
  }
  void setCallback(void (*dateTime)(uint16_t* date, uint16_t* time)) {
    callback = dateTimeMs10;
    8b98:	4a02      	ldr	r2, [pc, #8]	; (8ba4 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    8b9a:	4903      	ldr	r1, [pc, #12]	; (8ba8 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
    callback2 = dateTime;
    8b9c:	4b03      	ldr	r3, [pc, #12]	; (8bac <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
    callback = dateTimeMs10;
    8b9e:	6011      	str	r1, [r2, #0]
    callback2 = dateTime;
    8ba0:	6018      	str	r0, [r3, #0]
  }
    8ba2:	4770      	bx	lr
    8ba4:	200091b4 	.word	0x200091b4
    8ba8:	00008b85 	.word	0x00008b85
    8bac:	200091b8 	.word	0x200091b8

00008bb0 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    8bb0:	b510      	push	{r4, lr}
    8bb2:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    8bb4:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
    8bb6:	b082      	sub	sp, #8
  if (ls) {
    8bb8:	b118      	cbz	r0, 8bc2 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    8bba:	2300      	movs	r3, #0
    8bbc:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    8bbe:	b002      	add	sp, #8
    8bc0:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    8bc2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    8bc6:	428b      	cmp	r3, r1
    8bc8:	d2f9      	bcs.n	8bbe <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    8bca:	aa01      	add	r2, sp, #4
    8bcc:	4618      	mov	r0, r3
    8bce:	f000 f8b7 	bl	8d40 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    8bd2:	b180      	cbz	r0, 8bf6 <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
    8bd4:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
    8bd6:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    8bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8bdc:	d201      	bcs.n	8be2 <FsName::get16()+0x32>
      rtn = cp;
    8bde:	b298      	uxth	r0, r3
    8be0:	e7ed      	b.n	8bbe <FsName::get16()+0xe>
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    8be2:	0a98      	lsrs	r0, r3, #10
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
    8be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    8be8:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
    8bec:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    8bf0:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
    8bf2:	81a3      	strh	r3, [r4, #12]
    8bf4:	e7e3      	b.n	8bbe <FsName::get16()+0xe>
  return 0XFFFF;
    8bf6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    8bfa:	e7e0      	b.n	8bbe <FsName::get16()+0xe>

00008bfc <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    8bfc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8c00:	d821      	bhi.n	8c46 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4a>
  if (capacityMB <= 16) {
    8c02:	2910      	cmp	r1, #16
    8c04:	d82e      	bhi.n	8c64 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x68>
    8c06:	2340      	movs	r3, #64	; 0x40
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    8c08:	f04f 0c20 	mov.w	ip, #32
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    8c0c:	fbb2 f1f3 	udiv	r1, r2, r3
  if (c <= 1023) {
    8c10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    8c14:	d220      	bcs.n	8c58 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x5c>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    8c16:	fb03 2311 	mls	r3, r3, r1, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    8c1a:	b500      	push	{lr}
    s = (lba % sectorsPerTrack) + 1;
    8c1c:	fbb2 fefc 	udiv	lr, r2, ip
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    8c20:	fbb3 f3fc 	udiv	r3, r3, ip
    s = (lba % sectorsPerTrack) + 1;
    8c24:	fb0c 221e 	mls	r2, ip, lr, r2
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
    8c28:	ea4f 0c91 	mov.w	ip, r1, lsr #2
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    8c2c:	b2db      	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    8c2e:	3201      	adds	r2, #1
  chs[1] = ((c >> 2) & 0XC0) | s;
    8c30:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
  chs[2] = c;
    8c34:	b2c9      	uxtb	r1, r1
  chs[0] = h;
    8c36:	7003      	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    8c38:	ea42 020c 	orr.w	r2, r2, ip
  chs[2] = c;
    8c3c:	7081      	strb	r1, [r0, #2]
  chs[1] = ((c >> 2) & 0XC0) | s;
    8c3e:	b2d2      	uxtb	r2, r2
    8c40:	7042      	strb	r2, [r0, #1]
}
    8c42:	f85d fb04 	ldr.w	pc, [sp], #4
    8c46:	233f      	movs	r3, #63	; 0x3f
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    8c48:	469c      	mov	ip, r3
  } else if (capacityMB <= 128) {
    8c4a:	2980      	cmp	r1, #128	; 0x80
    8c4c:	d910      	bls.n	8c70 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x74>
  } else if (capacityMB <= 504) {
    8c4e:	f5b1 7ffc 	cmp.w	r1, #504	; 0x1f8
    8c52:	d80f      	bhi.n	8c74 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x78>
  c = lba / (numberOfHeads * sectorsPerTrack);
    8c54:	011b      	lsls	r3, r3, #4
    8c56:	e7d9      	b.n	8c0c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    8c58:	21ff      	movs	r1, #255	; 0xff
    h = 254;
    8c5a:	23fe      	movs	r3, #254	; 0xfe
  chs[1] = ((c >> 2) & 0XC0) | s;
    8c5c:	7041      	strb	r1, [r0, #1]
  chs[0] = h;
    8c5e:	7003      	strb	r3, [r0, #0]
  chs[2] = c;
    8c60:	7081      	strb	r1, [r0, #2]
    8c62:	4770      	bx	lr
  } else if (capacityMB <= 32) {
    8c64:	2920      	cmp	r1, #32
    8c66:	d816      	bhi.n	8c96 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x9a>
    8c68:	2380      	movs	r3, #128	; 0x80
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    8c6a:	f04f 0c20 	mov.w	ip, #32
    8c6e:	e7cd      	b.n	8c0c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  c = lba / (numberOfHeads * sectorsPerTrack);
    8c70:	00db      	lsls	r3, r3, #3
    8c72:	e7cb      	b.n	8c0c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 1008) {
    8c74:	f5b1 7f7c 	cmp.w	r1, #1008	; 0x3f0
    8c78:	d904      	bls.n	8c84 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 2016) {
    8c7a:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
    8c7e:	d803      	bhi.n	8c88 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x8c>
  c = lba / (numberOfHeads * sectorsPerTrack);
    8c80:	019b      	lsls	r3, r3, #6
    8c82:	e7c3      	b.n	8c0c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    8c84:	015b      	lsls	r3, r3, #5
    8c86:	e7c1      	b.n	8c0c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 4032) {
    8c88:	f5b1 6f7c 	cmp.w	r1, #4032	; 0xfc0
  c = lba / (numberOfHeads * sectorsPerTrack);
    8c8c:	bf94      	ite	ls
    8c8e:	01db      	lslls	r3, r3, #7
    8c90:	ebc3 2303 	rsbhi	r3, r3, r3, lsl #8
    8c94:	e7ba      	b.n	8c0c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    8c96:	2320      	movs	r3, #32
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    8c98:	469c      	mov	ip, r3
    8c9a:	e7d6      	b.n	8c4a <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4e>

00008c9c <FsUtf::cpToMb(unsigned long, char*, char*)>:
#include "FsUtf.h"
namespace FsUtf {
  //----------------------------------------------------------------------------
  char* cpToMb(uint32_t cp, char* str, char* end) {
    size_t n = end - str;
    if (cp < 0X80) {
    8c9c:	287f      	cmp	r0, #127	; 0x7f
    size_t n = end - str;
    8c9e:	eba2 0201 	sub.w	r2, r2, r1
    if (cp < 0X80) {
    8ca2:	d805      	bhi.n	8cb0 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    8ca4:	b112      	cbz	r2, 8cac <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
      *(str++) = static_cast<uint8_t>(cp);
    8ca6:	460a      	mov	r2, r1
    8ca8:	f802 0b01 	strb.w	r0, [r2], #1
    }
    return str;

   fail:
    return nullptr;
  }
    8cac:	4610      	mov	r0, r2
    8cae:	4770      	bx	lr
    } else if (cp < 0X800) {
    8cb0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    8cb4:	d20f      	bcs.n	8cd6 <FsUtf::cpToMb(unsigned long, char*, char*)+0x3a>
      if (n < 2) goto fail;
    8cb6:	2a01      	cmp	r2, #1
    8cb8:	d940      	bls.n	8d3c <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    8cba:	ea4f 1c90 	mov.w	ip, r0, lsr #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    8cbe:	f000 033f 	and.w	r3, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    8cc2:	460a      	mov	r2, r1
    8cc4:	f06c 003f 	orn	r0, ip, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    8cc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    8ccc:	f802 0b02 	strb.w	r0, [r2], #2
  }
    8cd0:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    8cd2:	704b      	strb	r3, [r1, #1]
  }
    8cd4:	4770      	bx	lr
    } else if (cp < 0X10000) {
    8cd6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    8cda:	d216      	bcs.n	8d0a <FsUtf::cpToMb(unsigned long, char*, char*)+0x6e>
      if (n < 3) goto fail;
    8cdc:	2a02      	cmp	r2, #2
    8cde:	d92d      	bls.n	8d3c <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    8ce0:	f3c0 1c85 	ubfx	ip, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    8ce4:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    8ce8:	1cca      	adds	r2, r1, #3
    8cea:	f063 037f 	orn	r3, r3, #127	; 0x7f
  char* cpToMb(uint32_t cp, char* str, char* end) {
    8cee:	b500      	push	{lr}
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    8cf0:	ea4f 3e10 	mov.w	lr, r0, lsr #12
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    8cf4:	f06c 007f 	orn	r0, ip, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    8cf8:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    8cfa:	f06e 0e1f 	orn	lr, lr, #31
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    8cfe:	7048      	strb	r0, [r1, #1]
  }
    8d00:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    8d02:	f881 e000 	strb.w	lr, [r1]
  }
    8d06:	f85d fb04 	ldr.w	pc, [sp], #4
       if (n < 4) goto fail;
    8d0a:	2a03      	cmp	r2, #3
    8d0c:	d916      	bls.n	8d3c <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    8d0e:	ea4f 4c90 	mov.w	ip, r0, lsr #18
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    8d12:	f3c0 3205 	ubfx	r2, r0, #12, #6
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    8d16:	f3c0 1385 	ubfx	r3, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    8d1a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    8d1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    8d22:	f06c 0c0f 	orn	ip, ip, #15
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    8d26:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    8d2a:	f060 007f 	orn	r0, r0, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    8d2e:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    8d30:	1d0a      	adds	r2, r1, #4
    8d32:	70c8      	strb	r0, [r1, #3]
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    8d34:	f881 c000 	strb.w	ip, [r1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    8d38:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    8d3a:	e7b7      	b.n	8cac <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
    return nullptr;
    8d3c:	2200      	movs	r2, #0
    8d3e:	e7b5      	b.n	8cac <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>

00008d40 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
  //----------------------------------------------------------------------------
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    size_t n;
    uint32_t cp;
    if (str >= end) {
    8d40:	4288      	cmp	r0, r1
    8d42:	d23d      	bcs.n	8dc0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    8d44:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    8d46:	b410      	push	{r4}
      return nullptr;
    }
    uint8_t ch = str[0];
    if ((ch & 0X80) == 0) {
    8d48:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
    8d4c:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
    8d4e:	2800      	cmp	r0, #0
    8d50:	da2d      	bge.n	8dae <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      *rtn = ch;
      return str + 1;
    }
    if ((ch & 0XE0) == 0XC0) {
    8d52:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    8d56:	28c0      	cmp	r0, #192	; 0xc0
    8d58:	d034      	beq.n	8dc4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
      cp = ch & 0X1F;
      n = 2;
    } else if ((ch & 0XF0) == 0XE0) {
    8d5a:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    8d5e:	28e0      	cmp	r0, #224	; 0xe0
    8d60:	d034      	beq.n	8dcc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
      cp = ch & 0X0F;
      n = 3;
    } else if ((ch & 0XF8) == 0XF0) {
    8d62:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    8d66:	28f0      	cmp	r0, #240	; 0xf0
    8d68:	d126      	bne.n	8db8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
    8d6a:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    8d6e:	2004      	movs	r0, #4
    } else {
      return nullptr;
    }
    if ((str + n) > end) {
    8d70:	4418      	add	r0, r3
    8d72:	4288      	cmp	r0, r1
    8d74:	d820      	bhi.n	8db8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    8d76:	3301      	adds	r3, #1
      return nullptr;
    }
    for (size_t i = 1; i < n; i++) {
      ch = str[i];
    8d78:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
    8d7c:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
        return nullptr;
      }
      cp <<= 6;
      cp |= ch & 0X3F;
    8d80:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
    8d84:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
    8d88:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
    8d8c:	d114      	bne.n	8db8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
    8d8e:	4283      	cmp	r3, r0
    8d90:	d1f2      	bne.n	8d78 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    }
    // Don't allow over long as ASCII.
    if (cp < 0X80 || !isValidCp(cp)) {
    8d92:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    8d96:	4b0f      	ldr	r3, [pc, #60]	; (8dd4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
    8d98:	4299      	cmp	r1, r3
    8d9a:	d80d      	bhi.n	8db8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    8d9c:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    8da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    8da4:	d308      	bcc.n	8db8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      return nullptr;
    }
    *rtn = cp;
    8da6:	6014      	str	r4, [r2, #0]
    return str + n;
  }
    8da8:	f85d 4b04 	ldr.w	r4, [sp], #4
    8dac:	4770      	bx	lr
      return str + 1;
    8dae:	1c58      	adds	r0, r3, #1
      *rtn = ch;
    8db0:	6014      	str	r4, [r2, #0]
  }
    8db2:	f85d 4b04 	ldr.w	r4, [sp], #4
    8db6:	4770      	bx	lr
      return nullptr;
    8db8:	2000      	movs	r0, #0
  }
    8dba:	f85d 4b04 	ldr.w	r4, [sp], #4
    8dbe:	4770      	bx	lr
      return nullptr;
    8dc0:	2000      	movs	r0, #0
  }
    8dc2:	4770      	bx	lr
      cp = ch & 0X1F;
    8dc4:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    8dc8:	2002      	movs	r0, #2
    8dca:	e7d1      	b.n	8d70 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
    8dcc:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    8dd0:	2003      	movs	r0, #3
    8dd2:	e7cd      	b.n	8d70 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
    8dd4:	0010ff7f 	.word	0x0010ff7f

00008dd8 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    8dd8:	287e      	cmp	r0, #126	; 0x7e
    8dda:	d93e      	bls.n	8e5a <toUpcase(unsigned short)+0x82>
  size_t right = size;
    8ddc:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    8de0:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    8de2:	b430      	push	{r4, r5}
    8de4:	4c28      	ldr	r4, [pc, #160]	; (8e88 <toUpcase(unsigned short)+0xb0>)
    8de6:	e004      	b.n	8df2 <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    8de8:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
    8dec:	4282      	cmp	r2, r0
    8dee:	d820      	bhi.n	8e32 <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
    8df0:	460b      	mov	r3, r1
  while (right - left > 1) {
    8df2:	ebac 0203 	sub.w	r2, ip, r3
    8df6:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    8df8:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    8dfc:	d8f4      	bhi.n	8de8 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    8dfe:	b29b      	uxth	r3, r3
    8e00:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    8e04:	4290      	cmp	r0, r2
    8e06:	d216      	bcs.n	8e36 <toUpcase(unsigned short)+0x5e>
    8e08:	244b      	movs	r4, #75	; 0x4b
    8e0a:	2300      	movs	r3, #0
    8e0c:	4d1f      	ldr	r5, [pc, #124]	; (8e8c <toUpcase(unsigned short)+0xb4>)
    8e0e:	e004      	b.n	8e1a <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    8e10:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
    8e14:	4282      	cmp	r2, r0
    8e16:	d81e      	bhi.n	8e56 <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
    8e18:	460b      	mov	r3, r1
  while (right - left > 1) {
    8e1a:	1ae2      	subs	r2, r4, r3
    8e1c:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    8e1e:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    8e22:	d8f5      	bhi.n	8e10 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    8e24:	b29b      	uxth	r3, r3
    8e26:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
    8e2a:	4282      	cmp	r2, r0
    8e2c:	d01f      	beq.n	8e6e <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    8e2e:	bc30      	pop	{r4, r5}
    8e30:	4770      	bx	lr
    mid = left + (right - left)/2;
    8e32:	468c      	mov	ip, r1
    8e34:	e7dd      	b.n	8df2 <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    8e36:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    8e3a:	1a82      	subs	r2, r0, r2
    8e3c:	78e3      	ldrb	r3, [r4, #3]
    8e3e:	429a      	cmp	r2, r3
    8e40:	dae2      	bge.n	8e08 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    8e42:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    8e46:	2b01      	cmp	r3, #1
    8e48:	d016      	beq.n	8e78 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    8e4a:	b1d3      	cbz	r3, 8e82 <toUpcase(unsigned short)+0xaa>
    8e4c:	b29b      	uxth	r3, r3
    8e4e:	4403      	add	r3, r0
}
    8e50:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    8e52:	b298      	uxth	r0, r3
}
    8e54:	4770      	bx	lr
    mid = left + (right - left)/2;
    8e56:	460c      	mov	r4, r1
    8e58:	e7df      	b.n	8e1a <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    8e5a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    8e5e:	2b19      	cmp	r3, #25
    8e60:	bf8c      	ite	hi
    8e62:	2300      	movhi	r3, #0
    8e64:	2301      	movls	r3, #1
    8e66:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    8e6a:	b298      	uxth	r0, r3
}
    8e6c:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    8e6e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    8e72:	8868      	ldrh	r0, [r5, #2]
}
    8e74:	bc30      	pop	{r4, r5}
    8e76:	4770      	bx	lr
      return chr - ((chr - first) & 1);
    8e78:	f002 0201 	and.w	r2, r2, #1
    8e7c:	1a83      	subs	r3, r0, r2
    8e7e:	b298      	uxth	r0, r3
    8e80:	e7d5      	b.n	8e2e <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    8e82:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    8e86:	e7e2      	b.n	8e4e <toUpcase(unsigned short)+0x76>
    8e88:	200006a4 	.word	0x200006a4
    8e8c:	20000578 	.word	0x20000578

00008e90 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    8e90:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    8e94:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    8e96:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    8e9a:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    8e9c:	d101      	bne.n	8ea2 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    8e9e:	6883      	ldr	r3, [r0, #8]
    8ea0:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    8ea2:	f000 b9e1 	b.w	9268 <EventResponder::triggerEventNotImmediate()>
    8ea6:	bf00      	nop

00008ea8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    8ea8:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8eaa:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    8eac:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    8eb0:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    8eb2:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    8eb4:	b1a3      	cbz	r3, 8ee0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    8eb6:	b321      	cbz	r1, 8f02 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    8eb8:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    8ebc:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    8ebe:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    8ec0:	6f25      	ldr	r5, [r4, #112]	; 0x70
    8ec2:	07af      	lsls	r7, r5, #30
    8ec4:	d407      	bmi.n	8ed6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    8ec6:	4615      	mov	r5, r2
				count_read--;
    8ec8:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    8eca:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    8ecc:	b11a      	cbz	r2, 8ed6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    8ece:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    8ed2:	462a      	mov	r2, r5
    8ed4:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    8ed6:	6965      	ldr	r5, [r4, #20]
    8ed8:	07ed      	lsls	r5, r5, #31
    8eda:	d5f1      	bpl.n	8ec0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    8edc:	2b00      	cmp	r3, #0
    8ede:	d1ea      	bne.n	8eb6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    8ee0:	b16e      	cbz	r6, 8efe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    8ee2:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    8ee4:	6f19      	ldr	r1, [r3, #112]	; 0x70
    8ee6:	0789      	lsls	r1, r1, #30
    8ee8:	d4fa      	bmi.n	8ee0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    8eea:	4611      	mov	r1, r2
			count_read--;
    8eec:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    8eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    8ef0:	2a00      	cmp	r2, #0
    8ef2:	d0f5      	beq.n	8ee0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    8ef4:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    8ef8:	460a      	mov	r2, r1
	while (count_read) {
    8efa:	2e00      	cmp	r6, #0
    8efc:	d1f1      	bne.n	8ee2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    8efe:	bcf0      	pop	{r4, r5, r6, r7}
    8f00:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    8f02:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    8f06:	e7d9      	b.n	8ebc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00008f08 <_spi_dma_rxISR0()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    8f08:	4b32      	ldr	r3, [pc, #200]	; (8fd4 <_spi_dma_rxISR0()+0xcc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    8f0a:	4933      	ldr	r1, [pc, #204]	; (8fd8 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    8f0c:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    8f0e:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    8f12:	7920      	ldrb	r0, [r4, #4]
    8f14:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    8f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    8f18:	f895 c004 	ldrb.w	ip, [r5, #4]
    8f1c:	f881 c01c 	strb.w	ip, [r1, #28]
    8f20:	7708      	strb	r0, [r1, #28]
    8f22:	b152      	cbz	r2, 8f3a <_spi_dma_rxISR0()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    8f24:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    8f28:	d323      	bcc.n	8f72 <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    8f2a:	492c      	ldr	r1, [pc, #176]	; (8fdc <_spi_dma_rxISR0()+0xd4>)
    8f2c:	4411      	add	r1, r2
		DMA_SERQ = channel;
    8f2e:	4a2a      	ldr	r2, [pc, #168]	; (8fd8 <_spi_dma_rxISR0()+0xd0>)
    8f30:	6419      	str	r1, [r3, #64]	; 0x40
    8f32:	76d0      	strb	r0, [r2, #27]
    8f34:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    8f38:	bd30      	pop	{r4, r5, pc}
    8f3a:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    8f3c:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    8f3e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    8f40:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    8f42:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    8f46:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    8f48:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    8f4a:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    8f4e:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    8f50:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    8f52:	6804      	ldr	r4, [r0, #0]
    8f54:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    8f56:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    8f5a:	4b21      	ldr	r3, [pc, #132]	; (8fe0 <_spi_dma_rxISR0()+0xd8>)
    8f5c:	429c      	cmp	r4, r3
    8f5e:	d126      	bne.n	8fae <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    8f60:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    8f62:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    8f64:	2b02      	cmp	r3, #2
		_data = data;
    8f66:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    8f68:	d126      	bne.n	8fb8 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    8f6a:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    8f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    8f70:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    8f72:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    8f74:	8be9      	ldrh	r1, [r5, #30]
    8f76:	0409      	lsls	r1, r1, #16
    8f78:	d422      	bmi.n	8fc0 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    8f7a:	b292      	uxth	r2, r2
    8f7c:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    8f7e:	6821      	ldr	r1, [r4, #0]
    8f80:	8bec      	ldrh	r4, [r5, #30]
    8f82:	b2a4      	uxth	r4, r4
    8f84:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    8f86:	8bcc      	ldrh	r4, [r1, #30]
    8f88:	0424      	lsls	r4, r4, #16
    8f8a:	d505      	bpl.n	8f98 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    8f8c:	8bcc      	ldrh	r4, [r1, #30]
    8f8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
    8f92:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    8f96:	4322      	orrs	r2, r4
    8f98:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    8f9a:	8bca      	ldrh	r2, [r1, #30]
    8f9c:	b292      	uxth	r2, r2
    8f9e:	82ca      	strh	r2, [r1, #22]
    8fa0:	2100      	movs	r1, #0
    8fa2:	4a0d      	ldr	r2, [pc, #52]	; (8fd8 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    8fa4:	6419      	str	r1, [r3, #64]	; 0x40
    8fa6:	76d0      	strb	r0, [r2, #27]
    8fa8:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    8fac:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    8fae:	4623      	mov	r3, r4
    8fb0:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    8fb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    8fb6:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    8fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    8fbc:	f000 b954 	b.w	9268 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    8fc0:	8be9      	ldrh	r1, [r5, #30]
    8fc2:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    8fc6:	b292      	uxth	r2, r2
    8fc8:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    8fcc:	ea41 010e 	orr.w	r1, r1, lr
    8fd0:	83e9      	strh	r1, [r5, #30]
    8fd2:	e7d4      	b.n	8f7e <_spi_dma_rxISR0()+0x76>
    8fd4:	200080a0 	.word	0x200080a0
    8fd8:	400e8000 	.word	0x400e8000
    8fdc:	ffff8001 	.word	0xffff8001
    8fe0:	00008e91 	.word	0x00008e91

00008fe4 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    8fe4:	6843      	ldr	r3, [r0, #4]
{
    8fe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    8fea:	e9d3 4100 	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    8fee:	4d81      	ldr	r5, [pc, #516]	; (91f4 <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    8ff0:	f04f 0ab8 	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    8ff4:	6822      	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    8ff6:	f04f 0802 	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    8ffa:	ea22 0201 	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    8ffe:	497e      	ldr	r1, [pc, #504]	; (91f8 <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    9000:	6022      	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    9002:	69aa      	ldr	r2, [r5, #24]
    9004:	4011      	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    9006:	4a7d      	ldr	r2, [pc, #500]	; (91fc <SPIClass::begin()+0x218>)
    9008:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    900a:	61aa      	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    900c:	f890 e010 	ldrb.w	lr, [r0, #16]
    9010:	4a7b      	ldr	r2, [pc, #492]	; (9200 <SPIClass::begin()+0x21c>)
    9012:	eb03 060e 	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    9016:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    901a:	7c31      	ldrb	r1, [r6, #16]
    901c:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    9020:	6889      	ldr	r1, [r1, #8]
    9022:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    9026:	f890 c011 	ldrb.w	ip, [r0, #17]
    902a:	eb03 050c 	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    902e:	f10c 0c0a 	add.w	ip, ip, #10
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    9032:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    9036:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    903a:	6889      	ldr	r1, [r1, #8]
    903c:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    9040:	7c81      	ldrb	r1, [r0, #18]
    9042:	eb03 0901 	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    9046:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    904a:	f899 b038 	ldrb.w	fp, [r9, #56]	; 0x38
    904e:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
    9052:	f8db b008 	ldr.w	fp, [fp, #8]
    9056:	f8cb a000 	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    905a:	f8d4 a000 	ldr.w	sl, [r4]
    905e:	685f      	ldr	r7, [r3, #4]
    9060:	ea4a 0a07 	orr.w	sl, sl, r7
    9064:	f8c4 a000 	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    9068:	7c34      	ldrb	r4, [r6, #16]
    906a:	f8de e014 	ldr.w	lr, [lr, #20]
    906e:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    9072:	6864      	ldr	r4, [r4, #4]
    9074:	f8c4 e000 	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    9078:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    907c:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
    9080:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    9084:	6864      	ldr	r4, [r4, #4]
    9086:	f8c4 c000 	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    908a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    908c:	f899 4038 	ldrb.w	r4, [r9, #56]	; 0x38
    9090:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    9094:	6852      	ldr	r2, [r2, #4]
    9096:	6011      	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    9098:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    909a:	f899 1044 	ldrb.w	r1, [r9, #68]	; 0x44
    909e:	6011      	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    90a0:	6a1a      	ldr	r2, [r3, #32]
    90a2:	7f31      	ldrb	r1, [r6, #28]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    90a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    90a6:	6011      	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    90a8:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    90ac:	601a      	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    90ae:	220f      	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    90b0:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    90b2:	f8c3 8010 	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    90b6:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    90b8:	7cc2      	ldrb	r2, [r0, #19]
    90ba:	2a00      	cmp	r2, #0
    90bc:	d031      	beq.n	9122 <SPIClass::begin()+0x13e>
			__disable_irq();
    90be:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    90c0:	7cc3      	ldrb	r3, [r0, #19]
    90c2:	07dc      	lsls	r4, r3, #31
    90c4:	d508      	bpl.n	90d8 <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    90c6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    90ca:	6944      	ldr	r4, [r0, #20]
    90cc:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    90d0:	4022      	ands	r2, r4
    90d2:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    90d4:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    90d8:	0799      	lsls	r1, r3, #30
    90da:	d508      	bpl.n	90ee <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    90dc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    90e0:	6984      	ldr	r4, [r0, #24]
    90e2:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    90e6:	4022      	ands	r2, r4
    90e8:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    90ea:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    90ee:	075a      	lsls	r2, r3, #29
    90f0:	d508      	bpl.n	9104 <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    90f2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    90f6:	69c4      	ldr	r4, [r0, #28]
    90f8:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    90fc:	4022      	ands	r2, r4
    90fe:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    9100:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    9104:	071f      	lsls	r7, r3, #28
    9106:	d508      	bpl.n	911a <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    9108:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    910c:	6a04      	ldr	r4, [r0, #32]
    910e:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    9112:	4022      	ands	r2, r4
    9114:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    9116:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    911a:	06de      	lsls	r6, r3, #27
    911c:	d455      	bmi.n	91ca <SPIClass::begin()+0x1e6>
			__enable_irq();
    911e:	b662      	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9120:	6803      	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    9122:	4c38      	ldr	r4, [pc, #224]	; (9204 <SPIClass::begin()+0x220>)
    9124:	6882      	ldr	r2, [r0, #8]
    9126:	42a2      	cmp	r2, r4
    9128:	d059      	beq.n	91de <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    912a:	4a32      	ldr	r2, [pc, #200]	; (91f4 <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    912c:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    912e:	6992      	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    9130:	4935      	ldr	r1, [pc, #212]	; (9208 <SPIClass::begin()+0x224>)
    9132:	f3c2 1601 	ubfx	r6, r2, #4, #2
    9136:	f3c2 6282 	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    913a:	4d34      	ldr	r5, [pc, #208]	; (920c <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    913c:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    9140:	3201      	adds	r2, #1
    9142:	fbb1 f2f2 	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    9146:	42aa      	cmp	r2, r5
    9148:	d831      	bhi.n	91ae <SPIClass::begin()+0x1ca>
    914a:	2200      	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    914c:	60c2      	str	r2, [r0, #12]
		port().CR = 0;
    914e:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    9150:	2103      	movs	r1, #3
		port().CR = 0;
    9152:	611c      	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    9154:	2407      	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    9156:	6259      	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    9158:	2101      	movs	r1, #1
		port().CCR = _ccr;
    915a:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    915c:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    915e:	6119      	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    9160:	7cc3      	ldrb	r3, [r0, #19]
    9162:	b313      	cbz	r3, 91aa <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    9164:	07dd      	lsls	r5, r3, #31
    9166:	d504      	bpl.n	9172 <SPIClass::begin()+0x18e>
    9168:	6a81      	ldr	r1, [r0, #40]	; 0x28
    916a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    916e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    9172:	079c      	lsls	r4, r3, #30
    9174:	d504      	bpl.n	9180 <SPIClass::begin()+0x19c>
    9176:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    9178:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    917c:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    9180:	0759      	lsls	r1, r3, #29
    9182:	d504      	bpl.n	918e <SPIClass::begin()+0x1aa>
    9184:	6b01      	ldr	r1, [r0, #48]	; 0x30
    9186:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    918a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    918e:	071a      	lsls	r2, r3, #28
    9190:	d504      	bpl.n	919c <SPIClass::begin()+0x1b8>
    9192:	6b41      	ldr	r1, [r0, #52]	; 0x34
    9194:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9198:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    919c:	06db      	lsls	r3, r3, #27
    919e:	d504      	bpl.n	91aa <SPIClass::begin()+0x1c6>
    91a0:	6b82      	ldr	r2, [r0, #56]	; 0x38
    91a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    91a6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    91aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    91ae:	4918      	ldr	r1, [pc, #96]	; (9210 <SPIClass::begin()+0x22c>)
    91b0:	fba1 5102 	umull	r5, r1, r1, r2
    91b4:	0d09      	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    91b6:	fbb2 f2f1 	udiv	r2, r2, r1
    91ba:	42a2      	cmp	r2, r4
    91bc:	bf88      	it	hi
    91be:	3101      	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    91c0:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    91c4:	d30d      	bcc.n	91e2 <SPIClass::begin()+0x1fe>
    91c6:	4a13      	ldr	r2, [pc, #76]	; (9214 <SPIClass::begin()+0x230>)
				div = d-2;
    91c8:	e7c0      	b.n	914c <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    91ca:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    91ce:	6a41      	ldr	r1, [r0, #36]	; 0x24
    91d0:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    91d4:	400b      	ands	r3, r1
    91d6:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    91d8:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    91dc:	e79f      	b.n	911e <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    91de:	68c2      	ldr	r2, [r0, #12]
    91e0:	e7b5      	b.n	914e <SPIClass::begin()+0x16a>
			if (d > 2) {
    91e2:	2902      	cmp	r1, #2
    91e4:	d9b1      	bls.n	914a <SPIClass::begin()+0x166>
				div = d-2;
    91e6:	3902      	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    91e8:	084c      	lsrs	r4, r1, #1
    91ea:	0222      	lsls	r2, r4, #8
    91ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    91f0:	430a      	orrs	r2, r1
    91f2:	e7ab      	b.n	914c <SPIClass::begin()+0x168>
    91f4:	400fc000 	.word	0x400fc000
    91f8:	e3ffffcf 	.word	0xe3ffffcf
    91fc:	08000010 	.word	0x08000010
    9200:	20007940 	.word	0x20007940
    9204:	003d0900 	.word	0x003d0900
    9208:	20000ae8 	.word	0x20000ae8
    920c:	003d08ff 	.word	0x003d08ff
    9210:	431bde83 	.word	0x431bde83
    9214:	007f7fff 	.word	0x007f7fff

00009218 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    9218:	b10b      	cbz	r3, 921e <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    921a:	f7ff be45 	b.w	8ea8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    921e:	4770      	bx	lr

00009220 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    9220:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    9222:	e9d3 1200 	ldrd	r1, r2, [r3]
    9226:	6809      	ldr	r1, [r1, #0]
    9228:	4211      	tst	r1, r2
    922a:	d100      	bne.n	922e <SPIClass::end()+0xe>
    922c:	4770      	bx	lr
void SPIClass::end() {
    922e:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9230:	6802      	ldr	r2, [r0, #0]
    9232:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    9234:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    9236:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    9238:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    923a:	7c22      	ldrb	r2, [r4, #16]
    923c:	4413      	add	r3, r2
    923e:	7c18      	ldrb	r0, [r3, #16]
    9240:	f000 fa44 	bl	96cc <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    9244:	7c62      	ldrb	r2, [r4, #17]
    9246:	6863      	ldr	r3, [r4, #4]
    9248:	2105      	movs	r1, #5
    924a:	4413      	add	r3, r2
    924c:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    9250:	f000 fa3c 	bl	96cc <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    9254:	6863      	ldr	r3, [r4, #4]
    9256:	7ca2      	ldrb	r2, [r4, #18]
    9258:	2105      	movs	r1, #5
    925a:	4413      	add	r3, r2
}
    925c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    9260:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    9264:	f000 ba32 	b.w	96cc <pinMode>

00009268 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9268:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    926c:	b672      	cpsid	i
// BUGBUG: See if file name order makes difference?

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    926e:	7f43      	ldrb	r3, [r0, #29]
    9270:	b95b      	cbnz	r3, 928a <EventResponder::triggerEventNotImmediate()+0x22>
		// not already triggered
		if (_type == EventTypeYield) {
    9272:	7f01      	ldrb	r1, [r0, #28]
    9274:	2901      	cmp	r1, #1
{
    9276:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    9278:	d00b      	beq.n	9292 <EventResponder::triggerEventNotImmediate()+0x2a>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    927a:	2903      	cmp	r1, #3
    927c:	d013      	beq.n	92a6 <EventResponder::triggerEventNotImmediate()+0x3e>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    927e:	2301      	movs	r3, #1
    9280:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9282:	b902      	cbnz	r2, 9286 <EventResponder::triggerEventNotImmediate()+0x1e>
    9284:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    9286:	bc30      	pop	{r4, r5}
    9288:	4770      	bx	lr
    928a:	b90a      	cbnz	r2, 9290 <EventResponder::triggerEventNotImmediate()+0x28>
    928c:	b662      	cpsie	i
    928e:	4770      	bx	lr
    9290:	4770      	bx	lr
			if (firstYield == nullptr) {
    9292:	4c12      	ldr	r4, [pc, #72]	; (92dc <EventResponder::triggerEventNotImmediate()+0x74>)
    9294:	6821      	ldr	r1, [r4, #0]
    9296:	b1b1      	cbz	r1, 92c6 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    9298:	4911      	ldr	r1, [pc, #68]	; (92e0 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    929a:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    929c:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    929e:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    92a0:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    92a2:	6158      	str	r0, [r3, #20]
				lastYield = this;
    92a4:	e7eb      	b.n	927e <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    92a6:	4d0f      	ldr	r5, [pc, #60]	; (92e4 <EventResponder::triggerEventNotImmediate()+0x7c>)
    92a8:	490f      	ldr	r1, [pc, #60]	; (92e8 <EventResponder::triggerEventNotImmediate()+0x80>)
    92aa:	682c      	ldr	r4, [r5, #0]
    92ac:	b18c      	cbz	r4, 92d2 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    92ae:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    92b0:	680b      	ldr	r3, [r1, #0]
    92b2:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    92b4:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    92b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    92ba:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    92be:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    92c0:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    92c4:	e7db      	b.n	927e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    92c6:	4b06      	ldr	r3, [pc, #24]	; (92e0 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    92c8:	6020      	str	r0, [r4, #0]
				lastYield = this;
    92ca:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    92cc:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    92d0:	e7d5      	b.n	927e <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    92d2:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    92d6:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    92d8:	e7ed      	b.n	92b6 <EventResponder::triggerEventNotImmediate()+0x4e>
    92da:	bf00      	nop
    92dc:	200091c0 	.word	0x200091c0
    92e0:	200091cc 	.word	0x200091cc
    92e4:	200091c8 	.word	0x200091c8
    92e8:	200091c4 	.word	0x200091c4

000092ec <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    92ec:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    92ee:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    92f2:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    92f4:	4c0c      	ldr	r4, [pc, #48]	; (9328 <EventResponder::runFromInterrupt()+0x3c>)
    92f6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    92f8:	b180      	cbz	r0, 931c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    92fa:	4e0c      	ldr	r6, [pc, #48]	; (932c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    92fc:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    92fe:	6943      	ldr	r3, [r0, #20]
    9300:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    9302:	b173      	cbz	r3, 9322 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    9304:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    9306:	b902      	cbnz	r2, 930a <EventResponder::runFromInterrupt()+0x1e>
    9308:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    930a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    930c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    930e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9310:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    9314:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    9316:	6820      	ldr	r0, [r4, #0]
		if (first) {
    9318:	2800      	cmp	r0, #0
    931a:	d1f0      	bne.n	92fe <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    931c:	b902      	cbnz	r2, 9320 <EventResponder::runFromInterrupt()+0x34>
    931e:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    9320:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    9322:	6033      	str	r3, [r6, #0]
    9324:	e7ef      	b.n	9306 <EventResponder::runFromInterrupt()+0x1a>
    9326:	bf00      	nop
    9328:	200091c8 	.word	0x200091c8
    932c:	200091c4 	.word	0x200091c4

00009330 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    9330:	f7ff bfdc 	b.w	92ec <EventResponder::runFromInterrupt()>

00009334 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    9334:	4904      	ldr	r1, [pc, #16]	; (9348 <systick_isr+0x14>)
	systick_millis_count++;
    9336:	4a05      	ldr	r2, [pc, #20]	; (934c <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    9338:	6849      	ldr	r1, [r1, #4]
    933a:	4b05      	ldr	r3, [pc, #20]	; (9350 <systick_isr+0x1c>)
    933c:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    933e:	6813      	ldr	r3, [r2, #0]
    9340:	3301      	adds	r3, #1
    9342:	6013      	str	r3, [r2, #0]
}
    9344:	4770      	bx	lr
    9346:	bf00      	nop
    9348:	e0001000 	.word	0xe0001000
    934c:	20009600 	.word	0x20009600
    9350:	200095fc 	.word	0x200095fc

00009354 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9354:	4608      	mov	r0, r1
    9356:	f001 bccb 	b.w	acf0 <usb_serial_putchar>
    935a:	bf00      	nop

0000935c <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    935c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    9360:	460c      	mov	r4, r1
    9362:	b1d1      	cbz	r1, 939a <Print::write(unsigned char const*, unsigned int)+0x3e>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    9364:	b1ea      	cbz	r2, 93a2 <Print::write(unsigned char const*, unsigned int)+0x46>
    9366:	4680      	mov	r8, r0
    9368:	188e      	adds	r6, r1, r2
	size_t count = 0;
    936a:	2500      	movs	r5, #0
    936c:	4f0e      	ldr	r7, [pc, #56]	; (93a8 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    936e:	e004      	b.n	937a <Print::write(unsigned char const*, unsigned int)+0x1e>
    9370:	f001 fcbe 	bl	acf0 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    9374:	42b4      	cmp	r4, r6
    9376:	4405      	add	r5, r0
    9378:	d00c      	beq.n	9394 <Print::write(unsigned char const*, unsigned int)+0x38>
    937a:	f8d8 3000 	ldr.w	r3, [r8]
    937e:	f814 0b01 	ldrb.w	r0, [r4], #1
    9382:	681b      	ldr	r3, [r3, #0]
    9384:	42bb      	cmp	r3, r7
    9386:	d0f3      	beq.n	9370 <Print::write(unsigned char const*, unsigned int)+0x14>
    9388:	4601      	mov	r1, r0
    938a:	4640      	mov	r0, r8
    938c:	4798      	blx	r3
    938e:	42b4      	cmp	r4, r6
    9390:	4405      	add	r5, r0
    9392:	d1f2      	bne.n	937a <Print::write(unsigned char const*, unsigned int)+0x1e>
	return count;
}
    9394:	4628      	mov	r0, r5
    9396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    939a:	460d      	mov	r5, r1
}
    939c:	4628      	mov	r0, r5
    939e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    93a2:	4615      	mov	r5, r2
    93a4:	e7f6      	b.n	9394 <Print::write(unsigned char const*, unsigned int)+0x38>
    93a6:	bf00      	nop
    93a8:	00009355 	.word	0x00009355

000093ac <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    93ac:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    93ae:	6803      	ldr	r3, [r0, #0]
{
    93b0:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    93b2:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    93b6:	2202      	movs	r2, #2
    93b8:	a901      	add	r1, sp, #4
    93ba:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    93bc:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    93c0:	4798      	blx	r3
}
    93c2:	b003      	add	sp, #12
    93c4:	f85d fb04 	ldr.w	pc, [sp], #4

000093c8 <_write>:
extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	if (file >= 0 && file <= 2) file = (int)&Serial;
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    93c8:	4b05      	ldr	r3, [pc, #20]	; (93e0 <_write+0x18>)
    93ca:	2802      	cmp	r0, #2
    93cc:	bf88      	it	hi
    93ce:	4603      	movhi	r3, r0
{
    93d0:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    93d2:	681c      	ldr	r4, [r3, #0]
    93d4:	4618      	mov	r0, r3
    93d6:	6863      	ldr	r3, [r4, #4]
}
    93d8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    93dc:	4718      	bx	r3
    93de:	bf00      	nop
    93e0:	200080f0 	.word	0x200080f0

000093e4 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    93e4:	b40e      	push	{r1, r2, r3}
    93e6:	b500      	push	{lr}
    93e8:	b082      	sub	sp, #8
    93ea:	aa03      	add	r2, sp, #12
    93ec:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    93f0:	9201      	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    93f2:	f003 ff99 	bl	d328 <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    93f6:	b002      	add	sp, #8
    93f8:	f85d eb04 	ldr.w	lr, [sp], #4
    93fc:	b003      	add	sp, #12
    93fe:	4770      	bx	lr

00009400 <breakTime(unsigned long, DateTimeFields&)>:
  tm.sec = time % 60;
    9400:	4a4d      	ldr	r2, [pc, #308]	; (9538 <breakTime(unsigned long, DateTimeFields&)+0x138>)
{
    9402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tm.sec = time % 60;
    9406:	fba2 4300 	umull	r4, r3, r2, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    940a:	f240 1a6d 	movw	sl, #365	; 0x16d
    940e:	4f4b      	ldr	r7, [pc, #300]	; (953c <breakTime(unsigned long, DateTimeFields&)+0x13c>)
  tm.sec = time % 60;
    9410:	095b      	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    9412:	f8df 8138 	ldr.w	r8, [pc, #312]	; 954c <breakTime(unsigned long, DateTimeFields&)+0x14c>
    9416:	f8df 9138 	ldr.w	r9, [pc, #312]	; 9550 <breakTime(unsigned long, DateTimeFields&)+0x150>
  tm.min = time % 60;
    941a:	fba2 4203 	umull	r4, r2, r2, r3
  tm.sec = time % 60;
    941e:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
  tm.min = time % 60;
    9422:	0952      	lsrs	r2, r2, #5
  tm.sec = time % 60;
    9424:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
  tm.hour = time % 24;
    9428:	4c45      	ldr	r4, [pc, #276]	; (9540 <breakTime(unsigned long, DateTimeFields&)+0x140>)
  tm.min = time % 60;
    942a:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
  tm.sec = time % 60;
    942e:	7008      	strb	r0, [r1, #0]
  tm.min = time % 60;
    9430:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
  tm.hour = time % 24;
    9434:	fba4 5402 	umull	r5, r4, r4, r2
    9438:	0924      	lsrs	r4, r4, #4
  tm.min = time % 60;
    943a:	704b      	strb	r3, [r1, #1]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    943c:	4b41      	ldr	r3, [pc, #260]	; (9544 <breakTime(unsigned long, DateTimeFields&)+0x144>)
    943e:	1d25      	adds	r5, r4, #4
  tm.hour = time % 24;
    9440:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    9444:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    9448:	fba3 0305 	umull	r0, r3, r3, r5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    944c:	2000      	movs	r0, #0
  tm.hour = time % 24;
    944e:	708a      	strb	r2, [r1, #2]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    9450:	1aea      	subs	r2, r5, r3
    9452:	eb03 0352 	add.w	r3, r3, r2, lsr #1
  days = 0;
    9456:	4602      	mov	r2, r0
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    9458:	089b      	lsrs	r3, r3, #2
    945a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    945e:	1aed      	subs	r5, r5, r3
    9460:	70cd      	strb	r5, [r1, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    9462:	fa5f fe80 	uxtb.w	lr, r0
    9466:	f240 1c6d 	movw	ip, #365	; 0x16d
    946a:	f20e 73b2 	addw	r3, lr, #1970	; 0x7b2
    946e:	f013 0503 	ands.w	r5, r3, #3
    9472:	fb07 f603 	mul.w	r6, r7, r3
    9476:	d108      	bne.n	948a <breakTime(unsigned long, DateTimeFields&)+0x8a>
    9478:	ebb8 0fb6 	cmp.w	r8, r6, ror #2
    947c:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    9480:	d303      	bcc.n	948a <breakTime(unsigned long, DateTimeFields&)+0x8a>
    9482:	ebb9 1f36 	cmp.w	r9, r6, ror #4
    9486:	bf38      	it	cc
    9488:	46d4      	movcc	ip, sl
    948a:	4462      	add	r2, ip
    948c:	3001      	adds	r0, #1
    948e:	4294      	cmp	r4, r2
    9490:	d2e7      	bcs.n	9462 <breakTime(unsigned long, DateTimeFields&)+0x62>
  tm.year = year + 70; // year is offset from 1970
    9492:	f10e 0e46 	add.w	lr, lr, #70	; 0x46
  days -= LEAP_YEAR(year) ? 366 : 365;
    9496:	4e2c      	ldr	r6, [pc, #176]	; (9548 <breakTime(unsigned long, DateTimeFields&)+0x148>)
  tm.year = year + 70; // year is offset from 1970
    9498:	f881 e006 	strb.w	lr, [r1, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
    949c:	fba6 0603 	umull	r0, r6, r6, r3
    94a0:	b385      	cbz	r5, 9504 <breakTime(unsigned long, DateTimeFields&)+0x104>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    94a2:	0977      	lsrs	r7, r6, #5
    94a4:	f04f 0c64 	mov.w	ip, #100	; 0x64
    94a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    94ac:	09f6      	lsrs	r6, r6, #7
    94ae:	fb0c 3717 	mls	r7, ip, r7, r3
    94b2:	fb00 3616 	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    94b6:	f240 106d 	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    94ba:	1aa4      	subs	r4, r4, r2
    94bc:	2300      	movs	r3, #0
    94be:	2201      	movs	r2, #1
      monthLength = monthDays[month];
    94c0:	f8df e090 	ldr.w	lr, [pc, #144]	; 9554 <breakTime(unsigned long, DateTimeFields&)+0x154>
  time  -= days; // now it is days in this year, starting at 0
    94c4:	4420      	add	r0, r4
  for (month=0; month<12; month++) {
    94c6:	e00a      	b.n	94de <breakTime(unsigned long, DateTimeFields&)+0xde>
    if (time >= monthLength) {
    94c8:	f813 400e 	ldrb.w	r4, [r3, lr]
    94cc:	4284      	cmp	r4, r0
    94ce:	d80e      	bhi.n	94ee <breakTime(unsigned long, DateTimeFields&)+0xee>
  for (month=0; month<12; month++) {
    94d0:	2a0c      	cmp	r2, #12
      time -= monthLength;
    94d2:	eba0 0004 	sub.w	r0, r0, r4
  for (month=0; month<12; month++) {
    94d6:	d00b      	beq.n	94f0 <breakTime(unsigned long, DateTimeFields&)+0xf0>
    94d8:	3201      	adds	r2, #1
    94da:	3301      	adds	r3, #1
    94dc:	b2d2      	uxtb	r2, r2
    if (month==1) { // february
    94de:	2b01      	cmp	r3, #1
    94e0:	fa5f fc83 	uxtb.w	ip, r3
    94e4:	d1f0      	bne.n	94c8 <breakTime(unsigned long, DateTimeFields&)+0xc8>
      if (LEAP_YEAR(year)) {
    94e6:	b945      	cbnz	r5, 94fa <breakTime(unsigned long, DateTimeFields&)+0xfa>
    94e8:	b1cf      	cbz	r7, 951e <breakTime(unsigned long, DateTimeFields&)+0x11e>
    94ea:	241d      	movs	r4, #29
    94ec:	e006      	b.n	94fc <breakTime(unsigned long, DateTimeFields&)+0xfc>
    94ee:	4662      	mov	r2, ip
  tm.mday = time + 1;     // day of month
    94f0:	3001      	adds	r0, #1
  tm.mon = month;  // jan is month 0
    94f2:	714a      	strb	r2, [r1, #5]
  tm.mday = time + 1;     // day of month
    94f4:	7108      	strb	r0, [r1, #4]
}
    94f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    94fa:	241c      	movs	r4, #28
    if (time >= monthLength) {
    94fc:	42a0      	cmp	r0, r4
    94fe:	d318      	bcc.n	9532 <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
    9500:	1b00      	subs	r0, r0, r4
  for (month=0; month<12; month++) {
    9502:	e7e9      	b.n	94d8 <breakTime(unsigned long, DateTimeFields&)+0xd8>
  days -= LEAP_YEAR(year) ? 366 : 365;
    9504:	2064      	movs	r0, #100	; 0x64
    9506:	0977      	lsrs	r7, r6, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    9508:	09f6      	lsrs	r6, r6, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
    950a:	fb00 3717 	mls	r7, r0, r7, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    950e:	f44f 70c8 	mov.w	r0, #400	; 0x190
    9512:	fb00 3616 	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    9516:	b13f      	cbz	r7, 9528 <breakTime(unsigned long, DateTimeFields&)+0x128>
    9518:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    951c:	e7cd      	b.n	94ba <breakTime(unsigned long, DateTimeFields&)+0xba>
      if (LEAP_YEAR(year)) {
    951e:	2e00      	cmp	r6, #0
    9520:	bf14      	ite	ne
    9522:	241c      	movne	r4, #28
    9524:	241d      	moveq	r4, #29
    9526:	e7e9      	b.n	94fc <breakTime(unsigned long, DateTimeFields&)+0xfc>
  days -= LEAP_YEAR(year) ? 366 : 365;
    9528:	2e00      	cmp	r6, #0
    952a:	d1c4      	bne.n	94b6 <breakTime(unsigned long, DateTimeFields&)+0xb6>
    952c:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    9530:	e7c3      	b.n	94ba <breakTime(unsigned long, DateTimeFields&)+0xba>
    if (time >= monthLength) {
    9532:	2201      	movs	r2, #1
    9534:	e7dc      	b.n	94f0 <breakTime(unsigned long, DateTimeFields&)+0xf0>
    9536:	bf00      	nop
    9538:	88888889 	.word	0x88888889
    953c:	c28f5c29 	.word	0xc28f5c29
    9540:	aaaaaaab 	.word	0xaaaaaaab
    9544:	24924925 	.word	0x24924925
    9548:	51eb851f 	.word	0x51eb851f
    954c:	028f5c28 	.word	0x028f5c28
    9550:	00a3d70a 	.word	0x00a3d70a
    9554:	20000778 	.word	0x20000778

00009558 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    9558:	b900      	cbnz	r0, 955c <delay+0x4>
    955a:	4770      	bx	lr
{
    955c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9560:	2101      	movs	r1, #1
    9562:	4681      	mov	r9, r0
    9564:	4c21      	ldr	r4, [pc, #132]	; (95ec <delay+0x94>)
    9566:	4d22      	ldr	r5, [pc, #136]	; (95f0 <delay+0x98>)
    9568:	4e22      	ldr	r6, [pc, #136]	; (95f4 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    956a:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    956e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    9570:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9572:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    9576:	2b00      	cmp	r3, #0
    9578:	d1f7      	bne.n	956a <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    957a:	491f      	ldr	r1, [pc, #124]	; (95f8 <delay+0xa0>)
    957c:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    957e:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9582:	f8df a078 	ldr.w	sl, [pc, #120]	; 95fc <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    9586:	1a1b      	subs	r3, r3, r0
    9588:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    958a:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    958e:	f8da 2000 	ldr.w	r2, [sl]
    9592:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    9596:	455a      	cmp	r2, fp
    9598:	bf94      	ite	ls
    959a:	4490      	addls	r8, r2
    959c:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    959e:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    95a2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    95a4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    95a6:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    95aa:	2b00      	cmp	r3, #0
    95ac:	d1f7      	bne.n	959e <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    95ae:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    95b0:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    95b4:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    95b6:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    95ba:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    95be:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    95c2:	bf94      	ite	ls
    95c4:	4462      	addls	r2, ip
    95c6:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    95ca:	eba2 0208 	sub.w	r2, r2, r8
    95ce:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    95d2:	d306      	bcc.n	95e2 <delay+0x8a>
			if (--msec == 0) return;
    95d4:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    95d8:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    95dc:	d1df      	bne.n	959e <delay+0x46>
}
    95de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    95e2:	f001 fc19 	bl	ae18 <yield>
		while ((micros() - start) >= 1000) {
    95e6:	4904      	ldr	r1, [pc, #16]	; (95f8 <delay+0xa0>)
    95e8:	e7d9      	b.n	959e <delay+0x46>
    95ea:	bf00      	nop
    95ec:	20009604 	.word	0x20009604
    95f0:	20009600 	.word	0x20009600
    95f4:	200095fc 	.word	0x200095fc
    95f8:	e0001000 	.word	0xe0001000
    95fc:	200095f8 	.word	0x200095f8

00009600 <micros>:
{
    9600:	b430      	push	{r4, r5}
    9602:	4b0f      	ldr	r3, [pc, #60]	; (9640 <micros+0x40>)
    9604:	f04f 0c01 	mov.w	ip, #1
    9608:	4d0e      	ldr	r5, [pc, #56]	; (9644 <micros+0x44>)
    960a:	4c0f      	ldr	r4, [pc, #60]	; (9648 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    960c:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    9610:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    9612:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9614:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    9618:	2a00      	cmp	r2, #0
    961a:	d1f7      	bne.n	960c <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    961c:	4b0b      	ldr	r3, [pc, #44]	; (964c <micros+0x4c>)
    961e:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9620:	4a0b      	ldr	r2, [pc, #44]	; (9650 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    9622:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    9624:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9628:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    962a:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    962e:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    9632:	bc30      	pop	{r4, r5}
    9634:	428a      	cmp	r2, r1
    9636:	bf94      	ite	ls
    9638:	1880      	addls	r0, r0, r2
    963a:	1840      	addhi	r0, r0, r1
    963c:	4770      	bx	lr
    963e:	bf00      	nop
    9640:	20009604 	.word	0x20009604
    9644:	20009600 	.word	0x20009600
    9648:	200095fc 	.word	0x200095fc
    964c:	e0001000 	.word	0xe0001000
    9650:	200095f8 	.word	0x200095f8

00009654 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    9654:	2836      	cmp	r0, #54	; 0x36
    9656:	d816      	bhi.n	9686 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    9658:	0102      	lsls	r2, r0, #4
    965a:	4b10      	ldr	r3, [pc, #64]	; (969c <digitalWrite+0x48>)
    965c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    9660:	589b      	ldr	r3, [r3, r2]
{
    9662:	b410      	push	{r4}
	mask = p->mask;
    9664:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    9666:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    9668:	4214      	tst	r4, r2
    966a:	d005      	beq.n	9678 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    966c:	b961      	cbnz	r1, 9688 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    966e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    9672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    9676:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9678:	6883      	ldr	r3, [r0, #8]
		if (val) {
    967a:	b151      	cbz	r1, 9692 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    967c:	4a08      	ldr	r2, [pc, #32]	; (96a0 <digitalWrite+0x4c>)
}
    967e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9682:	601a      	str	r2, [r3, #0]
}
    9684:	4770      	bx	lr
    9686:	4770      	bx	lr
    9688:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    968c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    9690:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    9692:	4a04      	ldr	r2, [pc, #16]	; (96a4 <digitalWrite+0x50>)
}
    9694:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    9698:	601a      	str	r2, [r3, #0]
}
    969a:	4770      	bx	lr
    969c:	20007940 	.word	0x20007940
    96a0:	0001f038 	.word	0x0001f038
    96a4:	00013038 	.word	0x00013038

000096a8 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    96a8:	2836      	cmp	r0, #54	; 0x36
    96aa:	d80b      	bhi.n	96c4 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    96ac:	4b06      	ldr	r3, [pc, #24]	; (96c8 <digitalRead+0x20>)
    96ae:	0102      	lsls	r2, r0, #4
    96b0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    96b4:	589a      	ldr	r2, [r3, r2]
    96b6:	68c3      	ldr	r3, [r0, #12]
    96b8:	6892      	ldr	r2, [r2, #8]
    96ba:	421a      	tst	r2, r3
    96bc:	bf14      	ite	ne
    96be:	2001      	movne	r0, #1
    96c0:	2000      	moveq	r0, #0
    96c2:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    96c4:	2000      	movs	r0, #0
}
    96c6:	4770      	bx	lr
    96c8:	20007940 	.word	0x20007940

000096cc <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    96cc:	2836      	cmp	r0, #54	; 0x36
    96ce:	d829      	bhi.n	9724 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    96d0:	4b16      	ldr	r3, [pc, #88]	; (972c <pinMode+0x60>)
    96d2:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    96d4:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    96d6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    96da:	589a      	ldr	r2, [r3, r2]
{
    96dc:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    96de:	6853      	ldr	r3, [r2, #4]
    96e0:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    96e2:	d00e      	beq.n	9702 <pinMode+0x36>
    96e4:	2904      	cmp	r1, #4
    96e6:	d00c      	beq.n	9702 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    96e8:	ea23 0304 	bic.w	r3, r3, r4
    96ec:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    96ee:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    96f0:	b1a9      	cbz	r1, 971e <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    96f2:	2902      	cmp	r1, #2
    96f4:	d017      	beq.n	9726 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    96f6:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    96f8:	bf0c      	ite	eq
    96fa:	4a0d      	ldreq	r2, [pc, #52]	; (9730 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    96fc:	4a0d      	ldrne	r2, [pc, #52]	; (9734 <pinMode+0x68>)
    96fe:	601a      	str	r2, [r3, #0]
    9700:	e007      	b.n	9712 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9702:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    9704:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9706:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9708:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    970a:	d008      	beq.n	971e <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    970c:	f640 0238 	movw	r2, #2104	; 0x838
    9710:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    9712:	6843      	ldr	r3, [r0, #4]
    9714:	2215      	movs	r2, #21
}
    9716:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    971a:	601a      	str	r2, [r3, #0]
}
    971c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    971e:	2238      	movs	r2, #56	; 0x38
    9720:	601a      	str	r2, [r3, #0]
    9722:	e7f6      	b.n	9712 <pinMode+0x46>
    9724:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9726:	4a04      	ldr	r2, [pc, #16]	; (9738 <pinMode+0x6c>)
    9728:	601a      	str	r2, [r3, #0]
    972a:	e7f2      	b.n	9712 <pinMode+0x46>
    972c:	20007940 	.word	0x20007940
    9730:	00013038 	.word	0x00013038
    9734:	00010038 	.word	0x00010038
    9738:	0001f038 	.word	0x0001f038

0000973c <flash_wait>:
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    973c:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    973e:	4a12      	ldr	r2, [pc, #72]	; (9788 <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
    9740:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    9742:	4b12      	ldr	r3, [pc, #72]	; (978c <flash_wait+0x50>)
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    9744:	2101      	movs	r1, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    9746:	4d12      	ldr	r5, [pc, #72]	; (9790 <flash_wait+0x54>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    9748:	4c12      	ldr	r4, [pc, #72]	; (9794 <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    974a:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    974e:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    9752:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    9756:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    975a:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    975e:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    9762:	6953      	ldr	r3, [r2, #20]
    9764:	07db      	lsls	r3, r3, #31
    9766:	d5fc      	bpl.n	9762 <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    9768:	6151      	str	r1, [r2, #20]
	} while (status & 1);
    976a:	7823      	ldrb	r3, [r4, #0]
    976c:	07db      	lsls	r3, r3, #31
    976e:	d4f0      	bmi.n	9752 <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    9770:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    9772:	4905      	ldr	r1, [pc, #20]	; (9788 <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    9774:	f043 0301 	orr.w	r3, r3, #1
    9778:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    977a:	680b      	ldr	r3, [r1, #0]
    977c:	07db      	lsls	r3, r3, #31
    977e:	d4fc      	bmi.n	977a <flash_wait+0x3e>
	__enable_irq();
    9780:	b662      	cpsie	i
}
    9782:	bc30      	pop	{r4, r5}
    9784:	4770      	bx	lr
    9786:	bf00      	nop
    9788:	402a8000 	.word	0x402a8000
    978c:	24010405 	.word	0x24010405
    9790:	000f0001 	.word	0x000f0001
    9794:	402a8100 	.word	0x402a8100

00009798 <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    9798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    979a:	460f      	mov	r7, r1
    979c:	4616      	mov	r6, r2
	__disable_irq();
    979e:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    97a0:	4b34      	ldr	r3, [pc, #208]	; (9874 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    97a2:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    97a6:	4a34      	ldr	r2, [pc, #208]	; (9878 <eepromemu_flash_write+0xe0>)
    97a8:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    97aa:	2202      	movs	r2, #2
    97ac:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    97ae:	2200      	movs	r2, #0
    97b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    97b4:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    97b8:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    97bc:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    97c0:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    97c4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    97c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    97cc:	2201      	movs	r2, #1
    97ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    97d2:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
    97d6:	1982      	adds	r2, r0, r6
	asm volatile("": : :"memory");
	asm("dsb");
    97d8:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    97dc:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    97e0:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
    97e4:	3320      	adds	r3, #32
	} while (location < end_addr);
    97e6:	429a      	cmp	r2, r3
    97e8:	d8fa      	bhi.n	97e0 <eepromemu_flash_write+0x48>
	asm("dsb");
    97ea:	f3bf 8f4f 	dsb	sy
	asm("isb");
    97ee:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    97f2:	4d20      	ldr	r5, [pc, #128]	; (9874 <eepromemu_flash_write+0xdc>)
    97f4:	696b      	ldr	r3, [r5, #20]
    97f6:	07da      	lsls	r2, r3, #31
    97f8:	d5fc      	bpl.n	97f4 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    97fa:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    97fc:	491f      	ldr	r1, [pc, #124]	; (987c <eepromemu_flash_write+0xe4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    97fe:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    9800:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    9804:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    9806:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    980a:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    980e:	f242 2101 	movw	r1, #8705	; 0x2201
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    9812:	4c18      	ldr	r4, [pc, #96]	; (9874 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    9814:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    9818:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    981c:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    9820:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    9824:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    9828:	4d15      	ldr	r5, [pc, #84]	; (9880 <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    982a:	e001      	b.n	9830 <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
    982c:	065b      	lsls	r3, r3, #25
    982e:	d409      	bmi.n	9844 <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    9830:	6963      	ldr	r3, [r4, #20]
    9832:	f013 0001 	ands.w	r0, r3, #1
    9836:	d0f9      	beq.n	982c <eepromemu_flash_write+0x94>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    9838:	2341      	movs	r3, #65	; 0x41
    983a:	6163      	str	r3, [r4, #20]
	flash_wait();
}
    983c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
    9840:	f7ff bf7c 	b.w	973c <flash_wait>
			if (wrlen > 8) wrlen = 8;
    9844:	2e08      	cmp	r6, #8
    9846:	d80a      	bhi.n	985e <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    9848:	b136      	cbz	r6, 9858 <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    984a:	4632      	mov	r2, r6
    984c:	4639      	mov	r1, r7
				src += wrlen;
    984e:	4437      	add	r7, r6
				len -= wrlen;
    9850:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    9852:	4628      	mov	r0, r5
    9854:	f000 f87a 	bl	994c <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    9858:	2340      	movs	r3, #64	; 0x40
    985a:	6163      	str	r3, [r4, #20]
    985c:	e7e8      	b.n	9830 <eepromemu_flash_write+0x98>
    985e:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
    9862:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    9864:	4639      	mov	r1, r7
    9866:	4632      	mov	r2, r6
				src += wrlen;
    9868:	4437      	add	r7, r6
				len -= wrlen;
    986a:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    986c:	4628      	mov	r0, r5
    986e:	f000 f86d 	bl	994c <memcpy>
				len -= wrlen;
    9872:	e7f1      	b.n	9858 <eepromemu_flash_write+0xc0>
    9874:	402a8000 	.word	0x402a8000
    9878:	5af05af0 	.word	0x5af05af0
    987c:	08180432 	.word	0x08180432
    9880:	402a8180 	.word	0x402a8180

00009884 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    9884:	b410      	push	{r4}
	__disable_irq();
    9886:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    9888:	4b28      	ldr	r3, [pc, #160]	; (992c <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    988a:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    988c:	4c28      	ldr	r4, [pc, #160]	; (9930 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    988e:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    9890:	619c      	str	r4, [r3, #24]
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    9892:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    9896:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    9898:	f240 4106 	movw	r1, #1030	; 0x406
    989c:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    98a0:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
    98a2:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    98a6:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    98aa:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    98ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    98b2:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    98b6:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    98ba:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    98bc:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
    98c0:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    98c4:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
    98c8:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
    98cc:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    98d0:	4299      	cmp	r1, r3
    98d2:	bf34      	ite	cc
    98d4:	2101      	movcc	r1, #1
    98d6:	2180      	movcs	r1, #128	; 0x80
    98d8:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
    98dc:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
    98de:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
    98e2:	461a      	mov	r2, r3
	} while (location < end_addr);
    98e4:	f103 0320 	add.w	r3, r3, #32
    98e8:	d1f8      	bne.n	98dc <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
    98ea:	f3bf 8f4f 	dsb	sy
	asm("isb");
    98ee:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    98f2:	4a0e      	ldr	r2, [pc, #56]	; (992c <eepromemu_flash_erase_sector+0xa8>)
    98f4:	6953      	ldr	r3, [r2, #20]
    98f6:	07d9      	lsls	r1, r3, #31
    98f8:	d5fc      	bpl.n	98f4 <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    98fa:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    98fc:	490d      	ldr	r1, [pc, #52]	; (9934 <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    98fe:	4b0e      	ldr	r3, [pc, #56]	; (9938 <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    9900:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    9902:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    9904:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    9908:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    990c:	4907      	ldr	r1, [pc, #28]	; (992c <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    990e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    9912:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    9916:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    991a:	694b      	ldr	r3, [r1, #20]
    991c:	07db      	lsls	r3, r3, #31
    991e:	d5fc      	bpl.n	991a <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    9920:	2301      	movs	r3, #1
	flash_wait();
}
    9922:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    9926:	614b      	str	r3, [r1, #20]
	flash_wait();
    9928:	f7ff bf08 	b.w	973c <flash_wait>
    992c:	402a8000 	.word	0x402a8000
    9930:	5af05af0 	.word	0x5af05af0
    9934:	08180420 	.word	0x08180420
    9938:	00fff000 	.word	0x00fff000

0000993c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    993c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    993e:	f7f7 fb47 	bl	fd0 <setup>
	while (1) {
		loop();
    9942:	f7f7 fbc9 	bl	10d8 <loop>
		yield();
    9946:	f001 fa67 	bl	ae18 <yield>
	while (1) {
    994a:	e7fa      	b.n	9942 <main+0x6>

0000994c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    994c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    994e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9952:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9956:	d16d      	bne.n	9a34 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9958:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    995a:	d341      	bcc.n	99e0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    995c:	f851 3b04 	ldr.w	r3, [r1], #4
    9960:	f840 3b04 	str.w	r3, [r0], #4
    9964:	f851 3b04 	ldr.w	r3, [r1], #4
    9968:	f840 3b04 	str.w	r3, [r0], #4
    996c:	f851 3b04 	ldr.w	r3, [r1], #4
    9970:	f840 3b04 	str.w	r3, [r0], #4
    9974:	f851 3b04 	ldr.w	r3, [r1], #4
    9978:	f840 3b04 	str.w	r3, [r0], #4
    997c:	f851 3b04 	ldr.w	r3, [r1], #4
    9980:	f840 3b04 	str.w	r3, [r0], #4
    9984:	f851 3b04 	ldr.w	r3, [r1], #4
    9988:	f840 3b04 	str.w	r3, [r0], #4
    998c:	f851 3b04 	ldr.w	r3, [r1], #4
    9990:	f840 3b04 	str.w	r3, [r0], #4
    9994:	f851 3b04 	ldr.w	r3, [r1], #4
    9998:	f840 3b04 	str.w	r3, [r0], #4
    999c:	f851 3b04 	ldr.w	r3, [r1], #4
    99a0:	f840 3b04 	str.w	r3, [r0], #4
    99a4:	f851 3b04 	ldr.w	r3, [r1], #4
    99a8:	f840 3b04 	str.w	r3, [r0], #4
    99ac:	f851 3b04 	ldr.w	r3, [r1], #4
    99b0:	f840 3b04 	str.w	r3, [r0], #4
    99b4:	f851 3b04 	ldr.w	r3, [r1], #4
    99b8:	f840 3b04 	str.w	r3, [r0], #4
    99bc:	f851 3b04 	ldr.w	r3, [r1], #4
    99c0:	f840 3b04 	str.w	r3, [r0], #4
    99c4:	f851 3b04 	ldr.w	r3, [r1], #4
    99c8:	f840 3b04 	str.w	r3, [r0], #4
    99cc:	f851 3b04 	ldr.w	r3, [r1], #4
    99d0:	f840 3b04 	str.w	r3, [r0], #4
    99d4:	f851 3b04 	ldr.w	r3, [r1], #4
    99d8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    99dc:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    99de:	d2bd      	bcs.n	995c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    99e0:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    99e2:	d311      	bcc.n	9a08 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    99e4:	f851 3b04 	ldr.w	r3, [r1], #4
    99e8:	f840 3b04 	str.w	r3, [r0], #4
    99ec:	f851 3b04 	ldr.w	r3, [r1], #4
    99f0:	f840 3b04 	str.w	r3, [r0], #4
    99f4:	f851 3b04 	ldr.w	r3, [r1], #4
    99f8:	f840 3b04 	str.w	r3, [r0], #4
    99fc:	f851 3b04 	ldr.w	r3, [r1], #4
    9a00:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9a04:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    9a06:	d2ed      	bcs.n	99e4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9a08:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    9a0a:	d305      	bcc.n	9a18 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9a0c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9a10:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    9a14:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9a16:	d2f9      	bcs.n	9a0c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9a18:	3204      	adds	r2, #4
	beq	.Ldone
    9a1a:	d008      	beq.n	9a2e <memcpy+0xe2>

	lsls	r2, r2, #31
    9a1c:	07d2      	lsls	r2, r2, #31
	itt ne
    9a1e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    9a20:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9a24:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9a28:	d301      	bcc.n	9a2e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9a2a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9a2c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9a2e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9a30:	4770      	bx	lr
    9a32:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9a34:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    9a36:	d313      	bcc.n	9a60 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9a38:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9a3a:	d08d      	beq.n	9958 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9a3c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9a40:	d08a      	beq.n	9958 <memcpy+0xc>

	rsb	r3, #4
    9a42:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    9a46:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    9a48:	07db      	lsls	r3, r3, #31
	itt ne
    9a4a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    9a4c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9a50:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9a54:	d380      	bcc.n	9958 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    9a56:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9a5a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9a5e:	e77b      	b.n	9958 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9a60:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    9a62:	d3d9      	bcc.n	9a18 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9a64:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    9a66:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9a6a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9a6e:	d2f9      	bcs.n	9a64 <memcpy+0x118>

	ldrb	r3, [r1]
    9a70:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9a72:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9a74:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9a76:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9a78:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9a7a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9a7c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9a7e:	4770      	bx	lr

00009a80 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    9a80:	f001 be52 	b.w	b728 <malloc>

00009a84 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    9a84:	f001 be58 	b.w	b738 <free>

00009a88 <ultoa>:
	int i=0, j;
    9a88:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
    9a8c:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    9a8e:	4666      	mov	r6, ip
	int i=0, j;
    9a90:	2400      	movs	r4, #0
    9a92:	e000      	b.n	9a96 <ultoa+0xe>
		i++;
    9a94:	3401      	adds	r4, #1
		digit = val % radix;
    9a96:	fbb0 f5f2 	udiv	r5, r0, r2
    9a9a:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9a9e:	2b09      	cmp	r3, #9
    9aa0:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    9aa4:	f103 0330 	add.w	r3, r3, #48	; 0x30
    9aa8:	fa5f fe8e 	uxtb.w	lr, lr
    9aac:	bf98      	it	ls
    9aae:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    9ab2:	4290      	cmp	r0, r2
		val /= radix;
    9ab4:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9ab6:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    9aba:	d2eb      	bcs.n	9a94 <ultoa+0xc>
	buf[i + 1] = 0;
    9abc:	1c63      	adds	r3, r4, #1
    9abe:	2200      	movs	r2, #0
    9ac0:	18c8      	adds	r0, r1, r3
    9ac2:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    9ac4:	b17c      	cbz	r4, 9ae6 <ultoa+0x5e>
		t = buf[j];
    9ac6:	4662      	mov	r2, ip
    9ac8:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    9acc:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    9ad0:	eba1 030c 	sub.w	r3, r1, ip
    9ad4:	3202      	adds	r2, #2
		buf[j] = buf[i];
    9ad6:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    9ada:	3b01      	subs	r3, #1
    9adc:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    9ade:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    9ae0:	4423      	add	r3, r4
    9ae2:	429a      	cmp	r2, r3
    9ae4:	dbef      	blt.n	9ac6 <ultoa+0x3e>
}
    9ae6:	4608      	mov	r0, r1
    9ae8:	bd70      	pop	{r4, r5, r6, pc}
    9aea:	bf00      	nop

00009aec <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    9aec:	4a07      	ldr	r2, [pc, #28]	; (9b0c <rtc_get+0x20>)
    9aee:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    9af0:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    9af2:	4619      	mov	r1, r3
    9af4:	4684      	mov	ip, r0
    9af6:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    9af8:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    9afa:	4299      	cmp	r1, r3
    9afc:	d1f9      	bne.n	9af2 <rtc_get+0x6>
    9afe:	4584      	cmp	ip, r0
    9b00:	d1f7      	bne.n	9af2 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    9b02:	0bdb      	lsrs	r3, r3, #15
}
    9b04:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    9b08:	4770      	bx	lr
    9b0a:	bf00      	nop
    9b0c:	400d4000 	.word	0x400d4000

00009b10 <unused_interrupt_vector>:
	__disable_irq();
    9b10:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    9b12:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    9b16:	4c52      	ldr	r4, [pc, #328]	; (9c60 <unused_interrupt_vector+0x150>)
    9b18:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    9b1c:	f01e 0f04 	tst.w	lr, #4
    9b20:	bf0c      	ite	eq
    9b22:	f3ef 8208 	mrseq	r2, MSP
    9b26:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    9b2a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    9b2e:	4e4d      	ldr	r6, [pc, #308]	; (9c64 <unused_interrupt_vector+0x154>)
	while (p < end) {
    9b30:	4d4d      	ldr	r5, [pc, #308]	; (9c68 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    9b32:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    9b36:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    9b3a:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    9b3e:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    9b42:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    9b46:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    9b4a:	6993      	ldr	r3, [r2, #24]
    9b4c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    9b50:	69d3      	ldr	r3, [r2, #28]
    9b52:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    9b56:	f000 f8d3 	bl	9d00 <tempmonGetTemp>
    9b5a:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    9b5e:	f7ff ffc5 	bl	9aec <rtc_get>
	info->len = sizeof(*info) / 4;
    9b62:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    9b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
    9b68:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    9b6c:	460b      	mov	r3, r1
    9b6e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    9b72:	493e      	ldr	r1, [pc, #248]	; (9c6c <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    9b74:	1d30      	adds	r0, r6, #4
    9b76:	405a      	eors	r2, r3
    9b78:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    9b7a:	f002 0301 	and.w	r3, r2, #1
    9b7e:	3c01      	subs	r4, #1
    9b80:	fb01 f303 	mul.w	r3, r1, r3
    9b84:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    9b88:	d1f7      	bne.n	9b7a <unused_interrupt_vector+0x6a>
	while (p < end) {
    9b8a:	42a8      	cmp	r0, r5
    9b8c:	d002      	beq.n	9b94 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    9b8e:	6873      	ldr	r3, [r6, #4]
    9b90:	4606      	mov	r6, r0
    9b92:	e7ef      	b.n	9b74 <unused_interrupt_vector+0x64>
	info->crc = crc;
    9b94:	4b32      	ldr	r3, [pc, #200]	; (9c60 <unused_interrupt_vector+0x150>)
    9b96:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    9b9a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    9b9e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9ba2:	4930      	ldr	r1, [pc, #192]	; (9c64 <unused_interrupt_vector+0x154>)
    9ba4:	4a32      	ldr	r2, [pc, #200]	; (9c70 <unused_interrupt_vector+0x160>)
    9ba6:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    9baa:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    9bae:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9bb2:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    9bb6:	4a2f      	ldr	r2, [pc, #188]	; (9c74 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    9bb8:	2502      	movs	r5, #2
    9bba:	482f      	ldr	r0, [pc, #188]	; (9c78 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    9bbc:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    9bbe:	492f      	ldr	r1, [pc, #188]	; (9c7c <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    9bc0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    9bc4:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    9bc6:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    9bc8:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    9bca:	482d      	ldr	r0, [pc, #180]	; (9c80 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    9bcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9bd4:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    9bd6:	680b      	ldr	r3, [r1, #0]
    9bd8:	4283      	cmp	r3, r0
    9bda:	d83d      	bhi.n	9c58 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    9bdc:	4d26      	ldr	r5, [pc, #152]	; (9c78 <unused_interrupt_vector+0x168>)
    9bde:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    9be0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
    9be8:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    9bea:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    9bec:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    9bf0:	4924      	ldr	r1, [pc, #144]	; (9c84 <unused_interrupt_vector+0x174>)
    9bf2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    9bf6:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    9bfa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    9bfe:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    9c02:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    9c06:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    9c0a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    9c0e:	e001      	b.n	9c14 <unused_interrupt_vector+0x104>
		usb_isr();
    9c10:	f000 f968 	bl	9ee4 <usb_isr>
		if (PIT_TFLG0) {
    9c14:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    9c18:	2b00      	cmp	r3, #0
    9c1a:	d0f9      	beq.n	9c10 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    9c1c:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    9c1e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    9c22:	2c4f      	cmp	r4, #79	; 0x4f
    9c24:	d9f4      	bls.n	9c10 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    9c26:	4b18      	ldr	r3, [pc, #96]	; (9c88 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    9c28:	2002      	movs	r0, #2
    9c2a:	4918      	ldr	r1, [pc, #96]	; (9c8c <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    9c2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    9c30:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    9c34:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    9c36:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    9c3a:	b93b      	cbnz	r3, 9c4c <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    9c3c:	4814      	ldr	r0, [pc, #80]	; (9c90 <unused_interrupt_vector+0x180>)
    9c3e:	4915      	ldr	r1, [pc, #84]	; (9c94 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    9c40:	4a0d      	ldr	r2, [pc, #52]	; (9c78 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    9c42:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    9c44:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    9c48:	2b00      	cmp	r3, #0
    9c4a:	d0fa      	beq.n	9c42 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    9c4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9c50:	4a11      	ldr	r2, [pc, #68]	; (9c98 <unused_interrupt_vector+0x188>)
    9c52:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    9c56:	e7fe      	b.n	9c56 <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    9c58:	f001 f94a 	bl	aef0 <set_arm_clock>
    9c5c:	e7be      	b.n	9bdc <unused_interrupt_vector+0xcc>
    9c5e:	bf00      	nop
    9c60:	2027ff00 	.word	0x2027ff00
    9c64:	2027ff80 	.word	0x2027ff80
    9c68:	2027ffa8 	.word	0x2027ffa8
    9c6c:	edb88320 	.word	0xedb88320
    9c70:	2027ffa0 	.word	0x2027ffa0
    9c74:	400fc000 	.word	0x400fc000
    9c78:	40084000 	.word	0x40084000
    9c7c:	2000809c 	.word	0x2000809c
    9c80:	0bcd3d80 	.word	0x0bcd3d80
    9c84:	00249f00 	.word	0x00249f00
    9c88:	400d9000 	.word	0x400d9000
    9c8c:	402e0000 	.word	0x402e0000
    9c90:	400f8000 	.word	0x400f8000
    9c94:	0bad00f1 	.word	0x0bad00f1
    9c98:	05fa0004 	.word	0x05fa0004

00009c9c <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    9c9c:	490a      	ldr	r1, [pc, #40]	; (9cc8 <_sbrk+0x2c>)
    9c9e:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    9ca0:	b138      	cbz	r0, 9cb2 <_sbrk+0x16>
{
    9ca2:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    9ca4:	1813      	adds	r3, r2, r0
    9ca6:	4809      	ldr	r0, [pc, #36]	; (9ccc <_sbrk+0x30>)
    9ca8:	4283      	cmp	r3, r0
    9caa:	d804      	bhi.n	9cb6 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    9cac:	4610      	mov	r0, r2
                __brkval = prev + incr;
    9cae:	600b      	str	r3, [r1, #0]
}
    9cb0:	bd08      	pop	{r3, pc}
    9cb2:	4610      	mov	r0, r2
    9cb4:	4770      	bx	lr
                        errno = ENOMEM;
    9cb6:	f003 fd83 	bl	d7c0 <__errno>
    9cba:	230c      	movs	r3, #12
                        return (void *)-1;
    9cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                        errno = ENOMEM;
    9cc0:	6003      	str	r3, [r0, #0]
}
    9cc2:	4610      	mov	r0, r2
    9cc4:	bd08      	pop	{r3, pc}
    9cc6:	bf00      	nop
    9cc8:	20008104 	.word	0x20008104
    9ccc:	20280000 	.word	0x20280000

00009cd0 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    9cd0:	2000      	movs	r0, #0
    9cd2:	4770      	bx	lr

00009cd4 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    9cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9cd8:	4770      	bx	lr
    9cda:	bf00      	nop

00009cdc <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    9cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    9ce0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    9ce2:	604b      	str	r3, [r1, #4]
}
    9ce4:	4770      	bx	lr
    9ce6:	bf00      	nop

00009ce8 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    9ce8:	2001      	movs	r0, #1
    9cea:	4770      	bx	lr

00009cec <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    9cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9cf0:	4770      	bx	lr
    9cf2:	bf00      	nop

00009cf4 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    9cf4:	bf30      	wfi
    9cf6:	e7fd      	b.n	9cf4 <__cxa_pure_virtual>

00009cf8 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    9cf8:	bf30      	wfi
    9cfa:	e7fd      	b.n	9cf8 <abort>

00009cfc <Panic_Temp_isr>:
  unused_interrupt_vector();
    9cfc:	f7ff bf08 	b.w	9b10 <unused_interrupt_vector>

00009d00 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    9d00:	4a12      	ldr	r2, [pc, #72]	; (9d4c <tempmonGetTemp+0x4c>)
    9d02:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    9d06:	075b      	lsls	r3, r3, #29
    9d08:	d5fb      	bpl.n	9d02 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    9d0a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9d0e:	4810      	ldr	r0, [pc, #64]	; (9d50 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    9d10:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9d14:	490f      	ldr	r1, [pc, #60]	; (9d54 <tempmonGetTemp+0x54>)
    9d16:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    9d1a:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9d1e:	ed91 6a00 	vldr	s12, [r1]
    9d22:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    9d26:	4a0c      	ldr	r2, [pc, #48]	; (9d58 <tempmonGetTemp+0x58>)
    9d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9d2c:	4b0b      	ldr	r3, [pc, #44]	; (9d5c <tempmonGetTemp+0x5c>)
    9d2e:	edd2 6a00 	vldr	s13, [r2]
    9d32:	ee77 7ac7 	vsub.f32	s15, s15, s14
    9d36:	ed93 7a00 	vldr	s14, [r3]
    9d3a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    9d3e:	ee67 7a86 	vmul.f32	s15, s15, s12
    9d42:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    9d46:	ee37 0a40 	vsub.f32	s0, s14, s0
    9d4a:	4770      	bx	lr
    9d4c:	400d8100 	.word	0x400d8100
    9d50:	200095e8 	.word	0x200095e8
    9d54:	200095f0 	.word	0x200095f0
    9d58:	200095f4 	.word	0x200095f4
    9d5c:	200095ec 	.word	0x200095ec

00009d60 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    9d60:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    9d62:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    9d64:	b11b      	cbz	r3, 9d6e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    9d66:	6853      	ldr	r3, [r2, #4]
    9d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9d6c:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    9d6e:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    9d70:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    9d72:	b33c      	cbz	r4, 9dc4 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    9d74:	4b1a      	ldr	r3, [pc, #104]	; (9de0 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    9d76:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    9d78:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    9d7c:	420c      	tst	r4, r1
    9d7e:	d11d      	bne.n	9dbc <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    9d80:	4e18      	ldr	r6, [pc, #96]	; (9de4 <schedule_transfer+0x84>)
    9d82:	6877      	ldr	r7, [r6, #4]
    9d84:	e004      	b.n	9d90 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    9d86:	6874      	ldr	r4, [r6, #4]
    9d88:	1be4      	subs	r4, r4, r7
    9d8a:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    9d8e:	d20b      	bcs.n	9da8 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    9d90:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    9d94:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    9d98:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    9d9c:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    9da0:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    9da4:	0464      	lsls	r4, r4, #17
    9da6:	d5ee      	bpl.n	9d86 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    9da8:	400d      	ands	r5, r1
    9daa:	d107      	bne.n	9dbc <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    9dac:	4c0c      	ldr	r4, [pc, #48]	; (9de0 <schedule_transfer+0x80>)
		endpoint->status = 0;
    9dae:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    9db2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9db6:	430b      	orrs	r3, r1
    9db8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    9dbc:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    9dbe:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    9dc0:	bcf0      	pop	{r4, r5, r6, r7}
    9dc2:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    9dc4:	4d06      	ldr	r5, [pc, #24]	; (9de0 <schedule_transfer+0x80>)
	endpoint->status = 0;
    9dc6:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    9dca:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    9dce:	430b      	orrs	r3, r1
    9dd0:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    9dd4:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    9dd6:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    9dd8:	b662      	cpsie	i
}
    9dda:	bcf0      	pop	{r4, r5, r6, r7}
    9ddc:	4770      	bx	lr
    9dde:	bf00      	nop
    9de0:	402e0000 	.word	0x402e0000
    9de4:	e0001000 	.word	0xe0001000

00009de8 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    9de8:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    9dea:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    9dec:	b19d      	cbz	r5, 9e16 <run_callbacks+0x2e>
    9dee:	4606      	mov	r6, r0
    9df0:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    9df2:	2400      	movs	r4, #0
    9df4:	e003      	b.n	9dfe <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    9df6:	6812      	ldr	r2, [r2, #0]
		count++;
    9df8:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    9dfa:	2a01      	cmp	r2, #1
    9dfc:	d00c      	beq.n	9e18 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    9dfe:	6853      	ldr	r3, [r2, #4]
    9e00:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    9e04:	d0f7      	beq.n	9df6 <run_callbacks+0xe>
			ep->first_transfer = t;
    9e06:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    9e08:	b12c      	cbz	r4, 9e16 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    9e0a:	4628      	mov	r0, r5
		ep->callback_function(first);
    9e0c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    9e0e:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    9e10:	4798      	blx	r3
	while (count) {
    9e12:	3c01      	subs	r4, #1
    9e14:	d1f9      	bne.n	9e0a <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    9e16:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    9e18:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    9e1c:	e7f4      	b.n	9e08 <run_callbacks+0x20>
    9e1e:	bf00      	nop

00009e20 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    9e20:	b430      	push	{r4, r5}
	if (len > 0) {
    9e22:	b9d9      	cbnz	r1, 9e5c <endpoint0_transmit.constprop.0+0x3c>
    9e24:	4c1f      	ldr	r4, [pc, #124]	; (9ea4 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    9e26:	4b20      	ldr	r3, [pc, #128]	; (9ea8 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    9e28:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9e2a:	4a20      	ldr	r2, [pc, #128]	; (9eac <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    9e2c:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9e2e:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    9e32:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    9e34:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    9e36:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9e3a:	2480      	movs	r4, #128	; 0x80
    9e3c:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9e3e:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    9e42:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    9e46:	481a      	ldr	r0, [pc, #104]	; (9eb0 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    9e48:	432b      	orrs	r3, r5
    9e4a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    9e4e:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    9e50:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    9e54:	2b00      	cmp	r3, #0
    9e56:	d1fb      	bne.n	9e50 <endpoint0_transmit.constprop.0+0x30>
}
    9e58:	bc30      	pop	{r4, r5}
    9e5a:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9e5c:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    9e5e:	4b15      	ldr	r3, [pc, #84]	; (9eb4 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    9e60:	4c10      	ldr	r4, [pc, #64]	; (9ea4 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    9e62:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9e64:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9e68:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    9e6a:	4a10      	ldr	r2, [pc, #64]	; (9eac <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9e6c:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9e6e:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    9e72:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9e74:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9e76:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    9e7a:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9e7c:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9e7e:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9e82:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9e86:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    9e88:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9e8a:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    9e8c:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    9e8e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    9e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9e96:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    9e9a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    9e9e:	2b00      	cmp	r3, #0
    9ea0:	d1fb      	bne.n	9e9a <endpoint0_transmit.constprop.0+0x7a>
    9ea2:	e7c0      	b.n	9e26 <endpoint0_transmit.constprop.0+0x6>
    9ea4:	20000000 	.word	0x20000000
    9ea8:	20008ac0 	.word	0x20008ac0
    9eac:	402e0000 	.word	0x402e0000
    9eb0:	20009578 	.word	0x20009578
    9eb4:	20008ae0 	.word	0x20008ae0

00009eb8 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    9eb8:	4908      	ldr	r1, [pc, #32]	; (9edc <usb_stop_sof_interrupts+0x24>)
    9eba:	2201      	movs	r2, #1
    9ebc:	780b      	ldrb	r3, [r1, #0]
    9ebe:	fa02 f000 	lsl.w	r0, r2, r0
    9ec2:	ea23 0000 	bic.w	r0, r3, r0
    9ec6:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    9ec8:	b930      	cbnz	r0, 9ed8 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    9eca:	4a05      	ldr	r2, [pc, #20]	; (9ee0 <usb_stop_sof_interrupts+0x28>)
    9ecc:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    9ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    9ed4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    9ed8:	4770      	bx	lr
    9eda:	bf00      	nop
    9edc:	2000962f 	.word	0x2000962f
    9ee0:	402e0000 	.word	0x402e0000

00009ee4 <usb_isr>:
{
    9ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    9ee8:	4c97      	ldr	r4, [pc, #604]	; (a148 <usb_isr+0x264>)
{
    9eea:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    9eec:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    9ef0:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    9ef2:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    9ef6:	d553      	bpl.n	9fa0 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    9ef8:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    9efc:	2a00      	cmp	r2, #0
    9efe:	d04a      	beq.n	9f96 <usb_isr+0xb2>
    9f00:	4e92      	ldr	r6, [pc, #584]	; (a14c <usb_isr+0x268>)
    9f02:	f8df a260 	ldr.w	sl, [pc, #608]	; a164 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    9f06:	f8df 9274 	ldr.w	r9, [pc, #628]	; a17c <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    9f0a:	f8df b274 	ldr.w	fp, [pc, #628]	; a180 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    9f0e:	f8df 8274 	ldr.w	r8, [pc, #628]	; a184 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    9f12:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    9f16:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    9f1a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    9f1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    9f22:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    9f26:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    9f2a:	049d      	lsls	r5, r3, #18
    9f2c:	d5f5      	bpl.n	9f1a <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    9f2e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    9f32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    9f36:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    9f3a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9f3e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    9f42:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    9f46:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    9f4a:	d1fa      	bne.n	9f42 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    9f4c:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    9f4e:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    9f50:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    9f54:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    9f58:	f000 81cf 	beq.w	a2fa <usb_isr+0x416>
    9f5c:	f200 80db 	bhi.w	a116 <usb_isr+0x232>
    9f60:	f240 3102 	movw	r1, #770	; 0x302
    9f64:	428b      	cmp	r3, r1
    9f66:	f000 81e7 	beq.w	a338 <usb_isr+0x454>
    9f6a:	f200 809a 	bhi.w	a0a2 <usb_isr+0x1be>
    9f6e:	2b82      	cmp	r3, #130	; 0x82
    9f70:	f000 81cb 	beq.w	a30a <usb_isr+0x426>
    9f74:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    9f78:	f040 808a 	bne.w	a090 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    9f7c:	f010 0f78 	tst.w	r0, #120	; 0x78
    9f80:	b283      	uxth	r3, r0
    9f82:	f000 8203 	beq.w	a38c <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    9f86:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9f8a:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9f8e:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    9f92:	2a00      	cmp	r2, #0
    9f94:	d1bd      	bne.n	9f12 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    9f96:	4a6c      	ldr	r2, [pc, #432]	; (a148 <usb_isr+0x264>)
    9f98:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    9f9c:	2b00      	cmp	r3, #0
    9f9e:	d142      	bne.n	a026 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    9fa0:	067e      	lsls	r6, r7, #25
    9fa2:	d516      	bpl.n	9fd2 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    9fa4:	4b68      	ldr	r3, [pc, #416]	; (a148 <usb_isr+0x264>)
    9fa6:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    9faa:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    9fae:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    9fb2:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    9fb6:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    9fba:	2c00      	cmp	r4, #0
    9fbc:	d1fb      	bne.n	9fb6 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    9fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9fc2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    9fc6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    9fca:	f000 fd29 	bl	aa20 <usb_serial_reset>
		endpointN_notify_mask = 0;
    9fce:	4b60      	ldr	r3, [pc, #384]	; (a150 <usb_isr+0x26c>)
    9fd0:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    9fd2:	01fc      	lsls	r4, r7, #7
    9fd4:	d503      	bpl.n	9fde <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    9fd6:	4b5f      	ldr	r3, [pc, #380]	; (a154 <usb_isr+0x270>)
    9fd8:	681b      	ldr	r3, [r3, #0]
    9fda:	b103      	cbz	r3, 9fde <usb_isr+0xfa>
    9fdc:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    9fde:	01b8      	lsls	r0, r7, #6
    9fe0:	d503      	bpl.n	9fea <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    9fe2:	4b5d      	ldr	r3, [pc, #372]	; (a158 <usb_isr+0x274>)
    9fe4:	681b      	ldr	r3, [r3, #0]
    9fe6:	b103      	cbz	r3, 9fea <usb_isr+0x106>
    9fe8:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    9fea:	0779      	lsls	r1, r7, #29
    9fec:	d508      	bpl.n	a000 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    9fee:	4b56      	ldr	r3, [pc, #344]	; (a148 <usb_isr+0x264>)
    9ff0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    9ff4:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    9ff8:	d047      	beq.n	a08a <usb_isr+0x1a6>
			usb_high_speed = 1;
    9ffa:	4b58      	ldr	r3, [pc, #352]	; (a15c <usb_isr+0x278>)
    9ffc:	2201      	movs	r2, #1
    9ffe:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    a000:	4b51      	ldr	r3, [pc, #324]	; (a148 <usb_isr+0x264>)
    a002:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    a006:	061a      	lsls	r2, r3, #24
    a008:	d50a      	bpl.n	a020 <usb_isr+0x13c>
    a00a:	063b      	lsls	r3, r7, #24
    a00c:	d508      	bpl.n	a020 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    a00e:	4a54      	ldr	r2, [pc, #336]	; (a160 <usb_isr+0x27c>)
    a010:	7813      	ldrb	r3, [r2, #0]
    a012:	b12b      	cbz	r3, a020 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    a014:	3b01      	subs	r3, #1
    a016:	b2db      	uxtb	r3, r3
    a018:	7013      	strb	r3, [r2, #0]
    a01a:	2b00      	cmp	r3, #0
    a01c:	f000 8272 	beq.w	a504 <usb_isr+0x620>
}
    a020:	b003      	add	sp, #12
    a022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    a026:	494f      	ldr	r1, [pc, #316]	; (a164 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    a028:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    a02c:	6808      	ldr	r0, [r1, #0]
    a02e:	4203      	tst	r3, r0
    a030:	f040 81d1 	bne.w	a3d6 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    a034:	4a46      	ldr	r2, [pc, #280]	; (a150 <usb_isr+0x26c>)
    a036:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    a038:	401c      	ands	r4, r3
    a03a:	d0b1      	beq.n	9fa0 <usb_isr+0xbc>
				while (tx) {
    a03c:	ea5f 4814 	movs.w	r8, r4, lsr #16
    a040:	d010      	beq.n	a064 <usb_isr+0x180>
    a042:	4e42      	ldr	r6, [pc, #264]	; (a14c <usb_isr+0x268>)
					tx &= ~(1<<p);
    a044:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    a048:	fa98 f5a8 	rbit	r5, r8
    a04c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a050:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    a054:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a058:	3040      	adds	r0, #64	; 0x40
    a05a:	f7ff fec5 	bl	9de8 <run_callbacks>
				while (tx) {
    a05e:	ea38 0805 	bics.w	r8, r8, r5
    a062:	d1f1      	bne.n	a048 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    a064:	b2a4      	uxth	r4, r4
				while(rx) {
    a066:	2c00      	cmp	r4, #0
    a068:	d09a      	beq.n	9fa0 <usb_isr+0xbc>
    a06a:	4e38      	ldr	r6, [pc, #224]	; (a14c <usb_isr+0x268>)
					rx &= ~(1<<p);
    a06c:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    a070:	fa94 f5a4 	rbit	r5, r4
    a074:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    a078:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    a07c:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    a080:	f7ff feb2 	bl	9de8 <run_callbacks>
				while(rx) {
    a084:	43ac      	bics	r4, r5
    a086:	d1f3      	bne.n	a070 <usb_isr+0x18c>
    a088:	e78a      	b.n	9fa0 <usb_isr+0xbc>
			usb_high_speed = 0;
    a08a:	4a34      	ldr	r2, [pc, #208]	; (a15c <usb_isr+0x278>)
    a08c:	7013      	strb	r3, [r2, #0]
    a08e:	e7b7      	b.n	a000 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    a090:	2b80      	cmp	r3, #128	; 0x80
    a092:	f47f af78 	bne.w	9f86 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    a096:	4834      	ldr	r0, [pc, #208]	; (a168 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    a098:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    a09a:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    a09c:	f7ff fec0 	bl	9e20 <endpoint0_transmit.constprop.0>
		return;
    a0a0:	e775      	b.n	9f8e <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    a0a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    a0a6:	f000 810b 	beq.w	a2c0 <usb_isr+0x3dc>
    a0aa:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    a0ae:	2b01      	cmp	r3, #1
    a0b0:	f63f af69 	bhi.w	9f86 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a0b4:	4b2d      	ldr	r3, [pc, #180]	; (a16c <usb_isr+0x288>)
    a0b6:	685d      	ldr	r5, [r3, #4]
    a0b8:	2d00      	cmp	r5, #0
    a0ba:	f43f af64 	beq.w	9f86 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a0be:	fa1f fc8c 	uxth.w	ip, ip
    a0c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    a0c6:	e004      	b.n	a0d2 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a0c8:	691d      	ldr	r5, [r3, #16]
    a0ca:	330c      	adds	r3, #12
    a0cc:	2d00      	cmp	r5, #0
    a0ce:	f43f af5a 	beq.w	9f86 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a0d2:	881a      	ldrh	r2, [r3, #0]
    a0d4:	4572      	cmp	r2, lr
    a0d6:	d1f7      	bne.n	a0c8 <usb_isr+0x1e4>
    a0d8:	885a      	ldrh	r2, [r3, #2]
    a0da:	4562      	cmp	r2, ip
    a0dc:	d1f4      	bne.n	a0c8 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    a0de:	ea4f 221e 	mov.w	r2, lr, lsr #8
    a0e2:	2a03      	cmp	r2, #3
    a0e4:	f000 81a5 	beq.w	a432 <usb_isr+0x54e>
					datalen = list->length;
    a0e8:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    a0ea:	0c00      	lsrs	r0, r0, #16
    a0ec:	4282      	cmp	r2, r0
    a0ee:	bf28      	it	cs
    a0f0:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    a0f2:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    a0f6:	f040 81a1 	bne.w	a43c <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    a0fa:	4b18      	ldr	r3, [pc, #96]	; (a15c <usb_isr+0x278>)
    a0fc:	491c      	ldr	r1, [pc, #112]	; (a170 <usb_isr+0x28c>)
    a0fe:	7818      	ldrb	r0, [r3, #0]
    a100:	4b1c      	ldr	r3, [pc, #112]	; (a174 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    a102:	9201      	str	r2, [sp, #4]
    a104:	2800      	cmp	r0, #0
    a106:	bf18      	it	ne
    a108:	4619      	movne	r1, r3
    a10a:	481b      	ldr	r0, [pc, #108]	; (a178 <usb_isr+0x294>)
    a10c:	f7ff fc1e 	bl	994c <memcpy>
    a110:	4d19      	ldr	r5, [pc, #100]	; (a178 <usb_isr+0x294>)
    a112:	9a01      	ldr	r2, [sp, #4]
    a114:	e1e1      	b.n	a4da <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    a116:	f242 2121 	movw	r1, #8737	; 0x2221
    a11a:	428b      	cmp	r3, r1
    a11c:	d07c      	beq.n	a218 <usb_isr+0x334>
    a11e:	d933      	bls.n	a188 <usb_isr+0x2a4>
    a120:	f242 3121 	movw	r1, #8993	; 0x2321
    a124:	428b      	cmp	r3, r1
    a126:	f000 8081 	beq.w	a22c <usb_isr+0x348>
    a12a:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    a12e:	428b      	cmp	r3, r1
    a130:	f47f af29 	bne.w	9f86 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    a134:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    a138:	b283      	uxth	r3, r0
    a13a:	f47f af24 	bne.w	9f86 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    a13e:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    a142:	f363 0c0f 	bfi	ip, r3, #0, #16
    a146:	e7b5      	b.n	a0b4 <usb_isr+0x1d0>
    a148:	402e0000 	.word	0x402e0000
    a14c:	20000000 	.word	0x20000000
    a150:	2000957c 	.word	0x2000957c
    a154:	20009614 	.word	0x20009614
    a158:	20009618 	.word	0x20009618
    a15c:	20009635 	.word	0x20009635
    a160:	20009636 	.word	0x20009636
    a164:	20009578 	.word	0x20009578
    a168:	200095b0 	.word	0x200095b0
    a16c:	20007ed0 	.word	0x20007ed0
    a170:	60001ebc 	.word	0x60001ebc
    a174:	60001f20 	.word	0x60001f20
    a178:	20200000 	.word	0x20200000
    a17c:	20009570 	.word	0x20009570
    a180:	b8c6cf5d 	.word	0xb8c6cf5d
    a184:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    a188:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    a18c:	d066      	beq.n	a25c <usb_isr+0x378>
    a18e:	f242 0121 	movw	r1, #8225	; 0x2021
    a192:	428b      	cmp	r3, r1
    a194:	f47f aef7 	bne.w	9f86 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    a198:	0c03      	lsrs	r3, r0, #16
    a19a:	2b07      	cmp	r3, #7
    a19c:	f47f aef3 	bne.w	9f86 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    a1a0:	4bb2      	ldr	r3, [pc, #712]	; (a46c <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a1a2:	49b3      	ldr	r1, [pc, #716]	; (a470 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    a1a4:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a1a6:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    a1a8:	49b2      	ldr	r1, [pc, #712]	; (a474 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    a1aa:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a1ac:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    a1b0:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    a1b4:	2201      	movs	r2, #1
    a1b6:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a1b8:	4aaf      	ldr	r2, [pc, #700]	; (a478 <usb_isr+0x594>)
    a1ba:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a1bc:	4aaf      	ldr	r2, [pc, #700]	; (a47c <usb_isr+0x598>)
    a1be:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    a1c0:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    a1c4:	f041 0101 	orr.w	r1, r1, #1
    a1c8:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a1cc:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a1d0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a1d4:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a1d6:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    a1d8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a1dc:	2b00      	cmp	r3, #0
    a1de:	d1fb      	bne.n	a1d8 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    a1e0:	4aa7      	ldr	r2, [pc, #668]	; (a480 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    a1e2:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    a1e4:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    a1e6:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a1e8:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    a1ea:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a1ec:	f248 0380 	movw	r3, #32896	; 0x8080
    a1f0:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a1f2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a1f6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a1fa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a1fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a202:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    a20a:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    a20e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a212:	2b00      	cmp	r3, #0
    a214:	d1fb      	bne.n	a20e <usb_isr+0x32a>
    a216:	e6ba      	b.n	9f8e <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    a218:	b280      	uxth	r0, r0
    a21a:	b938      	cbnz	r0, a22c <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a21c:	4b99      	ldr	r3, [pc, #612]	; (a484 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    a21e:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a222:	6819      	ldr	r1, [r3, #0]
    a224:	4b98      	ldr	r3, [pc, #608]	; (a488 <usb_isr+0x5a4>)
    a226:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a228:	4b98      	ldr	r3, [pc, #608]	; (a48c <usb_isr+0x5a8>)
    a22a:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    a22c:	4b94      	ldr	r3, [pc, #592]	; (a480 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    a22e:	2200      	movs	r2, #0
    a230:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    a232:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    a234:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a236:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    a238:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a23a:	2280      	movs	r2, #128	; 0x80
    a23c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a23e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a242:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a246:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a24a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a24e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    a252:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a256:	2b00      	cmp	r3, #0
    a258:	d1fb      	bne.n	a252 <usb_isr+0x36e>
    a25a:	e698      	b.n	9f8e <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    a25c:	f3c2 4207 	ubfx	r2, r2, #16, #8
    a260:	4b8b      	ldr	r3, [pc, #556]	; (a490 <usb_isr+0x5ac>)
    a262:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a264:	4b8b      	ldr	r3, [pc, #556]	; (a494 <usb_isr+0x5b0>)
    a266:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a26a:	4b8b      	ldr	r3, [pc, #556]	; (a498 <usb_isr+0x5b4>)
    a26c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a270:	4b8a      	ldr	r3, [pc, #552]	; (a49c <usb_isr+0x5b8>)
    a272:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    a276:	f000 fbd5 	bl	aa24 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    a27a:	2280      	movs	r2, #128	; 0x80
    a27c:	4629      	mov	r1, r5
    a27e:	4888      	ldr	r0, [pc, #544]	; (a4a0 <usb_isr+0x5bc>)
    a280:	f003 f930 	bl	d4e4 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    a284:	4b87      	ldr	r3, [pc, #540]	; (a4a4 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a286:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    a288:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    a28c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    a290:	4b7b      	ldr	r3, [pc, #492]	; (a480 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    a292:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a294:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    a296:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a298:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    a29a:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    a29c:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a29e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a2a2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a2a6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a2aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a2ae:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a2b2:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    a2b6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a2ba:	2b00      	cmp	r3, #0
    a2bc:	d1fb      	bne.n	a2b6 <usb_isr+0x3d2>
    a2be:	e666      	b.n	9f8e <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    a2c0:	4b6f      	ldr	r3, [pc, #444]	; (a480 <usb_isr+0x59c>)
    a2c2:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    a2c4:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    a2c6:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a2c8:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    a2ca:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a2cc:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a2ce:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a2d0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a2d4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a2d8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a2dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a2e0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    a2e4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a2e8:	2b00      	cmp	r3, #0
    a2ea:	d1fb      	bne.n	a2e4 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    a2ec:	0c13      	lsrs	r3, r2, #16
    a2ee:	065b      	lsls	r3, r3, #25
    a2f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    a2f4:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    a2f8:	e649      	b.n	9f8e <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    a2fa:	4b65      	ldr	r3, [pc, #404]	; (a490 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    a2fc:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    a2fe:	486a      	ldr	r0, [pc, #424]	; (a4a8 <usb_isr+0x5c4>)
    a300:	781b      	ldrb	r3, [r3, #0]
    a302:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    a304:	f7ff fd8c 	bl	9e20 <endpoint0_transmit.constprop.0>
		return;
    a308:	e641      	b.n	9f8e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    a30a:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    a30c:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    a310:	f47f ae39 	bne.w	9f86 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    a314:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a318:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    a31c:	4a62      	ldr	r2, [pc, #392]	; (a4a8 <usb_isr+0x5c4>)
    a31e:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a320:	0618      	lsls	r0, r3, #24
    a322:	f100 809e 	bmi.w	a462 <usb_isr+0x57e>
    a326:	07cb      	lsls	r3, r1, #31
    a328:	d501      	bpl.n	a32e <usb_isr+0x44a>
			reply_buffer[0] = 1;
    a32a:	2301      	movs	r3, #1
    a32c:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    a32e:	2102      	movs	r1, #2
    a330:	485d      	ldr	r0, [pc, #372]	; (a4a8 <usb_isr+0x5c4>)
    a332:	f7ff fd75 	bl	9e20 <endpoint0_transmit.constprop.0>
		return;
    a336:	e62a      	b.n	9f8e <usb_isr+0xaa>
		if (endpoint > 7) break;
    a338:	f010 0f78 	tst.w	r0, #120	; 0x78
    a33c:	b283      	uxth	r3, r0
    a33e:	f47f ae22 	bne.w	9f86 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    a342:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    a346:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    a34a:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    a34e:	bf14      	ite	ne
    a350:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    a354:	f043 0301 	orreq.w	r3, r3, #1
    a358:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    a35c:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    a35e:	4b48      	ldr	r3, [pc, #288]	; (a480 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    a360:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    a362:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    a364:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a366:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    a368:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a36a:	2280      	movs	r2, #128	; 0x80
    a36c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a36e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a372:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a376:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a37a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a37e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    a382:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a386:	2b00      	cmp	r3, #0
    a388:	d1fb      	bne.n	a382 <usb_isr+0x49e>
    a38a:	e600      	b.n	9f8e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    a38c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    a390:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    a394:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    a398:	bf14      	ite	ne
    a39a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    a39e:	f023 0301 	biceq.w	r3, r3, #1
    a3a2:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    a3a6:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    a3a8:	4b35      	ldr	r3, [pc, #212]	; (a480 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    a3aa:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    a3ac:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    a3ae:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a3b0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    a3b2:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a3b4:	2280      	movs	r2, #128	; 0x80
    a3b6:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a3b8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a3bc:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a3c0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a3c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a3c8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    a3cc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a3d0:	2b00      	cmp	r3, #0
    a3d2:	d1fb      	bne.n	a3cc <usb_isr+0x4e8>
    a3d4:	e5db      	b.n	9f8e <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    a3d6:	2000      	movs	r0, #0
    a3d8:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    a3da:	4926      	ldr	r1, [pc, #152]	; (a474 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    a3dc:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    a3de:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    a3e0:	f242 0121 	movw	r1, #8225	; 0x2021
    a3e4:	428c      	cmp	r4, r1
    a3e6:	f47f ae25 	bne.w	a034 <usb_isr+0x150>
    a3ea:	b280      	uxth	r0, r0
    a3ec:	2800      	cmp	r0, #0
    a3ee:	f47f ae21 	bne.w	a034 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    a3f2:	492e      	ldr	r1, [pc, #184]	; (a4ac <usb_isr+0x5c8>)
    a3f4:	4c2e      	ldr	r4, [pc, #184]	; (a4b0 <usb_isr+0x5cc>)
    a3f6:	c903      	ldmia	r1, {r0, r1}
    a3f8:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    a3fa:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    a3fc:	ea4f 4111 	mov.w	r1, r1, lsr #16
    a400:	6020      	str	r0, [r4, #0]
    a402:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    a404:	f47f ae16 	bne.w	a034 <usb_isr+0x150>
	__disable_irq();
    a408:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    a40a:	482a      	ldr	r0, [pc, #168]	; (a4b4 <usb_isr+0x5d0>)
    a40c:	7801      	ldrb	r1, [r0, #0]
    a40e:	f041 0108 	orr.w	r1, r1, #8
    a412:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    a414:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    a418:	060d      	lsls	r5, r1, #24
    a41a:	d405      	bmi.n	a428 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    a41c:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    a41e:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    a420:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    a424:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    a428:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    a42a:	4a23      	ldr	r2, [pc, #140]	; (a4b8 <usb_isr+0x5d4>)
    a42c:	2150      	movs	r1, #80	; 0x50
    a42e:	7011      	strb	r1, [r2, #0]
    a430:	e600      	b.n	a034 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    a432:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    a434:	782a      	ldrb	r2, [r5, #0]
    a436:	4282      	cmp	r2, r0
    a438:	bf28      	it	cs
    a43a:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    a43c:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    a440:	d144      	bne.n	a4cc <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    a442:	4b1e      	ldr	r3, [pc, #120]	; (a4bc <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    a444:	4d1e      	ldr	r5, [pc, #120]	; (a4c0 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    a446:	7818      	ldrb	r0, [r3, #0]
    a448:	491e      	ldr	r1, [pc, #120]	; (a4c4 <usb_isr+0x5e0>)
    a44a:	4b1f      	ldr	r3, [pc, #124]	; (a4c8 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    a44c:	9201      	str	r2, [sp, #4]
    a44e:	2800      	cmp	r0, #0
    a450:	bf18      	it	ne
    a452:	4619      	movne	r1, r3
    a454:	4628      	mov	r0, r5
    a456:	f7ff fa79 	bl	994c <memcpy>
					usb_descriptor_buffer[1] = 7;
    a45a:	2307      	movs	r3, #7
    a45c:	706b      	strb	r3, [r5, #1]
    a45e:	9a01      	ldr	r2, [sp, #4]
    a460:	e03b      	b.n	a4da <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a462:	03c9      	lsls	r1, r1, #15
    a464:	f53f af61 	bmi.w	a32a <usb_isr+0x446>
    a468:	e761      	b.n	a32e <usb_isr+0x44a>
    a46a:	bf00      	nop
    a46c:	20008ae0 	.word	0x20008ae0
    a470:	2000a570 	.word	0x2000a570
    a474:	20008ca0 	.word	0x20008ca0
    a478:	00070080 	.word	0x00070080
    a47c:	2000b570 	.word	0x2000b570
    a480:	20008ac0 	.word	0x20008ac0
    a484:	20009600 	.word	0x20009600
    a488:	20009610 	.word	0x20009610
    a48c:	20009633 	.word	0x20009633
    a490:	20009634 	.word	0x20009634
    a494:	00cc0002 	.word	0x00cc0002
    a498:	000200c8 	.word	0x000200c8
    a49c:	00c80002 	.word	0x00c80002
    a4a0:	20000080 	.word	0x20000080
    a4a4:	74d59319 	.word	0x74d59319
    a4a8:	200095b0 	.word	0x200095b0
    a4ac:	20009570 	.word	0x20009570
    a4b0:	20009608 	.word	0x20009608
    a4b4:	2000962f 	.word	0x2000962f
    a4b8:	20009636 	.word	0x20009636
    a4bc:	20009635 	.word	0x20009635
    a4c0:	20200000 	.word	0x20200000
    a4c4:	60001f20 	.word	0x60001f20
    a4c8:	60001ebc 	.word	0x60001ebc
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    a4cc:	4629      	mov	r1, r5
    a4ce:	4d10      	ldr	r5, [pc, #64]	; (a510 <usb_isr+0x62c>)
    a4d0:	9201      	str	r2, [sp, #4]
    a4d2:	4628      	mov	r0, r5
    a4d4:	f7ff fa3a 	bl	994c <memcpy>
    a4d8:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a4da:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    a4de:	4415      	add	r5, r2
	asm("dsb");
    a4e0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a4e4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    a4e8:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    a4ec:	3320      	adds	r3, #32
	} while (location < end_addr);
    a4ee:	429d      	cmp	r5, r3
    a4f0:	d8fa      	bhi.n	a4e8 <usb_isr+0x604>
	asm("dsb");
    a4f2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a4f6:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    a4fa:	4805      	ldr	r0, [pc, #20]	; (a510 <usb_isr+0x62c>)
    a4fc:	4611      	mov	r1, r2
    a4fe:	f7ff fc8f 	bl	9e20 <endpoint0_transmit.constprop.0>
				return;
    a502:	e544      	b.n	9f8e <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    a504:	2003      	movs	r0, #3
    a506:	f7ff fcd7 	bl	9eb8 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    a50a:	f00b fd51 	bl	15fb0 <___reboot_Teensyduino__veneer>
    a50e:	bf00      	nop
    a510:	20200000 	.word	0x20200000

0000a514 <usb_config_rx>:
{
    a514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a518:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    a51a:	1e83      	subs	r3, r0, #2
    a51c:	2b02      	cmp	r3, #2
    a51e:	d901      	bls.n	a524 <usb_config_rx+0x10>
}
    a520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    a524:	f8df 904c 	ldr.w	r9, [pc, #76]	; a574 <usb_config_rx+0x60>
    a528:	4615      	mov	r5, r2
    a52a:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    a52c:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    a52e:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    a532:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    a534:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    a538:	2100      	movs	r1, #0
    a53a:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    a53e:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    a540:	f002 ffd0 	bl	d4e4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    a544:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    a548:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    a54a:	0952      	lsrs	r2, r2, #5
    a54c:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    a550:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    a554:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    a558:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    a55c:	2f00      	cmp	r7, #0
    a55e:	d0df      	beq.n	a520 <usb_config_rx+0xc>
    a560:	4a03      	ldr	r2, [pc, #12]	; (a570 <usb_config_rx+0x5c>)
    a562:	40b3      	lsls	r3, r6
    a564:	6811      	ldr	r1, [r2, #0]
    a566:	430b      	orrs	r3, r1
    a568:	6013      	str	r3, [r2, #0]
}
    a56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a56e:	bf00      	nop
    a570:	2000957c 	.word	0x2000957c
    a574:	20000000 	.word	0x20000000

0000a578 <usb_config_tx>:
{
    a578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a57c:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    a57e:	1e81      	subs	r1, r0, #2
    a580:	2902      	cmp	r1, #2
    a582:	d901      	bls.n	a588 <usb_config_tx+0x10>
}
    a584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    a588:	01c7      	lsls	r7, r0, #7
    a58a:	f8df 904c 	ldr.w	r9, [pc, #76]	; a5d8 <usb_config_tx+0x60>
    a58e:	4692      	mov	sl, r2
    a590:	4604      	mov	r4, r0
    a592:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    a594:	223c      	movs	r2, #60	; 0x3c
    a596:	2100      	movs	r1, #0
    a598:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    a59a:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    a59e:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    a5a0:	f108 0004 	add.w	r0, r8, #4
    a5a4:	f002 ff9e 	bl	d4e4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    a5a8:	faba f28a 	clz	r2, sl
    a5ac:	0952      	lsrs	r2, r2, #5
    a5ae:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    a5b2:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    a5b6:	2201      	movs	r2, #1
	qh->callback_function = callback;
    a5b8:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    a5bc:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    a5c0:	2e00      	cmp	r6, #0
    a5c2:	d0df      	beq.n	a584 <usb_config_tx+0xc>
    a5c4:	4b03      	ldr	r3, [pc, #12]	; (a5d4 <usb_config_tx+0x5c>)
    a5c6:	3410      	adds	r4, #16
    a5c8:	6819      	ldr	r1, [r3, #0]
    a5ca:	40a2      	lsls	r2, r4
    a5cc:	430a      	orrs	r2, r1
    a5ce:	601a      	str	r2, [r3, #0]
}
    a5d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a5d4:	2000957c 	.word	0x2000957c
    a5d8:	20000000 	.word	0x20000000

0000a5dc <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    a5dc:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    a5de:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    a5e0:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    a5e2:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    a5e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    a5ea:	b410      	push	{r4}
	transfer->next = 1;
    a5ec:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    a5ee:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    a5f0:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    a5f4:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    a5f6:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    a5fa:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    a5fe:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    a600:	6181      	str	r1, [r0, #24]
}
    a602:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    a606:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    a60a:	4770      	bx	lr

0000a60c <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    a60c:	1e83      	subs	r3, r0, #2
{
    a60e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    a610:	2b02      	cmp	r3, #2
    a612:	d900      	bls.n	a616 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    a614:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    a616:	4b06      	ldr	r3, [pc, #24]	; (a630 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    a618:	f100 0110 	add.w	r1, r0, #16
    a61c:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    a620:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    a624:	fa0c f101 	lsl.w	r1, ip, r1
    a628:	3040      	adds	r0, #64	; 0x40
    a62a:	f7ff bb99 	b.w	9d60 <schedule_transfer>
    a62e:	bf00      	nop
    a630:	20000000 	.word	0x20000000

0000a634 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    a634:	1e83      	subs	r3, r0, #2
{
    a636:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    a638:	2b02      	cmp	r3, #2
    a63a:	d900      	bls.n	a63e <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    a63c:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    a63e:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    a640:	4b02      	ldr	r3, [pc, #8]	; (a64c <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    a642:	4081      	lsls	r1, r0
    a644:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    a648:	f7ff bb8a 	b.w	9d60 <schedule_transfer>
    a64c:	20000000 	.word	0x20000000

0000a650 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    a650:	6840      	ldr	r0, [r0, #4]
#endif
}
    a652:	4770      	bx	lr

0000a654 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    a654:	4a12      	ldr	r2, [pc, #72]	; (a6a0 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a656:	4b13      	ldr	r3, [pc, #76]	; (a6a4 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    a658:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    a65c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    a660:	4298      	cmp	r0, r3
{
    a662:	b510      	push	{r4, lr}
    a664:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    a666:	d202      	bcs.n	a66e <usb_init_serialnumber+0x1a>
    a668:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    a66c:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    a66e:	4c0e      	ldr	r4, [pc, #56]	; (a6a8 <usb_init_serialnumber+0x54>)
    a670:	a901      	add	r1, sp, #4
    a672:	220a      	movs	r2, #10
    a674:	f7ff fa08 	bl	9a88 <ultoa>
	for (i=0; i<10; i++) {
    a678:	a901      	add	r1, sp, #4
    a67a:	2300      	movs	r3, #0
    a67c:	4620      	mov	r0, r4
		char c = buf[i];
    a67e:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    a682:	3301      	adds	r3, #1
		if (!c) break;
    a684:	b13a      	cbz	r2, a696 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    a686:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    a688:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    a68c:	d1f7      	bne.n	a67e <usb_init_serialnumber+0x2a>
    a68e:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a690:	7023      	strb	r3, [r4, #0]
}
    a692:	b004      	add	sp, #16
    a694:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a696:	005b      	lsls	r3, r3, #1
    a698:	b2db      	uxtb	r3, r3
    a69a:	7023      	strb	r3, [r4, #0]
}
    a69c:	b004      	add	sp, #16
    a69e:	bd10      	pop	{r4, pc}
    a6a0:	401f4400 	.word	0x401f4400
    a6a4:	00989680 	.word	0x00989680
    a6a8:	200086ec 	.word	0x200086ec

0000a6ac <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    a6ac:	f000 bad8 	b.w	ac60 <usb_serial_flush_input>

0000a6b0 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    a6b0:	f000 baa8 	b.w	ac04 <usb_serial_peekchar>

0000a6b4 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    a6b4:	f000 bb66 	b.w	ad84 <usb_serial_flush_output>

0000a6b8 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    a6b8:	f000 bb3c 	b.w	ad34 <usb_serial_write_buffer_free>

0000a6bc <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a6bc:	4608      	mov	r0, r1
    a6be:	4611      	mov	r1, r2
    a6c0:	f000 bb2c 	b.w	ad1c <usb_serial_write>

0000a6c4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    a6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a6c6:	4c14      	ldr	r4, [pc, #80]	; (a718 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a6c8:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a6cc:	4e13      	ldr	r6, [pc, #76]	; (a71c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a6ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a6d2:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a6d6:	4f12      	ldr	r7, [pc, #72]	; (a720 <rx_queue_transfer+0x5c>)
    a6d8:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    a6dc:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a6de:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a6e2:	4621      	mov	r1, r4
    a6e4:	883a      	ldrh	r2, [r7, #0]
    a6e6:	4630      	mov	r0, r6
    a6e8:	f7ff ff78 	bl	a5dc <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    a6ec:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    a6ee:	4423      	add	r3, r4
	asm("dsb");
    a6f0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    a6f4:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    a6f8:	3420      	adds	r4, #32
	} while (location < end_addr);
    a6fa:	42a3      	cmp	r3, r4
    a6fc:	d8fa      	bhi.n	a6f4 <rx_queue_transfer+0x30>
	asm("dsb");
    a6fe:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a702:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    a706:	2003      	movs	r0, #3
    a708:	4631      	mov	r1, r6
    a70a:	f7ff ff93 	bl	a634 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a70e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    a712:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    a716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a718:	20200080 	.word	0x20200080
    a71c:	20008b00 	.word	0x20008b00
    a720:	2000961c 	.word	0x2000961c

0000a724 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a724:	4b24      	ldr	r3, [pc, #144]	; (a7b8 <rx_event+0x94>)
{
    a726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a72a:	881c      	ldrh	r4, [r3, #0]
    a72c:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    a72e:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a730:	f3c3 430e 	ubfx	r3, r3, #16, #15
    a734:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    a736:	2c00      	cmp	r4, #0
    a738:	dd24      	ble.n	a784 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    a73a:	4920      	ldr	r1, [pc, #128]	; (a7bc <rx_event+0x98>)
		if (head != rx_tail) {
    a73c:	4820      	ldr	r0, [pc, #128]	; (a7c0 <rx_event+0x9c>)
		uint32_t head = rx_head;
    a73e:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    a740:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    a742:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    a744:	4e1f      	ldr	r6, [pc, #124]	; (a7c4 <rx_event+0xa0>)
		if (head != rx_tail) {
    a746:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    a748:	481f      	ldr	r0, [pc, #124]	; (a7c8 <rx_event+0xa4>)
		if (head != rx_tail) {
    a74a:	d007      	beq.n	a75c <rx_event+0x38>
			uint32_t ii = rx_list[head];
    a74c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    a750:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    a754:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    a758:	4294      	cmp	r4, r2
    a75a:	d918      	bls.n	a78e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    a75c:	3301      	adds	r3, #1
		rx_index[i] = 0;
    a75e:	2200      	movs	r2, #0
		rx_count[i] = len;
    a760:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    a764:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    a766:	4e19      	ldr	r6, [pc, #100]	; (a7cc <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    a768:	bf88      	it	hi
    a76a:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    a76c:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    a770:	bf98      	it	ls
    a772:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    a774:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    a776:	4b16      	ldr	r3, [pc, #88]	; (a7d0 <rx_event+0xac>)
		rx_head = head;
    a778:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    a77a:	681a      	ldr	r2, [r3, #0]
    a77c:	4414      	add	r4, r2
    a77e:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    a780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    a784:	4628      	mov	r0, r5
}
    a786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    a78a:	f7ff bf9b 	b.w	a6c4 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a78e:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    a792:	4910      	ldr	r1, [pc, #64]	; (a7d4 <rx_event+0xb0>)
    a794:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    a796:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a798:	4408      	add	r0, r1
    a79a:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    a79e:	f7ff f8d5 	bl	994c <memcpy>
				rx_available += len;
    a7a2:	4a0b      	ldr	r2, [pc, #44]	; (a7d0 <rx_event+0xac>)
				rx_queue_transfer(i);
    a7a4:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    a7a6:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    a7aa:	6813      	ldr	r3, [r2, #0]
    a7ac:	4423      	add	r3, r4
}
    a7ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    a7b2:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    a7b4:	f7ff bf86 	b.w	a6c4 <rx_queue_transfer>
    a7b8:	2000961c 	.word	0x2000961c
    a7bc:	2000962d 	.word	0x2000962d
    a7c0:	2000962e 	.word	0x2000962e
    a7c4:	200095bc 	.word	0x200095bc
    a7c8:	200095dc 	.word	0x200095dc
    a7cc:	200095cc 	.word	0x200095cc
    a7d0:	200095b8 	.word	0x200095b8
    a7d4:	20200080 	.word	0x20200080

0000a7d8 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    a7d8:	4b1d      	ldr	r3, [pc, #116]	; (a850 <usb_serial_flush_callback+0x78>)
    a7da:	781a      	ldrb	r2, [r3, #0]
    a7dc:	2a00      	cmp	r2, #0
    a7de:	d136      	bne.n	a84e <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    a7e0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    a7e4:	4a1b      	ldr	r2, [pc, #108]	; (a854 <usb_serial_flush_callback+0x7c>)
    a7e6:	7812      	ldrb	r2, [r2, #0]
    a7e8:	b38a      	cbz	r2, a84e <usb_serial_flush_callback+0x76>
{
    a7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    a7ee:	4d1a      	ldr	r5, [pc, #104]	; (a858 <usb_serial_flush_callback+0x80>)
    a7f0:	882a      	ldrh	r2, [r5, #0]
    a7f2:	b352      	cbz	r2, a84a <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a7f4:	4e19      	ldr	r6, [pc, #100]	; (a85c <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a7f6:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a7fa:	4f19      	ldr	r7, [pc, #100]	; (a860 <usb_serial_flush_callback+0x88>)
    a7fc:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a7fe:	4c19      	ldr	r4, [pc, #100]	; (a864 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a800:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a804:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a808:	4642      	mov	r2, r8
    a80a:	4638      	mov	r0, r7
    a80c:	4621      	mov	r1, r4
    a80e:	f7ff fee5 	bl	a5dc <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    a812:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    a816:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a81a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a81e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a822:	3420      	adds	r4, #32
	} while (location < end_addr);
    a824:	42a2      	cmp	r2, r4
    a826:	d8fa      	bhi.n	a81e <usb_serial_flush_callback+0x46>
	asm("dsb");
    a828:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a82c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a830:	2004      	movs	r0, #4
    a832:	4639      	mov	r1, r7
    a834:	f7ff feea 	bl	a60c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a838:	7833      	ldrb	r3, [r6, #0]
    a83a:	3301      	adds	r3, #1
    a83c:	b2db      	uxtb	r3, r3
    a83e:	2b03      	cmp	r3, #3
    a840:	bf88      	it	hi
    a842:	2300      	movhi	r3, #0
    a844:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    a846:	2300      	movs	r3, #0
    a848:	802b      	strh	r3, [r5, #0]
}
    a84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a84e:	4770      	bx	lr
    a850:	20009632 	.word	0x20009632
    a854:	20009634 	.word	0x20009634
    a858:	2000961e 	.word	0x2000961e
    a85c:	20009631 	.word	0x20009631
    a860:	20008c00 	.word	0x20008c00
    a864:	20201080 	.word	0x20201080

0000a868 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    a868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a86c:	b085      	sub	sp, #20
	while (size > 0) {
    a86e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    a872:	2900      	cmp	r1, #0
    a874:	f000 80bf 	beq.w	a9f6 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    a878:	2300      	movs	r3, #0
    a87a:	4c60      	ldr	r4, [pc, #384]	; (a9fc <usb_serial_write.part.0+0x194>)
    a87c:	f8df 8198 	ldr.w	r8, [pc, #408]	; aa18 <usb_serial_write.part.0+0x1b0>
    a880:	f8df a198 	ldr.w	sl, [pc, #408]	; aa1c <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    a884:	4f5e      	ldr	r7, [pc, #376]	; (aa00 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    a886:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    a888:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    a88a:	4a5e      	ldr	r2, [pc, #376]	; (aa04 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    a88c:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    a88e:	4b5e      	ldr	r3, [pc, #376]	; (aa08 <usb_serial_write.part.0+0x1a0>)
    a890:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    a892:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    a896:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    a89a:	2b00      	cmp	r3, #0
    a89c:	f040 80a7 	bne.w	a9ee <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    a8a0:	461e      	mov	r6, r3
		int waiting=0;
    a8a2:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    a8a4:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    a8a6:	4648      	mov	r0, r9
    a8a8:	f7ff fed2 	bl	a650 <usb_transfer_status>
			if (!(status & 0x80)) {
    a8ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    a8b0:	f000 808c 	beq.w	a9cc <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    a8b4:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    a8b8:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    a8bc:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    a8c0:	b905      	cbnz	r5, a8c4 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    a8c2:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    a8c4:	2b00      	cmp	r3, #0
    a8c6:	d17d      	bne.n	a9c4 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a8c8:	683b      	ldr	r3, [r7, #0]
    a8ca:	1b9b      	subs	r3, r3, r6
    a8cc:	2b78      	cmp	r3, #120	; 0x78
    a8ce:	f200 8087 	bhi.w	a9e0 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    a8d2:	4b4e      	ldr	r3, [pc, #312]	; (aa0c <usb_serial_write.part.0+0x1a4>)
    a8d4:	781b      	ldrb	r3, [r3, #0]
    a8d6:	2b00      	cmp	r3, #0
    a8d8:	d074      	beq.n	a9c4 <usb_serial_write.part.0+0x15c>
			yield();
    a8da:	f000 fa9d 	bl	ae18 <yield>
			tx_noautoflush = 1;
    a8de:	2201      	movs	r2, #1
		while (!tx_available) {
    a8e0:	f8b8 3000 	ldrh.w	r3, [r8]
    a8e4:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    a8e6:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    a8e8:	2b00      	cmp	r3, #0
    a8ea:	d0dc      	beq.n	a8a6 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a8ec:	4a46      	ldr	r2, [pc, #280]	; (aa08 <usb_serial_write.part.0+0x1a0>)
    a8ee:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    a8f2:	7811      	ldrb	r1, [r2, #0]
    a8f4:	461a      	mov	r2, r3
    a8f6:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    a8fa:	4d45      	ldr	r5, [pc, #276]	; (aa10 <usb_serial_write.part.0+0x1a8>)
    a8fc:	02c9      	lsls	r1, r1, #11
    a8fe:	4428      	add	r0, r5
		if (size >= tx_available) {
    a900:	9d01      	ldr	r5, [sp, #4]
    a902:	4295      	cmp	r5, r2
    a904:	d217      	bcs.n	a936 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    a906:	9303      	str	r3, [sp, #12]
    a908:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    a90c:	462a      	mov	r2, r5
    a90e:	f7ff f81d 	bl	994c <memcpy>
			tx_available -= size;
    a912:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a914:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    a918:	1b5b      	subs	r3, r3, r5
    a91a:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a91e:	4b3d      	ldr	r3, [pc, #244]	; (aa14 <usb_serial_write.part.0+0x1ac>)
    a920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    a924:	f3bf 8f4f 	dsb	sy
			sent += size;
    a928:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    a92a:	2300      	movs	r3, #0
			sent += size;
    a92c:	4428      	add	r0, r5
		tx_noautoflush = 0;
    a92e:	7023      	strb	r3, [r4, #0]
}
    a930:	b005      	add	sp, #20
    a932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a936:	4b36      	ldr	r3, [pc, #216]	; (aa10 <usb_serial_write.part.0+0x1a8>)
    a938:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    a93a:	9902      	ldr	r1, [sp, #8]
    a93c:	f7ff f806 	bl	994c <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a940:	2300      	movs	r3, #0
    a942:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a946:	4629      	mov	r1, r5
    a948:	4648      	mov	r0, r9
    a94a:	f7ff fe47 	bl	a5dc <usb_prepare_transfer>
	asm("dsb");
    a94e:	f3bf 8f4f 	dsb	sy
    a952:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    a956:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    a95a:	4293      	cmp	r3, r2
    a95c:	bf34      	ite	cc
    a95e:	2301      	movcc	r3, #1
    a960:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    a962:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a966:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    a96a:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    a96e:	3520      	adds	r5, #32
	} while (location < end_addr);
    a970:	42ab      	cmp	r3, r5
    a972:	d1fa      	bne.n	a96a <usb_serial_write.part.0+0x102>
	asm("dsb");
    a974:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a978:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a97c:	2004      	movs	r0, #4
    a97e:	4649      	mov	r1, r9
    a980:	f7ff fe44 	bl	a60c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a984:	4a20      	ldr	r2, [pc, #128]	; (aa08 <usb_serial_write.part.0+0x1a0>)
    a986:	7813      	ldrb	r3, [r2, #0]
    a988:	3301      	adds	r3, #1
    a98a:	b2db      	uxtb	r3, r3
    a98c:	2b03      	cmp	r3, #3
    a98e:	bf84      	itt	hi
    a990:	2300      	movhi	r3, #0
    a992:	4a1d      	ldrhi	r2, [pc, #116]	; (aa08 <usb_serial_write.part.0+0x1a0>)
    a994:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    a996:	f8b8 3000 	ldrh.w	r3, [r8]
    a99a:	9a01      	ldr	r2, [sp, #4]
    a99c:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    a99e:	9a00      	ldr	r2, [sp, #0]
    a9a0:	441a      	add	r2, r3
			size -= tx_available;
    a9a2:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    a9a4:	9200      	str	r2, [sp, #0]
			data += tx_available;
    a9a6:	9a02      	ldr	r2, [sp, #8]
    a9a8:	441a      	add	r2, r3
			tx_available = 0;
    a9aa:	2300      	movs	r3, #0
			data += tx_available;
    a9ac:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    a9ae:	4a19      	ldr	r2, [pc, #100]	; (aa14 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    a9b0:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    a9b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    a9b8:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    a9bc:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    a9be:	2900      	cmp	r1, #0
    a9c0:	f47f af62 	bne.w	a888 <usb_serial_write.part.0+0x20>
	return sent;
    a9c4:	9800      	ldr	r0, [sp, #0]
}
    a9c6:	b005      	add	sp, #20
    a9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    a9cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a9d0:	4b0d      	ldr	r3, [pc, #52]	; (aa08 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    a9d2:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a9d6:	7819      	ldrb	r1, [r3, #0]
				break;
    a9d8:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    a9da:	f8a8 2000 	strh.w	r2, [r8]
				break;
    a9de:	e78a      	b.n	a8f6 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    a9e0:	2301      	movs	r3, #1
				return sent;
    a9e2:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    a9e4:	f88a 3000 	strb.w	r3, [sl]
}
    a9e8:	b005      	add	sp, #20
    a9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a9ee:	461a      	mov	r2, r3
    a9f0:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    a9f4:	e77f      	b.n	a8f6 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    a9f6:	9801      	ldr	r0, [sp, #4]
	return sent;
    a9f8:	e7e5      	b.n	a9c6 <usb_serial_write.part.0+0x15e>
    a9fa:	bf00      	nop
    a9fc:	20009632 	.word	0x20009632
    aa00:	20009600 	.word	0x20009600
    aa04:	20008c00 	.word	0x20008c00
    aa08:	20009631 	.word	0x20009631
    aa0c:	20009634 	.word	0x20009634
    aa10:	20201080 	.word	0x20201080
    aa14:	402e0000 	.word	0x402e0000
    aa18:	2000961e 	.word	0x2000961e
    aa1c:	20009630 	.word	0x20009630

0000aa20 <usb_serial_reset>:
}
    aa20:	4770      	bx	lr
    aa22:	bf00      	nop

0000aa24 <usb_serial_configure>:
	if (usb_high_speed) {
    aa24:	4b2d      	ldr	r3, [pc, #180]	; (aadc <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    aa26:	2100      	movs	r1, #0
    aa28:	2280      	movs	r2, #128	; 0x80
    aa2a:	482d      	ldr	r0, [pc, #180]	; (aae0 <usb_serial_configure+0xbc>)
{
    aa2c:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    aa2e:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    aa30:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    aa32:	4d2c      	ldr	r5, [pc, #176]	; (aae4 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    aa34:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    aa36:	4e2c      	ldr	r6, [pc, #176]	; (aae8 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    aa38:	bf0c      	ite	eq
    aa3a:	2340      	moveq	r3, #64	; 0x40
    aa3c:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    aa40:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    aa42:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    aa44:	f002 fd4e 	bl	d4e4 <memset>
	tx_head = 0;
    aa48:	4a28      	ldr	r2, [pc, #160]	; (aaec <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    aa4a:	4621      	mov	r1, r4
	tx_available = 0;
    aa4c:	4b28      	ldr	r3, [pc, #160]	; (aaf0 <usb_serial_configure+0xcc>)
	tx_head = 0;
    aa4e:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    aa50:	f44f 7280 	mov.w	r2, #256	; 0x100
    aa54:	4827      	ldr	r0, [pc, #156]	; (aaf4 <usb_serial_configure+0xd0>)
	tx_available = 0;
    aa56:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    aa58:	f002 fd44 	bl	d4e4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    aa5c:	4a26      	ldr	r2, [pc, #152]	; (aaf8 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    aa5e:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    aa60:	4b26      	ldr	r3, [pc, #152]	; (aafc <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    aa62:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    aa64:	e9c2 4400 	strd	r4, r4, [r2]
    aa68:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    aa6c:	4a24      	ldr	r2, [pc, #144]	; (ab00 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    aa6e:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    aa72:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    aa74:	4a23      	ldr	r2, [pc, #140]	; (ab04 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    aa76:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    aa7a:	4b23      	ldr	r3, [pc, #140]	; (ab08 <usb_serial_configure+0xe4>)
    aa7c:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    aa7e:	4623      	mov	r3, r4
	rx_available = 0;
    aa80:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    aa82:	4622      	mov	r2, r4
    aa84:	f7ff fd78 	bl	a578 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    aa88:	4622      	mov	r2, r4
    aa8a:	8831      	ldrh	r1, [r6, #0]
    aa8c:	2003      	movs	r0, #3
    aa8e:	4b1f      	ldr	r3, [pc, #124]	; (ab0c <usb_serial_configure+0xe8>)
    aa90:	f7ff fd40 	bl	a514 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    aa94:	4623      	mov	r3, r4
    aa96:	2201      	movs	r2, #1
    aa98:	8829      	ldrh	r1, [r5, #0]
    aa9a:	2004      	movs	r0, #4
    aa9c:	f7ff fd6c 	bl	a578 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    aaa0:	4620      	mov	r0, r4
    aaa2:	3401      	adds	r4, #1
    aaa4:	f7ff fe0e 	bl	a6c4 <rx_queue_transfer>
    aaa8:	2c08      	cmp	r4, #8
    aaaa:	d1f9      	bne.n	aaa0 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    aaac:	4b18      	ldr	r3, [pc, #96]	; (ab10 <usb_serial_configure+0xec>)
    aaae:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    aab0:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    aab2:	4818      	ldr	r0, [pc, #96]	; (ab14 <usb_serial_configure+0xf0>)
    aab4:	4c18      	ldr	r4, [pc, #96]	; (ab18 <usb_serial_configure+0xf4>)
    aab6:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    aab8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    aabc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    aac0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    aac4:	4915      	ldr	r1, [pc, #84]	; (ab1c <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    aac6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    aaca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    aace:	b121      	cbz	r1, aada <usb_serial_configure+0xb6>
    aad0:	4a13      	ldr	r2, [pc, #76]	; (ab20 <usb_serial_configure+0xfc>)
    aad2:	7813      	ldrb	r3, [r2, #0]
    aad4:	f043 0301 	orr.w	r3, r3, #1
    aad8:	7013      	strb	r3, [r2, #0]
}
    aada:	bd70      	pop	{r4, r5, r6, pc}
    aadc:	20009635 	.word	0x20009635
    aae0:	20008c00 	.word	0x20008c00
    aae4:	20009620 	.word	0x20009620
    aae8:	2000961c 	.word	0x2000961c
    aaec:	20009631 	.word	0x20009631
    aaf0:	2000961e 	.word	0x2000961e
    aaf4:	20008b00 	.word	0x20008b00
    aaf8:	200095bc 	.word	0x200095bc
    aafc:	200095cc 	.word	0x200095cc
    ab00:	2000962d 	.word	0x2000962d
    ab04:	200095b8 	.word	0x200095b8
    ab08:	2000962e 	.word	0x2000962e
    ab0c:	0000a725 	.word	0x0000a725
    ab10:	402e0000 	.word	0x402e0000
    ab14:	20009614 	.word	0x20009614
    ab18:	0000a7d9 	.word	0x0000a7d9
    ab1c:	00000000 	.word	0x00000000
    ab20:	20009637 	.word	0x20009637

0000ab24 <usb_serial_read>:
{
    ab24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    ab28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ab2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    ab30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; abfc <usb_serial_read+0xd8>
{
    ab34:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    ab36:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    ab3a:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    ab3c:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    ab40:	2900      	cmp	r1, #0
    ab42:	d04f      	beq.n	abe4 <usb_serial_read+0xc0>
    ab44:	4680      	mov	r8, r0
    ab46:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    ab48:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    ab4a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; ac00 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    ab4e:	4b26      	ldr	r3, [pc, #152]	; (abe8 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    ab50:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    ab54:	4925      	ldr	r1, [pc, #148]	; (abec <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    ab56:	781b      	ldrb	r3, [r3, #0]
    ab58:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    ab5a:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    ab5e:	d03f      	beq.n	abe0 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    ab60:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    ab62:	4b23      	ldr	r3, [pc, #140]	; (abf0 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    ab64:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    ab66:	bf28      	it	cs
    ab68:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    ab6a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    ab6c:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    ab70:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    ab74:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    ab76:	4b1f      	ldr	r3, [pc, #124]	; (abf4 <usb_serial_read+0xd0>)
    ab78:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    ab7c:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    ab80:	42aa      	cmp	r2, r5
    ab82:	d21c      	bcs.n	abbe <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    ab84:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    ab88:	4918      	ldr	r1, [pc, #96]	; (abec <usb_serial_read+0xc8>)
			rx_available -= len;
    ab8a:	4c1b      	ldr	r4, [pc, #108]	; (abf8 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    ab8c:	4461      	add	r1, ip
    ab8e:	9201      	str	r2, [sp, #4]
    ab90:	f7fe fedc 	bl	994c <memcpy>
			rx_available -= len;
    ab94:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    ab96:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    ab9a:	4658      	mov	r0, fp
			rx_index[i] += len;
    ab9c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    ab9e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    aba2:	442a      	add	r2, r5
			rx_available -= len;
    aba4:	4439      	add	r1, r7
			rx_index[i] += len;
    aba6:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    abaa:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    abac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    abb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    abb4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    abb8:	b003      	add	sp, #12
    abba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    abbe:	462a      	mov	r2, r5
			count += avail;
    abc0:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    abc2:	f7fe fec3 	bl	994c <memcpy>
			rx_available -= avail;
    abc6:	490c      	ldr	r1, [pc, #48]	; (abf8 <usb_serial_read+0xd4>)
			rx_tail = tail;
    abc8:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    abca:	4630      	mov	r0, r6
			rx_available -= avail;
    abcc:	680a      	ldr	r2, [r1, #0]
			p += avail;
    abce:	44a8      	add	r8, r5
			rx_available -= avail;
    abd0:	1b52      	subs	r2, r2, r5
    abd2:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    abd4:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    abd8:	f7ff fd74 	bl	a6c4 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    abdc:	45bb      	cmp	fp, r7
    abde:	d8b6      	bhi.n	ab4e <usb_serial_read+0x2a>
	return count;
    abe0:	4638      	mov	r0, r7
    abe2:	e7e3      	b.n	abac <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    abe4:	4608      	mov	r0, r1
    abe6:	e7e1      	b.n	abac <usb_serial_read+0x88>
    abe8:	2000962d 	.word	0x2000962d
    abec:	20200080 	.word	0x20200080
    abf0:	200095dc 	.word	0x200095dc
    abf4:	200095bc 	.word	0x200095bc
    abf8:	200095b8 	.word	0x200095b8
    abfc:	2000962e 	.word	0x2000962e
    ac00:	200095cc 	.word	0x200095cc

0000ac04 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    ac04:	4b0b      	ldr	r3, [pc, #44]	; (ac34 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    ac06:	4a0c      	ldr	r2, [pc, #48]	; (ac38 <usb_serial_peekchar+0x34>)
    ac08:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    ac0a:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    ac0c:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    ac0e:	428a      	cmp	r2, r1
    ac10:	d00d      	beq.n	ac2e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    ac12:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    ac14:	4809      	ldr	r0, [pc, #36]	; (ac3c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    ac16:	4a0a      	ldr	r2, [pc, #40]	; (ac40 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    ac18:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    ac1a:	490a      	ldr	r1, [pc, #40]	; (ac44 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    ac1c:	bf28      	it	cs
    ac1e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    ac20:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    ac22:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    ac26:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    ac2a:	5c58      	ldrb	r0, [r3, r1]
    ac2c:	4770      	bx	lr
	if (tail == rx_head) return -1;
    ac2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    ac32:	4770      	bx	lr
    ac34:	2000962d 	.word	0x2000962d
    ac38:	2000962e 	.word	0x2000962e
    ac3c:	200095dc 	.word	0x200095dc
    ac40:	20200080 	.word	0x20200080
    ac44:	200095cc 	.word	0x200095cc

0000ac48 <usb_serial_available>:
	uint32_t n = rx_available;
    ac48:	4b04      	ldr	r3, [pc, #16]	; (ac5c <usb_serial_available+0x14>)
{
    ac4a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    ac4c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    ac4e:	b10c      	cbz	r4, ac54 <usb_serial_available+0xc>
}
    ac50:	4620      	mov	r0, r4
    ac52:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    ac54:	f000 f8e0 	bl	ae18 <yield>
}
    ac58:	4620      	mov	r0, r4
    ac5a:	bd10      	pop	{r4, pc}
    ac5c:	200095b8 	.word	0x200095b8

0000ac60 <usb_serial_flush_input>:
{
    ac60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    ac64:	4e14      	ldr	r6, [pc, #80]	; (acb8 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    ac66:	4d15      	ldr	r5, [pc, #84]	; (acbc <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    ac68:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    ac6a:	782a      	ldrb	r2, [r5, #0]
    ac6c:	4293      	cmp	r3, r2
    ac6e:	d021      	beq.n	acb4 <usb_serial_flush_input+0x54>
    ac70:	b2dc      	uxtb	r4, r3
    ac72:	f8df 9050 	ldr.w	r9, [pc, #80]	; acc4 <usb_serial_flush_input+0x64>
    ac76:	f8df b050 	ldr.w	fp, [pc, #80]	; acc8 <usb_serial_flush_input+0x68>
    ac7a:	f8df 8050 	ldr.w	r8, [pc, #80]	; accc <usb_serial_flush_input+0x6c>
    ac7e:	4f10      	ldr	r7, [pc, #64]	; (acc0 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    ac80:	3401      	adds	r4, #1
    ac82:	2c08      	cmp	r4, #8
		rx_tail = tail;
    ac84:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    ac88:	d901      	bls.n	ac8e <usb_serial_flush_input+0x2e>
    ac8a:	2400      	movs	r4, #0
    ac8c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    ac8e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    ac92:	f8db 3000 	ldr.w	r3, [fp]
    ac96:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    ac9a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    ac9e:	1a52      	subs	r2, r2, r1
    aca0:	1a9b      	subs	r3, r3, r2
    aca2:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    aca6:	f7ff fd0d 	bl	a6c4 <rx_queue_transfer>
		rx_tail = tail;
    acaa:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    acae:	782b      	ldrb	r3, [r5, #0]
    acb0:	42a3      	cmp	r3, r4
    acb2:	d1e5      	bne.n	ac80 <usb_serial_flush_input+0x20>
}
    acb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acb8:	2000962e 	.word	0x2000962e
    acbc:	2000962d 	.word	0x2000962d
    acc0:	200095cc 	.word	0x200095cc
    acc4:	200095dc 	.word	0x200095dc
    acc8:	200095b8 	.word	0x200095b8
    accc:	200095bc 	.word	0x200095bc

0000acd0 <usb_serial_getchar>:
{
    acd0:	b500      	push	{lr}
    acd2:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    acd4:	2101      	movs	r1, #1
    acd6:	f10d 0007 	add.w	r0, sp, #7
    acda:	f7ff ff23 	bl	ab24 <usb_serial_read>
    acde:	b120      	cbz	r0, acea <usb_serial_getchar+0x1a>
    ace0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    ace4:	b003      	add	sp, #12
    ace6:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    acea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    acee:	e7f9      	b.n	ace4 <usb_serial_getchar+0x14>

0000acf0 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    acf0:	4b09      	ldr	r3, [pc, #36]	; (ad18 <usb_serial_putchar+0x28>)
{
    acf2:	b500      	push	{lr}
    acf4:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    acf6:	781b      	ldrb	r3, [r3, #0]
{
    acf8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    acfc:	b13b      	cbz	r3, ad0e <usb_serial_putchar+0x1e>
    acfe:	2101      	movs	r1, #1
    ad00:	f10d 0007 	add.w	r0, sp, #7
    ad04:	f7ff fdb0 	bl	a868 <usb_serial_write.part.0>
}
    ad08:	b003      	add	sp, #12
    ad0a:	f85d fb04 	ldr.w	pc, [sp], #4
    ad0e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    ad12:	b003      	add	sp, #12
    ad14:	f85d fb04 	ldr.w	pc, [sp], #4
    ad18:	20009634 	.word	0x20009634

0000ad1c <usb_serial_write>:
	if (!usb_configuration) return 0;
    ad1c:	4b04      	ldr	r3, [pc, #16]	; (ad30 <usb_serial_write+0x14>)
    ad1e:	781b      	ldrb	r3, [r3, #0]
    ad20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    ad24:	b10b      	cbz	r3, ad2a <usb_serial_write+0xe>
    ad26:	f7ff bd9f 	b.w	a868 <usb_serial_write.part.0>
}
    ad2a:	4610      	mov	r0, r2
    ad2c:	4770      	bx	lr
    ad2e:	bf00      	nop
    ad30:	20009634 	.word	0x20009634

0000ad34 <usb_serial_write_buffer_free>:
{
    ad34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    ad38:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    ad3a:	f8df 8044 	ldr.w	r8, [pc, #68]	; ad80 <usb_serial_write_buffer_free+0x4c>
    ad3e:	2301      	movs	r3, #1
    ad40:	4d0d      	ldr	r5, [pc, #52]	; (ad78 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    ad42:	4627      	mov	r7, r4
    ad44:	4e0d      	ldr	r6, [pc, #52]	; (ad7c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    ad46:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    ad4a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    ad4c:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    ad4e:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    ad50:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    ad52:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    ad56:	d005      	beq.n	ad64 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    ad58:	f7ff fc7a 	bl	a650 <usb_transfer_status>
    ad5c:	0603      	lsls	r3, r0, #24
    ad5e:	bf58      	it	pl
    ad60:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    ad64:	2c04      	cmp	r4, #4
    ad66:	d1f0      	bne.n	ad4a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    ad68:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    ad6c:	2300      	movs	r3, #0
}
    ad6e:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    ad70:	f888 3000 	strb.w	r3, [r8]
}
    ad74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad78:	20008c00 	.word	0x20008c00
    ad7c:	20009631 	.word	0x20009631
    ad80:	20009632 	.word	0x20009632

0000ad84 <usb_serial_flush_output>:
{
    ad84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    ad88:	4b1d      	ldr	r3, [pc, #116]	; (ae00 <usb_serial_flush_output+0x7c>)
    ad8a:	781b      	ldrb	r3, [r3, #0]
    ad8c:	b113      	cbz	r3, ad94 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    ad8e:	4d1d      	ldr	r5, [pc, #116]	; (ae04 <usb_serial_flush_output+0x80>)
    ad90:	882a      	ldrh	r2, [r5, #0]
    ad92:	b90a      	cbnz	r2, ad98 <usb_serial_flush_output+0x14>
}
    ad94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    ad98:	4e1b      	ldr	r6, [pc, #108]	; (ae08 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    ad9a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    ad9e:	491b      	ldr	r1, [pc, #108]	; (ae0c <usb_serial_flush_output+0x88>)
    ada0:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    ada2:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ada4:	4c1a      	ldr	r4, [pc, #104]	; (ae10 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    ada6:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    adaa:	4f1a      	ldr	r7, [pc, #104]	; (ae14 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    adac:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    adb0:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    adb2:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    adb4:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    adb6:	4621      	mov	r1, r4
    adb8:	2300      	movs	r3, #0
    adba:	f7ff fc0f 	bl	a5dc <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    adbe:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    adc2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    adc6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    adca:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    adce:	3420      	adds	r4, #32
	} while (location < end_addr);
    add0:	42a2      	cmp	r2, r4
    add2:	d8fa      	bhi.n	adca <usb_serial_flush_output+0x46>
	asm("dsb");
    add4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    add8:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    addc:	2004      	movs	r0, #4
    adde:	4641      	mov	r1, r8
    ade0:	f7ff fc14 	bl	a60c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ade4:	7833      	ldrb	r3, [r6, #0]
    ade6:	3301      	adds	r3, #1
    ade8:	b2db      	uxtb	r3, r3
    adea:	2b03      	cmp	r3, #3
    adec:	bf88      	it	hi
    adee:	2300      	movhi	r3, #0
    adf0:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    adf2:	2300      	movs	r3, #0
    adf4:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    adf6:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    adfa:	703b      	strb	r3, [r7, #0]
}
    adfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ae00:	20009634 	.word	0x20009634
    ae04:	2000961e 	.word	0x2000961e
    ae08:	20009631 	.word	0x20009631
    ae0c:	20008c00 	.word	0x20008c00
    ae10:	20201080 	.word	0x20201080
    ae14:	20009632 	.word	0x20009632

0000ae18 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    ae18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    ae1c:	4b2d      	ldr	r3, [pc, #180]	; (aed4 <yield+0xbc>)
    ae1e:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    ae20:	b166      	cbz	r6, ae3c <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    ae22:	4f2d      	ldr	r7, [pc, #180]	; (aed8 <yield+0xc0>)
    ae24:	783b      	ldrb	r3, [r7, #0]
    ae26:	b94b      	cbnz	r3, ae3c <yield+0x24>
	running = 1;
    ae28:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    ae2a:	07f1      	lsls	r1, r6, #31
	running = 1;
    ae2c:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    ae2e:	d443      	bmi.n	aeb8 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    ae30:	07b2      	lsls	r2, r6, #30
    ae32:	d426      	bmi.n	ae82 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    ae34:	2300      	movs	r3, #0
    ae36:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    ae38:	0773      	lsls	r3, r6, #29
    ae3a:	d401      	bmi.n	ae40 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    ae3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    ae40:	4b26      	ldr	r3, [pc, #152]	; (aedc <yield+0xc4>)
    ae42:	681a      	ldr	r2, [r3, #0]
    ae44:	2a00      	cmp	r2, #0
    ae46:	d0f9      	beq.n	ae3c <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    ae48:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    ae4c:	2a00      	cmp	r2, #0
    ae4e:	d1f5      	bne.n	ae3c <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ae50:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    ae54:	b672      	cpsid	i
		EventResponder *first = firstYield;
    ae56:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    ae58:	2800      	cmp	r0, #0
    ae5a:	d034      	beq.n	aec6 <yield+0xae>
		if (runningFromYield) {
    ae5c:	4c20      	ldr	r4, [pc, #128]	; (aee0 <yield+0xc8>)
    ae5e:	7821      	ldrb	r1, [r4, #0]
    ae60:	2900      	cmp	r1, #0
    ae62:	d130      	bne.n	aec6 <yield+0xae>
		runningFromYield = true;
    ae64:	2201      	movs	r2, #1
    ae66:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    ae68:	6942      	ldr	r2, [r0, #20]
    ae6a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    ae6c:	2a00      	cmp	r2, #0
    ae6e:	d02e      	beq.n	aece <yield+0xb6>
			firstYield->_prev = nullptr;
    ae70:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    ae72:	b905      	cbnz	r5, ae76 <yield+0x5e>
    ae74:	b662      	cpsie	i
		first->_triggered = false;
    ae76:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    ae78:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    ae7a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    ae7c:	4798      	blx	r3
		runningFromYield = false;
    ae7e:	7025      	strb	r5, [r4, #0]
    ae80:	e7dc      	b.n	ae3c <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    ae82:	f8df 8064 	ldr.w	r8, [pc, #100]	; aee8 <yield+0xd0>
    ae86:	f898 3000 	ldrb.w	r3, [r8]
    ae8a:	2b00      	cmp	r3, #0
    ae8c:	d0d2      	beq.n	ae34 <yield+0x1c>
    ae8e:	2500      	movs	r5, #0
    ae90:	f8df 9058 	ldr.w	r9, [pc, #88]	; aeec <yield+0xd4>
    ae94:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    ae96:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    ae9a:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    ae9c:	6823      	ldr	r3, [r4, #0]
    ae9e:	4620      	mov	r0, r4
    aea0:	691b      	ldr	r3, [r3, #16]
    aea2:	4798      	blx	r3
    aea4:	b110      	cbz	r0, aeac <yield+0x94>
    aea6:	6963      	ldr	r3, [r4, #20]
    aea8:	689b      	ldr	r3, [r3, #8]
    aeaa:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    aeac:	f898 2000 	ldrb.w	r2, [r8]
    aeb0:	b2eb      	uxtb	r3, r5
    aeb2:	429a      	cmp	r2, r3
    aeb4:	d8ef      	bhi.n	ae96 <yield+0x7e>
    aeb6:	e7bd      	b.n	ae34 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    aeb8:	f7ff fec6 	bl	ac48 <usb_serial_available>
		if (Serial.available()) serialEvent();
    aebc:	2800      	cmp	r0, #0
    aebe:	d0b7      	beq.n	ae30 <yield+0x18>
    aec0:	f3af 8000 	nop.w
    aec4:	e7b4      	b.n	ae30 <yield+0x18>
		if (doit) __enable_irq();
    aec6:	2d00      	cmp	r5, #0
    aec8:	d1b8      	bne.n	ae3c <yield+0x24>
    aeca:	b662      	cpsie	i
    aecc:	e7b6      	b.n	ae3c <yield+0x24>
			lastYield = nullptr;
    aece:	4b05      	ldr	r3, [pc, #20]	; (aee4 <yield+0xcc>)
    aed0:	601a      	str	r2, [r3, #0]
    aed2:	e7ce      	b.n	ae72 <yield+0x5a>
    aed4:	20009637 	.word	0x20009637
    aed8:	20009629 	.word	0x20009629
    aedc:	200091c0 	.word	0x200091c0
    aee0:	20009627 	.word	0x20009627
    aee4:	200091cc 	.word	0x200091cc
    aee8:	20009628 	.word	0x20009628
    aeec:	200091d0 	.word	0x200091d0

0000aef0 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    aef0:	49a2      	ldr	r1, [pc, #648]	; (b17c <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    aef2:	4ba3      	ldr	r3, [pc, #652]	; (b180 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    aef4:	4288      	cmp	r0, r1
{
    aef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    aefa:	4ca2      	ldr	r4, [pc, #648]	; (b184 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    aefc:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    aefe:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    af00:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    af04:	d91b      	bls.n	af3e <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    af06:	4ba0      	ldr	r3, [pc, #640]	; (b188 <set_arm_clock+0x298>)
    af08:	4298      	cmp	r0, r3
    af0a:	f240 8102 	bls.w	b112 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    af0e:	1ac3      	subs	r3, r0, r3
    af10:	499e      	ldr	r1, [pc, #632]	; (b18c <set_arm_clock+0x29c>)
    af12:	0a1b      	lsrs	r3, r3, #8
    af14:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    af18:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    af1c:	09db      	lsrs	r3, r3, #7
    af1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    af22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    af26:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    af2a:	428b      	cmp	r3, r1
    af2c:	bf28      	it	cs
    af2e:	460b      	movcs	r3, r1
    af30:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    af34:	4b96      	ldr	r3, [pc, #600]	; (b190 <set_arm_clock+0x2a0>)
    af36:	fba3 3707 	umull	r3, r7, r3, r7
    af3a:	08ff      	lsrs	r7, r7, #3
    af3c:	e004      	b.n	af48 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    af3e:	4f95      	ldr	r7, [pc, #596]	; (b194 <set_arm_clock+0x2a4>)
    af40:	42b8      	cmp	r0, r7
    af42:	bf8c      	ite	hi
    af44:	270e      	movhi	r7, #14
    af46:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    af48:	498d      	ldr	r1, [pc, #564]	; (b180 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    af4a:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    af4e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    af52:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    af54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    af58:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    af5c:	d20c      	bcs.n	af78 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    af5e:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    af62:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    af66:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    af6a:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    af6e:	680b      	ldr	r3, [r1, #0]
    af70:	2b00      	cmp	r3, #0
    af72:	dafc      	bge.n	af6e <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    af74:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    af78:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    af7c:	d124      	bne.n	afc8 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    af7e:	4986      	ldr	r1, [pc, #536]	; (b198 <set_arm_clock+0x2a8>)
    af80:	690c      	ldr	r4, [r1, #16]
    af82:	4986      	ldr	r1, [pc, #536]	; (b19c <set_arm_clock+0x2ac>)
    af84:	43a1      	bics	r1, r4
    af86:	f000 80ea 	beq.w	b15e <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    af8a:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    af8e:	4634      	mov	r4, r6
    af90:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    af94:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    af98:	d004      	beq.n	afa4 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    af9a:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    af9e:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    afa0:	4b77      	ldr	r3, [pc, #476]	; (b180 <set_arm_clock+0x290>)
    afa2:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    afa4:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    afa8:	d007      	beq.n	afba <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    afaa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    afae:	4974      	ldr	r1, [pc, #464]	; (b180 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    afb0:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    afb2:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    afb4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    afb6:	071a      	lsls	r2, r3, #28
    afb8:	d4fc      	bmi.n	afb4 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    afba:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    afbe:	4a70      	ldr	r2, [pc, #448]	; (b180 <set_arm_clock+0x290>)
    afc0:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    afc2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    afc4:	069b      	lsls	r3, r3, #26
    afc6:	d4fc      	bmi.n	afc2 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    afc8:	4c75      	ldr	r4, [pc, #468]	; (b1a0 <set_arm_clock+0x2b0>)
    afca:	42a0      	cmp	r0, r4
    afcc:	f200 80ce 	bhi.w	b16c <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    afd0:	f04f 0c01 	mov.w	ip, #1
    afd4:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    afd6:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    afd8:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    afdc:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    afe0:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    afe4:	42a2      	cmp	r2, r4
    afe6:	d818      	bhi.n	b01a <set_arm_clock+0x12a>
		if (div_arm < 8) {
    afe8:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    afec:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    aff0:	f040 808d 	bne.w	b10e <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    aff4:	f1bc 0f04 	cmp.w	ip, #4
    aff8:	f200 8091 	bhi.w	b11e <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    affc:	180a      	adds	r2, r1, r0
    affe:	42a2      	cmp	r2, r4
    b000:	f200 80a4 	bhi.w	b14c <set_arm_clock+0x25c>
    b004:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    b008:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    b00a:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b00e:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    b012:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b016:	42a2      	cmp	r2, r4
    b018:	d9e6      	bls.n	afe8 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b01a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    b01e:	028c      	lsls	r4, r1, #10
    b020:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b024:	485f      	ldr	r0, [pc, #380]	; (b1a4 <set_arm_clock+0x2b4>)
    b026:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    b028:	4a5f      	ldr	r2, [pc, #380]	; (b1a8 <set_arm_clock+0x2b8>)
    b02a:	4290      	cmp	r0, r2
    b02c:	d97f      	bls.n	b12e <set_arm_clock+0x23e>
    b02e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; b1d4 <set_arm_clock+0x2e4>
    b032:	226c      	movs	r2, #108	; 0x6c
    b034:	485d      	ldr	r0, [pc, #372]	; (b1ac <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b036:	4d58      	ldr	r5, [pc, #352]	; (b198 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    b038:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b03c:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    b040:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b044:	f8df c190 	ldr.w	ip, [pc, #400]	; b1d8 <set_arm_clock+0x2e8>
    b048:	ea0e 0c0c 	and.w	ip, lr, ip
    b04c:	45d4      	cmp	ip, sl
    b04e:	d009      	beq.n	b064 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    b050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    b054:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    b058:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    b05c:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    b05e:	682a      	ldr	r2, [r5, #0]
    b060:	2a00      	cmp	r2, #0
    b062:	dafc      	bge.n	b05e <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    b064:	4a46      	ldr	r2, [pc, #280]	; (b180 <set_arm_clock+0x290>)
    b066:	6915      	ldr	r5, [r2, #16]
    b068:	f005 0507 	and.w	r5, r5, #7
    b06c:	429d      	cmp	r5, r3
    b06e:	d003      	beq.n	b078 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    b070:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    b072:	6c93      	ldr	r3, [r2, #72]	; 0x48
    b074:	03dd      	lsls	r5, r3, #15
    b076:	d4fc      	bmi.n	b072 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b078:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    b07c:	d009      	beq.n	b092 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    b07e:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b082:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    b086:	4a3e      	ldr	r2, [pc, #248]	; (b180 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b088:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    b08a:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    b08c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    b08e:	0799      	lsls	r1, r3, #30
    b090:	d4fc      	bmi.n	b08c <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b092:	4947      	ldr	r1, [pc, #284]	; (b1b0 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    b094:	4a47      	ldr	r2, [pc, #284]	; (b1b4 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b096:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    b098:	4291      	cmp	r1, r2
    b09a:	d83c      	bhi.n	b116 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b09c:	4b46      	ldr	r3, [pc, #280]	; (b1b8 <set_arm_clock+0x2c8>)
    b09e:	09c9      	lsrs	r1, r1, #7
    b0a0:	fba3 3101 	umull	r3, r1, r3, r1
    b0a4:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    b0a6:	1e4b      	subs	r3, r1, #1
    b0a8:	021b      	lsls	r3, r3, #8
    b0aa:	ea86 0203 	eor.w	r2, r6, r3
    b0ae:	f412 7f40 	tst.w	r2, #768	; 0x300
    b0b2:	d006      	beq.n	b0c2 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    b0b4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    b0b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    b0bc:	4a30      	ldr	r2, [pc, #192]	; (b180 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    b0be:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    b0c0:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    b0c2:	4a2f      	ldr	r2, [pc, #188]	; (b180 <set_arm_clock+0x290>)
    b0c4:	6953      	ldr	r3, [r2, #20]
    b0c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    b0ca:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b0cc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    b0ce:	069b      	lsls	r3, r3, #26
    b0d0:	d4fc      	bmi.n	b0cc <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b0d2:	4b3a      	ldr	r3, [pc, #232]	; (b1bc <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    b0d4:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b0d6:	fba3 2300 	umull	r2, r3, r3, r0
    b0da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b0de:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    b0e2:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b0e6:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    b0ea:	4a35      	ldr	r2, [pc, #212]	; (b1c0 <set_arm_clock+0x2d0>)
    b0ec:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    b0ee:	4a35      	ldr	r2, [pc, #212]	; (b1c4 <set_arm_clock+0x2d4>)
    b0f0:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b0f2:	4a35      	ldr	r2, [pc, #212]	; (b1c8 <set_arm_clock+0x2d8>)
    b0f4:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    b0f6:	d208      	bcs.n	b10a <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    b0f8:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    b0fc:	4a21      	ldr	r2, [pc, #132]	; (b184 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    b0fe:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    b102:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b104:	6813      	ldr	r3, [r2, #0]
    b106:	2b00      	cmp	r3, #0
    b108:	dafc      	bge.n	b104 <set_arm_clock+0x214>
	}

	return frequency;
}
    b10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b10e:	4673      	mov	r3, lr
    b110:	e762      	b.n	afd8 <set_arm_clock+0xe8>
    b112:	2712      	movs	r7, #18
    b114:	e718      	b.n	af48 <set_arm_clock+0x58>
    b116:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    b11a:	2104      	movs	r1, #4
    b11c:	e7c5      	b.n	b0aa <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b11e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b122:	4820      	ldr	r0, [pc, #128]	; (b1a4 <set_arm_clock+0x2b4>)
    b124:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b126:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b128:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b12a:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b12e:	4a27      	ldr	r2, [pc, #156]	; (b1cc <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    b130:	f8df a0a8 	ldr.w	sl, [pc, #168]	; b1dc <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b134:	fba2 2000 	umull	r2, r0, r2, r0
    b138:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    b13a:	4825      	ldr	r0, [pc, #148]	; (b1d0 <set_arm_clock+0x2e0>)
    b13c:	2a36      	cmp	r2, #54	; 0x36
    b13e:	bf38      	it	cc
    b140:	2236      	movcc	r2, #54	; 0x36
    b142:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    b146:	ea42 0a0a 	orr.w	sl, r2, sl
    b14a:	e774      	b.n	b036 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b14c:	ea4f 248c 	mov.w	r4, ip, lsl #10
    b150:	2300      	movs	r3, #0
    b152:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    b156:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    b15a:	46ac      	mov	ip, r5
    b15c:	e762      	b.n	b024 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    b15e:	461d      	mov	r5, r3
    b160:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    b164:	4611      	mov	r1, r2
    b166:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    b16a:	e713      	b.n	af94 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    b16c:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    b16e:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b172:	4602      	mov	r2, r0
    b174:	4631      	mov	r1, r6
    b176:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    b178:	46e6      	mov	lr, ip
    b17a:	e753      	b.n	b024 <set_arm_clock+0x134>
    b17c:	1f78a400 	.word	0x1f78a400
    b180:	400fc000 	.word	0x400fc000
    b184:	40080000 	.word	0x40080000
    b188:	23c34600 	.word	0x23c34600
    b18c:	004cb223 	.word	0x004cb223
    b190:	51eb851f 	.word	0x51eb851f
    b194:	016e3600 	.word	0x016e3600
    b198:	400d8000 	.word	0x400d8000
    b19c:	80003040 	.word	0x80003040
    b1a0:	269fb1ff 	.word	0x269fb1ff
    b1a4:	005b8d80 	.word	0x005b8d80
    b1a8:	4df67eff 	.word	0x4df67eff
    b1ac:	4d3f6400 	.word	0x4d3f6400
    b1b0:	08f0d17f 	.word	0x08f0d17f
    b1b4:	2cb4177f 	.word	0x2cb4177f
    b1b8:	00e5109f 	.word	0x00e5109f
    b1bc:	431bde83 	.word	0x431bde83
    b1c0:	2000809c 	.word	0x2000809c
    b1c4:	20008098 	.word	0x20008098
    b1c8:	200095f8 	.word	0x200095f8
    b1cc:	165e9f81 	.word	0x165e9f81
    b1d0:	00b71b00 	.word	0x00b71b00
    b1d4:	8000206c 	.word	0x8000206c
    b1d8:	8001307f 	.word	0x8001307f
    b1dc:	80002000 	.word	0x80002000

0000b1e0 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    b1e0:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    b1e2:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b1e4:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    b1e8:	4619      	mov	r1, r3
{
    b1ea:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b1ec:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b1f0:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b1f4:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b1f8:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    b1fc:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    b200:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    b202:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b206:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    b20a:	b29b      	uxth	r3, r3
    b20c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    b210:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b214:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    b218:	3101      	adds	r1, #1
    b21a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    b21e:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b220:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b222:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b226:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b228:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b22a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b22c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b22e:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    b232:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b234:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b236:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b238:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    b23a:	d1eb      	bne.n	b214 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b23c:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    b240:	b29b      	uxth	r3, r3
    b242:	f043 030f 	orr.w	r3, r3, #15
    b246:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b24a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    b24e:	b29b      	uxth	r3, r3
    b250:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    b254:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    b258:	bd10      	pop	{r4, pc}
    b25a:	bf00      	nop

0000b25c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b25c:	4b37      	ldr	r3, [pc, #220]	; (b33c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b25e:	4a38      	ldr	r2, [pc, #224]	; (b340 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b260:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    b262:	4838      	ldr	r0, [pc, #224]	; (b344 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b264:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    b268:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b26a:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b26c:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b270:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b274:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b278:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b27c:	430a      	orrs	r2, r1
    b27e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    b282:	f7ff ffad 	bl	b1e0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    b286:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    b28a:	f7ff ffa9 	bl	b1e0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    b28e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    b292:	f7ff ffa5 	bl	b1e0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    b296:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    b29a:	f7ff ffa1 	bl	b1e0 <flexpwm_init>
	for (i=0; i < 4; i++) {
    b29e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    b2a0:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b2a4:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    b2a8:	4611      	mov	r1, r2
    b2aa:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    b2ae:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    b2b2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b2b4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    b2b6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    b2b8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b2ba:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b2be:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b2c0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b2c2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    b2c6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b2c8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    b2ca:	d1ee      	bne.n	b2aa <pwm_init+0x4e>
    b2cc:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    b2ce:	481e      	ldr	r0, [pc, #120]	; (b348 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b2d0:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b2d4:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    b2d8:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b2da:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b2de:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    b2e2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    b2e6:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    b2ea:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b2ec:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    b2ee:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    b2f0:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b2f2:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b2f6:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b2f8:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b2fa:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    b2fe:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b300:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    b302:	d1ee      	bne.n	b2e2 <pwm_init+0x86>
    b304:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    b306:	4811      	ldr	r0, [pc, #68]	; (b34c <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b308:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b30a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    b30e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b310:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b314:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    b318:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    b31c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    b320:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b322:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    b324:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    b326:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b328:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b32a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b32c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b32e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    b332:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b334:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    b338:	d1ee      	bne.n	b318 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    b33a:	bd70      	pop	{r4, r5, r6, pc}
    b33c:	400fc000 	.word	0x400fc000
    b340:	fc030000 	.word	0xfc030000
    b344:	403dc000 	.word	0x403dc000
    b348:	401e0000 	.word	0x401e0000
    b34c:	401e4000 	.word	0x401e4000

0000b350 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    b350:	b508      	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    b352:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    b356:	b15b      	cbz	r3, b370 <sm_align_pool+0x20>
    b358:	b1ba      	cbz	r2, b38a <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    b35a:	4b0f      	ldr	r3, [pc, #60]	; (b398 <sm_align_pool+0x48>)
    b35c:	fba3 1302 	umull	r1, r3, r3, r2
    b360:	08db      	lsrs	r3, r3, #3
    b362:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b366:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    b36a:	d10a      	bne.n	b382 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    b36c:	2001      	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    b36e:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    b370:	4b09      	ldr	r3, [pc, #36]	; (b398 <sm_align_pool+0x48>)
    b372:	fba3 1302 	umull	r1, r3, r3, r2
    b376:	08db      	lsrs	r3, r3, #3
    b378:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    b37c:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    b380:	d001      	beq.n	b386 <sm_align_pool+0x36>
    b382:	1ad2      	subs	r2, r2, r3
    b384:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    b386:	2af0      	cmp	r2, #240	; 0xf0
    b388:	d8f0      	bhi.n	b36c <sm_align_pool+0x1c>
		errno = ENOSPC;
    b38a:	f002 fa19 	bl	d7c0 <__errno>
    b38e:	221c      	movs	r2, #28
    b390:	4603      	mov	r3, r0
    b392:	2000      	movs	r0, #0
    b394:	601a      	str	r2, [r3, #0]
}
    b396:	bd08      	pop	{r3, pc}
    b398:	aaaaaaab 	.word	0xaaaaaaab

0000b39c <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    b39c:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    b39e:	4604      	mov	r4, r0
    b3a0:	b338      	cbz	r0, b3f2 <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    b3a2:	b119      	cbz	r1, b3ac <sm_set_pool+0x10>
    b3a4:	fab2 f682 	clz	r6, r2
    b3a8:	0976      	lsrs	r6, r6, #5
    b3aa:	b9a2      	cbnz	r2, b3d6 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    b3ac:	6820      	ldr	r0, [r4, #0]
    b3ae:	b300      	cbz	r0, b3f2 <sm_set_pool+0x56>
    b3b0:	6862      	ldr	r2, [r4, #4]
    b3b2:	b1f2      	cbz	r2, b3f2 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    b3b4:	4b18      	ldr	r3, [pc, #96]	; (b418 <sm_set_pool+0x7c>)
    b3b6:	4919      	ldr	r1, [pc, #100]	; (b41c <sm_set_pool+0x80>)
    b3b8:	fb02 f303 	mul.w	r3, r2, r3
    b3bc:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    b3c0:	d317      	bcc.n	b3f2 <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    b3c2:	68a3      	ldr	r3, [r4, #8]
    b3c4:	b9e3      	cbnz	r3, b400 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    b3c6:	2200      	movs	r2, #0
			return 1;
    b3c8:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    b3ca:	6022      	str	r2, [r4, #0]
    b3cc:	6062      	str	r2, [r4, #4]
    b3ce:	60a2      	str	r2, [r4, #8]
    b3d0:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    b3d2:	4618      	mov	r0, r3
    b3d4:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    b3d6:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    b3d8:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    b3da:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    b3de:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    b3e0:	f7ff ffb6 	bl	b350 <sm_align_pool>
    b3e4:	4603      	mov	r3, r0
    b3e6:	2800      	cmp	r0, #0
    b3e8:	d0f3      	beq.n	b3d2 <sm_set_pool+0x36>
	if (do_zero) {
    b3ea:	b96d      	cbnz	r5, b408 <sm_set_pool+0x6c>
	return 1;
    b3ec:	2301      	movs	r3, #1
}
    b3ee:	4618      	mov	r0, r3
    b3f0:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    b3f2:	f002 f9e5 	bl	d7c0 <__errno>
    b3f6:	2216      	movs	r2, #22
		return 0;
    b3f8:	2300      	movs	r3, #0
		errno = EINVAL;
    b3fa:	6002      	str	r2, [r0, #0]
}
    b3fc:	4618      	mov	r0, r3
    b3fe:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    b400:	2100      	movs	r1, #0
    b402:	f002 f86f 	bl	d4e4 <memset>
    b406:	e7de      	b.n	b3c6 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    b408:	6862      	ldr	r2, [r4, #4]
    b40a:	4631      	mov	r1, r6
    b40c:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    b40e:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    b410:	f002 f868 	bl	d4e4 <memset>
	return 1;
    b414:	2301      	movs	r3, #1
    b416:	e7dc      	b.n	b3d2 <sm_set_pool+0x36>
    b418:	aaaaaaab 	.word	0xaaaaaaab
    b41c:	15555555 	.word	0x15555555

0000b420 <__aeabi_atexit>:
    b420:	4603      	mov	r3, r0
    b422:	4608      	mov	r0, r1
    b424:	4619      	mov	r1, r3
    b426:	f002 b987 	b.w	d738 <__cxa_atexit>
    b42a:	bf00      	nop

0000b42c <__aeabi_uldivmod>:
    b42c:	b953      	cbnz	r3, b444 <__aeabi_uldivmod+0x18>
    b42e:	b94a      	cbnz	r2, b444 <__aeabi_uldivmod+0x18>
    b430:	2900      	cmp	r1, #0
    b432:	bf08      	it	eq
    b434:	2800      	cmpeq	r0, #0
    b436:	bf1c      	itt	ne
    b438:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    b43c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    b440:	f000 b970 	b.w	b724 <__aeabi_idiv0>
    b444:	f1ad 0c08 	sub.w	ip, sp, #8
    b448:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    b44c:	f000 f806 	bl	b45c <__udivmoddi4>
    b450:	f8dd e004 	ldr.w	lr, [sp, #4]
    b454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b458:	b004      	add	sp, #16
    b45a:	4770      	bx	lr

0000b45c <__udivmoddi4>:
    b45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b460:	9e08      	ldr	r6, [sp, #32]
    b462:	460d      	mov	r5, r1
    b464:	4604      	mov	r4, r0
    b466:	460f      	mov	r7, r1
    b468:	2b00      	cmp	r3, #0
    b46a:	d14a      	bne.n	b502 <__udivmoddi4+0xa6>
    b46c:	428a      	cmp	r2, r1
    b46e:	4694      	mov	ip, r2
    b470:	d965      	bls.n	b53e <__udivmoddi4+0xe2>
    b472:	fab2 f382 	clz	r3, r2
    b476:	b143      	cbz	r3, b48a <__udivmoddi4+0x2e>
    b478:	fa02 fc03 	lsl.w	ip, r2, r3
    b47c:	f1c3 0220 	rsb	r2, r3, #32
    b480:	409f      	lsls	r7, r3
    b482:	fa20 f202 	lsr.w	r2, r0, r2
    b486:	4317      	orrs	r7, r2
    b488:	409c      	lsls	r4, r3
    b48a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    b48e:	fa1f f58c 	uxth.w	r5, ip
    b492:	fbb7 f1fe 	udiv	r1, r7, lr
    b496:	0c22      	lsrs	r2, r4, #16
    b498:	fb0e 7711 	mls	r7, lr, r1, r7
    b49c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    b4a0:	fb01 f005 	mul.w	r0, r1, r5
    b4a4:	4290      	cmp	r0, r2
    b4a6:	d90a      	bls.n	b4be <__udivmoddi4+0x62>
    b4a8:	eb1c 0202 	adds.w	r2, ip, r2
    b4ac:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
    b4b0:	f080 811c 	bcs.w	b6ec <__udivmoddi4+0x290>
    b4b4:	4290      	cmp	r0, r2
    b4b6:	f240 8119 	bls.w	b6ec <__udivmoddi4+0x290>
    b4ba:	3902      	subs	r1, #2
    b4bc:	4462      	add	r2, ip
    b4be:	1a12      	subs	r2, r2, r0
    b4c0:	b2a4      	uxth	r4, r4
    b4c2:	fbb2 f0fe 	udiv	r0, r2, lr
    b4c6:	fb0e 2210 	mls	r2, lr, r0, r2
    b4ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    b4ce:	fb00 f505 	mul.w	r5, r0, r5
    b4d2:	42a5      	cmp	r5, r4
    b4d4:	d90a      	bls.n	b4ec <__udivmoddi4+0x90>
    b4d6:	eb1c 0404 	adds.w	r4, ip, r4
    b4da:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    b4de:	f080 8107 	bcs.w	b6f0 <__udivmoddi4+0x294>
    b4e2:	42a5      	cmp	r5, r4
    b4e4:	f240 8104 	bls.w	b6f0 <__udivmoddi4+0x294>
    b4e8:	4464      	add	r4, ip
    b4ea:	3802      	subs	r0, #2
    b4ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    b4f0:	1b64      	subs	r4, r4, r5
    b4f2:	2100      	movs	r1, #0
    b4f4:	b11e      	cbz	r6, b4fe <__udivmoddi4+0xa2>
    b4f6:	40dc      	lsrs	r4, r3
    b4f8:	2300      	movs	r3, #0
    b4fa:	e9c6 4300 	strd	r4, r3, [r6]
    b4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b502:	428b      	cmp	r3, r1
    b504:	d908      	bls.n	b518 <__udivmoddi4+0xbc>
    b506:	2e00      	cmp	r6, #0
    b508:	f000 80ed 	beq.w	b6e6 <__udivmoddi4+0x28a>
    b50c:	2100      	movs	r1, #0
    b50e:	e9c6 0500 	strd	r0, r5, [r6]
    b512:	4608      	mov	r0, r1
    b514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b518:	fab3 f183 	clz	r1, r3
    b51c:	2900      	cmp	r1, #0
    b51e:	d149      	bne.n	b5b4 <__udivmoddi4+0x158>
    b520:	42ab      	cmp	r3, r5
    b522:	d302      	bcc.n	b52a <__udivmoddi4+0xce>
    b524:	4282      	cmp	r2, r0
    b526:	f200 80f8 	bhi.w	b71a <__udivmoddi4+0x2be>
    b52a:	1a84      	subs	r4, r0, r2
    b52c:	eb65 0203 	sbc.w	r2, r5, r3
    b530:	2001      	movs	r0, #1
    b532:	4617      	mov	r7, r2
    b534:	2e00      	cmp	r6, #0
    b536:	d0e2      	beq.n	b4fe <__udivmoddi4+0xa2>
    b538:	e9c6 4700 	strd	r4, r7, [r6]
    b53c:	e7df      	b.n	b4fe <__udivmoddi4+0xa2>
    b53e:	b902      	cbnz	r2, b542 <__udivmoddi4+0xe6>
    b540:	deff      	udf	#255	; 0xff
    b542:	fab2 f382 	clz	r3, r2
    b546:	2b00      	cmp	r3, #0
    b548:	f040 8090 	bne.w	b66c <__udivmoddi4+0x210>
    b54c:	1a8a      	subs	r2, r1, r2
    b54e:	ea4f 471c 	mov.w	r7, ip, lsr #16
    b552:	fa1f fe8c 	uxth.w	lr, ip
    b556:	2101      	movs	r1, #1
    b558:	fbb2 f5f7 	udiv	r5, r2, r7
    b55c:	fb07 2015 	mls	r0, r7, r5, r2
    b560:	0c22      	lsrs	r2, r4, #16
    b562:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    b566:	fb0e f005 	mul.w	r0, lr, r5
    b56a:	4290      	cmp	r0, r2
    b56c:	d908      	bls.n	b580 <__udivmoddi4+0x124>
    b56e:	eb1c 0202 	adds.w	r2, ip, r2
    b572:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
    b576:	d202      	bcs.n	b57e <__udivmoddi4+0x122>
    b578:	4290      	cmp	r0, r2
    b57a:	f200 80cb 	bhi.w	b714 <__udivmoddi4+0x2b8>
    b57e:	4645      	mov	r5, r8
    b580:	1a12      	subs	r2, r2, r0
    b582:	b2a4      	uxth	r4, r4
    b584:	fbb2 f0f7 	udiv	r0, r2, r7
    b588:	fb07 2210 	mls	r2, r7, r0, r2
    b58c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    b590:	fb0e fe00 	mul.w	lr, lr, r0
    b594:	45a6      	cmp	lr, r4
    b596:	d908      	bls.n	b5aa <__udivmoddi4+0x14e>
    b598:	eb1c 0404 	adds.w	r4, ip, r4
    b59c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    b5a0:	d202      	bcs.n	b5a8 <__udivmoddi4+0x14c>
    b5a2:	45a6      	cmp	lr, r4
    b5a4:	f200 80bb 	bhi.w	b71e <__udivmoddi4+0x2c2>
    b5a8:	4610      	mov	r0, r2
    b5aa:	eba4 040e 	sub.w	r4, r4, lr
    b5ae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    b5b2:	e79f      	b.n	b4f4 <__udivmoddi4+0x98>
    b5b4:	f1c1 0720 	rsb	r7, r1, #32
    b5b8:	408b      	lsls	r3, r1
    b5ba:	fa22 fc07 	lsr.w	ip, r2, r7
    b5be:	ea4c 0c03 	orr.w	ip, ip, r3
    b5c2:	fa05 f401 	lsl.w	r4, r5, r1
    b5c6:	fa20 f307 	lsr.w	r3, r0, r7
    b5ca:	40fd      	lsrs	r5, r7
    b5cc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    b5d0:	4323      	orrs	r3, r4
    b5d2:	fbb5 f8f9 	udiv	r8, r5, r9
    b5d6:	fa1f fe8c 	uxth.w	lr, ip
    b5da:	fb09 5518 	mls	r5, r9, r8, r5
    b5de:	0c1c      	lsrs	r4, r3, #16
    b5e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    b5e4:	fb08 f50e 	mul.w	r5, r8, lr
    b5e8:	42a5      	cmp	r5, r4
    b5ea:	fa02 f201 	lsl.w	r2, r2, r1
    b5ee:	fa00 f001 	lsl.w	r0, r0, r1
    b5f2:	d90b      	bls.n	b60c <__udivmoddi4+0x1b0>
    b5f4:	eb1c 0404 	adds.w	r4, ip, r4
    b5f8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    b5fc:	f080 8088 	bcs.w	b710 <__udivmoddi4+0x2b4>
    b600:	42a5      	cmp	r5, r4
    b602:	f240 8085 	bls.w	b710 <__udivmoddi4+0x2b4>
    b606:	f1a8 0802 	sub.w	r8, r8, #2
    b60a:	4464      	add	r4, ip
    b60c:	1b64      	subs	r4, r4, r5
    b60e:	b29d      	uxth	r5, r3
    b610:	fbb4 f3f9 	udiv	r3, r4, r9
    b614:	fb09 4413 	mls	r4, r9, r3, r4
    b618:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    b61c:	fb03 fe0e 	mul.w	lr, r3, lr
    b620:	45a6      	cmp	lr, r4
    b622:	d908      	bls.n	b636 <__udivmoddi4+0x1da>
    b624:	eb1c 0404 	adds.w	r4, ip, r4
    b628:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
    b62c:	d26c      	bcs.n	b708 <__udivmoddi4+0x2ac>
    b62e:	45a6      	cmp	lr, r4
    b630:	d96a      	bls.n	b708 <__udivmoddi4+0x2ac>
    b632:	3b02      	subs	r3, #2
    b634:	4464      	add	r4, ip
    b636:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    b63a:	fba3 9502 	umull	r9, r5, r3, r2
    b63e:	eba4 040e 	sub.w	r4, r4, lr
    b642:	42ac      	cmp	r4, r5
    b644:	46c8      	mov	r8, r9
    b646:	46ae      	mov	lr, r5
    b648:	d356      	bcc.n	b6f8 <__udivmoddi4+0x29c>
    b64a:	d053      	beq.n	b6f4 <__udivmoddi4+0x298>
    b64c:	b156      	cbz	r6, b664 <__udivmoddi4+0x208>
    b64e:	ebb0 0208 	subs.w	r2, r0, r8
    b652:	eb64 040e 	sbc.w	r4, r4, lr
    b656:	fa04 f707 	lsl.w	r7, r4, r7
    b65a:	40ca      	lsrs	r2, r1
    b65c:	40cc      	lsrs	r4, r1
    b65e:	4317      	orrs	r7, r2
    b660:	e9c6 7400 	strd	r7, r4, [r6]
    b664:	4618      	mov	r0, r3
    b666:	2100      	movs	r1, #0
    b668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b66c:	f1c3 0120 	rsb	r1, r3, #32
    b670:	fa02 fc03 	lsl.w	ip, r2, r3
    b674:	fa20 f201 	lsr.w	r2, r0, r1
    b678:	fa25 f101 	lsr.w	r1, r5, r1
    b67c:	409d      	lsls	r5, r3
    b67e:	432a      	orrs	r2, r5
    b680:	ea4f 471c 	mov.w	r7, ip, lsr #16
    b684:	fa1f fe8c 	uxth.w	lr, ip
    b688:	fbb1 f0f7 	udiv	r0, r1, r7
    b68c:	fb07 1510 	mls	r5, r7, r0, r1
    b690:	0c11      	lsrs	r1, r2, #16
    b692:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    b696:	fb00 f50e 	mul.w	r5, r0, lr
    b69a:	428d      	cmp	r5, r1
    b69c:	fa04 f403 	lsl.w	r4, r4, r3
    b6a0:	d908      	bls.n	b6b4 <__udivmoddi4+0x258>
    b6a2:	eb1c 0101 	adds.w	r1, ip, r1
    b6a6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    b6aa:	d22f      	bcs.n	b70c <__udivmoddi4+0x2b0>
    b6ac:	428d      	cmp	r5, r1
    b6ae:	d92d      	bls.n	b70c <__udivmoddi4+0x2b0>
    b6b0:	3802      	subs	r0, #2
    b6b2:	4461      	add	r1, ip
    b6b4:	1b49      	subs	r1, r1, r5
    b6b6:	b292      	uxth	r2, r2
    b6b8:	fbb1 f5f7 	udiv	r5, r1, r7
    b6bc:	fb07 1115 	mls	r1, r7, r5, r1
    b6c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    b6c4:	fb05 f10e 	mul.w	r1, r5, lr
    b6c8:	4291      	cmp	r1, r2
    b6ca:	d908      	bls.n	b6de <__udivmoddi4+0x282>
    b6cc:	eb1c 0202 	adds.w	r2, ip, r2
    b6d0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
    b6d4:	d216      	bcs.n	b704 <__udivmoddi4+0x2a8>
    b6d6:	4291      	cmp	r1, r2
    b6d8:	d914      	bls.n	b704 <__udivmoddi4+0x2a8>
    b6da:	3d02      	subs	r5, #2
    b6dc:	4462      	add	r2, ip
    b6de:	1a52      	subs	r2, r2, r1
    b6e0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    b6e4:	e738      	b.n	b558 <__udivmoddi4+0xfc>
    b6e6:	4631      	mov	r1, r6
    b6e8:	4630      	mov	r0, r6
    b6ea:	e708      	b.n	b4fe <__udivmoddi4+0xa2>
    b6ec:	4639      	mov	r1, r7
    b6ee:	e6e6      	b.n	b4be <__udivmoddi4+0x62>
    b6f0:	4610      	mov	r0, r2
    b6f2:	e6fb      	b.n	b4ec <__udivmoddi4+0x90>
    b6f4:	4548      	cmp	r0, r9
    b6f6:	d2a9      	bcs.n	b64c <__udivmoddi4+0x1f0>
    b6f8:	ebb9 0802 	subs.w	r8, r9, r2
    b6fc:	eb65 0e0c 	sbc.w	lr, r5, ip
    b700:	3b01      	subs	r3, #1
    b702:	e7a3      	b.n	b64c <__udivmoddi4+0x1f0>
    b704:	4645      	mov	r5, r8
    b706:	e7ea      	b.n	b6de <__udivmoddi4+0x282>
    b708:	462b      	mov	r3, r5
    b70a:	e794      	b.n	b636 <__udivmoddi4+0x1da>
    b70c:	4640      	mov	r0, r8
    b70e:	e7d1      	b.n	b6b4 <__udivmoddi4+0x258>
    b710:	46d0      	mov	r8, sl
    b712:	e77b      	b.n	b60c <__udivmoddi4+0x1b0>
    b714:	3d02      	subs	r5, #2
    b716:	4462      	add	r2, ip
    b718:	e732      	b.n	b580 <__udivmoddi4+0x124>
    b71a:	4608      	mov	r0, r1
    b71c:	e70a      	b.n	b534 <__udivmoddi4+0xd8>
    b71e:	4464      	add	r4, ip
    b720:	3802      	subs	r0, #2
    b722:	e742      	b.n	b5aa <__udivmoddi4+0x14e>

0000b724 <__aeabi_idiv0>:
    b724:	4770      	bx	lr
    b726:	bf00      	nop

0000b728 <malloc>:
    b728:	4b02      	ldr	r3, [pc, #8]	; (b734 <malloc+0xc>)
    b72a:	4601      	mov	r1, r0
    b72c:	6818      	ldr	r0, [r3, #0]
    b72e:	f000 b80b 	b.w	b748 <_malloc_r>
    b732:	bf00      	nop
    b734:	20008694 	.word	0x20008694

0000b738 <free>:
    b738:	4b02      	ldr	r3, [pc, #8]	; (b744 <free+0xc>)
    b73a:	4601      	mov	r1, r0
    b73c:	6818      	ldr	r0, [r3, #0]
    b73e:	f002 bb51 	b.w	dde4 <_free_r>
    b742:	bf00      	nop
    b744:	20008694 	.word	0x20008694

0000b748 <_malloc_r>:
    b748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b74c:	f101 060b 	add.w	r6, r1, #11
    b750:	2e16      	cmp	r6, #22
    b752:	b083      	sub	sp, #12
    b754:	4604      	mov	r4, r0
    b756:	d824      	bhi.n	b7a2 <_malloc_r+0x5a>
    b758:	2910      	cmp	r1, #16
    b75a:	f200 80ba 	bhi.w	b8d2 <_malloc_r+0x18a>
    b75e:	f000 faa3 	bl	bca8 <__malloc_lock>
    b762:	2610      	movs	r6, #16
    b764:	2218      	movs	r2, #24
    b766:	2002      	movs	r0, #2
    b768:	4fb5      	ldr	r7, [pc, #724]	; (ba40 <_malloc_r+0x2f8>)
    b76a:	443a      	add	r2, r7
    b76c:	f1a2 0108 	sub.w	r1, r2, #8
    b770:	6853      	ldr	r3, [r2, #4]
    b772:	428b      	cmp	r3, r1
    b774:	f000 80ba 	beq.w	b8ec <_malloc_r+0x1a4>
    b778:	685a      	ldr	r2, [r3, #4]
    b77a:	68d9      	ldr	r1, [r3, #12]
    b77c:	f022 0203 	bic.w	r2, r2, #3
    b780:	441a      	add	r2, r3
    b782:	689d      	ldr	r5, [r3, #8]
    b784:	60e9      	str	r1, [r5, #12]
    b786:	608d      	str	r5, [r1, #8]
    b788:	6851      	ldr	r1, [r2, #4]
    b78a:	f041 0101 	orr.w	r1, r1, #1
    b78e:	4620      	mov	r0, r4
    b790:	6051      	str	r1, [r2, #4]
    b792:	f103 0508 	add.w	r5, r3, #8
    b796:	f000 fa8d 	bl	bcb4 <__malloc_unlock>
    b79a:	4628      	mov	r0, r5
    b79c:	b003      	add	sp, #12
    b79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7a2:	f036 0607 	bics.w	r6, r6, #7
    b7a6:	f100 8094 	bmi.w	b8d2 <_malloc_r+0x18a>
    b7aa:	42b1      	cmp	r1, r6
    b7ac:	f200 8091 	bhi.w	b8d2 <_malloc_r+0x18a>
    b7b0:	f000 fa7a 	bl	bca8 <__malloc_lock>
    b7b4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    b7b8:	f0c0 819a 	bcc.w	baf0 <_malloc_r+0x3a8>
    b7bc:	0a73      	lsrs	r3, r6, #9
    b7be:	f000 808f 	beq.w	b8e0 <_malloc_r+0x198>
    b7c2:	2b04      	cmp	r3, #4
    b7c4:	f200 816f 	bhi.w	baa6 <_malloc_r+0x35e>
    b7c8:	09b3      	lsrs	r3, r6, #6
    b7ca:	f103 0039 	add.w	r0, r3, #57	; 0x39
    b7ce:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    b7d2:	00c3      	lsls	r3, r0, #3
    b7d4:	4f9a      	ldr	r7, [pc, #616]	; (ba40 <_malloc_r+0x2f8>)
    b7d6:	443b      	add	r3, r7
    b7d8:	f1a3 0508 	sub.w	r5, r3, #8
    b7dc:	685b      	ldr	r3, [r3, #4]
    b7de:	429d      	cmp	r5, r3
    b7e0:	d106      	bne.n	b7f0 <_malloc_r+0xa8>
    b7e2:	e00c      	b.n	b7fe <_malloc_r+0xb6>
    b7e4:	2900      	cmp	r1, #0
    b7e6:	f280 8127 	bge.w	ba38 <_malloc_r+0x2f0>
    b7ea:	68db      	ldr	r3, [r3, #12]
    b7ec:	429d      	cmp	r5, r3
    b7ee:	d006      	beq.n	b7fe <_malloc_r+0xb6>
    b7f0:	685a      	ldr	r2, [r3, #4]
    b7f2:	f022 0203 	bic.w	r2, r2, #3
    b7f6:	1b91      	subs	r1, r2, r6
    b7f8:	290f      	cmp	r1, #15
    b7fa:	ddf3      	ble.n	b7e4 <_malloc_r+0x9c>
    b7fc:	4660      	mov	r0, ip
    b7fe:	693d      	ldr	r5, [r7, #16]
    b800:	f8df c250 	ldr.w	ip, [pc, #592]	; ba54 <_malloc_r+0x30c>
    b804:	4565      	cmp	r5, ip
    b806:	d07c      	beq.n	b902 <_malloc_r+0x1ba>
    b808:	686a      	ldr	r2, [r5, #4]
    b80a:	f022 0203 	bic.w	r2, r2, #3
    b80e:	1b93      	subs	r3, r2, r6
    b810:	2b0f      	cmp	r3, #15
    b812:	f300 817b 	bgt.w	bb0c <_malloc_r+0x3c4>
    b816:	2b00      	cmp	r3, #0
    b818:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    b81c:	f280 816c 	bge.w	baf8 <_malloc_r+0x3b0>
    b820:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    b824:	f080 811a 	bcs.w	ba5c <_malloc_r+0x314>
    b828:	08d3      	lsrs	r3, r2, #3
    b82a:	6879      	ldr	r1, [r7, #4]
    b82c:	3301      	adds	r3, #1
    b82e:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    b832:	2201      	movs	r2, #1
    b834:	fa02 f20e 	lsl.w	r2, r2, lr
    b838:	430a      	orrs	r2, r1
    b83a:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    b83e:	f8c5 e008 	str.w	lr, [r5, #8]
    b842:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    b846:	3908      	subs	r1, #8
    b848:	60e9      	str	r1, [r5, #12]
    b84a:	607a      	str	r2, [r7, #4]
    b84c:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    b850:	f8ce 500c 	str.w	r5, [lr, #12]
    b854:	1083      	asrs	r3, r0, #2
    b856:	2101      	movs	r1, #1
    b858:	4099      	lsls	r1, r3
    b85a:	4291      	cmp	r1, r2
    b85c:	d857      	bhi.n	b90e <_malloc_r+0x1c6>
    b85e:	4211      	tst	r1, r2
    b860:	d106      	bne.n	b870 <_malloc_r+0x128>
    b862:	f020 0003 	bic.w	r0, r0, #3
    b866:	0049      	lsls	r1, r1, #1
    b868:	4211      	tst	r1, r2
    b86a:	f100 0004 	add.w	r0, r0, #4
    b86e:	d0fa      	beq.n	b866 <_malloc_r+0x11e>
    b870:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    b874:	464d      	mov	r5, r9
    b876:	4686      	mov	lr, r0
    b878:	f8d5 800c 	ldr.w	r8, [r5, #12]
    b87c:	4545      	cmp	r5, r8
    b87e:	d108      	bne.n	b892 <_malloc_r+0x14a>
    b880:	e11d      	b.n	babe <_malloc_r+0x376>
    b882:	2b00      	cmp	r3, #0
    b884:	f280 8124 	bge.w	bad0 <_malloc_r+0x388>
    b888:	f8d8 800c 	ldr.w	r8, [r8, #12]
    b88c:	4545      	cmp	r5, r8
    b88e:	f000 8116 	beq.w	babe <_malloc_r+0x376>
    b892:	f8d8 2004 	ldr.w	r2, [r8, #4]
    b896:	f022 0203 	bic.w	r2, r2, #3
    b89a:	1b93      	subs	r3, r2, r6
    b89c:	2b0f      	cmp	r3, #15
    b89e:	ddf0      	ble.n	b882 <_malloc_r+0x13a>
    b8a0:	4620      	mov	r0, r4
    b8a2:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    b8a6:	eb08 0106 	add.w	r1, r8, r6
    b8aa:	f046 0601 	orr.w	r6, r6, #1
    b8ae:	f8c8 6004 	str.w	r6, [r8, #4]
    b8b2:	60ec      	str	r4, [r5, #12]
    b8b4:	60a5      	str	r5, [r4, #8]
    b8b6:	f043 0401 	orr.w	r4, r3, #1
    b8ba:	e9c7 1104 	strd	r1, r1, [r7, #16]
    b8be:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    b8c2:	604c      	str	r4, [r1, #4]
    b8c4:	f848 3002 	str.w	r3, [r8, r2]
    b8c8:	f000 f9f4 	bl	bcb4 <__malloc_unlock>
    b8cc:	f108 0508 	add.w	r5, r8, #8
    b8d0:	e002      	b.n	b8d8 <_malloc_r+0x190>
    b8d2:	230c      	movs	r3, #12
    b8d4:	6023      	str	r3, [r4, #0]
    b8d6:	2500      	movs	r5, #0
    b8d8:	4628      	mov	r0, r5
    b8da:	b003      	add	sp, #12
    b8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8e0:	f44f 7300 	mov.w	r3, #512	; 0x200
    b8e4:	2040      	movs	r0, #64	; 0x40
    b8e6:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    b8ea:	e773      	b.n	b7d4 <_malloc_r+0x8c>
    b8ec:	68d3      	ldr	r3, [r2, #12]
    b8ee:	429a      	cmp	r2, r3
    b8f0:	bf08      	it	eq
    b8f2:	3002      	addeq	r0, #2
    b8f4:	f47f af40 	bne.w	b778 <_malloc_r+0x30>
    b8f8:	693d      	ldr	r5, [r7, #16]
    b8fa:	f8df c158 	ldr.w	ip, [pc, #344]	; ba54 <_malloc_r+0x30c>
    b8fe:	4565      	cmp	r5, ip
    b900:	d182      	bne.n	b808 <_malloc_r+0xc0>
    b902:	687a      	ldr	r2, [r7, #4]
    b904:	1083      	asrs	r3, r0, #2
    b906:	2101      	movs	r1, #1
    b908:	4099      	lsls	r1, r3
    b90a:	4291      	cmp	r1, r2
    b90c:	d9a7      	bls.n	b85e <_malloc_r+0x116>
    b90e:	68bd      	ldr	r5, [r7, #8]
    b910:	686b      	ldr	r3, [r5, #4]
    b912:	f023 0903 	bic.w	r9, r3, #3
    b916:	454e      	cmp	r6, r9
    b918:	d803      	bhi.n	b922 <_malloc_r+0x1da>
    b91a:	eba9 0306 	sub.w	r3, r9, r6
    b91e:	2b0f      	cmp	r3, #15
    b920:	dc7a      	bgt.n	ba18 <_malloc_r+0x2d0>
    b922:	f8df b134 	ldr.w	fp, [pc, #308]	; ba58 <_malloc_r+0x310>
    b926:	4b47      	ldr	r3, [pc, #284]	; (ba44 <_malloc_r+0x2fc>)
    b928:	f8db 2000 	ldr.w	r2, [fp]
    b92c:	681b      	ldr	r3, [r3, #0]
    b92e:	3201      	adds	r2, #1
    b930:	4433      	add	r3, r6
    b932:	eb05 0a09 	add.w	sl, r5, r9
    b936:	f000 8133 	beq.w	bba0 <_malloc_r+0x458>
    b93a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b93e:	330f      	adds	r3, #15
    b940:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    b944:	f028 080f 	bic.w	r8, r8, #15
    b948:	4641      	mov	r1, r8
    b94a:	4620      	mov	r0, r4
    b94c:	f001 ff10 	bl	d770 <_sbrk_r>
    b950:	1c41      	adds	r1, r0, #1
    b952:	4602      	mov	r2, r0
    b954:	f000 80f3 	beq.w	bb3e <_malloc_r+0x3f6>
    b958:	4582      	cmp	sl, r0
    b95a:	f200 80ee 	bhi.w	bb3a <_malloc_r+0x3f2>
    b95e:	4b3a      	ldr	r3, [pc, #232]	; (ba48 <_malloc_r+0x300>)
    b960:	6819      	ldr	r1, [r3, #0]
    b962:	4441      	add	r1, r8
    b964:	6019      	str	r1, [r3, #0]
    b966:	4608      	mov	r0, r1
    b968:	f000 814e 	beq.w	bc08 <_malloc_r+0x4c0>
    b96c:	f8db 1000 	ldr.w	r1, [fp]
    b970:	9301      	str	r3, [sp, #4]
    b972:	3101      	adds	r1, #1
    b974:	bf1b      	ittet	ne
    b976:	eba2 010a 	subne.w	r1, r2, sl
    b97a:	1809      	addne	r1, r1, r0
    b97c:	f8cb 2000 	streq.w	r2, [fp]
    b980:	6019      	strne	r1, [r3, #0]
    b982:	f012 0b07 	ands.w	fp, r2, #7
    b986:	f000 8117 	beq.w	bbb8 <_malloc_r+0x470>
    b98a:	f1cb 0108 	rsb	r1, fp, #8
    b98e:	440a      	add	r2, r1
    b990:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    b994:	4490      	add	r8, r2
    b996:	3108      	adds	r1, #8
    b998:	eba1 0108 	sub.w	r1, r1, r8
    b99c:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    b9a0:	4651      	mov	r1, sl
    b9a2:	4620      	mov	r0, r4
    b9a4:	9200      	str	r2, [sp, #0]
    b9a6:	f001 fee3 	bl	d770 <_sbrk_r>
    b9aa:	1c42      	adds	r2, r0, #1
    b9ac:	e9dd 2300 	ldrd	r2, r3, [sp]
    b9b0:	f000 814f 	beq.w	bc52 <_malloc_r+0x50a>
    b9b4:	1a80      	subs	r0, r0, r2
    b9b6:	eb00 080a 	add.w	r8, r0, sl
    b9ba:	6819      	ldr	r1, [r3, #0]
    b9bc:	60ba      	str	r2, [r7, #8]
    b9be:	f048 0001 	orr.w	r0, r8, #1
    b9c2:	4451      	add	r1, sl
    b9c4:	42bd      	cmp	r5, r7
    b9c6:	6050      	str	r0, [r2, #4]
    b9c8:	6019      	str	r1, [r3, #0]
    b9ca:	f000 8129 	beq.w	bc20 <_malloc_r+0x4d8>
    b9ce:	f1b9 0f0f 	cmp.w	r9, #15
    b9d2:	f240 8127 	bls.w	bc24 <_malloc_r+0x4dc>
    b9d6:	6868      	ldr	r0, [r5, #4]
    b9d8:	f1a9 0c0c 	sub.w	ip, r9, #12
    b9dc:	f02c 0c07 	bic.w	ip, ip, #7
    b9e0:	f000 0001 	and.w	r0, r0, #1
    b9e4:	ea40 000c 	orr.w	r0, r0, ip
    b9e8:	6068      	str	r0, [r5, #4]
    b9ea:	f04f 0e05 	mov.w	lr, #5
    b9ee:	eb05 000c 	add.w	r0, r5, ip
    b9f2:	f1bc 0f0f 	cmp.w	ip, #15
    b9f6:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    b9fa:	f200 8132 	bhi.w	bc62 <_malloc_r+0x51a>
    b9fe:	6850      	ldr	r0, [r2, #4]
    ba00:	4615      	mov	r5, r2
    ba02:	4b12      	ldr	r3, [pc, #72]	; (ba4c <_malloc_r+0x304>)
    ba04:	681a      	ldr	r2, [r3, #0]
    ba06:	428a      	cmp	r2, r1
    ba08:	bf38      	it	cc
    ba0a:	6019      	strcc	r1, [r3, #0]
    ba0c:	4b10      	ldr	r3, [pc, #64]	; (ba50 <_malloc_r+0x308>)
    ba0e:	681a      	ldr	r2, [r3, #0]
    ba10:	428a      	cmp	r2, r1
    ba12:	bf38      	it	cc
    ba14:	6019      	strcc	r1, [r3, #0]
    ba16:	e094      	b.n	bb42 <_malloc_r+0x3fa>
    ba18:	19aa      	adds	r2, r5, r6
    ba1a:	f043 0301 	orr.w	r3, r3, #1
    ba1e:	f046 0601 	orr.w	r6, r6, #1
    ba22:	606e      	str	r6, [r5, #4]
    ba24:	4620      	mov	r0, r4
    ba26:	60ba      	str	r2, [r7, #8]
    ba28:	6053      	str	r3, [r2, #4]
    ba2a:	f000 f943 	bl	bcb4 <__malloc_unlock>
    ba2e:	3508      	adds	r5, #8
    ba30:	4628      	mov	r0, r5
    ba32:	b003      	add	sp, #12
    ba34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba38:	68d9      	ldr	r1, [r3, #12]
    ba3a:	441a      	add	r2, r3
    ba3c:	e6a1      	b.n	b782 <_malloc_r+0x3a>
    ba3e:	bf00      	nop
    ba40:	20008278 	.word	0x20008278
    ba44:	20009428 	.word	0x20009428
    ba48:	200093f8 	.word	0x200093f8
    ba4c:	20009420 	.word	0x20009420
    ba50:	20009424 	.word	0x20009424
    ba54:	20008280 	.word	0x20008280
    ba58:	20008680 	.word	0x20008680
    ba5c:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    ba60:	ea4f 2352 	mov.w	r3, r2, lsr #9
    ba64:	d363      	bcc.n	bb2e <_malloc_r+0x3e6>
    ba66:	2b14      	cmp	r3, #20
    ba68:	f200 80b7 	bhi.w	bbda <_malloc_r+0x492>
    ba6c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    ba70:	00c9      	lsls	r1, r1, #3
    ba72:	335b      	adds	r3, #91	; 0x5b
    ba74:	eb07 0e01 	add.w	lr, r7, r1
    ba78:	5879      	ldr	r1, [r7, r1]
    ba7a:	f1ae 0e08 	sub.w	lr, lr, #8
    ba7e:	458e      	cmp	lr, r1
    ba80:	f000 8091 	beq.w	bba6 <_malloc_r+0x45e>
    ba84:	684b      	ldr	r3, [r1, #4]
    ba86:	f023 0303 	bic.w	r3, r3, #3
    ba8a:	4293      	cmp	r3, r2
    ba8c:	d902      	bls.n	ba94 <_malloc_r+0x34c>
    ba8e:	6889      	ldr	r1, [r1, #8]
    ba90:	458e      	cmp	lr, r1
    ba92:	d1f7      	bne.n	ba84 <_malloc_r+0x33c>
    ba94:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    ba98:	687a      	ldr	r2, [r7, #4]
    ba9a:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    ba9e:	f8ce 5008 	str.w	r5, [lr, #8]
    baa2:	60cd      	str	r5, [r1, #12]
    baa4:	e6d6      	b.n	b854 <_malloc_r+0x10c>
    baa6:	2b14      	cmp	r3, #20
    baa8:	d959      	bls.n	bb5e <_malloc_r+0x416>
    baaa:	2b54      	cmp	r3, #84	; 0x54
    baac:	f200 809d 	bhi.w	bbea <_malloc_r+0x4a2>
    bab0:	0b33      	lsrs	r3, r6, #12
    bab2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    bab6:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    baba:	00c3      	lsls	r3, r0, #3
    babc:	e68a      	b.n	b7d4 <_malloc_r+0x8c>
    babe:	f10e 0e01 	add.w	lr, lr, #1
    bac2:	f01e 0f03 	tst.w	lr, #3
    bac6:	f105 0508 	add.w	r5, r5, #8
    baca:	f47f aed5 	bne.w	b878 <_malloc_r+0x130>
    bace:	e051      	b.n	bb74 <_malloc_r+0x42c>
    bad0:	4442      	add	r2, r8
    bad2:	4645      	mov	r5, r8
    bad4:	6853      	ldr	r3, [r2, #4]
    bad6:	f8d8 100c 	ldr.w	r1, [r8, #12]
    bada:	f043 0301 	orr.w	r3, r3, #1
    bade:	6053      	str	r3, [r2, #4]
    bae0:	f855 3f08 	ldr.w	r3, [r5, #8]!
    bae4:	4620      	mov	r0, r4
    bae6:	60d9      	str	r1, [r3, #12]
    bae8:	608b      	str	r3, [r1, #8]
    baea:	f000 f8e3 	bl	bcb4 <__malloc_unlock>
    baee:	e6f3      	b.n	b8d8 <_malloc_r+0x190>
    baf0:	08f0      	lsrs	r0, r6, #3
    baf2:	f106 0208 	add.w	r2, r6, #8
    baf6:	e637      	b.n	b768 <_malloc_r+0x20>
    baf8:	442a      	add	r2, r5
    bafa:	4620      	mov	r0, r4
    bafc:	6853      	ldr	r3, [r2, #4]
    bafe:	f043 0301 	orr.w	r3, r3, #1
    bb02:	6053      	str	r3, [r2, #4]
    bb04:	3508      	adds	r5, #8
    bb06:	f000 f8d5 	bl	bcb4 <__malloc_unlock>
    bb0a:	e6e5      	b.n	b8d8 <_malloc_r+0x190>
    bb0c:	19a9      	adds	r1, r5, r6
    bb0e:	4620      	mov	r0, r4
    bb10:	f046 0601 	orr.w	r6, r6, #1
    bb14:	f043 0401 	orr.w	r4, r3, #1
    bb18:	606e      	str	r6, [r5, #4]
    bb1a:	e9c7 1104 	strd	r1, r1, [r7, #16]
    bb1e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    bb22:	604c      	str	r4, [r1, #4]
    bb24:	50ab      	str	r3, [r5, r2]
    bb26:	f000 f8c5 	bl	bcb4 <__malloc_unlock>
    bb2a:	3508      	adds	r5, #8
    bb2c:	e6d4      	b.n	b8d8 <_malloc_r+0x190>
    bb2e:	0993      	lsrs	r3, r2, #6
    bb30:	f103 0139 	add.w	r1, r3, #57	; 0x39
    bb34:	00c9      	lsls	r1, r1, #3
    bb36:	3338      	adds	r3, #56	; 0x38
    bb38:	e79c      	b.n	ba74 <_malloc_r+0x32c>
    bb3a:	42bd      	cmp	r5, r7
    bb3c:	d05f      	beq.n	bbfe <_malloc_r+0x4b6>
    bb3e:	68bd      	ldr	r5, [r7, #8]
    bb40:	6868      	ldr	r0, [r5, #4]
    bb42:	f020 0803 	bic.w	r8, r0, #3
    bb46:	4546      	cmp	r6, r8
    bb48:	eba8 0306 	sub.w	r3, r8, r6
    bb4c:	d802      	bhi.n	bb54 <_malloc_r+0x40c>
    bb4e:	2b0f      	cmp	r3, #15
    bb50:	f73f af62 	bgt.w	ba18 <_malloc_r+0x2d0>
    bb54:	4620      	mov	r0, r4
    bb56:	f000 f8ad 	bl	bcb4 <__malloc_unlock>
    bb5a:	2500      	movs	r5, #0
    bb5c:	e6bc      	b.n	b8d8 <_malloc_r+0x190>
    bb5e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    bb62:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    bb66:	00c3      	lsls	r3, r0, #3
    bb68:	e634      	b.n	b7d4 <_malloc_r+0x8c>
    bb6a:	f859 3908 	ldr.w	r3, [r9], #-8
    bb6e:	454b      	cmp	r3, r9
    bb70:	f040 8096 	bne.w	bca0 <_malloc_r+0x558>
    bb74:	f010 0f03 	tst.w	r0, #3
    bb78:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    bb7c:	d1f5      	bne.n	bb6a <_malloc_r+0x422>
    bb7e:	687b      	ldr	r3, [r7, #4]
    bb80:	ea23 0301 	bic.w	r3, r3, r1
    bb84:	607b      	str	r3, [r7, #4]
    bb86:	0049      	lsls	r1, r1, #1
    bb88:	4299      	cmp	r1, r3
    bb8a:	f63f aec0 	bhi.w	b90e <_malloc_r+0x1c6>
    bb8e:	b919      	cbnz	r1, bb98 <_malloc_r+0x450>
    bb90:	e6bd      	b.n	b90e <_malloc_r+0x1c6>
    bb92:	0049      	lsls	r1, r1, #1
    bb94:	f10e 0e04 	add.w	lr, lr, #4
    bb98:	4219      	tst	r1, r3
    bb9a:	d0fa      	beq.n	bb92 <_malloc_r+0x44a>
    bb9c:	4670      	mov	r0, lr
    bb9e:	e667      	b.n	b870 <_malloc_r+0x128>
    bba0:	f103 0810 	add.w	r8, r3, #16
    bba4:	e6d0      	b.n	b948 <_malloc_r+0x200>
    bba6:	109a      	asrs	r2, r3, #2
    bba8:	f04f 0801 	mov.w	r8, #1
    bbac:	687b      	ldr	r3, [r7, #4]
    bbae:	fa08 f202 	lsl.w	r2, r8, r2
    bbb2:	431a      	orrs	r2, r3
    bbb4:	607a      	str	r2, [r7, #4]
    bbb6:	e770      	b.n	ba9a <_malloc_r+0x352>
    bbb8:	eb02 0108 	add.w	r1, r2, r8
    bbbc:	4249      	negs	r1, r1
    bbbe:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    bbc2:	4651      	mov	r1, sl
    bbc4:	4620      	mov	r0, r4
    bbc6:	9200      	str	r2, [sp, #0]
    bbc8:	f001 fdd2 	bl	d770 <_sbrk_r>
    bbcc:	1c43      	adds	r3, r0, #1
    bbce:	e9dd 2300 	ldrd	r2, r3, [sp]
    bbd2:	f47f aeef 	bne.w	b9b4 <_malloc_r+0x26c>
    bbd6:	46da      	mov	sl, fp
    bbd8:	e6ef      	b.n	b9ba <_malloc_r+0x272>
    bbda:	2b54      	cmp	r3, #84	; 0x54
    bbdc:	d825      	bhi.n	bc2a <_malloc_r+0x4e2>
    bbde:	0b13      	lsrs	r3, r2, #12
    bbe0:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    bbe4:	00c9      	lsls	r1, r1, #3
    bbe6:	336e      	adds	r3, #110	; 0x6e
    bbe8:	e744      	b.n	ba74 <_malloc_r+0x32c>
    bbea:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    bbee:	d825      	bhi.n	bc3c <_malloc_r+0x4f4>
    bbf0:	0bf3      	lsrs	r3, r6, #15
    bbf2:	f103 0078 	add.w	r0, r3, #120	; 0x78
    bbf6:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    bbfa:	00c3      	lsls	r3, r0, #3
    bbfc:	e5ea      	b.n	b7d4 <_malloc_r+0x8c>
    bbfe:	4b29      	ldr	r3, [pc, #164]	; (bca4 <_malloc_r+0x55c>)
    bc00:	6818      	ldr	r0, [r3, #0]
    bc02:	4440      	add	r0, r8
    bc04:	6018      	str	r0, [r3, #0]
    bc06:	e6b1      	b.n	b96c <_malloc_r+0x224>
    bc08:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    bc0c:	f1bc 0f00 	cmp.w	ip, #0
    bc10:	f47f aeac 	bne.w	b96c <_malloc_r+0x224>
    bc14:	68bd      	ldr	r5, [r7, #8]
    bc16:	44c8      	add	r8, r9
    bc18:	f048 0001 	orr.w	r0, r8, #1
    bc1c:	6068      	str	r0, [r5, #4]
    bc1e:	e6f0      	b.n	ba02 <_malloc_r+0x2ba>
    bc20:	4615      	mov	r5, r2
    bc22:	e6ee      	b.n	ba02 <_malloc_r+0x2ba>
    bc24:	2301      	movs	r3, #1
    bc26:	6053      	str	r3, [r2, #4]
    bc28:	e794      	b.n	bb54 <_malloc_r+0x40c>
    bc2a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    bc2e:	d823      	bhi.n	bc78 <_malloc_r+0x530>
    bc30:	0bd3      	lsrs	r3, r2, #15
    bc32:	f103 0178 	add.w	r1, r3, #120	; 0x78
    bc36:	00c9      	lsls	r1, r1, #3
    bc38:	3377      	adds	r3, #119	; 0x77
    bc3a:	e71b      	b.n	ba74 <_malloc_r+0x32c>
    bc3c:	f240 5254 	movw	r2, #1364	; 0x554
    bc40:	4293      	cmp	r3, r2
    bc42:	d823      	bhi.n	bc8c <_malloc_r+0x544>
    bc44:	0cb3      	lsrs	r3, r6, #18
    bc46:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    bc4a:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    bc4e:	00c3      	lsls	r3, r0, #3
    bc50:	e5c0      	b.n	b7d4 <_malloc_r+0x8c>
    bc52:	f1ab 0b08 	sub.w	fp, fp, #8
    bc56:	44d8      	add	r8, fp
    bc58:	eba8 0802 	sub.w	r8, r8, r2
    bc5c:	f04f 0a00 	mov.w	sl, #0
    bc60:	e6ab      	b.n	b9ba <_malloc_r+0x272>
    bc62:	f105 0108 	add.w	r1, r5, #8
    bc66:	4620      	mov	r0, r4
    bc68:	9300      	str	r3, [sp, #0]
    bc6a:	f002 f8bb 	bl	dde4 <_free_r>
    bc6e:	68bd      	ldr	r5, [r7, #8]
    bc70:	9b00      	ldr	r3, [sp, #0]
    bc72:	6868      	ldr	r0, [r5, #4]
    bc74:	6819      	ldr	r1, [r3, #0]
    bc76:	e6c4      	b.n	ba02 <_malloc_r+0x2ba>
    bc78:	f240 5154 	movw	r1, #1364	; 0x554
    bc7c:	428b      	cmp	r3, r1
    bc7e:	d80b      	bhi.n	bc98 <_malloc_r+0x550>
    bc80:	0c93      	lsrs	r3, r2, #18
    bc82:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    bc86:	00c9      	lsls	r1, r1, #3
    bc88:	337c      	adds	r3, #124	; 0x7c
    bc8a:	e6f3      	b.n	ba74 <_malloc_r+0x32c>
    bc8c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    bc90:	207f      	movs	r0, #127	; 0x7f
    bc92:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    bc96:	e59d      	b.n	b7d4 <_malloc_r+0x8c>
    bc98:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    bc9c:	237e      	movs	r3, #126	; 0x7e
    bc9e:	e6e9      	b.n	ba74 <_malloc_r+0x32c>
    bca0:	687b      	ldr	r3, [r7, #4]
    bca2:	e770      	b.n	bb86 <_malloc_r+0x43e>
    bca4:	200093f8 	.word	0x200093f8

0000bca8 <__malloc_lock>:
    bca8:	4801      	ldr	r0, [pc, #4]	; (bcb0 <__malloc_lock+0x8>)
    bcaa:	f001 bf2f 	b.w	db0c <__retarget_lock_acquire_recursive>
    bcae:	bf00      	nop
    bcb0:	200093f0 	.word	0x200093f0

0000bcb4 <__malloc_unlock>:
    bcb4:	4801      	ldr	r0, [pc, #4]	; (bcbc <__malloc_unlock+0x8>)
    bcb6:	f001 bf2b 	b.w	db10 <__retarget_lock_release_recursive>
    bcba:	bf00      	nop
    bcbc:	200093f0 	.word	0x200093f0

0000bcc0 <realloc>:
    bcc0:	b410      	push	{r4}
    bcc2:	4c04      	ldr	r4, [pc, #16]	; (bcd4 <realloc+0x14>)
    bcc4:	4603      	mov	r3, r0
    bcc6:	460a      	mov	r2, r1
    bcc8:	6820      	ldr	r0, [r4, #0]
    bcca:	f85d 4b04 	ldr.w	r4, [sp], #4
    bcce:	4619      	mov	r1, r3
    bcd0:	f000 b802 	b.w	bcd8 <_realloc_r>
    bcd4:	20008694 	.word	0x20008694

0000bcd8 <_realloc_r>:
    bcd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bcdc:	4617      	mov	r7, r2
    bcde:	2900      	cmp	r1, #0
    bce0:	f000 8098 	beq.w	be14 <_realloc_r+0x13c>
    bce4:	460c      	mov	r4, r1
    bce6:	f107 050b 	add.w	r5, r7, #11
    bcea:	4680      	mov	r8, r0
    bcec:	f7ff ffdc 	bl	bca8 <__malloc_lock>
    bcf0:	2d16      	cmp	r5, #22
    bcf2:	f854 1c04 	ldr.w	r1, [r4, #-4]
    bcf6:	d85b      	bhi.n	bdb0 <_realloc_r+0xd8>
    bcf8:	2510      	movs	r5, #16
    bcfa:	462a      	mov	r2, r5
    bcfc:	42af      	cmp	r7, r5
    bcfe:	d85c      	bhi.n	bdba <_realloc_r+0xe2>
    bd00:	f021 0603 	bic.w	r6, r1, #3
    bd04:	4296      	cmp	r6, r2
    bd06:	f1a4 0908 	sub.w	r9, r4, #8
    bd0a:	da62      	bge.n	bdd2 <_realloc_r+0xfa>
    bd0c:	4bbc      	ldr	r3, [pc, #752]	; (c000 <_realloc_r+0x328>)
    bd0e:	f8d3 c008 	ldr.w	ip, [r3, #8]
    bd12:	eb09 0006 	add.w	r0, r9, r6
    bd16:	4584      	cmp	ip, r0
    bd18:	f000 8097 	beq.w	be4a <_realloc_r+0x172>
    bd1c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    bd20:	f02c 0301 	bic.w	r3, ip, #1
    bd24:	4403      	add	r3, r0
    bd26:	685b      	ldr	r3, [r3, #4]
    bd28:	07db      	lsls	r3, r3, #31
    bd2a:	d468      	bmi.n	bdfe <_realloc_r+0x126>
    bd2c:	f02c 0c03 	bic.w	ip, ip, #3
    bd30:	eb06 030c 	add.w	r3, r6, ip
    bd34:	4293      	cmp	r3, r2
    bd36:	da47      	bge.n	bdc8 <_realloc_r+0xf0>
    bd38:	07cb      	lsls	r3, r1, #31
    bd3a:	d410      	bmi.n	bd5e <_realloc_r+0x86>
    bd3c:	f854 3c08 	ldr.w	r3, [r4, #-8]
    bd40:	eba9 0a03 	sub.w	sl, r9, r3
    bd44:	f8da 3004 	ldr.w	r3, [sl, #4]
    bd48:	f023 0103 	bic.w	r1, r3, #3
    bd4c:	448c      	add	ip, r1
    bd4e:	44b4      	add	ip, r6
    bd50:	4594      	cmp	ip, r2
    bd52:	f280 8111 	bge.w	bf78 <_realloc_r+0x2a0>
    bd56:	1873      	adds	r3, r6, r1
    bd58:	4293      	cmp	r3, r2
    bd5a:	f280 80e8 	bge.w	bf2e <_realloc_r+0x256>
    bd5e:	4639      	mov	r1, r7
    bd60:	4640      	mov	r0, r8
    bd62:	f7ff fcf1 	bl	b748 <_malloc_r>
    bd66:	4607      	mov	r7, r0
    bd68:	b1e0      	cbz	r0, bda4 <_realloc_r+0xcc>
    bd6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    bd6e:	f023 0301 	bic.w	r3, r3, #1
    bd72:	444b      	add	r3, r9
    bd74:	f1a0 0208 	sub.w	r2, r0, #8
    bd78:	4293      	cmp	r3, r2
    bd7a:	f000 80d2 	beq.w	bf22 <_realloc_r+0x24a>
    bd7e:	1f32      	subs	r2, r6, #4
    bd80:	2a24      	cmp	r2, #36	; 0x24
    bd82:	f200 80f5 	bhi.w	bf70 <_realloc_r+0x298>
    bd86:	2a13      	cmp	r2, #19
    bd88:	f200 80ac 	bhi.w	bee4 <_realloc_r+0x20c>
    bd8c:	4603      	mov	r3, r0
    bd8e:	4622      	mov	r2, r4
    bd90:	6811      	ldr	r1, [r2, #0]
    bd92:	6019      	str	r1, [r3, #0]
    bd94:	6851      	ldr	r1, [r2, #4]
    bd96:	6059      	str	r1, [r3, #4]
    bd98:	6892      	ldr	r2, [r2, #8]
    bd9a:	609a      	str	r2, [r3, #8]
    bd9c:	4621      	mov	r1, r4
    bd9e:	4640      	mov	r0, r8
    bda0:	f002 f820 	bl	dde4 <_free_r>
    bda4:	4640      	mov	r0, r8
    bda6:	f7ff ff85 	bl	bcb4 <__malloc_unlock>
    bdaa:	4638      	mov	r0, r7
    bdac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdb0:	f025 0507 	bic.w	r5, r5, #7
    bdb4:	2d00      	cmp	r5, #0
    bdb6:	462a      	mov	r2, r5
    bdb8:	daa0      	bge.n	bcfc <_realloc_r+0x24>
    bdba:	230c      	movs	r3, #12
    bdbc:	f8c8 3000 	str.w	r3, [r8]
    bdc0:	2700      	movs	r7, #0
    bdc2:	4638      	mov	r0, r7
    bdc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdc8:	461e      	mov	r6, r3
    bdca:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    bdce:	60d3      	str	r3, [r2, #12]
    bdd0:	609a      	str	r2, [r3, #8]
    bdd2:	1b73      	subs	r3, r6, r5
    bdd4:	2b0f      	cmp	r3, #15
    bdd6:	d822      	bhi.n	be1e <_realloc_r+0x146>
    bdd8:	f8d9 3004 	ldr.w	r3, [r9, #4]
    bddc:	f003 0301 	and.w	r3, r3, #1
    bde0:	4333      	orrs	r3, r6
    bde2:	444e      	add	r6, r9
    bde4:	f8c9 3004 	str.w	r3, [r9, #4]
    bde8:	6873      	ldr	r3, [r6, #4]
    bdea:	f043 0301 	orr.w	r3, r3, #1
    bdee:	6073      	str	r3, [r6, #4]
    bdf0:	4640      	mov	r0, r8
    bdf2:	4627      	mov	r7, r4
    bdf4:	f7ff ff5e 	bl	bcb4 <__malloc_unlock>
    bdf8:	4638      	mov	r0, r7
    bdfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdfe:	07c9      	lsls	r1, r1, #31
    be00:	d4ad      	bmi.n	bd5e <_realloc_r+0x86>
    be02:	f854 3c08 	ldr.w	r3, [r4, #-8]
    be06:	eba9 0a03 	sub.w	sl, r9, r3
    be0a:	f8da 1004 	ldr.w	r1, [sl, #4]
    be0e:	f021 0103 	bic.w	r1, r1, #3
    be12:	e7a0      	b.n	bd56 <_realloc_r+0x7e>
    be14:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be18:	4611      	mov	r1, r2
    be1a:	f7ff bc95 	b.w	b748 <_malloc_r>
    be1e:	f8d9 2004 	ldr.w	r2, [r9, #4]
    be22:	eb09 0105 	add.w	r1, r9, r5
    be26:	f002 0201 	and.w	r2, r2, #1
    be2a:	444e      	add	r6, r9
    be2c:	f043 0301 	orr.w	r3, r3, #1
    be30:	432a      	orrs	r2, r5
    be32:	f8c9 2004 	str.w	r2, [r9, #4]
    be36:	604b      	str	r3, [r1, #4]
    be38:	6873      	ldr	r3, [r6, #4]
    be3a:	f043 0301 	orr.w	r3, r3, #1
    be3e:	3108      	adds	r1, #8
    be40:	6073      	str	r3, [r6, #4]
    be42:	4640      	mov	r0, r8
    be44:	f001 ffce 	bl	dde4 <_free_r>
    be48:	e7d2      	b.n	bdf0 <_realloc_r+0x118>
    be4a:	f8dc 0004 	ldr.w	r0, [ip, #4]
    be4e:	f020 0b03 	bic.w	fp, r0, #3
    be52:	eb06 0c0b 	add.w	ip, r6, fp
    be56:	f105 0010 	add.w	r0, r5, #16
    be5a:	4584      	cmp	ip, r0
    be5c:	da4d      	bge.n	befa <_realloc_r+0x222>
    be5e:	07c9      	lsls	r1, r1, #31
    be60:	f53f af7d 	bmi.w	bd5e <_realloc_r+0x86>
    be64:	f854 1c08 	ldr.w	r1, [r4, #-8]
    be68:	eba9 0a01 	sub.w	sl, r9, r1
    be6c:	f8da 1004 	ldr.w	r1, [sl, #4]
    be70:	f021 0103 	bic.w	r1, r1, #3
    be74:	448b      	add	fp, r1
    be76:	44b3      	add	fp, r6
    be78:	4558      	cmp	r0, fp
    be7a:	f73f af6c 	bgt.w	bd56 <_realloc_r+0x7e>
    be7e:	4657      	mov	r7, sl
    be80:	f8da 100c 	ldr.w	r1, [sl, #12]
    be84:	f857 0f08 	ldr.w	r0, [r7, #8]!
    be88:	1f32      	subs	r2, r6, #4
    be8a:	2a24      	cmp	r2, #36	; 0x24
    be8c:	60c1      	str	r1, [r0, #12]
    be8e:	6088      	str	r0, [r1, #8]
    be90:	f200 80db 	bhi.w	c04a <_realloc_r+0x372>
    be94:	2a13      	cmp	r2, #19
    be96:	f240 80d6 	bls.w	c046 <_realloc_r+0x36e>
    be9a:	6821      	ldr	r1, [r4, #0]
    be9c:	f8ca 1008 	str.w	r1, [sl, #8]
    bea0:	6861      	ldr	r1, [r4, #4]
    bea2:	f8ca 100c 	str.w	r1, [sl, #12]
    bea6:	2a1b      	cmp	r2, #27
    bea8:	f200 80df 	bhi.w	c06a <_realloc_r+0x392>
    beac:	3408      	adds	r4, #8
    beae:	f10a 0210 	add.w	r2, sl, #16
    beb2:	6821      	ldr	r1, [r4, #0]
    beb4:	6011      	str	r1, [r2, #0]
    beb6:	6861      	ldr	r1, [r4, #4]
    beb8:	6051      	str	r1, [r2, #4]
    beba:	68a1      	ldr	r1, [r4, #8]
    bebc:	6091      	str	r1, [r2, #8]
    bebe:	eb0a 0105 	add.w	r1, sl, r5
    bec2:	ebab 0205 	sub.w	r2, fp, r5
    bec6:	f042 0201 	orr.w	r2, r2, #1
    beca:	6099      	str	r1, [r3, #8]
    becc:	604a      	str	r2, [r1, #4]
    bece:	f8da 3004 	ldr.w	r3, [sl, #4]
    bed2:	f003 0301 	and.w	r3, r3, #1
    bed6:	432b      	orrs	r3, r5
    bed8:	4640      	mov	r0, r8
    beda:	f8ca 3004 	str.w	r3, [sl, #4]
    bede:	f7ff fee9 	bl	bcb4 <__malloc_unlock>
    bee2:	e76e      	b.n	bdc2 <_realloc_r+0xea>
    bee4:	6823      	ldr	r3, [r4, #0]
    bee6:	6003      	str	r3, [r0, #0]
    bee8:	6863      	ldr	r3, [r4, #4]
    beea:	6043      	str	r3, [r0, #4]
    beec:	2a1b      	cmp	r2, #27
    beee:	d868      	bhi.n	bfc2 <_realloc_r+0x2ea>
    bef0:	f104 0208 	add.w	r2, r4, #8
    bef4:	f100 0308 	add.w	r3, r0, #8
    bef8:	e74a      	b.n	bd90 <_realloc_r+0xb8>
    befa:	eb09 0205 	add.w	r2, r9, r5
    befe:	609a      	str	r2, [r3, #8]
    bf00:	ebac 0305 	sub.w	r3, ip, r5
    bf04:	f043 0301 	orr.w	r3, r3, #1
    bf08:	6053      	str	r3, [r2, #4]
    bf0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    bf0e:	f003 0301 	and.w	r3, r3, #1
    bf12:	432b      	orrs	r3, r5
    bf14:	4640      	mov	r0, r8
    bf16:	f844 3c04 	str.w	r3, [r4, #-4]
    bf1a:	f7ff fecb 	bl	bcb4 <__malloc_unlock>
    bf1e:	4627      	mov	r7, r4
    bf20:	e74f      	b.n	bdc2 <_realloc_r+0xea>
    bf22:	f850 3c04 	ldr.w	r3, [r0, #-4]
    bf26:	f023 0303 	bic.w	r3, r3, #3
    bf2a:	441e      	add	r6, r3
    bf2c:	e751      	b.n	bdd2 <_realloc_r+0xfa>
    bf2e:	4657      	mov	r7, sl
    bf30:	f8da 100c 	ldr.w	r1, [sl, #12]
    bf34:	f857 0f08 	ldr.w	r0, [r7, #8]!
    bf38:	1f32      	subs	r2, r6, #4
    bf3a:	2a24      	cmp	r2, #36	; 0x24
    bf3c:	60c1      	str	r1, [r0, #12]
    bf3e:	6088      	str	r0, [r1, #8]
    bf40:	d84c      	bhi.n	bfdc <_realloc_r+0x304>
    bf42:	2a13      	cmp	r2, #19
    bf44:	d948      	bls.n	bfd8 <_realloc_r+0x300>
    bf46:	6821      	ldr	r1, [r4, #0]
    bf48:	f8ca 1008 	str.w	r1, [sl, #8]
    bf4c:	6861      	ldr	r1, [r4, #4]
    bf4e:	f8ca 100c 	str.w	r1, [sl, #12]
    bf52:	2a1b      	cmp	r2, #27
    bf54:	d856      	bhi.n	c004 <_realloc_r+0x32c>
    bf56:	3408      	adds	r4, #8
    bf58:	f10a 0210 	add.w	r2, sl, #16
    bf5c:	461e      	mov	r6, r3
    bf5e:	6823      	ldr	r3, [r4, #0]
    bf60:	6013      	str	r3, [r2, #0]
    bf62:	6863      	ldr	r3, [r4, #4]
    bf64:	6053      	str	r3, [r2, #4]
    bf66:	68a3      	ldr	r3, [r4, #8]
    bf68:	6093      	str	r3, [r2, #8]
    bf6a:	46d1      	mov	r9, sl
    bf6c:	463c      	mov	r4, r7
    bf6e:	e730      	b.n	bdd2 <_realloc_r+0xfa>
    bf70:	4621      	mov	r1, r4
    bf72:	f001 fa3b 	bl	d3ec <memmove>
    bf76:	e711      	b.n	bd9c <_realloc_r+0xc4>
    bf78:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    bf7c:	4657      	mov	r7, sl
    bf7e:	60cb      	str	r3, [r1, #12]
    bf80:	6099      	str	r1, [r3, #8]
    bf82:	f857 1f08 	ldr.w	r1, [r7, #8]!
    bf86:	f8da 300c 	ldr.w	r3, [sl, #12]
    bf8a:	60cb      	str	r3, [r1, #12]
    bf8c:	1f32      	subs	r2, r6, #4
    bf8e:	2a24      	cmp	r2, #36	; 0x24
    bf90:	6099      	str	r1, [r3, #8]
    bf92:	d82d      	bhi.n	bff0 <_realloc_r+0x318>
    bf94:	2a13      	cmp	r2, #19
    bf96:	d929      	bls.n	bfec <_realloc_r+0x314>
    bf98:	6823      	ldr	r3, [r4, #0]
    bf9a:	f8ca 3008 	str.w	r3, [sl, #8]
    bf9e:	6863      	ldr	r3, [r4, #4]
    bfa0:	f8ca 300c 	str.w	r3, [sl, #12]
    bfa4:	2a1b      	cmp	r2, #27
    bfa6:	d842      	bhi.n	c02e <_realloc_r+0x356>
    bfa8:	3408      	adds	r4, #8
    bfaa:	f10a 0310 	add.w	r3, sl, #16
    bfae:	6822      	ldr	r2, [r4, #0]
    bfb0:	601a      	str	r2, [r3, #0]
    bfb2:	6862      	ldr	r2, [r4, #4]
    bfb4:	605a      	str	r2, [r3, #4]
    bfb6:	68a2      	ldr	r2, [r4, #8]
    bfb8:	609a      	str	r2, [r3, #8]
    bfba:	4666      	mov	r6, ip
    bfbc:	46d1      	mov	r9, sl
    bfbe:	463c      	mov	r4, r7
    bfc0:	e707      	b.n	bdd2 <_realloc_r+0xfa>
    bfc2:	68a3      	ldr	r3, [r4, #8]
    bfc4:	6083      	str	r3, [r0, #8]
    bfc6:	68e3      	ldr	r3, [r4, #12]
    bfc8:	60c3      	str	r3, [r0, #12]
    bfca:	2a24      	cmp	r2, #36	; 0x24
    bfcc:	d026      	beq.n	c01c <_realloc_r+0x344>
    bfce:	f104 0210 	add.w	r2, r4, #16
    bfd2:	f100 0310 	add.w	r3, r0, #16
    bfd6:	e6db      	b.n	bd90 <_realloc_r+0xb8>
    bfd8:	463a      	mov	r2, r7
    bfda:	e7bf      	b.n	bf5c <_realloc_r+0x284>
    bfdc:	4621      	mov	r1, r4
    bfde:	4638      	mov	r0, r7
    bfe0:	461e      	mov	r6, r3
    bfe2:	46d1      	mov	r9, sl
    bfe4:	f001 fa02 	bl	d3ec <memmove>
    bfe8:	463c      	mov	r4, r7
    bfea:	e6f2      	b.n	bdd2 <_realloc_r+0xfa>
    bfec:	463b      	mov	r3, r7
    bfee:	e7de      	b.n	bfae <_realloc_r+0x2d6>
    bff0:	4621      	mov	r1, r4
    bff2:	4638      	mov	r0, r7
    bff4:	4666      	mov	r6, ip
    bff6:	46d1      	mov	r9, sl
    bff8:	f001 f9f8 	bl	d3ec <memmove>
    bffc:	463c      	mov	r4, r7
    bffe:	e6e8      	b.n	bdd2 <_realloc_r+0xfa>
    c000:	20008278 	.word	0x20008278
    c004:	68a1      	ldr	r1, [r4, #8]
    c006:	f8ca 1010 	str.w	r1, [sl, #16]
    c00a:	68e1      	ldr	r1, [r4, #12]
    c00c:	f8ca 1014 	str.w	r1, [sl, #20]
    c010:	2a24      	cmp	r2, #36	; 0x24
    c012:	d020      	beq.n	c056 <_realloc_r+0x37e>
    c014:	3410      	adds	r4, #16
    c016:	f10a 0218 	add.w	r2, sl, #24
    c01a:	e79f      	b.n	bf5c <_realloc_r+0x284>
    c01c:	6923      	ldr	r3, [r4, #16]
    c01e:	6103      	str	r3, [r0, #16]
    c020:	6961      	ldr	r1, [r4, #20]
    c022:	6141      	str	r1, [r0, #20]
    c024:	f104 0218 	add.w	r2, r4, #24
    c028:	f100 0318 	add.w	r3, r0, #24
    c02c:	e6b0      	b.n	bd90 <_realloc_r+0xb8>
    c02e:	68a3      	ldr	r3, [r4, #8]
    c030:	f8ca 3010 	str.w	r3, [sl, #16]
    c034:	68e3      	ldr	r3, [r4, #12]
    c036:	f8ca 3014 	str.w	r3, [sl, #20]
    c03a:	2a24      	cmp	r2, #36	; 0x24
    c03c:	d021      	beq.n	c082 <_realloc_r+0x3aa>
    c03e:	3410      	adds	r4, #16
    c040:	f10a 0318 	add.w	r3, sl, #24
    c044:	e7b3      	b.n	bfae <_realloc_r+0x2d6>
    c046:	463a      	mov	r2, r7
    c048:	e733      	b.n	beb2 <_realloc_r+0x1da>
    c04a:	4621      	mov	r1, r4
    c04c:	4638      	mov	r0, r7
    c04e:	f001 f9cd 	bl	d3ec <memmove>
    c052:	4b16      	ldr	r3, [pc, #88]	; (c0ac <_realloc_r+0x3d4>)
    c054:	e733      	b.n	bebe <_realloc_r+0x1e6>
    c056:	6922      	ldr	r2, [r4, #16]
    c058:	f8ca 2018 	str.w	r2, [sl, #24]
    c05c:	6962      	ldr	r2, [r4, #20]
    c05e:	f8ca 201c 	str.w	r2, [sl, #28]
    c062:	3418      	adds	r4, #24
    c064:	f10a 0220 	add.w	r2, sl, #32
    c068:	e778      	b.n	bf5c <_realloc_r+0x284>
    c06a:	68a1      	ldr	r1, [r4, #8]
    c06c:	f8ca 1010 	str.w	r1, [sl, #16]
    c070:	68e1      	ldr	r1, [r4, #12]
    c072:	f8ca 1014 	str.w	r1, [sl, #20]
    c076:	2a24      	cmp	r2, #36	; 0x24
    c078:	d00d      	beq.n	c096 <_realloc_r+0x3be>
    c07a:	3410      	adds	r4, #16
    c07c:	f10a 0218 	add.w	r2, sl, #24
    c080:	e717      	b.n	beb2 <_realloc_r+0x1da>
    c082:	6923      	ldr	r3, [r4, #16]
    c084:	f8ca 3018 	str.w	r3, [sl, #24]
    c088:	6963      	ldr	r3, [r4, #20]
    c08a:	f8ca 301c 	str.w	r3, [sl, #28]
    c08e:	3418      	adds	r4, #24
    c090:	f10a 0320 	add.w	r3, sl, #32
    c094:	e78b      	b.n	bfae <_realloc_r+0x2d6>
    c096:	6922      	ldr	r2, [r4, #16]
    c098:	f8ca 2018 	str.w	r2, [sl, #24]
    c09c:	6962      	ldr	r2, [r4, #20]
    c09e:	f8ca 201c 	str.w	r2, [sl, #28]
    c0a2:	3418      	adds	r4, #24
    c0a4:	f10a 0220 	add.w	r2, sl, #32
    c0a8:	e703      	b.n	beb2 <_realloc_r+0x1da>
    c0aa:	bf00      	nop
    c0ac:	20008278 	.word	0x20008278

0000c0b0 <_strtod_l>:
    c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0b4:	ed2d 8b10 	vpush	{d8-d15}
    c0b8:	b097      	sub	sp, #92	; 0x5c
    c0ba:	468a      	mov	sl, r1
    c0bc:	2100      	movs	r1, #0
    c0be:	9207      	str	r2, [sp, #28]
    c0c0:	9112      	str	r1, [sp, #72]	; 0x48
    c0c2:	2200      	movs	r2, #0
    c0c4:	2100      	movs	r1, #0
    c0c6:	e9cd 1204 	strd	r1, r2, [sp, #16]
    c0ca:	4680      	mov	r8, r0
    c0cc:	4651      	mov	r1, sl
    c0ce:	9111      	str	r1, [sp, #68]	; 0x44
    c0d0:	460f      	mov	r7, r1
    c0d2:	f811 2b01 	ldrb.w	r2, [r1], #1
    c0d6:	2a2d      	cmp	r2, #45	; 0x2d
    c0d8:	d85e      	bhi.n	c198 <_strtod_l+0xe8>
    c0da:	a001      	add	r0, pc, #4	; (adr r0, c0e0 <_strtod_l+0x30>)
    c0dc:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    c0e0:	0000c281 	.word	0x0000c281
    c0e4:	0000c199 	.word	0x0000c199
    c0e8:	0000c199 	.word	0x0000c199
    c0ec:	0000c199 	.word	0x0000c199
    c0f0:	0000c199 	.word	0x0000c199
    c0f4:	0000c199 	.word	0x0000c199
    c0f8:	0000c199 	.word	0x0000c199
    c0fc:	0000c199 	.word	0x0000c199
    c100:	0000c199 	.word	0x0000c199
    c104:	0000c0cf 	.word	0x0000c0cf
    c108:	0000c0cf 	.word	0x0000c0cf
    c10c:	0000c0cf 	.word	0x0000c0cf
    c110:	0000c0cf 	.word	0x0000c0cf
    c114:	0000c0cf 	.word	0x0000c0cf
    c118:	0000c199 	.word	0x0000c199
    c11c:	0000c199 	.word	0x0000c199
    c120:	0000c199 	.word	0x0000c199
    c124:	0000c199 	.word	0x0000c199
    c128:	0000c199 	.word	0x0000c199
    c12c:	0000c199 	.word	0x0000c199
    c130:	0000c199 	.word	0x0000c199
    c134:	0000c199 	.word	0x0000c199
    c138:	0000c199 	.word	0x0000c199
    c13c:	0000c199 	.word	0x0000c199
    c140:	0000c199 	.word	0x0000c199
    c144:	0000c199 	.word	0x0000c199
    c148:	0000c199 	.word	0x0000c199
    c14c:	0000c199 	.word	0x0000c199
    c150:	0000c199 	.word	0x0000c199
    c154:	0000c199 	.word	0x0000c199
    c158:	0000c199 	.word	0x0000c199
    c15c:	0000c199 	.word	0x0000c199
    c160:	0000c0cf 	.word	0x0000c0cf
    c164:	0000c199 	.word	0x0000c199
    c168:	0000c199 	.word	0x0000c199
    c16c:	0000c199 	.word	0x0000c199
    c170:	0000c199 	.word	0x0000c199
    c174:	0000c199 	.word	0x0000c199
    c178:	0000c199 	.word	0x0000c199
    c17c:	0000c199 	.word	0x0000c199
    c180:	0000c199 	.word	0x0000c199
    c184:	0000c199 	.word	0x0000c199
    c188:	0000c199 	.word	0x0000c199
    c18c:	0000c8bb 	.word	0x0000c8bb
    c190:	0000c199 	.word	0x0000c199
    c194:	0000c8a7 	.word	0x0000c8a7
    c198:	2100      	movs	r1, #0
    c19a:	9109      	str	r1, [sp, #36]	; 0x24
    c19c:	2a30      	cmp	r2, #48	; 0x30
    c19e:	d07d      	beq.n	c29c <_strtod_l+0x1ec>
    c1a0:	2300      	movs	r3, #0
    c1a2:	9308      	str	r3, [sp, #32]
    c1a4:	2a2f      	cmp	r2, #47	; 0x2f
    c1a6:	4614      	mov	r4, r2
    c1a8:	f240 84cd 	bls.w	cb46 <_strtod_l+0xa96>
    c1ac:	f04f 0900 	mov.w	r9, #0
    c1b0:	4638      	mov	r0, r7
    c1b2:	464e      	mov	r6, r9
    c1b4:	464d      	mov	r5, r9
    c1b6:	e012      	b.n	c1de <_strtod_l+0x12e>
    c1b8:	3001      	adds	r0, #1
    c1ba:	2d08      	cmp	r5, #8
    c1bc:	9011      	str	r0, [sp, #68]	; 0x44
    c1be:	bfc8      	it	gt
    c1c0:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    c1c4:	7804      	ldrb	r4, [r0, #0]
    c1c6:	bfc6      	itte	gt
    c1c8:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    c1cc:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    c1d0:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    c1d4:	2c2f      	cmp	r4, #47	; 0x2f
    c1d6:	f105 0501 	add.w	r5, r5, #1
    c1da:	4622      	mov	r2, r4
    c1dc:	dd6f      	ble.n	c2be <_strtod_l+0x20e>
    c1de:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    c1e2:	2c39      	cmp	r4, #57	; 0x39
    c1e4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    c1e8:	dde6      	ble.n	c1b8 <_strtod_l+0x108>
    c1ea:	499f      	ldr	r1, [pc, #636]	; (c468 <_strtod_l+0x3b8>)
    c1ec:	2201      	movs	r2, #1
    c1ee:	f001 f9cb 	bl	d588 <strncmp>
    c1f2:	2800      	cmp	r0, #0
    c1f4:	d137      	bne.n	c266 <_strtod_l+0x1b6>
    c1f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c1f8:	461a      	mov	r2, r3
    c1fa:	3301      	adds	r3, #1
    c1fc:	9311      	str	r3, [sp, #68]	; 0x44
    c1fe:	7854      	ldrb	r4, [r2, #1]
    c200:	2d00      	cmp	r5, #0
    c202:	f040 8543 	bne.w	cc8c <_strtod_l+0xbdc>
    c206:	2c30      	cmp	r4, #48	; 0x30
    c208:	f040 8524 	bne.w	cc54 <_strtod_l+0xba4>
    c20c:	f1c3 0201 	rsb	r2, r3, #1
    c210:	1898      	adds	r0, r3, r2
    c212:	3301      	adds	r3, #1
    c214:	9311      	str	r3, [sp, #68]	; 0x44
    c216:	781c      	ldrb	r4, [r3, #0]
    c218:	2c30      	cmp	r4, #48	; 0x30
    c21a:	d0f9      	beq.n	c210 <_strtod_l+0x160>
    c21c:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    c220:	2b08      	cmp	r3, #8
    c222:	f200 8301 	bhi.w	c828 <_strtod_l+0x778>
    c226:	9f11      	ldr	r7, [sp, #68]	; 0x44
    c228:	1c43      	adds	r3, r0, #1
    c22a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    c22e:	930b      	str	r3, [sp, #44]	; 0x2c
    c230:	2501      	movs	r5, #1
    c232:	46bc      	mov	ip, r7
    c234:	f04f 0e00 	mov.w	lr, #0
    c238:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    c23c:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    c240:	2000      	movs	r0, #0
    c242:	f10c 0301 	add.w	r3, ip, #1
    c246:	9311      	str	r3, [sp, #68]	; 0x44
    c248:	f89c 4001 	ldrb.w	r4, [ip, #1]
    c24c:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    c250:	2909      	cmp	r1, #9
    c252:	f200 82bb 	bhi.w	c7cc <_strtod_l+0x71c>
    c256:	3001      	adds	r0, #1
    c258:	468b      	mov	fp, r1
    c25a:	2900      	cmp	r1, #0
    c25c:	f040 844f 	bne.w	cafe <_strtod_l+0xa4e>
    c260:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    c264:	e7ed      	b.n	c242 <_strtod_l+0x192>
    c266:	2000      	movs	r0, #0
    c268:	2c65      	cmp	r4, #101	; 0x65
    c26a:	46ae      	mov	lr, r5
    c26c:	900b      	str	r0, [sp, #44]	; 0x2c
    c26e:	4684      	mov	ip, r0
    c270:	d001      	beq.n	c276 <_strtod_l+0x1c6>
    c272:	2c45      	cmp	r4, #69	; 0x45
    c274:	d130      	bne.n	c2d8 <_strtod_l+0x228>
    c276:	2d00      	cmp	r5, #0
    c278:	d16b      	bne.n	c352 <_strtod_l+0x2a2>
    c27a:	9b08      	ldr	r3, [sp, #32]
    c27c:	4303      	orrs	r3, r0
    c27e:	d167      	bne.n	c350 <_strtod_l+0x2a0>
    c280:	9b07      	ldr	r3, [sp, #28]
    c282:	ed9f 8b77 	vldr	d8, [pc, #476]	; c460 <_strtod_l+0x3b0>
    c286:	b113      	cbz	r3, c28e <_strtod_l+0x1de>
    c288:	9b07      	ldr	r3, [sp, #28]
    c28a:	f8c3 a000 	str.w	sl, [r3]
    c28e:	eeb0 0b48 	vmov.f64	d0, d8
    c292:	b017      	add	sp, #92	; 0x5c
    c294:	ecbd 8b10 	vpop	{d8-d15}
    c298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c29c:	787a      	ldrb	r2, [r7, #1]
    c29e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    c2a2:	2a58      	cmp	r2, #88	; 0x58
    c2a4:	f000 840c 	beq.w	cac0 <_strtod_l+0xa10>
    c2a8:	3701      	adds	r7, #1
    c2aa:	9711      	str	r7, [sp, #68]	; 0x44
    c2ac:	783a      	ldrb	r2, [r7, #0]
    c2ae:	2a30      	cmp	r2, #48	; 0x30
    c2b0:	d0fa      	beq.n	c2a8 <_strtod_l+0x1f8>
    c2b2:	2a00      	cmp	r2, #0
    c2b4:	f000 80b7 	beq.w	c426 <_strtod_l+0x376>
    c2b8:	2301      	movs	r3, #1
    c2ba:	9308      	str	r3, [sp, #32]
    c2bc:	e772      	b.n	c1a4 <_strtod_l+0xf4>
    c2be:	496a      	ldr	r1, [pc, #424]	; (c468 <_strtod_l+0x3b8>)
    c2c0:	2201      	movs	r2, #1
    c2c2:	f001 f961 	bl	d588 <strncmp>
    c2c6:	2800      	cmp	r0, #0
    c2c8:	f000 80c0 	beq.w	c44c <_strtod_l+0x39c>
    c2cc:	46ae      	mov	lr, r5
    c2ce:	f04f 0c00 	mov.w	ip, #0
    c2d2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    c2d6:	4660      	mov	r0, ip
    c2d8:	f04f 0b00 	mov.w	fp, #0
    c2dc:	2d00      	cmp	r5, #0
    c2de:	d07e      	beq.n	c3de <_strtod_l+0x32e>
    c2e0:	ee07 6a90 	vmov	s15, r6
    c2e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c2e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    c2ea:	ebab 0303 	sub.w	r3, fp, r3
    c2ee:	f1be 0f00 	cmp.w	lr, #0
    c2f2:	bf08      	it	eq
    c2f4:	46ae      	moveq	lr, r5
    c2f6:	2d10      	cmp	r5, #16
    c2f8:	930a      	str	r3, [sp, #40]	; 0x28
    c2fa:	462b      	mov	r3, r5
    c2fc:	bfa8      	it	ge
    c2fe:	2310      	movge	r3, #16
    c300:	2d09      	cmp	r5, #9
    c302:	ed8d 7b04 	vstr	d7, [sp, #16]
    c306:	dd0c      	ble.n	c322 <_strtod_l+0x272>
    c308:	4a58      	ldr	r2, [pc, #352]	; (c46c <_strtod_l+0x3bc>)
    c30a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    c30e:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    c312:	ee06 9a90 	vmov	s13, r9
    c316:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    c31a:	eea7 6b05 	vfma.f64	d6, d7, d5
    c31e:	ed8d 6b04 	vstr	d6, [sp, #16]
    c322:	2d0f      	cmp	r5, #15
    c324:	f300 80a8 	bgt.w	c478 <_strtod_l+0x3c8>
    c328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c32a:	2a00      	cmp	r2, #0
    c32c:	f000 83e4 	beq.w	caf8 <_strtod_l+0xa48>
    c330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c332:	f340 833c 	ble.w	c9ae <_strtod_l+0x8fe>
    c336:	2a16      	cmp	r2, #22
    c338:	f340 8498 	ble.w	cc6c <_strtod_l+0xbbc>
    c33c:	990a      	ldr	r1, [sp, #40]	; 0x28
    c33e:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    c342:	428a      	cmp	r2, r1
    c344:	f280 84a6 	bge.w	cc94 <_strtod_l+0xbe4>
    c348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c34a:	1aeb      	subs	r3, r5, r3
    c34c:	4413      	add	r3, r2
    c34e:	e099      	b.n	c484 <_strtod_l+0x3d4>
    c350:	2500      	movs	r5, #0
    c352:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    c356:	f10a 0301 	add.w	r3, sl, #1
    c35a:	9311      	str	r3, [sp, #68]	; 0x44
    c35c:	f89a 4001 	ldrb.w	r4, [sl, #1]
    c360:	2c2b      	cmp	r4, #43	; 0x2b
    c362:	f000 825e 	beq.w	c822 <_strtod_l+0x772>
    c366:	2c2d      	cmp	r4, #45	; 0x2d
    c368:	f000 81f7 	beq.w	c75a <_strtod_l+0x6aa>
    c36c:	2300      	movs	r3, #0
    c36e:	930a      	str	r3, [sp, #40]	; 0x28
    c370:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    c374:	2b09      	cmp	r3, #9
    c376:	f200 81eb 	bhi.w	c750 <_strtod_l+0x6a0>
    c37a:	2c30      	cmp	r4, #48	; 0x30
    c37c:	d105      	bne.n	c38a <_strtod_l+0x2da>
    c37e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c380:	3301      	adds	r3, #1
    c382:	9311      	str	r3, [sp, #68]	; 0x44
    c384:	781c      	ldrb	r4, [r3, #0]
    c386:	2c30      	cmp	r4, #48	; 0x30
    c388:	d0fa      	beq.n	c380 <_strtod_l+0x2d0>
    c38a:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    c38e:	2b08      	cmp	r3, #8
    c390:	d8a2      	bhi.n	c2d8 <_strtod_l+0x228>
    c392:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c394:	920c      	str	r2, [sp, #48]	; 0x30
    c396:	1c53      	adds	r3, r2, #1
    c398:	9311      	str	r3, [sp, #68]	; 0x44
    c39a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    c39e:	7854      	ldrb	r4, [r2, #1]
    c3a0:	2c2f      	cmp	r4, #47	; 0x2f
    c3a2:	dc07      	bgt.n	c3b4 <_strtod_l+0x304>
    c3a4:	e3de      	b.n	cb64 <_strtod_l+0xab4>
    c3a6:	3301      	adds	r3, #1
    c3a8:	9311      	str	r3, [sp, #68]	; 0x44
    c3aa:	784c      	ldrb	r4, [r1, #1]
    c3ac:	2c2f      	cmp	r4, #47	; 0x2f
    c3ae:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    c3b2:	dd06      	ble.n	c3c2 <_strtod_l+0x312>
    c3b4:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    c3b8:	2c39      	cmp	r4, #57	; 0x39
    c3ba:	4619      	mov	r1, r3
    c3bc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    c3c0:	ddf1      	ble.n	c3a6 <_strtod_l+0x2f6>
    c3c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c3c4:	1a9b      	subs	r3, r3, r2
    c3c6:	2b08      	cmp	r3, #8
    c3c8:	f340 83cc 	ble.w	cb64 <_strtod_l+0xab4>
    c3cc:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    c3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c3d2:	2b00      	cmp	r3, #0
    c3d4:	d082      	beq.n	c2dc <_strtod_l+0x22c>
    c3d6:	f1cb 0b00 	rsb	fp, fp, #0
    c3da:	2d00      	cmp	r5, #0
    c3dc:	d180      	bne.n	c2e0 <_strtod_l+0x230>
    c3de:	9b08      	ldr	r3, [sp, #32]
    c3e0:	4303      	orrs	r3, r0
    c3e2:	d120      	bne.n	c426 <_strtod_l+0x376>
    c3e4:	f1bc 0f00 	cmp.w	ip, #0
    c3e8:	f47f af4a 	bne.w	c280 <_strtod_l+0x1d0>
    c3ec:	2c69      	cmp	r4, #105	; 0x69
    c3ee:	f000 83cf 	beq.w	cb90 <_strtod_l+0xae0>
    c3f2:	f300 82f3 	bgt.w	c9dc <_strtod_l+0x92c>
    c3f6:	2c49      	cmp	r4, #73	; 0x49
    c3f8:	f000 83ca 	beq.w	cb90 <_strtod_l+0xae0>
    c3fc:	2c4e      	cmp	r4, #78	; 0x4e
    c3fe:	f47f af3f 	bne.w	c280 <_strtod_l+0x1d0>
    c402:	491b      	ldr	r1, [pc, #108]	; (c470 <_strtod_l+0x3c0>)
    c404:	a811      	add	r0, sp, #68	; 0x44
    c406:	f002 f90f 	bl	e628 <__match>
    c40a:	2800      	cmp	r0, #0
    c40c:	f43f af38 	beq.w	c280 <_strtod_l+0x1d0>
    c410:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c412:	781b      	ldrb	r3, [r3, #0]
    c414:	2b28      	cmp	r3, #40	; 0x28
    c416:	f000 84f2 	beq.w	cdfe <_strtod_l+0xd4e>
    c41a:	4816      	ldr	r0, [pc, #88]	; (c474 <_strtod_l+0x3c4>)
    c41c:	f001 fc84 	bl	dd28 <nan>
    c420:	eeb0 8b40 	vmov.f64	d8, d0
    c424:	e001      	b.n	c42a <_strtod_l+0x37a>
    c426:	ed9f 8b0e 	vldr	d8, [pc, #56]	; c460 <_strtod_l+0x3b0>
    c42a:	9a07      	ldr	r2, [sp, #28]
    c42c:	b10a      	cbz	r2, c432 <_strtod_l+0x382>
    c42e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c430:	6013      	str	r3, [r2, #0]
    c432:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c434:	2b00      	cmp	r3, #0
    c436:	f43f af2a 	beq.w	c28e <_strtod_l+0x1de>
    c43a:	eeb1 8b48 	vneg.f64	d8, d8
    c43e:	eeb0 0b48 	vmov.f64	d0, d8
    c442:	b017      	add	sp, #92	; 0x5c
    c444:	ecbd 8b10 	vpop	{d8-d15}
    c448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c44c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c44e:	900b      	str	r0, [sp, #44]	; 0x2c
    c450:	1c5a      	adds	r2, r3, #1
    c452:	9211      	str	r2, [sp, #68]	; 0x44
    c454:	785c      	ldrb	r4, [r3, #1]
    c456:	46ae      	mov	lr, r5
    c458:	e6f8      	b.n	c24c <_strtod_l+0x19c>
    c45a:	bf00      	nop
    c45c:	f3af 8000 	nop.w
	...
    c468:	200007f8 	.word	0x200007f8
    c46c:	200002a8 	.word	0x200002a8
    c470:	20000ebc 	.word	0x20000ebc
    c474:	20000798 	.word	0x20000798
    c478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c47a:	1aeb      	subs	r3, r5, r3
    c47c:	4413      	add	r3, r2
    c47e:	2b00      	cmp	r3, #0
    c480:	f340 82b0 	ble.w	c9e4 <_strtod_l+0x934>
    c484:	f013 010f 	ands.w	r1, r3, #15
    c488:	d00a      	beq.n	c4a0 <_strtod_l+0x3f0>
    c48a:	4ac3      	ldr	r2, [pc, #780]	; (c798 <_strtod_l+0x6e8>)
    c48c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    c490:	ed9d 6b04 	vldr	d6, [sp, #16]
    c494:	ed92 7b00 	vldr	d7, [r2]
    c498:	ee27 7b06 	vmul.f64	d7, d7, d6
    c49c:	ed8d 7b04 	vstr	d7, [sp, #16]
    c4a0:	f033 020f 	bics.w	r2, r3, #15
    c4a4:	f040 8238 	bne.w	c918 <_strtod_l+0x868>
    c4a8:	2300      	movs	r3, #0
    c4aa:	9308      	str	r3, [sp, #32]
    c4ac:	9600      	str	r6, [sp, #0]
    c4ae:	462b      	mov	r3, r5
    c4b0:	4672      	mov	r2, lr
    c4b2:	4639      	mov	r1, r7
    c4b4:	4640      	mov	r0, r8
    c4b6:	f005 fc0f 	bl	11cd8 <__s2b>
    c4ba:	4681      	mov	r9, r0
    c4bc:	2800      	cmp	r0, #0
    c4be:	f000 82e1 	beq.w	ca84 <_strtod_l+0x9d4>
    c4c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c4c4:	eba3 0b0b 	sub.w	fp, r3, fp
    c4c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4ca:	ed9f eba9 	vldr	d14, [pc, #676]	; c770 <_strtod_l+0x6c0>
    c4ce:	2b00      	cmp	r3, #0
    c4d0:	ed9f cba9 	vldr	d12, [pc, #676]	; c778 <_strtod_l+0x6c8>
    c4d4:	ed9f dbaa 	vldr	d13, [pc, #680]	; c780 <_strtod_l+0x6d0>
    c4d8:	ed9f bbab 	vldr	d11, [pc, #684]	; c788 <_strtod_l+0x6d8>
    c4dc:	bfb4      	ite	lt
    c4de:	465a      	movlt	r2, fp
    c4e0:	2200      	movge	r2, #0
    c4e2:	f04f 0a00 	mov.w	sl, #0
    c4e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    c4ea:	920b      	str	r2, [sp, #44]	; 0x2c
    c4ec:	930c      	str	r3, [sp, #48]	; 0x30
    c4ee:	4654      	mov	r4, sl
    c4f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
    c4f4:	4640      	mov	r0, r8
    c4f6:	f005 fb6d 	bl	11bd4 <_Balloc>
    c4fa:	4606      	mov	r6, r0
    c4fc:	2800      	cmp	r0, #0
    c4fe:	f000 810e 	beq.w	c71e <_strtod_l+0x66e>
    c502:	f8d9 2010 	ldr.w	r2, [r9, #16]
    c506:	ed9d 8b04 	vldr	d8, [sp, #16]
    c50a:	3202      	adds	r2, #2
    c50c:	0092      	lsls	r2, r2, #2
    c50e:	f109 010c 	add.w	r1, r9, #12
    c512:	300c      	adds	r0, #12
    c514:	f7fd fa1a 	bl	994c <memcpy>
    c518:	eeb0 0b48 	vmov.f64	d0, d8
    c51c:	aa14      	add	r2, sp, #80	; 0x50
    c51e:	a913      	add	r1, sp, #76	; 0x4c
    c520:	4640      	mov	r0, r8
    c522:	f005 ff95 	bl	12450 <__d2b>
    c526:	9012      	str	r0, [sp, #72]	; 0x48
    c528:	2800      	cmp	r0, #0
    c52a:	f000 80e4 	beq.w	c6f6 <_strtod_l+0x646>
    c52e:	2101      	movs	r1, #1
    c530:	4640      	mov	r0, r8
    c532:	f005 fc79 	bl	11e28 <__i2b>
    c536:	4604      	mov	r4, r0
    c538:	2800      	cmp	r0, #0
    c53a:	f000 80f0 	beq.w	c71e <_strtod_l+0x66e>
    c53e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c540:	2a00      	cmp	r2, #0
    c542:	f2c0 80de 	blt.w	c702 <_strtod_l+0x652>
    c546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c548:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    c54a:	eb02 0b03 	add.w	fp, r2, r3
    c54e:	9b08      	ldr	r3, [sp, #32]
    c550:	9d14      	ldr	r5, [sp, #80]	; 0x50
    c552:	1ad2      	subs	r2, r2, r3
    c554:	442a      	add	r2, r5
    c556:	4b91      	ldr	r3, [pc, #580]	; (c79c <_strtod_l+0x6ec>)
    c558:	3a01      	subs	r2, #1
    c55a:	429a      	cmp	r2, r3
    c55c:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    c560:	f280 8098 	bge.w	c694 <_strtod_l+0x5e4>
    c564:	1a99      	subs	r1, r3, r2
    c566:	291f      	cmp	r1, #31
    c568:	eba5 0501 	sub.w	r5, r5, r1
    c56c:	f300 80e3 	bgt.w	c736 <_strtod_l+0x686>
    c570:	2201      	movs	r2, #1
    c572:	fa02 f301 	lsl.w	r3, r2, r1
    c576:	930d      	str	r3, [sp, #52]	; 0x34
    c578:	2300      	movs	r3, #0
    c57a:	930e      	str	r3, [sp, #56]	; 0x38
    c57c:	442f      	add	r7, r5
    c57e:	9b08      	ldr	r3, [sp, #32]
    c580:	445d      	add	r5, fp
    c582:	45ab      	cmp	fp, r5
    c584:	465a      	mov	r2, fp
    c586:	441f      	add	r7, r3
    c588:	bfa8      	it	ge
    c58a:	462a      	movge	r2, r5
    c58c:	42ba      	cmp	r2, r7
    c58e:	bfa8      	it	ge
    c590:	463a      	movge	r2, r7
    c592:	2a00      	cmp	r2, #0
    c594:	dd03      	ble.n	c59e <_strtod_l+0x4ee>
    c596:	1aad      	subs	r5, r5, r2
    c598:	1abf      	subs	r7, r7, r2
    c59a:	ebab 0b02 	sub.w	fp, fp, r2
    c59e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5a0:	2b00      	cmp	r3, #0
    c5a2:	f300 8088 	bgt.w	c6b6 <_strtod_l+0x606>
    c5a6:	2d00      	cmp	r5, #0
    c5a8:	f300 809c 	bgt.w	c6e4 <_strtod_l+0x634>
    c5ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c5ae:	2b00      	cmp	r3, #0
    c5b0:	f300 80b7 	bgt.w	c722 <_strtod_l+0x672>
    c5b4:	2f00      	cmp	r7, #0
    c5b6:	f300 80a9 	bgt.w	c70c <_strtod_l+0x65c>
    c5ba:	f1bb 0f00 	cmp.w	fp, #0
    c5be:	dd08      	ble.n	c5d2 <_strtod_l+0x522>
    c5c0:	4621      	mov	r1, r4
    c5c2:	465a      	mov	r2, fp
    c5c4:	4640      	mov	r0, r8
    c5c6:	f005 fd6b 	bl	120a0 <__lshift>
    c5ca:	4604      	mov	r4, r0
    c5cc:	2800      	cmp	r0, #0
    c5ce:	f000 80a6 	beq.w	c71e <_strtod_l+0x66e>
    c5d2:	9912      	ldr	r1, [sp, #72]	; 0x48
    c5d4:	4632      	mov	r2, r6
    c5d6:	4640      	mov	r0, r8
    c5d8:	f005 fdfc 	bl	121d4 <__mdiff>
    c5dc:	4682      	mov	sl, r0
    c5de:	2800      	cmp	r0, #0
    c5e0:	f000 809d 	beq.w	c71e <_strtod_l+0x66e>
    c5e4:	2300      	movs	r3, #0
    c5e6:	68c5      	ldr	r5, [r0, #12]
    c5e8:	60c3      	str	r3, [r0, #12]
    c5ea:	4621      	mov	r1, r4
    c5ec:	f005 fdd0 	bl	12190 <__mcmp>
    c5f0:	2800      	cmp	r0, #0
    c5f2:	f2c0 83c7 	blt.w	cd84 <_strtod_l+0xcd4>
    c5f6:	f000 8361 	beq.w	ccbc <_strtod_l+0xc0c>
    c5fa:	4621      	mov	r1, r4
    c5fc:	4650      	mov	r0, sl
    c5fe:	f005 ff91 	bl	12524 <__ratio>
    c602:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    c606:	eeb4 0bc7 	vcmpe.f64	d0, d7
    c60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c60e:	d846      	bhi.n	c69e <_strtod_l+0x5ee>
    c610:	2d00      	cmp	r5, #0
    c612:	f000 80cb 	beq.w	c7ac <_strtod_l+0x6fc>
    c616:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    c61a:	9805      	ldr	r0, [sp, #20]
    c61c:	4b60      	ldr	r3, [pc, #384]	; (c7a0 <_strtod_l+0x6f0>)
    c61e:	2200      	movs	r2, #0
    c620:	4960      	ldr	r1, [pc, #384]	; (c7a4 <_strtod_l+0x6f4>)
    c622:	f8df c184 	ldr.w	ip, [pc, #388]	; c7a8 <_strtod_l+0x6f8>
    c626:	ea00 0701 	and.w	r7, r0, r1
    c62a:	4567      	cmp	r7, ip
    c62c:	f000 80d4 	beq.w	c7d8 <_strtod_l+0x728>
    c630:	9908      	ldr	r1, [sp, #32]
    c632:	b159      	cbz	r1, c64c <_strtod_l+0x59c>
    c634:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    c638:	d808      	bhi.n	c64c <_strtod_l+0x59c>
    c63a:	eeb4 9bcb 	vcmpe.f64	d9, d11
    c63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c642:	f240 8156 	bls.w	c8f2 <_strtod_l+0x842>
    c646:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    c64a:	1bcb      	subs	r3, r1, r7
    c64c:	eeb0 0b48 	vmov.f64	d0, d8
    c650:	ec43 2b1a 	vmov	d10, r2, r3
    c654:	f005 fe68 	bl	12328 <__ulp>
    c658:	eeaa 8b00 	vfma.f64	d8, d10, d0
    c65c:	ed8d 8b04 	vstr	d8, [sp, #16]
    c660:	ee18 3a90 	vmov	r3, s17
    c664:	9a08      	ldr	r2, [sp, #32]
    c666:	b922      	cbnz	r2, c672 <_strtod_l+0x5c2>
    c668:	4a4e      	ldr	r2, [pc, #312]	; (c7a4 <_strtod_l+0x6f4>)
    c66a:	401a      	ands	r2, r3
    c66c:	4297      	cmp	r7, r2
    c66e:	f000 80e4 	beq.w	c83a <_strtod_l+0x78a>
    c672:	9912      	ldr	r1, [sp, #72]	; 0x48
    c674:	4640      	mov	r0, r8
    c676:	f005 fad3 	bl	11c20 <_Bfree>
    c67a:	4631      	mov	r1, r6
    c67c:	4640      	mov	r0, r8
    c67e:	f005 facf 	bl	11c20 <_Bfree>
    c682:	4621      	mov	r1, r4
    c684:	4640      	mov	r0, r8
    c686:	f005 facb 	bl	11c20 <_Bfree>
    c68a:	4651      	mov	r1, sl
    c68c:	4640      	mov	r0, r8
    c68e:	f005 fac7 	bl	11c20 <_Bfree>
    c692:	e72d      	b.n	c4f0 <_strtod_l+0x440>
    c694:	2301      	movs	r3, #1
    c696:	2100      	movs	r1, #0
    c698:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    c69c:	e76e      	b.n	c57c <_strtod_l+0x4cc>
    c69e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    c6a2:	ee20 9b09 	vmul.f64	d9, d0, d9
    c6a6:	2d00      	cmp	r5, #0
    c6a8:	d15f      	bne.n	c76a <_strtod_l+0x6ba>
    c6aa:	eeb1 7b49 	vneg.f64	d7, d9
    c6ae:	9805      	ldr	r0, [sp, #20]
    c6b0:	ec53 2b17 	vmov	r2, r3, d7
    c6b4:	e7b4      	b.n	c620 <_strtod_l+0x570>
    c6b6:	4621      	mov	r1, r4
    c6b8:	461a      	mov	r2, r3
    c6ba:	4640      	mov	r0, r8
    c6bc:	f005 fc90 	bl	11fe0 <__pow5mult>
    c6c0:	4604      	mov	r4, r0
    c6c2:	b360      	cbz	r0, c71e <_strtod_l+0x66e>
    c6c4:	4601      	mov	r1, r0
    c6c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c6c8:	4640      	mov	r0, r8
    c6ca:	f005 fbdb 	bl	11e84 <__multiply>
    c6ce:	b330      	cbz	r0, c71e <_strtod_l+0x66e>
    c6d0:	900f      	str	r0, [sp, #60]	; 0x3c
    c6d2:	9912      	ldr	r1, [sp, #72]	; 0x48
    c6d4:	4640      	mov	r0, r8
    c6d6:	f005 faa3 	bl	11c20 <_Bfree>
    c6da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c6dc:	9212      	str	r2, [sp, #72]	; 0x48
    c6de:	2d00      	cmp	r5, #0
    c6e0:	f77f af64 	ble.w	c5ac <_strtod_l+0x4fc>
    c6e4:	9912      	ldr	r1, [sp, #72]	; 0x48
    c6e6:	462a      	mov	r2, r5
    c6e8:	4640      	mov	r0, r8
    c6ea:	f005 fcd9 	bl	120a0 <__lshift>
    c6ee:	9012      	str	r0, [sp, #72]	; 0x48
    c6f0:	2800      	cmp	r0, #0
    c6f2:	f47f af5b 	bne.w	c5ac <_strtod_l+0x4fc>
    c6f6:	2322      	movs	r3, #34	; 0x22
    c6f8:	ed9f 8b25 	vldr	d8, [pc, #148]	; c790 <_strtod_l+0x6e0>
    c6fc:	f8c8 3000 	str.w	r3, [r8]
    c700:	e0bc      	b.n	c87c <_strtod_l+0x7cc>
    c702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c704:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    c708:	1a9f      	subs	r7, r3, r2
    c70a:	e720      	b.n	c54e <_strtod_l+0x49e>
    c70c:	4631      	mov	r1, r6
    c70e:	463a      	mov	r2, r7
    c710:	4640      	mov	r0, r8
    c712:	f005 fcc5 	bl	120a0 <__lshift>
    c716:	4606      	mov	r6, r0
    c718:	2800      	cmp	r0, #0
    c71a:	f47f af4e 	bne.w	c5ba <_strtod_l+0x50a>
    c71e:	9812      	ldr	r0, [sp, #72]	; 0x48
    c720:	e7e9      	b.n	c6f6 <_strtod_l+0x646>
    c722:	4631      	mov	r1, r6
    c724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c726:	4640      	mov	r0, r8
    c728:	f005 fc5a 	bl	11fe0 <__pow5mult>
    c72c:	4606      	mov	r6, r0
    c72e:	2800      	cmp	r0, #0
    c730:	f47f af40 	bne.w	c5b4 <_strtod_l+0x504>
    c734:	e7f3      	b.n	c71e <_strtod_l+0x66e>
    c736:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    c73a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    c73e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    c742:	2101      	movs	r1, #1
    c744:	32e2      	adds	r2, #226	; 0xe2
    c746:	fa01 f302 	lsl.w	r3, r1, r2
    c74a:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    c74e:	e715      	b.n	c57c <_strtod_l+0x4cc>
    c750:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    c754:	f04f 0b00 	mov.w	fp, #0
    c758:	e5c0      	b.n	c2dc <_strtod_l+0x22c>
    c75a:	2301      	movs	r3, #1
    c75c:	930a      	str	r3, [sp, #40]	; 0x28
    c75e:	f10a 0302 	add.w	r3, sl, #2
    c762:	9311      	str	r3, [sp, #68]	; 0x44
    c764:	f89a 4002 	ldrb.w	r4, [sl, #2]
    c768:	e602      	b.n	c370 <_strtod_l+0x2c0>
    c76a:	eeb0 7b49 	vmov.f64	d7, d9
    c76e:	e79e      	b.n	c6ae <_strtod_l+0x5fe>
    c770:	94a03595 	.word	0x94a03595
    c774:	3fcfffff 	.word	0x3fcfffff
    c778:	94a03595 	.word	0x94a03595
    c77c:	3fdfffff 	.word	0x3fdfffff
    c780:	35afe535 	.word	0x35afe535
    c784:	3fe00000 	.word	0x3fe00000
    c788:	ffc00000 	.word	0xffc00000
    c78c:	41dfffff 	.word	0x41dfffff
    c790:	00000000 	.word	0x00000000
    c794:	7ff00000 	.word	0x7ff00000
    c798:	200002a8 	.word	0x200002a8
    c79c:	fffffc02 	.word	0xfffffc02
    c7a0:	3ff00000 	.word	0x3ff00000
    c7a4:	7ff00000 	.word	0x7ff00000
    c7a8:	7fe00000 	.word	0x7fe00000
    c7ac:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    c7b0:	2900      	cmp	r1, #0
    c7b2:	f000 8085 	beq.w	c8c0 <_strtod_l+0x810>
    c7b6:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    c7ba:	2901      	cmp	r1, #1
    c7bc:	f000 81d8 	beq.w	cb70 <_strtod_l+0xac0>
    c7c0:	4610      	mov	r0, r2
    c7c2:	4bb7      	ldr	r3, [pc, #732]	; (caa0 <_strtod_l+0x9f0>)
    c7c4:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    c7c8:	2200      	movs	r2, #0
    c7ca:	e729      	b.n	c620 <_strtod_l+0x570>
    c7cc:	2c65      	cmp	r4, #101	; 0x65
    c7ce:	f04f 0c01 	mov.w	ip, #1
    c7d2:	f43f adbe 	beq.w	c352 <_strtod_l+0x2a2>
    c7d6:	e54c      	b.n	c272 <_strtod_l+0x1c2>
    c7d8:	ec43 2b1a 	vmov	d10, r2, r3
    c7dc:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    c7e0:	9305      	str	r3, [sp, #20]
    c7e2:	ed9d fb04 	vldr	d15, [sp, #16]
    c7e6:	eeb0 0b4f 	vmov.f64	d0, d15
    c7ea:	f005 fd9d 	bl	12328 <__ulp>
    c7ee:	49ad      	ldr	r1, [pc, #692]	; (caa4 <_strtod_l+0x9f4>)
    c7f0:	eeaa fb00 	vfma.f64	d15, d10, d0
    c7f4:	ee1f 3a90 	vmov	r3, s31
    c7f8:	4aab      	ldr	r2, [pc, #684]	; (caa8 <_strtod_l+0x9f8>)
    c7fa:	4019      	ands	r1, r3
    c7fc:	4291      	cmp	r1, r2
    c7fe:	ed8d fb04 	vstr	d15, [sp, #16]
    c802:	d972      	bls.n	c8ea <_strtod_l+0x83a>
    c804:	4ba9      	ldr	r3, [pc, #676]	; (caac <_strtod_l+0x9fc>)
    c806:	ee18 2a90 	vmov	r2, s17
    c80a:	429a      	cmp	r2, r3
    c80c:	d103      	bne.n	c816 <_strtod_l+0x766>
    c80e:	ee18 3a10 	vmov	r3, s16
    c812:	3301      	adds	r3, #1
    c814:	d083      	beq.n	c71e <_strtod_l+0x66e>
    c816:	4aa5      	ldr	r2, [pc, #660]	; (caac <_strtod_l+0x9fc>)
    c818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c81c:	e9cd 3204 	strd	r3, r2, [sp, #16]
    c820:	e727      	b.n	c672 <_strtod_l+0x5c2>
    c822:	2300      	movs	r3, #0
    c824:	930a      	str	r3, [sp, #40]	; 0x28
    c826:	e79a      	b.n	c75e <_strtod_l+0x6ae>
    c828:	2c65      	cmp	r4, #101	; 0x65
    c82a:	f000 80d0 	beq.w	c9ce <_strtod_l+0x91e>
    c82e:	2c45      	cmp	r4, #69	; 0x45
    c830:	f000 80cd 	beq.w	c9ce <_strtod_l+0x91e>
    c834:	f04f 0c01 	mov.w	ip, #1
    c838:	e5d1      	b.n	c3de <_strtod_l+0x32e>
    c83a:	ec51 0b19 	vmov	r0, r1, d9
    c83e:	930d      	str	r3, [sp, #52]	; 0x34
    c840:	f009 fb7e 	bl	15f40 <__aeabi_d2lz>
    c844:	f009 fb4e 	bl	15ee4 <__aeabi_l2d>
    c848:	9b04      	ldr	r3, [sp, #16]
    c84a:	431d      	orrs	r5, r3
    c84c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c84e:	ec41 0b17 	vmov	d7, r0, r1
    c852:	f3c3 0313 	ubfx	r3, r3, #0, #20
    c856:	431d      	orrs	r5, r3
    c858:	ee39 9b47 	vsub.f64	d9, d9, d7
    c85c:	f000 80a0 	beq.w	c9a0 <_strtod_l+0x8f0>
    c860:	eeb4 9bcc 	vcmpe.f64	d9, d12
    c864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c868:	d405      	bmi.n	c876 <_strtod_l+0x7c6>
    c86a:	eeb4 9bcd 	vcmpe.f64	d9, d13
    c86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c872:	f77f aefe 	ble.w	c672 <_strtod_l+0x5c2>
    c876:	ed9d 8b04 	vldr	d8, [sp, #16]
    c87a:	9812      	ldr	r0, [sp, #72]	; 0x48
    c87c:	4601      	mov	r1, r0
    c87e:	4640      	mov	r0, r8
    c880:	f005 f9ce 	bl	11c20 <_Bfree>
    c884:	4631      	mov	r1, r6
    c886:	4640      	mov	r0, r8
    c888:	f005 f9ca 	bl	11c20 <_Bfree>
    c88c:	4621      	mov	r1, r4
    c88e:	4640      	mov	r0, r8
    c890:	f005 f9c6 	bl	11c20 <_Bfree>
    c894:	4649      	mov	r1, r9
    c896:	4640      	mov	r0, r8
    c898:	f005 f9c2 	bl	11c20 <_Bfree>
    c89c:	4651      	mov	r1, sl
    c89e:	4640      	mov	r0, r8
    c8a0:	f005 f9be 	bl	11c20 <_Bfree>
    c8a4:	e5c1      	b.n	c42a <_strtod_l+0x37a>
    c8a6:	2201      	movs	r2, #1
    c8a8:	9209      	str	r2, [sp, #36]	; 0x24
    c8aa:	1c79      	adds	r1, r7, #1
    c8ac:	9111      	str	r1, [sp, #68]	; 0x44
    c8ae:	787a      	ldrb	r2, [r7, #1]
    c8b0:	2a00      	cmp	r2, #0
    c8b2:	f43f ace5 	beq.w	c280 <_strtod_l+0x1d0>
    c8b6:	460f      	mov	r7, r1
    c8b8:	e470      	b.n	c19c <_strtod_l+0xec>
    c8ba:	2200      	movs	r2, #0
    c8bc:	9209      	str	r2, [sp, #36]	; 0x24
    c8be:	e7f4      	b.n	c8aa <_strtod_l+0x7fa>
    c8c0:	f3c2 0313 	ubfx	r3, r2, #0, #20
    c8c4:	4610      	mov	r0, r2
    c8c6:	2b00      	cmp	r3, #0
    c8c8:	f47f af7b 	bne.w	c7c2 <_strtod_l+0x712>
    c8cc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    c8d0:	eeb4 0bc7 	vcmpe.f64	d0, d7
    c8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c8d8:	f100 81d3 	bmi.w	cc82 <_strtod_l+0xbd2>
    c8dc:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    c8e0:	ee20 9b09 	vmul.f64	d9, d0, d9
    c8e4:	eeb1 7b49 	vneg.f64	d7, d9
    c8e8:	e6e2      	b.n	c6b0 <_strtod_l+0x600>
    c8ea:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    c8ee:	9305      	str	r3, [sp, #20]
    c8f0:	e6b8      	b.n	c664 <_strtod_l+0x5b4>
    c8f2:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    c8f6:	ee19 3a10 	vmov	r3, s18
    c8fa:	2b01      	cmp	r3, #1
    c8fc:	bf38      	it	cc
    c8fe:	2301      	movcc	r3, #1
    c900:	ee09 3a10 	vmov	s18, r3
    c904:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    c908:	2d00      	cmp	r5, #0
    c90a:	f040 813e 	bne.w	cb8a <_strtod_l+0xada>
    c90e:	eeb1 7b49 	vneg.f64	d7, d9
    c912:	ec53 2b17 	vmov	r2, r3, d7
    c916:	e696      	b.n	c646 <_strtod_l+0x596>
    c918:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    c91c:	f300 80b2 	bgt.w	ca84 <_strtod_l+0x9d4>
    c920:	2a10      	cmp	r2, #16
    c922:	ea4f 1322 	mov.w	r3, r2, asr #4
    c926:	f340 8286 	ble.w	ce36 <_strtod_l+0xd86>
    c92a:	4c61      	ldr	r4, [pc, #388]	; (cab0 <_strtod_l+0xa00>)
    c92c:	ed9d 7b04 	vldr	d7, [sp, #16]
    c930:	2000      	movs	r0, #0
    c932:	4622      	mov	r2, r4
    c934:	4601      	mov	r1, r0
    c936:	f013 0f01 	tst.w	r3, #1
    c93a:	f101 0101 	add.w	r1, r1, #1
    c93e:	ea4f 0363 	mov.w	r3, r3, asr #1
    c942:	d004      	beq.n	c94e <_strtod_l+0x89e>
    c944:	ed92 6b00 	vldr	d6, [r2]
    c948:	2001      	movs	r0, #1
    c94a:	ee27 7b06 	vmul.f64	d7, d7, d6
    c94e:	2b01      	cmp	r3, #1
    c950:	f102 0208 	add.w	r2, r2, #8
    c954:	d1ef      	bne.n	c936 <_strtod_l+0x886>
    c956:	b108      	cbz	r0, c95c <_strtod_l+0x8ac>
    c958:	ed8d 7b04 	vstr	d7, [sp, #16]
    c95c:	9b05      	ldr	r3, [sp, #20]
    c95e:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    c962:	9305      	str	r3, [sp, #20]
    c964:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    c968:	ed9d 6b04 	vldr	d6, [sp, #16]
    c96c:	ed94 7b00 	vldr	d7, [r4]
    c970:	4b4c      	ldr	r3, [pc, #304]	; (caa4 <_strtod_l+0x9f4>)
    c972:	ee27 7b06 	vmul.f64	d7, d7, d6
    c976:	ee17 2a90 	vmov	r2, s15
    c97a:	494e      	ldr	r1, [pc, #312]	; (cab4 <_strtod_l+0xa04>)
    c97c:	4013      	ands	r3, r2
    c97e:	428b      	cmp	r3, r1
    c980:	ed8d 7b04 	vstr	d7, [sp, #16]
    c984:	d87e      	bhi.n	ca84 <_strtod_l+0x9d4>
    c986:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    c98a:	428b      	cmp	r3, r1
    c98c:	f240 81d6 	bls.w	cd3c <_strtod_l+0xc8c>
    c990:	4c46      	ldr	r4, [pc, #280]	; (caac <_strtod_l+0x9fc>)
    c992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c996:	e9cd 3404 	strd	r3, r4, [sp, #16]
    c99a:	2300      	movs	r3, #0
    c99c:	9308      	str	r3, [sp, #32]
    c99e:	e585      	b.n	c4ac <_strtod_l+0x3fc>
    c9a0:	eeb4 9bce 	vcmpe.f64	d9, d14
    c9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c9a8:	f57f ae63 	bpl.w	c672 <_strtod_l+0x5c2>
    c9ac:	e763      	b.n	c876 <_strtod_l+0x7c6>
    c9ae:	3216      	adds	r2, #22
    c9b0:	f6ff ad62 	blt.w	c478 <_strtod_l+0x3c8>
    c9b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9b6:	eba3 0b0b 	sub.w	fp, r3, fp
    c9ba:	4b3f      	ldr	r3, [pc, #252]	; (cab8 <_strtod_l+0xa08>)
    c9bc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    c9c0:	ed93 7b00 	vldr	d7, [r3]
    c9c4:	ed9d 6b04 	vldr	d6, [sp, #16]
    c9c8:	ee86 8b07 	vdiv.f64	d8, d6, d7
    c9cc:	e52d      	b.n	c42a <_strtod_l+0x37a>
    c9ce:	f04f 0e00 	mov.w	lr, #0
    c9d2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    c9d6:	f04f 0c01 	mov.w	ip, #1
    c9da:	e44e      	b.n	c27a <_strtod_l+0x1ca>
    c9dc:	2c6e      	cmp	r4, #110	; 0x6e
    c9de:	f43f ad10 	beq.w	c402 <_strtod_l+0x352>
    c9e2:	e44d      	b.n	c280 <_strtod_l+0x1d0>
    c9e4:	f43f ad60 	beq.w	c4a8 <_strtod_l+0x3f8>
    c9e8:	425b      	negs	r3, r3
    c9ea:	f013 010f 	ands.w	r1, r3, #15
    c9ee:	d00a      	beq.n	ca06 <_strtod_l+0x956>
    c9f0:	4a31      	ldr	r2, [pc, #196]	; (cab8 <_strtod_l+0xa08>)
    c9f2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    c9f6:	ed9d 6b04 	vldr	d6, [sp, #16]
    c9fa:	ed92 7b00 	vldr	d7, [r2]
    c9fe:	ee86 7b07 	vdiv.f64	d7, d6, d7
    ca02:	ed8d 7b04 	vstr	d7, [sp, #16]
    ca06:	111b      	asrs	r3, r3, #4
    ca08:	f43f ad4e 	beq.w	c4a8 <_strtod_l+0x3f8>
    ca0c:	2b1f      	cmp	r3, #31
    ca0e:	dc33      	bgt.n	ca78 <_strtod_l+0x9c8>
    ca10:	f013 0210 	ands.w	r2, r3, #16
    ca14:	bf18      	it	ne
    ca16:	226a      	movne	r2, #106	; 0x6a
    ca18:	ed9d 7b04 	vldr	d7, [sp, #16]
    ca1c:	9208      	str	r2, [sp, #32]
    ca1e:	4a27      	ldr	r2, [pc, #156]	; (cabc <_strtod_l+0xa0c>)
    ca20:	2100      	movs	r1, #0
    ca22:	07d8      	lsls	r0, r3, #31
    ca24:	d504      	bpl.n	ca30 <_strtod_l+0x980>
    ca26:	ed92 6b00 	vldr	d6, [r2]
    ca2a:	2101      	movs	r1, #1
    ca2c:	ee27 7b06 	vmul.f64	d7, d7, d6
    ca30:	105b      	asrs	r3, r3, #1
    ca32:	f102 0208 	add.w	r2, r2, #8
    ca36:	d1f4      	bne.n	ca22 <_strtod_l+0x972>
    ca38:	b109      	cbz	r1, ca3e <_strtod_l+0x98e>
    ca3a:	ed8d 7b04 	vstr	d7, [sp, #16]
    ca3e:	9b08      	ldr	r3, [sp, #32]
    ca40:	b193      	cbz	r3, ca68 <_strtod_l+0x9b8>
    ca42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ca46:	f3c1 520a 	ubfx	r2, r1, #20, #11
    ca4a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    ca4e:	2b00      	cmp	r3, #0
    ca50:	dd0a      	ble.n	ca68 <_strtod_l+0x9b8>
    ca52:	2b1f      	cmp	r3, #31
    ca54:	f340 822f 	ble.w	ceb6 <_strtod_l+0xe06>
    ca58:	2000      	movs	r0, #0
    ca5a:	2b34      	cmp	r3, #52	; 0x34
    ca5c:	9004      	str	r0, [sp, #16]
    ca5e:	f340 8240 	ble.w	cee2 <_strtod_l+0xe32>
    ca62:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    ca66:	9305      	str	r3, [sp, #20]
    ca68:	ed9d 7b04 	vldr	d7, [sp, #16]
    ca6c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    ca70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ca74:	f47f ad1a 	bne.w	c4ac <_strtod_l+0x3fc>
    ca78:	2322      	movs	r3, #34	; 0x22
    ca7a:	ed9f 8b05 	vldr	d8, [pc, #20]	; ca90 <_strtod_l+0x9e0>
    ca7e:	f8c8 3000 	str.w	r3, [r8]
    ca82:	e4d2      	b.n	c42a <_strtod_l+0x37a>
    ca84:	2322      	movs	r3, #34	; 0x22
    ca86:	ed9f 8b04 	vldr	d8, [pc, #16]	; ca98 <_strtod_l+0x9e8>
    ca8a:	f8c8 3000 	str.w	r3, [r8]
    ca8e:	e4cc      	b.n	c42a <_strtod_l+0x37a>
	...
    ca9c:	7ff00000 	.word	0x7ff00000
    caa0:	bff00000 	.word	0xbff00000
    caa4:	7ff00000 	.word	0x7ff00000
    caa8:	7c9fffff 	.word	0x7c9fffff
    caac:	7fefffff 	.word	0x7fefffff
    cab0:	20000280 	.word	0x20000280
    cab4:	7ca00000 	.word	0x7ca00000
    cab8:	200002a8 	.word	0x200002a8
    cabc:	20000370 	.word	0x20000370
    cac0:	9302      	str	r3, [sp, #8]
    cac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cac4:	9301      	str	r3, [sp, #4]
    cac6:	ab12      	add	r3, sp, #72	; 0x48
    cac8:	9300      	str	r3, [sp, #0]
    caca:	4aa7      	ldr	r2, [pc, #668]	; (cd68 <_strtod_l+0xcb8>)
    cacc:	ab13      	add	r3, sp, #76	; 0x4c
    cace:	a911      	add	r1, sp, #68	; 0x44
    cad0:	4640      	mov	r0, r8
    cad2:	f001 fadf 	bl	e094 <__gethex>
    cad6:	f010 050f 	ands.w	r5, r0, #15
    cada:	4604      	mov	r4, r0
    cadc:	f43f aca3 	beq.w	c426 <_strtod_l+0x376>
    cae0:	2d06      	cmp	r5, #6
    cae2:	d174      	bne.n	cbce <_strtod_l+0xb1e>
    cae4:	9b07      	ldr	r3, [sp, #28]
    cae6:	ed9f 8b9a 	vldr	d8, [pc, #616]	; cd50 <_strtod_l+0xca0>
    caea:	3701      	adds	r7, #1
    caec:	2b00      	cmp	r3, #0
    caee:	f43f abce 	beq.w	c28e <_strtod_l+0x1de>
    caf2:	601f      	str	r7, [r3, #0]
    caf4:	f7ff bbcb 	b.w	c28e <_strtod_l+0x1de>
    caf8:	ed9d 8b04 	vldr	d8, [sp, #16]
    cafc:	e495      	b.n	c42a <_strtod_l+0x37a>
    cafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb00:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    cb04:	4403      	add	r3, r0
    cb06:	930b      	str	r3, [sp, #44]	; 0x2c
    cb08:	2801      	cmp	r0, #1
    cb0a:	f105 0301 	add.w	r3, r5, #1
    cb0e:	461a      	mov	r2, r3
    cb10:	d014      	beq.n	cb3c <_strtod_l+0xa8c>
    cb12:	4428      	add	r0, r5
    cb14:	1e44      	subs	r4, r0, #1
    cb16:	e003      	b.n	cb20 <_strtod_l+0xa70>
    cb18:	0046      	lsls	r6, r0, #1
    cb1a:	429c      	cmp	r4, r3
    cb1c:	d00d      	beq.n	cb3a <_strtod_l+0xa8a>
    cb1e:	3301      	adds	r3, #1
    cb20:	462a      	mov	r2, r5
    cb22:	2a08      	cmp	r2, #8
    cb24:	461d      	mov	r5, r3
    cb26:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    cb2a:	d9f5      	bls.n	cb18 <_strtod_l+0xa68>
    cb2c:	2b10      	cmp	r3, #16
    cb2e:	bfdc      	itt	le
    cb30:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    cb34:	ea4f 0949 	movle.w	r9, r9, lsl #1
    cb38:	e7ef      	b.n	cb1a <_strtod_l+0xa6a>
    cb3a:	3202      	adds	r2, #2
    cb3c:	2d08      	cmp	r5, #8
    cb3e:	dc3c      	bgt.n	cbba <_strtod_l+0xb0a>
    cb40:	4615      	mov	r5, r2
    cb42:	f7ff bb79 	b.w	c238 <_strtod_l+0x188>
    cb46:	4989      	ldr	r1, [pc, #548]	; (cd6c <_strtod_l+0xcbc>)
    cb48:	2201      	movs	r2, #1
    cb4a:	4638      	mov	r0, r7
    cb4c:	f000 fd1c 	bl	d588 <strncmp>
    cb50:	2800      	cmp	r0, #0
    cb52:	f000 8082 	beq.w	cc5a <_strtod_l+0xbaa>
    cb56:	f04f 0e00 	mov.w	lr, #0
    cb5a:	46f1      	mov	r9, lr
    cb5c:	4676      	mov	r6, lr
    cb5e:	4675      	mov	r5, lr
    cb60:	f7ff bbb5 	b.w	c2ce <_strtod_l+0x21e>
    cb64:	f644 631f 	movw	r3, #19999	; 0x4e1f
    cb68:	459b      	cmp	fp, r3
    cb6a:	bfa8      	it	ge
    cb6c:	469b      	movge	fp, r3
    cb6e:	e42f      	b.n	c3d0 <_strtod_l+0x320>
    cb70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    cb74:	4618      	mov	r0, r3
    cb76:	2b00      	cmp	r3, #0
    cb78:	f47f ae23 	bne.w	c7c2 <_strtod_l+0x712>
    cb7c:	2322      	movs	r3, #34	; 0x22
    cb7e:	ed9f 8b74 	vldr	d8, [pc, #464]	; cd50 <_strtod_l+0xca0>
    cb82:	9812      	ldr	r0, [sp, #72]	; 0x48
    cb84:	f8c8 3000 	str.w	r3, [r8]
    cb88:	e678      	b.n	c87c <_strtod_l+0x7cc>
    cb8a:	eeb0 7b49 	vmov.f64	d7, d9
    cb8e:	e6c0      	b.n	c912 <_strtod_l+0x862>
    cb90:	4977      	ldr	r1, [pc, #476]	; (cd70 <_strtod_l+0xcc0>)
    cb92:	a811      	add	r0, sp, #68	; 0x44
    cb94:	f001 fd48 	bl	e628 <__match>
    cb98:	2800      	cmp	r0, #0
    cb9a:	f43f ab71 	beq.w	c280 <_strtod_l+0x1d0>
    cb9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cba0:	4974      	ldr	r1, [pc, #464]	; (cd74 <_strtod_l+0xcc4>)
    cba2:	3b01      	subs	r3, #1
    cba4:	a811      	add	r0, sp, #68	; 0x44
    cba6:	9311      	str	r3, [sp, #68]	; 0x44
    cba8:	f001 fd3e 	bl	e628 <__match>
    cbac:	b910      	cbnz	r0, cbb4 <_strtod_l+0xb04>
    cbae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cbb0:	3301      	adds	r3, #1
    cbb2:	9311      	str	r3, [sp, #68]	; 0x44
    cbb4:	ed9f 8b68 	vldr	d8, [pc, #416]	; cd58 <_strtod_l+0xca8>
    cbb8:	e437      	b.n	c42a <_strtod_l+0x37a>
    cbba:	2a10      	cmp	r2, #16
    cbbc:	bfdc      	itt	le
    cbbe:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    cbc2:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    cbc6:	4615      	mov	r5, r2
    cbc8:	2000      	movs	r0, #0
    cbca:	f7ff bb3a 	b.w	c242 <_strtod_l+0x192>
    cbce:	9a12      	ldr	r2, [sp, #72]	; 0x48
    cbd0:	b13a      	cbz	r2, cbe2 <_strtod_l+0xb32>
    cbd2:	2135      	movs	r1, #53	; 0x35
    cbd4:	a814      	add	r0, sp, #80	; 0x50
    cbd6:	f005 fcd7 	bl	12588 <__copybits>
    cbda:	9912      	ldr	r1, [sp, #72]	; 0x48
    cbdc:	4640      	mov	r0, r8
    cbde:	f005 f81f 	bl	11c20 <_Bfree>
    cbe2:	3d01      	subs	r5, #1
    cbe4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cbe6:	2d04      	cmp	r5, #4
    cbe8:	f200 818f 	bhi.w	cf0a <_strtod_l+0xe5a>
    cbec:	e8df f005 	tbb	[pc, r5]
    cbf0:	1f2a2d03 	.word	0x1f2a2d03
    cbf4:	03          	.byte	0x03
    cbf5:	00          	.byte	0x00
    cbf6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cbf8:	9204      	str	r2, [sp, #16]
    cbfa:	f203 4233 	addw	r2, r3, #1075	; 0x433
    cbfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cc00:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    cc04:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    cc08:	9305      	str	r3, [sp, #20]
    cc0a:	05e5      	lsls	r5, r4, #23
    cc0c:	d502      	bpl.n	cc14 <_strtod_l+0xb64>
    cc0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cc12:	9305      	str	r3, [sp, #20]
    cc14:	4a58      	ldr	r2, [pc, #352]	; (cd78 <_strtod_l+0xcc8>)
    cc16:	401a      	ands	r2, r3
    cc18:	ed9d 8b04 	vldr	d8, [sp, #16]
    cc1c:	2a00      	cmp	r2, #0
    cc1e:	f47f ac04 	bne.w	c42a <_strtod_l+0x37a>
    cc22:	f000 fdcd 	bl	d7c0 <__errno>
    cc26:	2322      	movs	r3, #34	; 0x22
    cc28:	6003      	str	r3, [r0, #0]
    cc2a:	f7ff bbfe 	b.w	c42a <_strtod_l+0x37a>
    cc2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cc32:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    cc36:	e9cd 3604 	strd	r3, r6, [sp, #16]
    cc3a:	05e3      	lsls	r3, r4, #23
    cc3c:	f57f af5c 	bpl.w	caf8 <_strtod_l+0xa48>
    cc40:	9b05      	ldr	r3, [sp, #20]
    cc42:	e7e4      	b.n	cc0e <_strtod_l+0xb5e>
    cc44:	4b4c      	ldr	r3, [pc, #304]	; (cd78 <_strtod_l+0xcc8>)
    cc46:	9305      	str	r3, [sp, #20]
    cc48:	e7f7      	b.n	cc3a <_strtod_l+0xb8a>
    cc4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cc4c:	9304      	str	r3, [sp, #16]
    cc4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cc50:	9305      	str	r3, [sp, #20]
    cc52:	e7da      	b.n	cc0a <_strtod_l+0xb5a>
    cc54:	2000      	movs	r0, #0
    cc56:	f7ff bae1 	b.w	c21c <_strtod_l+0x16c>
    cc5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cc5c:	461a      	mov	r2, r3
    cc5e:	3301      	adds	r3, #1
    cc60:	9311      	str	r3, [sp, #68]	; 0x44
    cc62:	7854      	ldrb	r4, [r2, #1]
    cc64:	4606      	mov	r6, r0
    cc66:	4681      	mov	r9, r0
    cc68:	f7ff bacd 	b.w	c206 <_strtod_l+0x156>
    cc6c:	4b43      	ldr	r3, [pc, #268]	; (cd7c <_strtod_l+0xccc>)
    cc6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    cc72:	ed93 8b00 	vldr	d8, [r3]
    cc76:	ed9d 7b04 	vldr	d7, [sp, #16]
    cc7a:	ee28 8b07 	vmul.f64	d8, d8, d7
    cc7e:	f7ff bbd4 	b.w	c42a <_strtod_l+0x37a>
    cc82:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    cc86:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    cc8a:	e511      	b.n	c6b0 <_strtod_l+0x600>
    cc8c:	46ae      	mov	lr, r5
    cc8e:	900b      	str	r0, [sp, #44]	; 0x2c
    cc90:	f7ff badc 	b.w	c24c <_strtod_l+0x19c>
    cc94:	4b39      	ldr	r3, [pc, #228]	; (cd7c <_strtod_l+0xccc>)
    cc96:	f1c5 050f 	rsb	r5, r5, #15
    cc9a:	1b4a      	subs	r2, r1, r5
    cc9c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    cca0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    cca4:	ed95 8b00 	vldr	d8, [r5]
    cca8:	ed93 7b00 	vldr	d7, [r3]
    ccac:	ed9d 6b04 	vldr	d6, [sp, #16]
    ccb0:	ee28 8b06 	vmul.f64	d8, d8, d6
    ccb4:	ee28 8b07 	vmul.f64	d8, d8, d7
    ccb8:	f7ff bbb7 	b.w	c42a <_strtod_l+0x37a>
    ccbc:	2d00      	cmp	r5, #0
    ccbe:	f000 8095 	beq.w	cdec <_strtod_l+0xd3c>
    ccc2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    ccc6:	4b2e      	ldr	r3, [pc, #184]	; (cd80 <_strtod_l+0xcd0>)
    ccc8:	f3cc 0113 	ubfx	r1, ip, #0, #20
    cccc:	4299      	cmp	r1, r3
    ccce:	4662      	mov	r2, ip
    ccd0:	f000 80d2 	beq.w	ce78 <_strtod_l+0xdc8>
    ccd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ccd6:	2b00      	cmp	r3, #0
    ccd8:	f000 80a5 	beq.w	ce26 <_strtod_l+0xd76>
    ccdc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    cce0:	4213      	tst	r3, r2
    cce2:	4617      	mov	r7, r2
    cce4:	d01a      	beq.n	cd1c <_strtod_l+0xc6c>
    cce6:	eeb0 0b48 	vmov.f64	d0, d8
    ccea:	2d00      	cmp	r5, #0
    ccec:	f000 80a6 	beq.w	ce3c <_strtod_l+0xd8c>
    ccf0:	f005 fb1a 	bl	12328 <__ulp>
    ccf4:	9b08      	ldr	r3, [sp, #32]
    ccf6:	b17b      	cbz	r3, cd18 <_strtod_l+0xc68>
    ccf8:	f3c7 530a 	ubfx	r3, r7, #20, #11
    ccfc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    cd00:	2b00      	cmp	r3, #0
    cd02:	dd09      	ble.n	cd18 <_strtod_l+0xc68>
    cd04:	051b      	lsls	r3, r3, #20
    cd06:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    cd0a:	2000      	movs	r0, #0
    cd0c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    cd10:	ec41 0b17 	vmov	d7, r0, r1
    cd14:	ee20 0b07 	vmul.f64	d0, d0, d7
    cd18:	ee38 8b00 	vadd.f64	d8, d8, d0
    cd1c:	9b08      	ldr	r3, [sp, #32]
    cd1e:	b15b      	cbz	r3, cd38 <_strtod_l+0xc88>
    cd20:	ed9f 7b0f 	vldr	d7, [pc, #60]	; cd60 <_strtod_l+0xcb0>
    cd24:	4b14      	ldr	r3, [pc, #80]	; (cd78 <_strtod_l+0xcc8>)
    cd26:	ee28 8b07 	vmul.f64	d8, d8, d7
    cd2a:	ee18 2a90 	vmov	r2, s17
    cd2e:	4013      	ands	r3, r2
    cd30:	b913      	cbnz	r3, cd38 <_strtod_l+0xc88>
    cd32:	2322      	movs	r3, #34	; 0x22
    cd34:	f8c8 3000 	str.w	r3, [r8]
    cd38:	9812      	ldr	r0, [sp, #72]	; 0x48
    cd3a:	e59f      	b.n	c87c <_strtod_l+0x7cc>
    cd3c:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    cd40:	9305      	str	r3, [sp, #20]
    cd42:	2300      	movs	r3, #0
    cd44:	9308      	str	r3, [sp, #32]
    cd46:	f7ff bbb1 	b.w	c4ac <_strtod_l+0x3fc>
    cd4a:	bf00      	nop
    cd4c:	f3af 8000 	nop.w
	...
    cd5c:	7ff00000 	.word	0x7ff00000
    cd60:	00000000 	.word	0x00000000
    cd64:	39500000 	.word	0x39500000
    cd68:	20007cb0 	.word	0x20007cb0
    cd6c:	200007f8 	.word	0x200007f8
    cd70:	20000eb0 	.word	0x20000eb0
    cd74:	20000eb4 	.word	0x20000eb4
    cd78:	7ff00000 	.word	0x7ff00000
    cd7c:	200002a8 	.word	0x200002a8
    cd80:	000fffff 	.word	0x000fffff
    cd84:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    cd88:	430d      	orrs	r5, r1
    cd8a:	d1c7      	bne.n	cd1c <_strtod_l+0xc6c>
    cd8c:	f3c2 0313 	ubfx	r3, r2, #0, #20
    cd90:	4617      	mov	r7, r2
    cd92:	2b00      	cmp	r3, #0
    cd94:	d1c2      	bne.n	cd1c <_strtod_l+0xc6c>
    cd96:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    cd9a:	0d1b      	lsrs	r3, r3, #20
    cd9c:	051b      	lsls	r3, r3, #20
    cd9e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    cda2:	d9bb      	bls.n	cd1c <_strtod_l+0xc6c>
    cda4:	f8da 3014 	ldr.w	r3, [sl, #20]
    cda8:	b91b      	cbnz	r3, cdb2 <_strtod_l+0xd02>
    cdaa:	f8da 3010 	ldr.w	r3, [sl, #16]
    cdae:	2b01      	cmp	r3, #1
    cdb0:	ddb4      	ble.n	cd1c <_strtod_l+0xc6c>
    cdb2:	4651      	mov	r1, sl
    cdb4:	2201      	movs	r2, #1
    cdb6:	4640      	mov	r0, r8
    cdb8:	f005 f972 	bl	120a0 <__lshift>
    cdbc:	4621      	mov	r1, r4
    cdbe:	4682      	mov	sl, r0
    cdc0:	f005 f9e6 	bl	12190 <__mcmp>
    cdc4:	2800      	cmp	r0, #0
    cdc6:	dda9      	ble.n	cd1c <_strtod_l+0xc6c>
    cdc8:	9b08      	ldr	r3, [sp, #32]
    cdca:	2b00      	cmp	r3, #0
    cdcc:	d17e      	bne.n	cecc <_strtod_l+0xe1c>
    cdce:	4b50      	ldr	r3, [pc, #320]	; (cf10 <_strtod_l+0xe60>)
    cdd0:	403b      	ands	r3, r7
    cdd2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    cdd6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    cdda:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    cdde:	9305      	str	r3, [sp, #20]
    cde0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cde4:	9304      	str	r3, [sp, #16]
    cde6:	ed9d 8b04 	vldr	d8, [sp, #16]
    cdea:	e797      	b.n	cd1c <_strtod_l+0xc6c>
    cdec:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    cdf0:	f3c2 0313 	ubfx	r3, r2, #0, #20
    cdf4:	430b      	orrs	r3, r1
    cdf6:	4617      	mov	r7, r2
    cdf8:	f47f af6c 	bne.w	ccd4 <_strtod_l+0xc24>
    cdfc:	e7e4      	b.n	cdc8 <_strtod_l+0xd18>
    cdfe:	4945      	ldr	r1, [pc, #276]	; (cf14 <_strtod_l+0xe64>)
    ce00:	a811      	add	r0, sp, #68	; 0x44
    ce02:	aa14      	add	r2, sp, #80	; 0x50
    ce04:	f001 fc2c 	bl	e660 <__hexnan>
    ce08:	2805      	cmp	r0, #5
    ce0a:	f47f ab06 	bne.w	c41a <_strtod_l+0x36a>
    ce0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ce10:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    ce14:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    ce18:	9305      	str	r3, [sp, #20]
    ce1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ce1c:	9304      	str	r3, [sp, #16]
    ce1e:	ed9d 8b04 	vldr	d8, [sp, #16]
    ce22:	f7ff bb02 	b.w	c42a <_strtod_l+0x37a>
    ce26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ce2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ce2c:	4203      	tst	r3, r0
    ce2e:	f43f af75 	beq.w	cd1c <_strtod_l+0xc6c>
    ce32:	460f      	mov	r7, r1
    ce34:	e757      	b.n	cce6 <_strtod_l+0xc36>
    ce36:	4c38      	ldr	r4, [pc, #224]	; (cf18 <_strtod_l+0xe68>)
    ce38:	2100      	movs	r1, #0
    ce3a:	e58f      	b.n	c95c <_strtod_l+0x8ac>
    ce3c:	f005 fa74 	bl	12328 <__ulp>
    ce40:	9b08      	ldr	r3, [sp, #32]
    ce42:	2b00      	cmp	r3, #0
    ce44:	d055      	beq.n	cef2 <_strtod_l+0xe42>
    ce46:	f3c7 530a 	ubfx	r3, r7, #20, #11
    ce4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    ce4e:	2b00      	cmp	r3, #0
    ce50:	dd09      	ble.n	ce66 <_strtod_l+0xdb6>
    ce52:	051b      	lsls	r3, r3, #20
    ce54:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    ce58:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    ce5c:	4628      	mov	r0, r5
    ce5e:	ec41 0b17 	vmov	d7, r0, r1
    ce62:	ee20 0b07 	vmul.f64	d0, d0, d7
    ce66:	ee38 8b40 	vsub.f64	d8, d8, d0
    ce6a:	eeb5 8b40 	vcmp.f64	d8, #0.0
    ce6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ce72:	f47f af55 	bne.w	cd20 <_strtod_l+0xc70>
    ce76:	e681      	b.n	cb7c <_strtod_l+0xacc>
    ce78:	9b08      	ldr	r3, [sp, #32]
    ce7a:	9904      	ldr	r1, [sp, #16]
    ce7c:	b31b      	cbz	r3, cec6 <_strtod_l+0xe16>
    ce7e:	4b24      	ldr	r3, [pc, #144]	; (cf10 <_strtod_l+0xe60>)
    ce80:	4013      	ands	r3, r2
    ce82:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    ce86:	d81e      	bhi.n	cec6 <_strtod_l+0xe16>
    ce88:	0d1b      	lsrs	r3, r3, #20
    ce8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    ce8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ce92:	fa00 f303 	lsl.w	r3, r0, r3
    ce96:	4299      	cmp	r1, r3
    ce98:	f47f af1c 	bne.w	ccd4 <_strtod_l+0xc24>
    ce9c:	4b1f      	ldr	r3, [pc, #124]	; (cf1c <_strtod_l+0xe6c>)
    ce9e:	429a      	cmp	r2, r3
    cea0:	d030      	beq.n	cf04 <_strtod_l+0xe54>
    cea2:	4b1b      	ldr	r3, [pc, #108]	; (cf10 <_strtod_l+0xe60>)
    cea4:	4013      	ands	r3, r2
    cea6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    ceaa:	9305      	str	r3, [sp, #20]
    ceac:	2300      	movs	r3, #0
    ceae:	9304      	str	r3, [sp, #16]
    ceb0:	ed9d 8b04 	vldr	d8, [sp, #16]
    ceb4:	e732      	b.n	cd1c <_strtod_l+0xc6c>
    ceb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ceba:	fa02 f303 	lsl.w	r3, r2, r3
    cebe:	9a04      	ldr	r2, [sp, #16]
    cec0:	401a      	ands	r2, r3
    cec2:	9204      	str	r2, [sp, #16]
    cec4:	e5d0      	b.n	ca68 <_strtod_l+0x9b8>
    cec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ceca:	e7e4      	b.n	ce96 <_strtod_l+0xde6>
    cecc:	4b10      	ldr	r3, [pc, #64]	; (cf10 <_strtod_l+0xe60>)
    cece:	403b      	ands	r3, r7
    ced0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    ced4:	f73f af7d 	bgt.w	cdd2 <_strtod_l+0xd22>
    ced8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    cedc:	f73f af20 	bgt.w	cd20 <_strtod_l+0xc70>
    cee0:	e64c      	b.n	cb7c <_strtod_l+0xacc>
    cee2:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    cee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ceea:	4093      	lsls	r3, r2
    ceec:	400b      	ands	r3, r1
    ceee:	9305      	str	r3, [sp, #20]
    cef0:	e5ba      	b.n	ca68 <_strtod_l+0x9b8>
    cef2:	ee38 8b40 	vsub.f64	d8, d8, d0
    cef6:	eeb5 8b40 	vcmp.f64	d8, #0.0
    cefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cefe:	f47f af1b 	bne.w	cd38 <_strtod_l+0xc88>
    cf02:	e63b      	b.n	cb7c <_strtod_l+0xacc>
    cf04:	3101      	adds	r1, #1
    cf06:	d1cc      	bne.n	cea2 <_strtod_l+0xdf2>
    cf08:	e409      	b.n	c71e <_strtod_l+0x66e>
    cf0a:	2300      	movs	r3, #0
    cf0c:	e67d      	b.n	cc0a <_strtod_l+0xb5a>
    cf0e:	bf00      	nop
    cf10:	7ff00000 	.word	0x7ff00000
    cf14:	20007cc4 	.word	0x20007cc4
    cf18:	20000280 	.word	0x20000280
    cf1c:	7fefffff 	.word	0x7fefffff

0000cf20 <_strtod_r>:
    cf20:	4b01      	ldr	r3, [pc, #4]	; (cf28 <_strtod_r+0x8>)
    cf22:	f7ff b8c5 	b.w	c0b0 <_strtod_l>
    cf26:	bf00      	nop
    cf28:	2000810c 	.word	0x2000810c

0000cf2c <_strtol_l.constprop.0>:
    cf2c:	2b01      	cmp	r3, #1
    cf2e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf32:	d040      	beq.n	cfb6 <_strtol_l.constprop.0+0x8a>
    cf34:	2b24      	cmp	r3, #36	; 0x24
    cf36:	4698      	mov	r8, r3
    cf38:	d83d      	bhi.n	cfb6 <_strtol_l.constprop.0+0x8a>
    cf3a:	4d4c      	ldr	r5, [pc, #304]	; (d06c <_strtol_l.constprop.0+0x140>)
    cf3c:	468e      	mov	lr, r1
    cf3e:	4676      	mov	r6, lr
    cf40:	f81e bb01 	ldrb.w	fp, [lr], #1
    cf44:	f815 400b 	ldrb.w	r4, [r5, fp]
    cf48:	f014 0408 	ands.w	r4, r4, #8
    cf4c:	d1f7      	bne.n	cf3e <_strtol_l.constprop.0+0x12>
    cf4e:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    cf52:	d072      	beq.n	d03a <_strtol_l.constprop.0+0x10e>
    cf54:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    cf58:	bf08      	it	eq
    cf5a:	f89e b000 	ldrbeq.w	fp, [lr]
    cf5e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    cf62:	bf08      	it	eq
    cf64:	f106 0e02 	addeq.w	lr, r6, #2
    cf68:	2b00      	cmp	r3, #0
    cf6a:	d042      	beq.n	cff2 <_strtol_l.constprop.0+0xc6>
    cf6c:	2b10      	cmp	r3, #16
    cf6e:	d057      	beq.n	d020 <_strtol_l.constprop.0+0xf4>
    cf70:	fbb9 f7f8 	udiv	r7, r9, r8
    cf74:	2500      	movs	r5, #0
    cf76:	462e      	mov	r6, r5
    cf78:	fb08 9a17 	mls	sl, r8, r7, r9
    cf7c:	e005      	b.n	cf8a <_strtol_l.constprop.0+0x5e>
    cf7e:	d033      	beq.n	cfe8 <_strtol_l.constprop.0+0xbc>
    cf80:	fb08 c606 	mla	r6, r8, r6, ip
    cf84:	2501      	movs	r5, #1
    cf86:	f81e bb01 	ldrb.w	fp, [lr], #1
    cf8a:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    cf8e:	f1bc 0f09 	cmp.w	ip, #9
    cf92:	d906      	bls.n	cfa2 <_strtol_l.constprop.0+0x76>
    cf94:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    cf98:	f1bc 0f19 	cmp.w	ip, #25
    cf9c:	d812      	bhi.n	cfc4 <_strtol_l.constprop.0+0x98>
    cf9e:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    cfa2:	4563      	cmp	r3, ip
    cfa4:	dd17      	ble.n	cfd6 <_strtol_l.constprop.0+0xaa>
    cfa6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    cfaa:	d0ec      	beq.n	cf86 <_strtol_l.constprop.0+0x5a>
    cfac:	42b7      	cmp	r7, r6
    cfae:	d2e6      	bcs.n	cf7e <_strtol_l.constprop.0+0x52>
    cfb0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    cfb4:	e7e7      	b.n	cf86 <_strtol_l.constprop.0+0x5a>
    cfb6:	f000 fc03 	bl	d7c0 <__errno>
    cfba:	2316      	movs	r3, #22
    cfbc:	6003      	str	r3, [r0, #0]
    cfbe:	2000      	movs	r0, #0
    cfc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfc4:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    cfc8:	f1bc 0f19 	cmp.w	ip, #25
    cfcc:	d803      	bhi.n	cfd6 <_strtol_l.constprop.0+0xaa>
    cfce:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    cfd2:	4563      	cmp	r3, ip
    cfd4:	dce7      	bgt.n	cfa6 <_strtol_l.constprop.0+0x7a>
    cfd6:	1c6b      	adds	r3, r5, #1
    cfd8:	d027      	beq.n	d02a <_strtol_l.constprop.0+0xfe>
    cfda:	b98c      	cbnz	r4, d000 <_strtol_l.constprop.0+0xd4>
    cfdc:	b10a      	cbz	r2, cfe2 <_strtol_l.constprop.0+0xb6>
    cfde:	bba5      	cbnz	r5, d04a <_strtol_l.constprop.0+0x11e>
    cfe0:	6011      	str	r1, [r2, #0]
    cfe2:	4630      	mov	r0, r6
    cfe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfe8:	45e2      	cmp	sl, ip
    cfea:	dac9      	bge.n	cf80 <_strtol_l.constprop.0+0x54>
    cfec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    cff0:	e7c9      	b.n	cf86 <_strtol_l.constprop.0+0x5a>
    cff2:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    cff6:	d005      	beq.n	d004 <_strtol_l.constprop.0+0xd8>
    cff8:	f04f 080a 	mov.w	r8, #10
    cffc:	4643      	mov	r3, r8
    cffe:	e7b7      	b.n	cf70 <_strtol_l.constprop.0+0x44>
    d000:	4276      	negs	r6, r6
    d002:	e7eb      	b.n	cfdc <_strtol_l.constprop.0+0xb0>
    d004:	f89e 3000 	ldrb.w	r3, [lr]
    d008:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    d00c:	2b58      	cmp	r3, #88	; 0x58
    d00e:	d121      	bne.n	d054 <_strtol_l.constprop.0+0x128>
    d010:	f04f 0810 	mov.w	r8, #16
    d014:	f89e b001 	ldrb.w	fp, [lr, #1]
    d018:	4643      	mov	r3, r8
    d01a:	f10e 0e02 	add.w	lr, lr, #2
    d01e:	e7a7      	b.n	cf70 <_strtol_l.constprop.0+0x44>
    d020:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    d024:	d01a      	beq.n	d05c <_strtol_l.constprop.0+0x130>
    d026:	4698      	mov	r8, r3
    d028:	e7a2      	b.n	cf70 <_strtol_l.constprop.0+0x44>
    d02a:	2322      	movs	r3, #34	; 0x22
    d02c:	6003      	str	r3, [r0, #0]
    d02e:	b172      	cbz	r2, d04e <_strtol_l.constprop.0+0x122>
    d030:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
    d034:	464e      	mov	r6, r9
    d036:	6011      	str	r1, [r2, #0]
    d038:	e7d3      	b.n	cfe2 <_strtol_l.constprop.0+0xb6>
    d03a:	f89e b000 	ldrb.w	fp, [lr]
    d03e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    d042:	f106 0e02 	add.w	lr, r6, #2
    d046:	2401      	movs	r4, #1
    d048:	e78e      	b.n	cf68 <_strtol_l.constprop.0+0x3c>
    d04a:	46b1      	mov	r9, r6
    d04c:	e7f0      	b.n	d030 <_strtol_l.constprop.0+0x104>
    d04e:	464e      	mov	r6, r9
    d050:	4630      	mov	r0, r6
    d052:	e7c7      	b.n	cfe4 <_strtol_l.constprop.0+0xb8>
    d054:	f04f 0808 	mov.w	r8, #8
    d058:	4643      	mov	r3, r8
    d05a:	e789      	b.n	cf70 <_strtol_l.constprop.0+0x44>
    d05c:	f89e 5000 	ldrb.w	r5, [lr]
    d060:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    d064:	2d58      	cmp	r5, #88	; 0x58
    d066:	d0d3      	beq.n	d010 <_strtol_l.constprop.0+0xe4>
    d068:	4698      	mov	r8, r3
    d06a:	e781      	b.n	cf70 <_strtol_l.constprop.0+0x44>
    d06c:	20000d25 	.word	0x20000d25

0000d070 <_strtol_r>:
    d070:	f7ff bf5c 	b.w	cf2c <_strtol_l.constprop.0>

0000d074 <sscanf>:
    d074:	b40e      	push	{r1, r2, r3}
    d076:	b510      	push	{r4, lr}
    d078:	b09f      	sub	sp, #124	; 0x7c
    d07a:	ac21      	add	r4, sp, #132	; 0x84
    d07c:	f44f 7101 	mov.w	r1, #516	; 0x204
    d080:	f854 2b04 	ldr.w	r2, [r4], #4
    d084:	9201      	str	r2, [sp, #4]
    d086:	f8ad 101c 	strh.w	r1, [sp, #28]
    d08a:	9004      	str	r0, [sp, #16]
    d08c:	9008      	str	r0, [sp, #32]
    d08e:	f000 fd97 	bl	dbc0 <strlen>
    d092:	9005      	str	r0, [sp, #20]
    d094:	9009      	str	r0, [sp, #36]	; 0x24
    d096:	480b      	ldr	r0, [pc, #44]	; (d0c4 <sscanf+0x50>)
    d098:	490b      	ldr	r1, [pc, #44]	; (d0c8 <sscanf+0x54>)
    d09a:	910c      	str	r1, [sp, #48]	; 0x30
    d09c:	2300      	movs	r3, #0
    d09e:	f64f 7cff 	movw	ip, #65535	; 0xffff
    d0a2:	9310      	str	r3, [sp, #64]	; 0x40
    d0a4:	9315      	str	r3, [sp, #84]	; 0x54
    d0a6:	9a01      	ldr	r2, [sp, #4]
    d0a8:	6800      	ldr	r0, [r0, #0]
    d0aa:	f8ad c01e 	strh.w	ip, [sp, #30]
    d0ae:	4623      	mov	r3, r4
    d0b0:	a904      	add	r1, sp, #16
    d0b2:	9403      	str	r4, [sp, #12]
    d0b4:	f003 f966 	bl	10384 <__ssvfscanf_r>
    d0b8:	b01f      	add	sp, #124	; 0x7c
    d0ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d0be:	b003      	add	sp, #12
    d0c0:	4770      	bx	lr
    d0c2:	bf00      	nop
    d0c4:	20008694 	.word	0x20008694
    d0c8:	0000d0f1 	.word	0x0000d0f1

0000d0cc <__sread>:
    d0cc:	b510      	push	{r4, lr}
    d0ce:	460c      	mov	r4, r1
    d0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d0d4:	f000 fb36 	bl	d744 <_read_r>
    d0d8:	2800      	cmp	r0, #0
    d0da:	db03      	blt.n	d0e4 <__sread+0x18>
    d0dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    d0de:	4403      	add	r3, r0
    d0e0:	6523      	str	r3, [r4, #80]	; 0x50
    d0e2:	bd10      	pop	{r4, pc}
    d0e4:	89a3      	ldrh	r3, [r4, #12]
    d0e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    d0ea:	81a3      	strh	r3, [r4, #12]
    d0ec:	bd10      	pop	{r4, pc}
    d0ee:	bf00      	nop

0000d0f0 <__seofread>:
    d0f0:	2000      	movs	r0, #0
    d0f2:	4770      	bx	lr

0000d0f4 <__swrite>:
    d0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0f8:	460c      	mov	r4, r1
    d0fa:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    d0fe:	461f      	mov	r7, r3
    d100:	05cb      	lsls	r3, r1, #23
    d102:	4605      	mov	r5, r0
    d104:	4616      	mov	r6, r2
    d106:	d40b      	bmi.n	d120 <__swrite+0x2c>
    d108:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    d10c:	81a1      	strh	r1, [r4, #12]
    d10e:	463b      	mov	r3, r7
    d110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d114:	4632      	mov	r2, r6
    d116:	4628      	mov	r0, r5
    d118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d11c:	f000 bb3a 	b.w	d794 <_write_r>
    d120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d124:	2302      	movs	r3, #2
    d126:	2200      	movs	r2, #0
    d128:	f000 faf0 	bl	d70c <_lseek_r>
    d12c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    d130:	e7ea      	b.n	d108 <__swrite+0x14>
    d132:	bf00      	nop

0000d134 <__sseek>:
    d134:	b510      	push	{r4, lr}
    d136:	460c      	mov	r4, r1
    d138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d13c:	f000 fae6 	bl	d70c <_lseek_r>
    d140:	89a3      	ldrh	r3, [r4, #12]
    d142:	1c42      	adds	r2, r0, #1
    d144:	bf0e      	itee	eq
    d146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    d14a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    d14e:	6520      	strne	r0, [r4, #80]	; 0x50
    d150:	81a3      	strh	r3, [r4, #12]
    d152:	bd10      	pop	{r4, pc}

0000d154 <__sclose>:
    d154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d158:	f000 bac6 	b.w	d6e8 <_close_r>

0000d15c <stdio_exit_handler>:
    d15c:	4a02      	ldr	r2, [pc, #8]	; (d168 <stdio_exit_handler+0xc>)
    d15e:	4903      	ldr	r1, [pc, #12]	; (d16c <stdio_exit_handler+0x10>)
    d160:	4803      	ldr	r0, [pc, #12]	; (d170 <stdio_exit_handler+0x14>)
    d162:	f000 b8ef 	b.w	d344 <_fwalk_sglue>
    d166:	bf00      	nop
    d168:	20008688 	.word	0x20008688
    d16c:	00012649 	.word	0x00012649
    d170:	20007f78 	.word	0x20007f78

0000d174 <cleanup_stdio>:
    d174:	4b0c      	ldr	r3, [pc, #48]	; (d1a8 <cleanup_stdio+0x34>)
    d176:	6841      	ldr	r1, [r0, #4]
    d178:	4299      	cmp	r1, r3
    d17a:	b510      	push	{r4, lr}
    d17c:	4604      	mov	r4, r0
    d17e:	d001      	beq.n	d184 <cleanup_stdio+0x10>
    d180:	f005 fa62 	bl	12648 <_fclose_r>
    d184:	68a1      	ldr	r1, [r4, #8]
    d186:	4b09      	ldr	r3, [pc, #36]	; (d1ac <cleanup_stdio+0x38>)
    d188:	4299      	cmp	r1, r3
    d18a:	d002      	beq.n	d192 <cleanup_stdio+0x1e>
    d18c:	4620      	mov	r0, r4
    d18e:	f005 fa5b 	bl	12648 <_fclose_r>
    d192:	68e1      	ldr	r1, [r4, #12]
    d194:	4b06      	ldr	r3, [pc, #24]	; (d1b0 <cleanup_stdio+0x3c>)
    d196:	4299      	cmp	r1, r3
    d198:	d004      	beq.n	d1a4 <cleanup_stdio+0x30>
    d19a:	4620      	mov	r0, r4
    d19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d1a0:	f005 ba52 	b.w	12648 <_fclose_r>
    d1a4:	bd10      	pop	{r4, pc}
    d1a6:	bf00      	nop
    d1a8:	2000942c 	.word	0x2000942c
    d1ac:	20009494 	.word	0x20009494
    d1b0:	200094fc 	.word	0x200094fc

0000d1b4 <global_stdio_init.part.0>:
    d1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d1b8:	4c2a      	ldr	r4, [pc, #168]	; (d264 <global_stdio_init.part.0+0xb0>)
    d1ba:	4b2b      	ldr	r3, [pc, #172]	; (d268 <global_stdio_init.part.0+0xb4>)
    d1bc:	482b      	ldr	r0, [pc, #172]	; (d26c <global_stdio_init.part.0+0xb8>)
    d1be:	f8df 90c0 	ldr.w	r9, [pc, #192]	; d280 <global_stdio_init.part.0+0xcc>
    d1c2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; d284 <global_stdio_init.part.0+0xd0>
    d1c6:	4f2a      	ldr	r7, [pc, #168]	; (d270 <global_stdio_init.part.0+0xbc>)
    d1c8:	6018      	str	r0, [r3, #0]
    d1ca:	2500      	movs	r5, #0
    d1cc:	2304      	movs	r3, #4
    d1ce:	2208      	movs	r2, #8
    d1d0:	4629      	mov	r1, r5
    d1d2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    d1d6:	4e27      	ldr	r6, [pc, #156]	; (d274 <global_stdio_init.part.0+0xc0>)
    d1d8:	6665      	str	r5, [r4, #100]	; 0x64
    d1da:	e9c4 5302 	strd	r5, r3, [r4, #8]
    d1de:	e9c4 5500 	strd	r5, r5, [r4]
    d1e2:	e9c4 5504 	strd	r5, r5, [r4, #16]
    d1e6:	61a5      	str	r5, [r4, #24]
    d1e8:	f000 f97c 	bl	d4e4 <memset>
    d1ec:	4b22      	ldr	r3, [pc, #136]	; (d278 <global_stdio_init.part.0+0xc4>)
    d1ee:	6763      	str	r3, [r4, #116]	; 0x74
    d1f0:	2208      	movs	r2, #8
    d1f2:	4629      	mov	r1, r5
    d1f4:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    d1f8:	e9c4 4907 	strd	r4, r9, [r4, #28]
    d1fc:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    d200:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    d204:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    d208:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    d20c:	6725      	str	r5, [r4, #112]	; 0x70
    d20e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    d212:	62e6      	str	r6, [r4, #44]	; 0x2c
    d214:	f000 f966 	bl	d4e4 <memset>
    d218:	4b18      	ldr	r3, [pc, #96]	; (d27c <global_stdio_init.part.0+0xc8>)
    d21a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    d21e:	4629      	mov	r1, r5
    d220:	f104 0368 	add.w	r3, r4, #104	; 0x68
    d224:	2208      	movs	r2, #8
    d226:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    d22a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    d22e:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    d232:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    d236:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    d23a:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    d23e:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    d242:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    d246:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    d24a:	f000 f94b 	bl	d4e4 <memset>
    d24e:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    d252:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    d256:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    d25a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    d25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d262:	bf00      	nop
    d264:	2000942c 	.word	0x2000942c
    d268:	20009564 	.word	0x20009564
    d26c:	0000d15d 	.word	0x0000d15d
    d270:	0000d135 	.word	0x0000d135
    d274:	0000d155 	.word	0x0000d155
    d278:	00010009 	.word	0x00010009
    d27c:	00020012 	.word	0x00020012
    d280:	0000d0cd 	.word	0x0000d0cd
    d284:	0000d0f5 	.word	0x0000d0f5

0000d288 <__sinit>:
    d288:	b510      	push	{r4, lr}
    d28a:	4604      	mov	r4, r0
    d28c:	480a      	ldr	r0, [pc, #40]	; (d2b8 <__sinit+0x30>)
    d28e:	f000 fc3d 	bl	db0c <__retarget_lock_acquire_recursive>
    d292:	6b63      	ldr	r3, [r4, #52]	; 0x34
    d294:	b923      	cbnz	r3, d2a0 <__sinit+0x18>
    d296:	4b09      	ldr	r3, [pc, #36]	; (d2bc <__sinit+0x34>)
    d298:	4a09      	ldr	r2, [pc, #36]	; (d2c0 <__sinit+0x38>)
    d29a:	681b      	ldr	r3, [r3, #0]
    d29c:	6362      	str	r2, [r4, #52]	; 0x34
    d29e:	b123      	cbz	r3, d2aa <__sinit+0x22>
    d2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d2a4:	4804      	ldr	r0, [pc, #16]	; (d2b8 <__sinit+0x30>)
    d2a6:	f000 bc33 	b.w	db10 <__retarget_lock_release_recursive>
    d2aa:	f7ff ff83 	bl	d1b4 <global_stdio_init.part.0>
    d2ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d2b2:	4801      	ldr	r0, [pc, #4]	; (d2b8 <__sinit+0x30>)
    d2b4:	f000 bc2c 	b.w	db10 <__retarget_lock_release_recursive>
    d2b8:	200093f4 	.word	0x200093f4
    d2bc:	20009564 	.word	0x20009564
    d2c0:	0000d175 	.word	0x0000d175

0000d2c4 <__sfp_lock_acquire>:
    d2c4:	4801      	ldr	r0, [pc, #4]	; (d2cc <__sfp_lock_acquire+0x8>)
    d2c6:	f000 bc21 	b.w	db0c <__retarget_lock_acquire_recursive>
    d2ca:	bf00      	nop
    d2cc:	200093f4 	.word	0x200093f4

0000d2d0 <__sfp_lock_release>:
    d2d0:	4801      	ldr	r0, [pc, #4]	; (d2d8 <__sfp_lock_release+0x8>)
    d2d2:	f000 bc1d 	b.w	db10 <__retarget_lock_release_recursive>
    d2d6:	bf00      	nop
    d2d8:	200093f4 	.word	0x200093f4

0000d2dc <_vdprintf_r>:
    d2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2de:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    d2e2:	af04      	add	r7, sp, #16
    d2e4:	9300      	str	r3, [sp, #0]
    d2e6:	4613      	mov	r3, r2
    d2e8:	f44f 7200 	mov.w	r2, #512	; 0x200
    d2ec:	460e      	mov	r6, r1
    d2ee:	9203      	str	r2, [sp, #12]
    d2f0:	4639      	mov	r1, r7
    d2f2:	aa03      	add	r2, sp, #12
    d2f4:	4605      	mov	r5, r0
    d2f6:	f000 f9bf 	bl	d678 <_vasnprintf_r>
    d2fa:	b188      	cbz	r0, d320 <_vdprintf_r+0x44>
    d2fc:	4604      	mov	r4, r0
    d2fe:	4602      	mov	r2, r0
    d300:	9b03      	ldr	r3, [sp, #12]
    d302:	4631      	mov	r1, r6
    d304:	4628      	mov	r0, r5
    d306:	f000 fa45 	bl	d794 <_write_r>
    d30a:	42bc      	cmp	r4, r7
    d30c:	9003      	str	r0, [sp, #12]
    d30e:	d004      	beq.n	d31a <_vdprintf_r+0x3e>
    d310:	4628      	mov	r0, r5
    d312:	4621      	mov	r1, r4
    d314:	f000 fd66 	bl	dde4 <_free_r>
    d318:	9803      	ldr	r0, [sp, #12]
    d31a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    d31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d324:	e7f9      	b.n	d31a <_vdprintf_r+0x3e>
    d326:	bf00      	nop

0000d328 <vdprintf>:
    d328:	b410      	push	{r4}
    d32a:	4c05      	ldr	r4, [pc, #20]	; (d340 <vdprintf+0x18>)
    d32c:	4684      	mov	ip, r0
    d32e:	4613      	mov	r3, r2
    d330:	6820      	ldr	r0, [r4, #0]
    d332:	f85d 4b04 	ldr.w	r4, [sp], #4
    d336:	460a      	mov	r2, r1
    d338:	4661      	mov	r1, ip
    d33a:	f7ff bfcf 	b.w	d2dc <_vdprintf_r>
    d33e:	bf00      	nop
    d340:	20008694 	.word	0x20008694

0000d344 <_fwalk_sglue>:
    d344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d348:	4680      	mov	r8, r0
    d34a:	460f      	mov	r7, r1
    d34c:	4616      	mov	r6, r2
    d34e:	f04f 0900 	mov.w	r9, #0
    d352:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    d356:	3d01      	subs	r5, #1
    d358:	d411      	bmi.n	d37e <_fwalk_sglue+0x3a>
    d35a:	89a3      	ldrh	r3, [r4, #12]
    d35c:	2b01      	cmp	r3, #1
    d35e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    d362:	d908      	bls.n	d376 <_fwalk_sglue+0x32>
    d364:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    d368:	3301      	adds	r3, #1
    d36a:	4621      	mov	r1, r4
    d36c:	d003      	beq.n	d376 <_fwalk_sglue+0x32>
    d36e:	4640      	mov	r0, r8
    d370:	47b8      	blx	r7
    d372:	ea49 0900 	orr.w	r9, r9, r0
    d376:	1c6b      	adds	r3, r5, #1
    d378:	f104 0468 	add.w	r4, r4, #104	; 0x68
    d37c:	d1ed      	bne.n	d35a <_fwalk_sglue+0x16>
    d37e:	6836      	ldr	r6, [r6, #0]
    d380:	2e00      	cmp	r6, #0
    d382:	d1e6      	bne.n	d352 <_fwalk_sglue+0xe>
    d384:	4648      	mov	r0, r9
    d386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d38a:	bf00      	nop

0000d38c <memcmp>:
    d38c:	2a03      	cmp	r2, #3
    d38e:	b570      	push	{r4, r5, r6, lr}
    d390:	d914      	bls.n	d3bc <memcmp+0x30>
    d392:	ea40 0301 	orr.w	r3, r0, r1
    d396:	079b      	lsls	r3, r3, #30
    d398:	d122      	bne.n	d3e0 <memcmp+0x54>
    d39a:	4604      	mov	r4, r0
    d39c:	460b      	mov	r3, r1
    d39e:	4619      	mov	r1, r3
    d3a0:	4620      	mov	r0, r4
    d3a2:	680e      	ldr	r6, [r1, #0]
    d3a4:	6805      	ldr	r5, [r0, #0]
    d3a6:	42b5      	cmp	r5, r6
    d3a8:	f104 0404 	add.w	r4, r4, #4
    d3ac:	f103 0304 	add.w	r3, r3, #4
    d3b0:	d116      	bne.n	d3e0 <memcmp+0x54>
    d3b2:	3a04      	subs	r2, #4
    d3b4:	2a03      	cmp	r2, #3
    d3b6:	4620      	mov	r0, r4
    d3b8:	4619      	mov	r1, r3
    d3ba:	d8f0      	bhi.n	d39e <memcmp+0x12>
    d3bc:	1e54      	subs	r4, r2, #1
    d3be:	b19a      	cbz	r2, d3e8 <memcmp+0x5c>
    d3c0:	1e42      	subs	r2, r0, #1
    d3c2:	3901      	subs	r1, #1
    d3c4:	e001      	b.n	d3ca <memcmp+0x3e>
    d3c6:	18c3      	adds	r3, r0, r3
    d3c8:	d00c      	beq.n	d3e4 <memcmp+0x58>
    d3ca:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    d3ce:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    d3d2:	45e6      	cmp	lr, ip
    d3d4:	eba4 0302 	sub.w	r3, r4, r2
    d3d8:	d0f5      	beq.n	d3c6 <memcmp+0x3a>
    d3da:	ebae 000c 	sub.w	r0, lr, ip
    d3de:	bd70      	pop	{r4, r5, r6, pc}
    d3e0:	1e54      	subs	r4, r2, #1
    d3e2:	e7ed      	b.n	d3c0 <memcmp+0x34>
    d3e4:	4618      	mov	r0, r3
    d3e6:	bd70      	pop	{r4, r5, r6, pc}
    d3e8:	4610      	mov	r0, r2
    d3ea:	bd70      	pop	{r4, r5, r6, pc}

0000d3ec <memmove>:
    d3ec:	4288      	cmp	r0, r1
    d3ee:	d90d      	bls.n	d40c <memmove+0x20>
    d3f0:	188b      	adds	r3, r1, r2
    d3f2:	4283      	cmp	r3, r0
    d3f4:	d90a      	bls.n	d40c <memmove+0x20>
    d3f6:	eb00 0c02 	add.w	ip, r0, r2
    d3fa:	b1ba      	cbz	r2, d42c <memmove+0x40>
    d3fc:	4662      	mov	r2, ip
    d3fe:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    d402:	f802 cd01 	strb.w	ip, [r2, #-1]!
    d406:	4299      	cmp	r1, r3
    d408:	d1f9      	bne.n	d3fe <memmove+0x12>
    d40a:	4770      	bx	lr
    d40c:	2a0f      	cmp	r2, #15
    d40e:	d80e      	bhi.n	d42e <memmove+0x42>
    d410:	4603      	mov	r3, r0
    d412:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    d416:	b14a      	cbz	r2, d42c <memmove+0x40>
    d418:	f10c 0c01 	add.w	ip, ip, #1
    d41c:	3b01      	subs	r3, #1
    d41e:	448c      	add	ip, r1
    d420:	f811 2b01 	ldrb.w	r2, [r1], #1
    d424:	f803 2f01 	strb.w	r2, [r3, #1]!
    d428:	4561      	cmp	r1, ip
    d42a:	d1f9      	bne.n	d420 <memmove+0x34>
    d42c:	4770      	bx	lr
    d42e:	ea40 0301 	orr.w	r3, r0, r1
    d432:	079b      	lsls	r3, r3, #30
    d434:	d150      	bne.n	d4d8 <memmove+0xec>
    d436:	f1a2 0310 	sub.w	r3, r2, #16
    d43a:	b570      	push	{r4, r5, r6, lr}
    d43c:	f101 0c20 	add.w	ip, r1, #32
    d440:	f023 050f 	bic.w	r5, r3, #15
    d444:	f101 0e10 	add.w	lr, r1, #16
    d448:	f100 0410 	add.w	r4, r0, #16
    d44c:	44ac      	add	ip, r5
    d44e:	091b      	lsrs	r3, r3, #4
    d450:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    d454:	f844 5c10 	str.w	r5, [r4, #-16]
    d458:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    d45c:	f844 5c0c 	str.w	r5, [r4, #-12]
    d460:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    d464:	f844 5c08 	str.w	r5, [r4, #-8]
    d468:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    d46c:	f844 5c04 	str.w	r5, [r4, #-4]
    d470:	f10e 0e10 	add.w	lr, lr, #16
    d474:	45e6      	cmp	lr, ip
    d476:	f104 0410 	add.w	r4, r4, #16
    d47a:	d1e9      	bne.n	d450 <memmove+0x64>
    d47c:	3301      	adds	r3, #1
    d47e:	f012 0f0c 	tst.w	r2, #12
    d482:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    d486:	f002 040f 	and.w	r4, r2, #15
    d48a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    d48e:	d027      	beq.n	d4e0 <memmove+0xf4>
    d490:	3c04      	subs	r4, #4
    d492:	f024 0603 	bic.w	r6, r4, #3
    d496:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    d49a:	441e      	add	r6, r3
    d49c:	1f1c      	subs	r4, r3, #4
    d49e:	468e      	mov	lr, r1
    d4a0:	f85e 5b04 	ldr.w	r5, [lr], #4
    d4a4:	f844 5f04 	str.w	r5, [r4, #4]!
    d4a8:	42b4      	cmp	r4, r6
    d4aa:	d1f9      	bne.n	d4a0 <memmove+0xb4>
    d4ac:	f10c 0401 	add.w	r4, ip, #1
    d4b0:	f002 0203 	and.w	r2, r2, #3
    d4b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    d4b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    d4bc:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    d4c0:	b14a      	cbz	r2, d4d6 <memmove+0xea>
    d4c2:	f10c 0c01 	add.w	ip, ip, #1
    d4c6:	3b01      	subs	r3, #1
    d4c8:	448c      	add	ip, r1
    d4ca:	f811 2b01 	ldrb.w	r2, [r1], #1
    d4ce:	f803 2f01 	strb.w	r2, [r3, #1]!
    d4d2:	4561      	cmp	r1, ip
    d4d4:	d1f9      	bne.n	d4ca <memmove+0xde>
    d4d6:	bd70      	pop	{r4, r5, r6, pc}
    d4d8:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    d4dc:	4603      	mov	r3, r0
    d4de:	e79b      	b.n	d418 <memmove+0x2c>
    d4e0:	4622      	mov	r2, r4
    d4e2:	e7eb      	b.n	d4bc <memmove+0xd0>

0000d4e4 <memset>:
    d4e4:	0783      	lsls	r3, r0, #30
    d4e6:	b530      	push	{r4, r5, lr}
    d4e8:	d048      	beq.n	d57c <memset+0x98>
    d4ea:	1e54      	subs	r4, r2, #1
    d4ec:	2a00      	cmp	r2, #0
    d4ee:	d03f      	beq.n	d570 <memset+0x8c>
    d4f0:	b2ca      	uxtb	r2, r1
    d4f2:	4603      	mov	r3, r0
    d4f4:	e001      	b.n	d4fa <memset+0x16>
    d4f6:	3c01      	subs	r4, #1
    d4f8:	d33a      	bcc.n	d570 <memset+0x8c>
    d4fa:	f803 2b01 	strb.w	r2, [r3], #1
    d4fe:	079d      	lsls	r5, r3, #30
    d500:	d1f9      	bne.n	d4f6 <memset+0x12>
    d502:	2c03      	cmp	r4, #3
    d504:	d92d      	bls.n	d562 <memset+0x7e>
    d506:	b2cd      	uxtb	r5, r1
    d508:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    d50c:	2c0f      	cmp	r4, #15
    d50e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    d512:	d936      	bls.n	d582 <memset+0x9e>
    d514:	f1a4 0210 	sub.w	r2, r4, #16
    d518:	f022 0c0f 	bic.w	ip, r2, #15
    d51c:	f103 0e20 	add.w	lr, r3, #32
    d520:	44e6      	add	lr, ip
    d522:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    d526:	f103 0210 	add.w	r2, r3, #16
    d52a:	e942 5504 	strd	r5, r5, [r2, #-16]
    d52e:	e942 5502 	strd	r5, r5, [r2, #-8]
    d532:	3210      	adds	r2, #16
    d534:	4572      	cmp	r2, lr
    d536:	d1f8      	bne.n	d52a <memset+0x46>
    d538:	f10c 0201 	add.w	r2, ip, #1
    d53c:	f014 0f0c 	tst.w	r4, #12
    d540:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    d544:	f004 0c0f 	and.w	ip, r4, #15
    d548:	d013      	beq.n	d572 <memset+0x8e>
    d54a:	f1ac 0304 	sub.w	r3, ip, #4
    d54e:	f023 0303 	bic.w	r3, r3, #3
    d552:	3304      	adds	r3, #4
    d554:	4413      	add	r3, r2
    d556:	f842 5b04 	str.w	r5, [r2], #4
    d55a:	4293      	cmp	r3, r2
    d55c:	d1fb      	bne.n	d556 <memset+0x72>
    d55e:	f00c 0403 	and.w	r4, ip, #3
    d562:	b12c      	cbz	r4, d570 <memset+0x8c>
    d564:	b2c9      	uxtb	r1, r1
    d566:	441c      	add	r4, r3
    d568:	f803 1b01 	strb.w	r1, [r3], #1
    d56c:	429c      	cmp	r4, r3
    d56e:	d1fb      	bne.n	d568 <memset+0x84>
    d570:	bd30      	pop	{r4, r5, pc}
    d572:	4664      	mov	r4, ip
    d574:	4613      	mov	r3, r2
    d576:	2c00      	cmp	r4, #0
    d578:	d1f4      	bne.n	d564 <memset+0x80>
    d57a:	e7f9      	b.n	d570 <memset+0x8c>
    d57c:	4603      	mov	r3, r0
    d57e:	4614      	mov	r4, r2
    d580:	e7bf      	b.n	d502 <memset+0x1e>
    d582:	461a      	mov	r2, r3
    d584:	46a4      	mov	ip, r4
    d586:	e7e0      	b.n	d54a <memset+0x66>

0000d588 <strncmp>:
    d588:	2a00      	cmp	r2, #0
    d58a:	d03e      	beq.n	d60a <strncmp+0x82>
    d58c:	ea40 0301 	orr.w	r3, r0, r1
    d590:	079b      	lsls	r3, r3, #30
    d592:	b530      	push	{r4, r5, lr}
    d594:	4684      	mov	ip, r0
    d596:	d12f      	bne.n	d5f8 <strncmp+0x70>
    d598:	2a03      	cmp	r2, #3
    d59a:	d92d      	bls.n	d5f8 <strncmp+0x70>
    d59c:	460b      	mov	r3, r1
    d59e:	e008      	b.n	d5b2 <strncmp+0x2a>
    d5a0:	3a04      	subs	r2, #4
    d5a2:	4684      	mov	ip, r0
    d5a4:	4619      	mov	r1, r3
    d5a6:	d025      	beq.n	d5f4 <strncmp+0x6c>
    d5a8:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    d5ac:	d122      	bne.n	d5f4 <strncmp+0x6c>
    d5ae:	2a03      	cmp	r2, #3
    d5b0:	d922      	bls.n	d5f8 <strncmp+0x70>
    d5b2:	6804      	ldr	r4, [r0, #0]
    d5b4:	4619      	mov	r1, r3
    d5b6:	f853 5b04 	ldr.w	r5, [r3], #4
    d5ba:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    d5be:	42ac      	cmp	r4, r5
    d5c0:	4684      	mov	ip, r0
    d5c2:	ea2e 0e04 	bic.w	lr, lr, r4
    d5c6:	f100 0004 	add.w	r0, r0, #4
    d5ca:	d0e9      	beq.n	d5a0 <strncmp+0x18>
    d5cc:	f89c 0000 	ldrb.w	r0, [ip]
    d5d0:	780c      	ldrb	r4, [r1, #0]
    d5d2:	42a0      	cmp	r0, r4
    d5d4:	d11b      	bne.n	d60e <strncmp+0x86>
    d5d6:	46e6      	mov	lr, ip
    d5d8:	b168      	cbz	r0, d5f6 <strncmp+0x6e>
    d5da:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    d5de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    d5e2:	eba2 030e 	sub.w	r3, r2, lr
    d5e6:	42a0      	cmp	r0, r4
    d5e8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    d5ec:	d10f      	bne.n	d60e <strncmp+0x86>
    d5ee:	eb1c 0303 	adds.w	r3, ip, r3
    d5f2:	d1f1      	bne.n	d5d8 <strncmp+0x50>
    d5f4:	2000      	movs	r0, #0
    d5f6:	bd30      	pop	{r4, r5, pc}
    d5f8:	f89c 0000 	ldrb.w	r0, [ip]
    d5fc:	780c      	ldrb	r4, [r1, #0]
    d5fe:	4284      	cmp	r4, r0
    d600:	d105      	bne.n	d60e <strncmp+0x86>
    d602:	2a01      	cmp	r2, #1
    d604:	d0f6      	beq.n	d5f4 <strncmp+0x6c>
    d606:	46e6      	mov	lr, ip
    d608:	e7e6      	b.n	d5d8 <strncmp+0x50>
    d60a:	4610      	mov	r0, r2
    d60c:	4770      	bx	lr
    d60e:	1b00      	subs	r0, r0, r4
    d610:	bd30      	pop	{r4, r5, pc}
    d612:	bf00      	nop

0000d614 <strncpy>:
    d614:	ea40 0301 	orr.w	r3, r0, r1
    d618:	079b      	lsls	r3, r3, #30
    d61a:	b530      	push	{r4, r5, lr}
    d61c:	d101      	bne.n	d622 <strncpy+0xe>
    d61e:	2a03      	cmp	r2, #3
    d620:	d80f      	bhi.n	d642 <strncpy+0x2e>
    d622:	4684      	mov	ip, r0
    d624:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    d628:	e007      	b.n	d63a <strncpy+0x26>
    d62a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    d62e:	f803 1b01 	strb.w	r1, [r3], #1
    d632:	1e54      	subs	r4, r2, #1
    d634:	b1c1      	cbz	r1, d668 <strncpy+0x54>
    d636:	469c      	mov	ip, r3
    d638:	4622      	mov	r2, r4
    d63a:	4663      	mov	r3, ip
    d63c:	2a00      	cmp	r2, #0
    d63e:	d1f4      	bne.n	d62a <strncpy+0x16>
    d640:	bd30      	pop	{r4, r5, pc}
    d642:	460b      	mov	r3, r1
    d644:	4684      	mov	ip, r0
    d646:	4619      	mov	r1, r3
    d648:	f853 5b04 	ldr.w	r5, [r3], #4
    d64c:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    d650:	ea24 0405 	bic.w	r4, r4, r5
    d654:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    d658:	d1e4      	bne.n	d624 <strncpy+0x10>
    d65a:	3a04      	subs	r2, #4
    d65c:	2a03      	cmp	r2, #3
    d65e:	f84c 5b04 	str.w	r5, [ip], #4
    d662:	4619      	mov	r1, r3
    d664:	d8ef      	bhi.n	d646 <strncpy+0x32>
    d666:	e7dd      	b.n	d624 <strncpy+0x10>
    d668:	4494      	add	ip, r2
    d66a:	2c00      	cmp	r4, #0
    d66c:	d0e8      	beq.n	d640 <strncpy+0x2c>
    d66e:	f803 1b01 	strb.w	r1, [r3], #1
    d672:	4563      	cmp	r3, ip
    d674:	d1fb      	bne.n	d66e <strncpy+0x5a>
    d676:	bd30      	pop	{r4, r5, pc}

0000d678 <_vasnprintf_r>:
    d678:	b530      	push	{r4, r5, lr}
    d67a:	6814      	ldr	r4, [r2, #0]
    d67c:	4615      	mov	r5, r2
    d67e:	b09b      	sub	sp, #108	; 0x6c
    d680:	461a      	mov	r2, r3
    d682:	b109      	cbz	r1, d688 <_vasnprintf_r+0x10>
    d684:	2c00      	cmp	r4, #0
    d686:	d119      	bne.n	d6bc <_vasnprintf_r+0x44>
    d688:	2100      	movs	r1, #0
    d68a:	f44f 7322 	mov.w	r3, #648	; 0x288
    d68e:	f8ad 300c 	strh.w	r3, [sp, #12]
    d692:	9100      	str	r1, [sp, #0]
    d694:	9104      	str	r1, [sp, #16]
    d696:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d69a:	9102      	str	r1, [sp, #8]
    d69c:	9105      	str	r1, [sp, #20]
    d69e:	f8ad 300e 	strh.w	r3, [sp, #14]
    d6a2:	4669      	mov	r1, sp
    d6a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    d6a6:	f001 f8cb 	bl	e840 <_svfprintf_r>
    d6aa:	2800      	cmp	r0, #0
    d6ac:	db13      	blt.n	d6d6 <_vasnprintf_r+0x5e>
    d6ae:	9b00      	ldr	r3, [sp, #0]
    d6b0:	6028      	str	r0, [r5, #0]
    d6b2:	2200      	movs	r2, #0
    d6b4:	701a      	strb	r2, [r3, #0]
    d6b6:	9804      	ldr	r0, [sp, #16]
    d6b8:	b01b      	add	sp, #108	; 0x6c
    d6ba:	bd30      	pop	{r4, r5, pc}
    d6bc:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    d6c0:	9100      	str	r1, [sp, #0]
    d6c2:	9104      	str	r1, [sp, #16]
    d6c4:	f8ad 300c 	strh.w	r3, [sp, #12]
    d6c8:	4621      	mov	r1, r4
    d6ca:	dae4      	bge.n	d696 <_vasnprintf_r+0x1e>
    d6cc:	238b      	movs	r3, #139	; 0x8b
    d6ce:	6003      	str	r3, [r0, #0]
    d6d0:	2000      	movs	r0, #0
    d6d2:	b01b      	add	sp, #108	; 0x6c
    d6d4:	bd30      	pop	{r4, r5, pc}
    d6d6:	2000      	movs	r0, #0
    d6d8:	e7ee      	b.n	d6b8 <_vasnprintf_r+0x40>
    d6da:	bf00      	nop

0000d6dc <__locale_mb_cur_max>:
    d6dc:	4b01      	ldr	r3, [pc, #4]	; (d6e4 <__locale_mb_cur_max+0x8>)
    d6de:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    d6e2:	4770      	bx	lr
    d6e4:	2000810c 	.word	0x2000810c

0000d6e8 <_close_r>:
    d6e8:	b538      	push	{r3, r4, r5, lr}
    d6ea:	4d07      	ldr	r5, [pc, #28]	; (d708 <_close_r+0x20>)
    d6ec:	2200      	movs	r2, #0
    d6ee:	4604      	mov	r4, r0
    d6f0:	4608      	mov	r0, r1
    d6f2:	602a      	str	r2, [r5, #0]
    d6f4:	f7fc faee 	bl	9cd4 <_close>
    d6f8:	1c43      	adds	r3, r0, #1
    d6fa:	d000      	beq.n	d6fe <_close_r+0x16>
    d6fc:	bd38      	pop	{r3, r4, r5, pc}
    d6fe:	682b      	ldr	r3, [r5, #0]
    d700:	2b00      	cmp	r3, #0
    d702:	d0fb      	beq.n	d6fc <_close_r+0x14>
    d704:	6023      	str	r3, [r4, #0]
    d706:	bd38      	pop	{r3, r4, r5, pc}
    d708:	20009580 	.word	0x20009580

0000d70c <_lseek_r>:
    d70c:	b538      	push	{r3, r4, r5, lr}
    d70e:	460c      	mov	r4, r1
    d710:	4d08      	ldr	r5, [pc, #32]	; (d734 <_lseek_r+0x28>)
    d712:	4684      	mov	ip, r0
    d714:	4611      	mov	r1, r2
    d716:	4620      	mov	r0, r4
    d718:	461a      	mov	r2, r3
    d71a:	2300      	movs	r3, #0
    d71c:	602b      	str	r3, [r5, #0]
    d71e:	4664      	mov	r4, ip
    d720:	f7fc fae4 	bl	9cec <_lseek>
    d724:	1c43      	adds	r3, r0, #1
    d726:	d000      	beq.n	d72a <_lseek_r+0x1e>
    d728:	bd38      	pop	{r3, r4, r5, pc}
    d72a:	682b      	ldr	r3, [r5, #0]
    d72c:	2b00      	cmp	r3, #0
    d72e:	d0fb      	beq.n	d728 <_lseek_r+0x1c>
    d730:	6023      	str	r3, [r4, #0]
    d732:	bd38      	pop	{r3, r4, r5, pc}
    d734:	20009580 	.word	0x20009580

0000d738 <__cxa_atexit>:
    d738:	4613      	mov	r3, r2
    d73a:	460a      	mov	r2, r1
    d73c:	4601      	mov	r1, r0
    d73e:	2002      	movs	r0, #2
    d740:	f000 baac 	b.w	dc9c <__register_exitproc>

0000d744 <_read_r>:
    d744:	b538      	push	{r3, r4, r5, lr}
    d746:	460c      	mov	r4, r1
    d748:	4d08      	ldr	r5, [pc, #32]	; (d76c <_read_r+0x28>)
    d74a:	4684      	mov	ip, r0
    d74c:	4611      	mov	r1, r2
    d74e:	4620      	mov	r0, r4
    d750:	461a      	mov	r2, r3
    d752:	2300      	movs	r3, #0
    d754:	602b      	str	r3, [r5, #0]
    d756:	4664      	mov	r4, ip
    d758:	f7fc faba 	bl	9cd0 <_read>
    d75c:	1c43      	adds	r3, r0, #1
    d75e:	d000      	beq.n	d762 <_read_r+0x1e>
    d760:	bd38      	pop	{r3, r4, r5, pc}
    d762:	682b      	ldr	r3, [r5, #0]
    d764:	2b00      	cmp	r3, #0
    d766:	d0fb      	beq.n	d760 <_read_r+0x1c>
    d768:	6023      	str	r3, [r4, #0]
    d76a:	bd38      	pop	{r3, r4, r5, pc}
    d76c:	20009580 	.word	0x20009580

0000d770 <_sbrk_r>:
    d770:	b538      	push	{r3, r4, r5, lr}
    d772:	4d07      	ldr	r5, [pc, #28]	; (d790 <_sbrk_r+0x20>)
    d774:	2200      	movs	r2, #0
    d776:	4604      	mov	r4, r0
    d778:	4608      	mov	r0, r1
    d77a:	602a      	str	r2, [r5, #0]
    d77c:	f7fc fa8e 	bl	9c9c <_sbrk>
    d780:	1c43      	adds	r3, r0, #1
    d782:	d000      	beq.n	d786 <_sbrk_r+0x16>
    d784:	bd38      	pop	{r3, r4, r5, pc}
    d786:	682b      	ldr	r3, [r5, #0]
    d788:	2b00      	cmp	r3, #0
    d78a:	d0fb      	beq.n	d784 <_sbrk_r+0x14>
    d78c:	6023      	str	r3, [r4, #0]
    d78e:	bd38      	pop	{r3, r4, r5, pc}
    d790:	20009580 	.word	0x20009580

0000d794 <_write_r>:
    d794:	b538      	push	{r3, r4, r5, lr}
    d796:	460c      	mov	r4, r1
    d798:	4d08      	ldr	r5, [pc, #32]	; (d7bc <_write_r+0x28>)
    d79a:	4684      	mov	ip, r0
    d79c:	4611      	mov	r1, r2
    d79e:	4620      	mov	r0, r4
    d7a0:	461a      	mov	r2, r3
    d7a2:	2300      	movs	r3, #0
    d7a4:	602b      	str	r3, [r5, #0]
    d7a6:	4664      	mov	r4, ip
    d7a8:	f7fb fe0e 	bl	93c8 <_write>
    d7ac:	1c43      	adds	r3, r0, #1
    d7ae:	d000      	beq.n	d7b2 <_write_r+0x1e>
    d7b0:	bd38      	pop	{r3, r4, r5, pc}
    d7b2:	682b      	ldr	r3, [r5, #0]
    d7b4:	2b00      	cmp	r3, #0
    d7b6:	d0fb      	beq.n	d7b0 <_write_r+0x1c>
    d7b8:	6023      	str	r3, [r4, #0]
    d7ba:	bd38      	pop	{r3, r4, r5, pc}
    d7bc:	20009580 	.word	0x20009580

0000d7c0 <__errno>:
    d7c0:	4b01      	ldr	r3, [pc, #4]	; (d7c8 <__errno+0x8>)
    d7c2:	6818      	ldr	r0, [r3, #0]
    d7c4:	4770      	bx	lr
    d7c6:	bf00      	nop
    d7c8:	20008694 	.word	0x20008694
	...
    d7e0:	eba2 0003 	sub.w	r0, r2, r3
    d7e4:	4770      	bx	lr
    d7e6:	bf00      	nop

0000d7e8 <strcmp>:
    d7e8:	7802      	ldrb	r2, [r0, #0]
    d7ea:	780b      	ldrb	r3, [r1, #0]
    d7ec:	2a01      	cmp	r2, #1
    d7ee:	bf28      	it	cs
    d7f0:	429a      	cmpcs	r2, r3
    d7f2:	d1f5      	bne.n	d7e0 <__errno+0x20>
    d7f4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    d7f8:	ea40 0401 	orr.w	r4, r0, r1
    d7fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    d800:	f06f 0c00 	mvn.w	ip, #0
    d804:	ea4f 7244 	mov.w	r2, r4, lsl #29
    d808:	b312      	cbz	r2, d850 <strcmp+0x68>
    d80a:	ea80 0401 	eor.w	r4, r0, r1
    d80e:	f014 0f07 	tst.w	r4, #7
    d812:	d16a      	bne.n	d8ea <strcmp+0x102>
    d814:	f000 0407 	and.w	r4, r0, #7
    d818:	f020 0007 	bic.w	r0, r0, #7
    d81c:	f004 0503 	and.w	r5, r4, #3
    d820:	f021 0107 	bic.w	r1, r1, #7
    d824:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    d828:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    d82c:	f014 0f04 	tst.w	r4, #4
    d830:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    d834:	fa0c f405 	lsl.w	r4, ip, r5
    d838:	ea62 0204 	orn	r2, r2, r4
    d83c:	ea66 0604 	orn	r6, r6, r4
    d840:	d00a      	beq.n	d858 <strcmp+0x70>
    d842:	ea63 0304 	orn	r3, r3, r4
    d846:	4662      	mov	r2, ip
    d848:	ea67 0704 	orn	r7, r7, r4
    d84c:	4666      	mov	r6, ip
    d84e:	e003      	b.n	d858 <strcmp+0x70>
    d850:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    d854:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    d858:	fa82 f54c 	uadd8	r5, r2, ip
    d85c:	ea82 0406 	eor.w	r4, r2, r6
    d860:	faa4 f48c 	sel	r4, r4, ip
    d864:	bb6c      	cbnz	r4, d8c2 <strcmp+0xda>
    d866:	fa83 f54c 	uadd8	r5, r3, ip
    d86a:	ea83 0507 	eor.w	r5, r3, r7
    d86e:	faa5 f58c 	sel	r5, r5, ip
    d872:	b995      	cbnz	r5, d89a <strcmp+0xb2>
    d874:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    d878:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    d87c:	fa82 f54c 	uadd8	r5, r2, ip
    d880:	ea82 0406 	eor.w	r4, r2, r6
    d884:	faa4 f48c 	sel	r4, r4, ip
    d888:	fa83 f54c 	uadd8	r5, r3, ip
    d88c:	ea83 0507 	eor.w	r5, r3, r7
    d890:	faa5 f58c 	sel	r5, r5, ip
    d894:	4325      	orrs	r5, r4
    d896:	d0db      	beq.n	d850 <strcmp+0x68>
    d898:	b99c      	cbnz	r4, d8c2 <strcmp+0xda>
    d89a:	ba2d      	rev	r5, r5
    d89c:	fab5 f485 	clz	r4, r5
    d8a0:	f024 0407 	bic.w	r4, r4, #7
    d8a4:	fa27 f104 	lsr.w	r1, r7, r4
    d8a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    d8ac:	fa23 f304 	lsr.w	r3, r3, r4
    d8b0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    d8b4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d8b8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d8bc:	eba0 0001 	sub.w	r0, r0, r1
    d8c0:	4770      	bx	lr
    d8c2:	ba24      	rev	r4, r4
    d8c4:	fab4 f484 	clz	r4, r4
    d8c8:	f024 0407 	bic.w	r4, r4, #7
    d8cc:	fa26 f104 	lsr.w	r1, r6, r4
    d8d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    d8d4:	fa22 f204 	lsr.w	r2, r2, r4
    d8d8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    d8dc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d8e0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d8e4:	eba0 0001 	sub.w	r0, r0, r1
    d8e8:	4770      	bx	lr
    d8ea:	f014 0f03 	tst.w	r4, #3
    d8ee:	d13c      	bne.n	d96a <strcmp+0x182>
    d8f0:	f010 0403 	ands.w	r4, r0, #3
    d8f4:	d128      	bne.n	d948 <strcmp+0x160>
    d8f6:	f850 2b08 	ldr.w	r2, [r0], #8
    d8fa:	f851 3b08 	ldr.w	r3, [r1], #8
    d8fe:	fa82 f54c 	uadd8	r5, r2, ip
    d902:	ea82 0503 	eor.w	r5, r2, r3
    d906:	faa5 f58c 	sel	r5, r5, ip
    d90a:	b95d      	cbnz	r5, d924 <strcmp+0x13c>
    d90c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    d910:	f851 3c04 	ldr.w	r3, [r1, #-4]
    d914:	fa82 f54c 	uadd8	r5, r2, ip
    d918:	ea82 0503 	eor.w	r5, r2, r3
    d91c:	faa5 f58c 	sel	r5, r5, ip
    d920:	2d00      	cmp	r5, #0
    d922:	d0e8      	beq.n	d8f6 <strcmp+0x10e>
    d924:	ba2d      	rev	r5, r5
    d926:	fab5 f485 	clz	r4, r5
    d92a:	f024 0407 	bic.w	r4, r4, #7
    d92e:	fa23 f104 	lsr.w	r1, r3, r4
    d932:	fa22 f204 	lsr.w	r2, r2, r4
    d936:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    d93a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d93e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d942:	eba0 0001 	sub.w	r0, r0, r1
    d946:	4770      	bx	lr
    d948:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    d94c:	f020 0003 	bic.w	r0, r0, #3
    d950:	f850 2b08 	ldr.w	r2, [r0], #8
    d954:	f021 0103 	bic.w	r1, r1, #3
    d958:	f851 3b08 	ldr.w	r3, [r1], #8
    d95c:	fa0c f404 	lsl.w	r4, ip, r4
    d960:	ea62 0204 	orn	r2, r2, r4
    d964:	ea63 0304 	orn	r3, r3, r4
    d968:	e7c9      	b.n	d8fe <strcmp+0x116>
    d96a:	f010 0403 	ands.w	r4, r0, #3
    d96e:	d01a      	beq.n	d9a6 <strcmp+0x1be>
    d970:	eba1 0104 	sub.w	r1, r1, r4
    d974:	f020 0003 	bic.w	r0, r0, #3
    d978:	07e4      	lsls	r4, r4, #31
    d97a:	f850 2b04 	ldr.w	r2, [r0], #4
    d97e:	d006      	beq.n	d98e <strcmp+0x1a6>
    d980:	d20f      	bcs.n	d9a2 <strcmp+0x1ba>
    d982:	788b      	ldrb	r3, [r1, #2]
    d984:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    d988:	1ae4      	subs	r4, r4, r3
    d98a:	d106      	bne.n	d99a <strcmp+0x1b2>
    d98c:	b12b      	cbz	r3, d99a <strcmp+0x1b2>
    d98e:	78cb      	ldrb	r3, [r1, #3]
    d990:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    d994:	1ae4      	subs	r4, r4, r3
    d996:	d100      	bne.n	d99a <strcmp+0x1b2>
    d998:	b91b      	cbnz	r3, d9a2 <strcmp+0x1ba>
    d99a:	4620      	mov	r0, r4
    d99c:	f85d 4b10 	ldr.w	r4, [sp], #16
    d9a0:	4770      	bx	lr
    d9a2:	f101 0104 	add.w	r1, r1, #4
    d9a6:	f850 2b04 	ldr.w	r2, [r0], #4
    d9aa:	07cc      	lsls	r4, r1, #31
    d9ac:	f021 0103 	bic.w	r1, r1, #3
    d9b0:	f851 3b04 	ldr.w	r3, [r1], #4
    d9b4:	d848      	bhi.n	da48 <strcmp+0x260>
    d9b6:	d224      	bcs.n	da02 <strcmp+0x21a>
    d9b8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    d9bc:	fa82 f54c 	uadd8	r5, r2, ip
    d9c0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    d9c4:	faa5 f58c 	sel	r5, r5, ip
    d9c8:	d10a      	bne.n	d9e0 <strcmp+0x1f8>
    d9ca:	b965      	cbnz	r5, d9e6 <strcmp+0x1fe>
    d9cc:	f851 3b04 	ldr.w	r3, [r1], #4
    d9d0:	ea84 0402 	eor.w	r4, r4, r2
    d9d4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    d9d8:	d10e      	bne.n	d9f8 <strcmp+0x210>
    d9da:	f850 2b04 	ldr.w	r2, [r0], #4
    d9de:	e7eb      	b.n	d9b8 <strcmp+0x1d0>
    d9e0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    d9e4:	e055      	b.n	da92 <strcmp+0x2aa>
    d9e6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    d9ea:	d14d      	bne.n	da88 <strcmp+0x2a0>
    d9ec:	7808      	ldrb	r0, [r1, #0]
    d9ee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d9f2:	f1c0 0000 	rsb	r0, r0, #0
    d9f6:	4770      	bx	lr
    d9f8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    d9fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    da00:	e047      	b.n	da92 <strcmp+0x2aa>
    da02:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    da06:	fa82 f54c 	uadd8	r5, r2, ip
    da0a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    da0e:	faa5 f58c 	sel	r5, r5, ip
    da12:	d10a      	bne.n	da2a <strcmp+0x242>
    da14:	b965      	cbnz	r5, da30 <strcmp+0x248>
    da16:	f851 3b04 	ldr.w	r3, [r1], #4
    da1a:	ea84 0402 	eor.w	r4, r4, r2
    da1e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    da22:	d10c      	bne.n	da3e <strcmp+0x256>
    da24:	f850 2b04 	ldr.w	r2, [r0], #4
    da28:	e7eb      	b.n	da02 <strcmp+0x21a>
    da2a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    da2e:	e030      	b.n	da92 <strcmp+0x2aa>
    da30:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    da34:	d128      	bne.n	da88 <strcmp+0x2a0>
    da36:	880b      	ldrh	r3, [r1, #0]
    da38:	ea4f 4212 	mov.w	r2, r2, lsr #16
    da3c:	e029      	b.n	da92 <strcmp+0x2aa>
    da3e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    da42:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    da46:	e024      	b.n	da92 <strcmp+0x2aa>
    da48:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    da4c:	fa82 f54c 	uadd8	r5, r2, ip
    da50:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    da54:	faa5 f58c 	sel	r5, r5, ip
    da58:	d10a      	bne.n	da70 <strcmp+0x288>
    da5a:	b965      	cbnz	r5, da76 <strcmp+0x28e>
    da5c:	f851 3b04 	ldr.w	r3, [r1], #4
    da60:	ea84 0402 	eor.w	r4, r4, r2
    da64:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    da68:	d109      	bne.n	da7e <strcmp+0x296>
    da6a:	f850 2b04 	ldr.w	r2, [r0], #4
    da6e:	e7eb      	b.n	da48 <strcmp+0x260>
    da70:	ea4f 6313 	mov.w	r3, r3, lsr #24
    da74:	e00d      	b.n	da92 <strcmp+0x2aa>
    da76:	f015 0fff 	tst.w	r5, #255	; 0xff
    da7a:	d105      	bne.n	da88 <strcmp+0x2a0>
    da7c:	680b      	ldr	r3, [r1, #0]
    da7e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    da82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    da86:	e004      	b.n	da92 <strcmp+0x2aa>
    da88:	f04f 0000 	mov.w	r0, #0
    da8c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    da90:	4770      	bx	lr
    da92:	ba12      	rev	r2, r2
    da94:	ba1b      	rev	r3, r3
    da96:	fa82 f44c 	uadd8	r4, r2, ip
    da9a:	ea82 0403 	eor.w	r4, r2, r3
    da9e:	faa4 f58c 	sel	r5, r4, ip
    daa2:	fab5 f485 	clz	r4, r5
    daa6:	fa02 f204 	lsl.w	r2, r2, r4
    daaa:	fa03 f304 	lsl.w	r3, r3, r4
    daae:	ea4f 6012 	mov.w	r0, r2, lsr #24
    dab2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    dab6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    daba:	4770      	bx	lr

0000dabc <__libc_init_array>:
    dabc:	b570      	push	{r4, r5, r6, lr}
    dabe:	4e0d      	ldr	r6, [pc, #52]	; (daf4 <__libc_init_array+0x38>)
    dac0:	4d0d      	ldr	r5, [pc, #52]	; (daf8 <__libc_init_array+0x3c>)
    dac2:	1b76      	subs	r6, r6, r5
    dac4:	10b6      	asrs	r6, r6, #2
    dac6:	d006      	beq.n	dad6 <__libc_init_array+0x1a>
    dac8:	2400      	movs	r4, #0
    daca:	f855 3b04 	ldr.w	r3, [r5], #4
    dace:	3401      	adds	r4, #1
    dad0:	4798      	blx	r3
    dad2:	42a6      	cmp	r6, r4
    dad4:	d1f9      	bne.n	daca <__libc_init_array+0xe>
    dad6:	4e09      	ldr	r6, [pc, #36]	; (dafc <__libc_init_array+0x40>)
    dad8:	4d09      	ldr	r5, [pc, #36]	; (db00 <__libc_init_array+0x44>)
    dada:	1b76      	subs	r6, r6, r5
    dadc:	f008 fa6c 	bl	15fb8 <___init_veneer>
    dae0:	10b6      	asrs	r6, r6, #2
    dae2:	d006      	beq.n	daf2 <__libc_init_array+0x36>
    dae4:	2400      	movs	r4, #0
    dae6:	f855 3b04 	ldr.w	r3, [r5], #4
    daea:	3401      	adds	r4, #1
    daec:	4798      	blx	r3
    daee:	42a6      	cmp	r6, r4
    daf0:	d1f9      	bne.n	dae6 <__libc_init_array+0x2a>
    daf2:	bd70      	pop	{r4, r5, r6, pc}
    daf4:	60001e80 	.word	0x60001e80
    daf8:	60001e80 	.word	0x60001e80
    dafc:	60001e88 	.word	0x60001e88
    db00:	60001e80 	.word	0x60001e80

0000db04 <__retarget_lock_init_recursive>:
    db04:	4770      	bx	lr
    db06:	bf00      	nop

0000db08 <__retarget_lock_close_recursive>:
    db08:	4770      	bx	lr
    db0a:	bf00      	nop

0000db0c <__retarget_lock_acquire_recursive>:
    db0c:	4770      	bx	lr
    db0e:	bf00      	nop

0000db10 <__retarget_lock_release_recursive>:
    db10:	4770      	bx	lr
    db12:	bf00      	nop
	...

0000db20 <memchr>:
    db20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    db24:	2a10      	cmp	r2, #16
    db26:	db2b      	blt.n	db80 <memchr+0x60>
    db28:	f010 0f07 	tst.w	r0, #7
    db2c:	d008      	beq.n	db40 <memchr+0x20>
    db2e:	f810 3b01 	ldrb.w	r3, [r0], #1
    db32:	3a01      	subs	r2, #1
    db34:	428b      	cmp	r3, r1
    db36:	d02d      	beq.n	db94 <memchr+0x74>
    db38:	f010 0f07 	tst.w	r0, #7
    db3c:	b342      	cbz	r2, db90 <memchr+0x70>
    db3e:	d1f6      	bne.n	db2e <memchr+0xe>
    db40:	b4f0      	push	{r4, r5, r6, r7}
    db42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    db46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    db4a:	f022 0407 	bic.w	r4, r2, #7
    db4e:	f07f 0700 	mvns.w	r7, #0
    db52:	2300      	movs	r3, #0
    db54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    db58:	3c08      	subs	r4, #8
    db5a:	ea85 0501 	eor.w	r5, r5, r1
    db5e:	ea86 0601 	eor.w	r6, r6, r1
    db62:	fa85 f547 	uadd8	r5, r5, r7
    db66:	faa3 f587 	sel	r5, r3, r7
    db6a:	fa86 f647 	uadd8	r6, r6, r7
    db6e:	faa5 f687 	sel	r6, r5, r7
    db72:	b98e      	cbnz	r6, db98 <memchr+0x78>
    db74:	d1ee      	bne.n	db54 <memchr+0x34>
    db76:	bcf0      	pop	{r4, r5, r6, r7}
    db78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    db7c:	f002 0207 	and.w	r2, r2, #7
    db80:	b132      	cbz	r2, db90 <memchr+0x70>
    db82:	f810 3b01 	ldrb.w	r3, [r0], #1
    db86:	3a01      	subs	r2, #1
    db88:	ea83 0301 	eor.w	r3, r3, r1
    db8c:	b113      	cbz	r3, db94 <memchr+0x74>
    db8e:	d1f8      	bne.n	db82 <memchr+0x62>
    db90:	2000      	movs	r0, #0
    db92:	4770      	bx	lr
    db94:	3801      	subs	r0, #1
    db96:	4770      	bx	lr
    db98:	2d00      	cmp	r5, #0
    db9a:	bf06      	itte	eq
    db9c:	4635      	moveq	r5, r6
    db9e:	3803      	subeq	r0, #3
    dba0:	3807      	subne	r0, #7
    dba2:	f015 0f01 	tst.w	r5, #1
    dba6:	d107      	bne.n	dbb8 <memchr+0x98>
    dba8:	3001      	adds	r0, #1
    dbaa:	f415 7f80 	tst.w	r5, #256	; 0x100
    dbae:	bf02      	ittt	eq
    dbb0:	3001      	addeq	r0, #1
    dbb2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    dbb6:	3001      	addeq	r0, #1
    dbb8:	bcf0      	pop	{r4, r5, r6, r7}
    dbba:	3801      	subs	r0, #1
    dbbc:	4770      	bx	lr
    dbbe:	bf00      	nop

0000dbc0 <strlen>:
    dbc0:	f890 f000 	pld	[r0]
    dbc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    dbc8:	f020 0107 	bic.w	r1, r0, #7
    dbcc:	f06f 0c00 	mvn.w	ip, #0
    dbd0:	f010 0407 	ands.w	r4, r0, #7
    dbd4:	f891 f020 	pld	[r1, #32]
    dbd8:	f040 8049 	bne.w	dc6e <strlen+0xae>
    dbdc:	f04f 0400 	mov.w	r4, #0
    dbe0:	f06f 0007 	mvn.w	r0, #7
    dbe4:	e9d1 2300 	ldrd	r2, r3, [r1]
    dbe8:	f891 f040 	pld	[r1, #64]	; 0x40
    dbec:	f100 0008 	add.w	r0, r0, #8
    dbf0:	fa82 f24c 	uadd8	r2, r2, ip
    dbf4:	faa4 f28c 	sel	r2, r4, ip
    dbf8:	fa83 f34c 	uadd8	r3, r3, ip
    dbfc:	faa2 f38c 	sel	r3, r2, ip
    dc00:	bb4b      	cbnz	r3, dc56 <strlen+0x96>
    dc02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    dc06:	fa82 f24c 	uadd8	r2, r2, ip
    dc0a:	f100 0008 	add.w	r0, r0, #8
    dc0e:	faa4 f28c 	sel	r2, r4, ip
    dc12:	fa83 f34c 	uadd8	r3, r3, ip
    dc16:	faa2 f38c 	sel	r3, r2, ip
    dc1a:	b9e3      	cbnz	r3, dc56 <strlen+0x96>
    dc1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    dc20:	fa82 f24c 	uadd8	r2, r2, ip
    dc24:	f100 0008 	add.w	r0, r0, #8
    dc28:	faa4 f28c 	sel	r2, r4, ip
    dc2c:	fa83 f34c 	uadd8	r3, r3, ip
    dc30:	faa2 f38c 	sel	r3, r2, ip
    dc34:	b97b      	cbnz	r3, dc56 <strlen+0x96>
    dc36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    dc3a:	f101 0120 	add.w	r1, r1, #32
    dc3e:	fa82 f24c 	uadd8	r2, r2, ip
    dc42:	f100 0008 	add.w	r0, r0, #8
    dc46:	faa4 f28c 	sel	r2, r4, ip
    dc4a:	fa83 f34c 	uadd8	r3, r3, ip
    dc4e:	faa2 f38c 	sel	r3, r2, ip
    dc52:	2b00      	cmp	r3, #0
    dc54:	d0c6      	beq.n	dbe4 <strlen+0x24>
    dc56:	2a00      	cmp	r2, #0
    dc58:	bf04      	itt	eq
    dc5a:	3004      	addeq	r0, #4
    dc5c:	461a      	moveq	r2, r3
    dc5e:	ba12      	rev	r2, r2
    dc60:	fab2 f282 	clz	r2, r2
    dc64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    dc68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    dc6c:	4770      	bx	lr
    dc6e:	e9d1 2300 	ldrd	r2, r3, [r1]
    dc72:	f004 0503 	and.w	r5, r4, #3
    dc76:	f1c4 0000 	rsb	r0, r4, #0
    dc7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    dc7e:	f014 0f04 	tst.w	r4, #4
    dc82:	f891 f040 	pld	[r1, #64]	; 0x40
    dc86:	fa0c f505 	lsl.w	r5, ip, r5
    dc8a:	ea62 0205 	orn	r2, r2, r5
    dc8e:	bf1c      	itt	ne
    dc90:	ea63 0305 	ornne	r3, r3, r5
    dc94:	4662      	movne	r2, ip
    dc96:	f04f 0400 	mov.w	r4, #0
    dc9a:	e7a9      	b.n	dbf0 <strlen+0x30>

0000dc9c <__register_exitproc>:
    dc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dca0:	f8df a07c 	ldr.w	sl, [pc, #124]	; dd20 <__register_exitproc+0x84>
    dca4:	4606      	mov	r6, r0
    dca6:	f8da 0000 	ldr.w	r0, [sl]
    dcaa:	4698      	mov	r8, r3
    dcac:	460f      	mov	r7, r1
    dcae:	4691      	mov	r9, r2
    dcb0:	f7ff ff2c 	bl	db0c <__retarget_lock_acquire_recursive>
    dcb4:	4b18      	ldr	r3, [pc, #96]	; (dd18 <__register_exitproc+0x7c>)
    dcb6:	681c      	ldr	r4, [r3, #0]
    dcb8:	b324      	cbz	r4, dd04 <__register_exitproc+0x68>
    dcba:	6865      	ldr	r5, [r4, #4]
    dcbc:	2d1f      	cmp	r5, #31
    dcbe:	dc24      	bgt.n	dd0a <__register_exitproc+0x6e>
    dcc0:	b95e      	cbnz	r6, dcda <__register_exitproc+0x3e>
    dcc2:	1c6b      	adds	r3, r5, #1
    dcc4:	3502      	adds	r5, #2
    dcc6:	f8da 0000 	ldr.w	r0, [sl]
    dcca:	6063      	str	r3, [r4, #4]
    dccc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    dcd0:	f7ff ff1e 	bl	db10 <__retarget_lock_release_recursive>
    dcd4:	2000      	movs	r0, #0
    dcd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dcda:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    dcde:	2301      	movs	r3, #1
    dce0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    dce4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    dce8:	40ab      	lsls	r3, r5
    dcea:	431a      	orrs	r2, r3
    dcec:	2e02      	cmp	r6, #2
    dcee:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    dcf2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    dcf6:	d1e4      	bne.n	dcc2 <__register_exitproc+0x26>
    dcf8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    dcfc:	431a      	orrs	r2, r3
    dcfe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    dd02:	e7de      	b.n	dcc2 <__register_exitproc+0x26>
    dd04:	4c05      	ldr	r4, [pc, #20]	; (dd1c <__register_exitproc+0x80>)
    dd06:	601c      	str	r4, [r3, #0]
    dd08:	e7d7      	b.n	dcba <__register_exitproc+0x1e>
    dd0a:	f8da 0000 	ldr.w	r0, [sl]
    dd0e:	f7ff feff 	bl	db10 <__retarget_lock_release_recursive>
    dd12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dd16:	e7de      	b.n	dcd6 <__register_exitproc+0x3a>
    dd18:	20009258 	.word	0x20009258
    dd1c:	2000925c 	.word	0x2000925c
    dd20:	20008100 	.word	0x20008100
    dd24:	00000000 	.word	0x00000000

0000dd28 <nan>:
    dd28:	ed9f 0b01 	vldr	d0, [pc, #4]	; dd30 <nan+0x8>
    dd2c:	4770      	bx	lr
    dd2e:	bf00      	nop
    dd30:	00000000 	.word	0x00000000
    dd34:	7ff80000 	.word	0x7ff80000

0000dd38 <nanf>:
    dd38:	ed9f 0a01 	vldr	s0, [pc, #4]	; dd40 <nanf+0x8>
    dd3c:	4770      	bx	lr
    dd3e:	bf00      	nop
    dd40:	7fc00000 	.word	0x7fc00000

0000dd44 <_malloc_trim_r>:
    dd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd46:	4f24      	ldr	r7, [pc, #144]	; (ddd8 <_malloc_trim_r+0x94>)
    dd48:	460c      	mov	r4, r1
    dd4a:	4606      	mov	r6, r0
    dd4c:	f7fd ffac 	bl	bca8 <__malloc_lock>
    dd50:	68bb      	ldr	r3, [r7, #8]
    dd52:	685d      	ldr	r5, [r3, #4]
    dd54:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    dd58:	310f      	adds	r1, #15
    dd5a:	f025 0503 	bic.w	r5, r5, #3
    dd5e:	194b      	adds	r3, r1, r5
    dd60:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    dd64:	f023 030f 	bic.w	r3, r3, #15
    dd68:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    dd6c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    dd70:	db07      	blt.n	dd82 <_malloc_trim_r+0x3e>
    dd72:	2100      	movs	r1, #0
    dd74:	4630      	mov	r0, r6
    dd76:	f7ff fcfb 	bl	d770 <_sbrk_r>
    dd7a:	68bb      	ldr	r3, [r7, #8]
    dd7c:	442b      	add	r3, r5
    dd7e:	4298      	cmp	r0, r3
    dd80:	d004      	beq.n	dd8c <_malloc_trim_r+0x48>
    dd82:	4630      	mov	r0, r6
    dd84:	f7fd ff96 	bl	bcb4 <__malloc_unlock>
    dd88:	2000      	movs	r0, #0
    dd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dd8c:	4261      	negs	r1, r4
    dd8e:	4630      	mov	r0, r6
    dd90:	f7ff fcee 	bl	d770 <_sbrk_r>
    dd94:	3001      	adds	r0, #1
    dd96:	d00d      	beq.n	ddb4 <_malloc_trim_r+0x70>
    dd98:	4a10      	ldr	r2, [pc, #64]	; (dddc <_malloc_trim_r+0x98>)
    dd9a:	68bb      	ldr	r3, [r7, #8]
    dd9c:	1b2d      	subs	r5, r5, r4
    dd9e:	f045 0501 	orr.w	r5, r5, #1
    dda2:	605d      	str	r5, [r3, #4]
    dda4:	6813      	ldr	r3, [r2, #0]
    dda6:	4630      	mov	r0, r6
    dda8:	1b1b      	subs	r3, r3, r4
    ddaa:	6013      	str	r3, [r2, #0]
    ddac:	f7fd ff82 	bl	bcb4 <__malloc_unlock>
    ddb0:	2001      	movs	r0, #1
    ddb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ddb4:	2100      	movs	r1, #0
    ddb6:	4630      	mov	r0, r6
    ddb8:	f7ff fcda 	bl	d770 <_sbrk_r>
    ddbc:	68ba      	ldr	r2, [r7, #8]
    ddbe:	1a83      	subs	r3, r0, r2
    ddc0:	2b0f      	cmp	r3, #15
    ddc2:	ddde      	ble.n	dd82 <_malloc_trim_r+0x3e>
    ddc4:	f043 0301 	orr.w	r3, r3, #1
    ddc8:	6053      	str	r3, [r2, #4]
    ddca:	4b05      	ldr	r3, [pc, #20]	; (dde0 <_malloc_trim_r+0x9c>)
    ddcc:	4903      	ldr	r1, [pc, #12]	; (dddc <_malloc_trim_r+0x98>)
    ddce:	681b      	ldr	r3, [r3, #0]
    ddd0:	1ac0      	subs	r0, r0, r3
    ddd2:	6008      	str	r0, [r1, #0]
    ddd4:	e7d5      	b.n	dd82 <_malloc_trim_r+0x3e>
    ddd6:	bf00      	nop
    ddd8:	20008278 	.word	0x20008278
    dddc:	200093f8 	.word	0x200093f8
    dde0:	20008680 	.word	0x20008680

0000dde4 <_free_r>:
    dde4:	2900      	cmp	r1, #0
    dde6:	d061      	beq.n	deac <_free_r+0xc8>
    dde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ddea:	460c      	mov	r4, r1
    ddec:	4606      	mov	r6, r0
    ddee:	f7fd ff5b 	bl	bca8 <__malloc_lock>
    ddf2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    ddf6:	4f7b      	ldr	r7, [pc, #492]	; (dfe4 <_free_r+0x200>)
    ddf8:	f1a4 0508 	sub.w	r5, r4, #8
    ddfc:	f022 0101 	bic.w	r1, r2, #1
    de00:	eb05 0c01 	add.w	ip, r5, r1
    de04:	68b8      	ldr	r0, [r7, #8]
    de06:	f8dc 3004 	ldr.w	r3, [ip, #4]
    de0a:	4560      	cmp	r0, ip
    de0c:	f023 0303 	bic.w	r3, r3, #3
    de10:	f000 808b 	beq.w	df2a <_free_r+0x146>
    de14:	07d2      	lsls	r2, r2, #31
    de16:	f8cc 3004 	str.w	r3, [ip, #4]
    de1a:	d432      	bmi.n	de82 <_free_r+0x9e>
    de1c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    de20:	1aad      	subs	r5, r5, r2
    de22:	4411      	add	r1, r2
    de24:	68aa      	ldr	r2, [r5, #8]
    de26:	f107 0008 	add.w	r0, r7, #8
    de2a:	4282      	cmp	r2, r0
    de2c:	d06a      	beq.n	df04 <_free_r+0x120>
    de2e:	eb0c 0403 	add.w	r4, ip, r3
    de32:	f8d4 e004 	ldr.w	lr, [r4, #4]
    de36:	68ec      	ldr	r4, [r5, #12]
    de38:	60d4      	str	r4, [r2, #12]
    de3a:	f01e 0f01 	tst.w	lr, #1
    de3e:	60a2      	str	r2, [r4, #8]
    de40:	f000 8097 	beq.w	df72 <_free_r+0x18e>
    de44:	f041 0301 	orr.w	r3, r1, #1
    de48:	606b      	str	r3, [r5, #4]
    de4a:	f8cc 1000 	str.w	r1, [ip]
    de4e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    de52:	d235      	bcs.n	dec0 <_free_r+0xdc>
    de54:	6878      	ldr	r0, [r7, #4]
    de56:	08cb      	lsrs	r3, r1, #3
    de58:	2201      	movs	r2, #1
    de5a:	0949      	lsrs	r1, r1, #5
    de5c:	3301      	adds	r3, #1
    de5e:	408a      	lsls	r2, r1
    de60:	4302      	orrs	r2, r0
    de62:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    de66:	607a      	str	r2, [r7, #4]
    de68:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    de6c:	3a08      	subs	r2, #8
    de6e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    de72:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    de76:	60cd      	str	r5, [r1, #12]
    de78:	4630      	mov	r0, r6
    de7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    de7e:	f7fd bf19 	b.w	bcb4 <__malloc_unlock>
    de82:	eb0c 0203 	add.w	r2, ip, r3
    de86:	6852      	ldr	r2, [r2, #4]
    de88:	07d0      	lsls	r0, r2, #31
    de8a:	d410      	bmi.n	deae <_free_r+0xca>
    de8c:	4419      	add	r1, r3
    de8e:	f107 0008 	add.w	r0, r7, #8
    de92:	f8dc 3008 	ldr.w	r3, [ip, #8]
    de96:	4283      	cmp	r3, r0
    de98:	d073      	beq.n	df82 <_free_r+0x19e>
    de9a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    de9e:	60da      	str	r2, [r3, #12]
    dea0:	6093      	str	r3, [r2, #8]
    dea2:	f041 0301 	orr.w	r3, r1, #1
    dea6:	606b      	str	r3, [r5, #4]
    dea8:	5069      	str	r1, [r5, r1]
    deaa:	e7d0      	b.n	de4e <_free_r+0x6a>
    deac:	4770      	bx	lr
    deae:	f041 0301 	orr.w	r3, r1, #1
    deb2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    deb6:	f844 3c04 	str.w	r3, [r4, #-4]
    deba:	f8cc 1000 	str.w	r1, [ip]
    debe:	d3c9      	bcc.n	de54 <_free_r+0x70>
    dec0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    dec4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    dec8:	d248      	bcs.n	df5c <_free_r+0x178>
    deca:	098b      	lsrs	r3, r1, #6
    decc:	f103 0039 	add.w	r0, r3, #57	; 0x39
    ded0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    ded4:	00c3      	lsls	r3, r0, #3
    ded6:	18f8      	adds	r0, r7, r3
    ded8:	58fb      	ldr	r3, [r7, r3]
    deda:	3808      	subs	r0, #8
    dedc:	4298      	cmp	r0, r3
    dede:	d059      	beq.n	df94 <_free_r+0x1b0>
    dee0:	685a      	ldr	r2, [r3, #4]
    dee2:	f022 0203 	bic.w	r2, r2, #3
    dee6:	428a      	cmp	r2, r1
    dee8:	d902      	bls.n	def0 <_free_r+0x10c>
    deea:	689b      	ldr	r3, [r3, #8]
    deec:	4298      	cmp	r0, r3
    deee:	d1f7      	bne.n	dee0 <_free_r+0xfc>
    def0:	68d8      	ldr	r0, [r3, #12]
    def2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    def6:	6085      	str	r5, [r0, #8]
    def8:	60dd      	str	r5, [r3, #12]
    defa:	4630      	mov	r0, r6
    defc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    df00:	f7fd bed8 	b.w	bcb4 <__malloc_unlock>
    df04:	eb0c 0203 	add.w	r2, ip, r3
    df08:	6852      	ldr	r2, [r2, #4]
    df0a:	07d2      	lsls	r2, r2, #31
    df0c:	d463      	bmi.n	dfd6 <_free_r+0x1f2>
    df0e:	440b      	add	r3, r1
    df10:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    df14:	60ca      	str	r2, [r1, #12]
    df16:	6091      	str	r1, [r2, #8]
    df18:	f043 0201 	orr.w	r2, r3, #1
    df1c:	606a      	str	r2, [r5, #4]
    df1e:	4630      	mov	r0, r6
    df20:	50eb      	str	r3, [r5, r3]
    df22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    df26:	f7fd bec5 	b.w	bcb4 <__malloc_unlock>
    df2a:	440b      	add	r3, r1
    df2c:	07d1      	lsls	r1, r2, #31
    df2e:	d407      	bmi.n	df40 <_free_r+0x15c>
    df30:	f854 2c08 	ldr.w	r2, [r4, #-8]
    df34:	1aad      	subs	r5, r5, r2
    df36:	4413      	add	r3, r2
    df38:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    df3c:	60ca      	str	r2, [r1, #12]
    df3e:	6091      	str	r1, [r2, #8]
    df40:	f043 0201 	orr.w	r2, r3, #1
    df44:	606a      	str	r2, [r5, #4]
    df46:	4a28      	ldr	r2, [pc, #160]	; (dfe8 <_free_r+0x204>)
    df48:	60bd      	str	r5, [r7, #8]
    df4a:	6812      	ldr	r2, [r2, #0]
    df4c:	429a      	cmp	r2, r3
    df4e:	d893      	bhi.n	de78 <_free_r+0x94>
    df50:	4b26      	ldr	r3, [pc, #152]	; (dfec <_free_r+0x208>)
    df52:	4630      	mov	r0, r6
    df54:	6819      	ldr	r1, [r3, #0]
    df56:	f7ff fef5 	bl	dd44 <_malloc_trim_r>
    df5a:	e78d      	b.n	de78 <_free_r+0x94>
    df5c:	2b14      	cmp	r3, #20
    df5e:	d90a      	bls.n	df76 <_free_r+0x192>
    df60:	2b54      	cmp	r3, #84	; 0x54
    df62:	d81f      	bhi.n	dfa4 <_free_r+0x1c0>
    df64:	0b0b      	lsrs	r3, r1, #12
    df66:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    df6a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    df6e:	00c3      	lsls	r3, r0, #3
    df70:	e7b1      	b.n	ded6 <_free_r+0xf2>
    df72:	4419      	add	r1, r3
    df74:	e78d      	b.n	de92 <_free_r+0xae>
    df76:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    df7a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    df7e:	00c3      	lsls	r3, r0, #3
    df80:	e7a9      	b.n	ded6 <_free_r+0xf2>
    df82:	f041 0301 	orr.w	r3, r1, #1
    df86:	e9c7 5504 	strd	r5, r5, [r7, #16]
    df8a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    df8e:	606b      	str	r3, [r5, #4]
    df90:	5069      	str	r1, [r5, r1]
    df92:	e771      	b.n	de78 <_free_r+0x94>
    df94:	6879      	ldr	r1, [r7, #4]
    df96:	1092      	asrs	r2, r2, #2
    df98:	2401      	movs	r4, #1
    df9a:	fa04 f202 	lsl.w	r2, r4, r2
    df9e:	430a      	orrs	r2, r1
    dfa0:	607a      	str	r2, [r7, #4]
    dfa2:	e7a6      	b.n	def2 <_free_r+0x10e>
    dfa4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    dfa8:	d806      	bhi.n	dfb8 <_free_r+0x1d4>
    dfaa:	0bcb      	lsrs	r3, r1, #15
    dfac:	f103 0078 	add.w	r0, r3, #120	; 0x78
    dfb0:	f103 0277 	add.w	r2, r3, #119	; 0x77
    dfb4:	00c3      	lsls	r3, r0, #3
    dfb6:	e78e      	b.n	ded6 <_free_r+0xf2>
    dfb8:	f240 5254 	movw	r2, #1364	; 0x554
    dfbc:	4293      	cmp	r3, r2
    dfbe:	d806      	bhi.n	dfce <_free_r+0x1ea>
    dfc0:	0c8b      	lsrs	r3, r1, #18
    dfc2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    dfc6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    dfca:	00c3      	lsls	r3, r0, #3
    dfcc:	e783      	b.n	ded6 <_free_r+0xf2>
    dfce:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    dfd2:	227e      	movs	r2, #126	; 0x7e
    dfd4:	e77f      	b.n	ded6 <_free_r+0xf2>
    dfd6:	f041 0301 	orr.w	r3, r1, #1
    dfda:	606b      	str	r3, [r5, #4]
    dfdc:	f8cc 1000 	str.w	r1, [ip]
    dfe0:	e74a      	b.n	de78 <_free_r+0x94>
    dfe2:	bf00      	nop
    dfe4:	20008278 	.word	0x20008278
    dfe8:	20008684 	.word	0x20008684
    dfec:	20009428 	.word	0x20009428

0000dff0 <rshift>:
    dff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dff4:	6904      	ldr	r4, [r0, #16]
    dff6:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    dffa:	dd2f      	ble.n	e05c <rshift+0x6c>
    dffc:	f100 0e14 	add.w	lr, r0, #20
    e000:	114e      	asrs	r6, r1, #5
    e002:	f011 0c1f 	ands.w	ip, r1, #31
    e006:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    e00a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    e00e:	d02b      	beq.n	e068 <rshift+0x78>
    e010:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    e014:	3304      	adds	r3, #4
    e016:	429d      	cmp	r5, r3
    e018:	fa21 f10c 	lsr.w	r1, r1, ip
    e01c:	f1cc 0820 	rsb	r8, ip, #32
    e020:	d918      	bls.n	e054 <rshift+0x64>
    e022:	4677      	mov	r7, lr
    e024:	681a      	ldr	r2, [r3, #0]
    e026:	fa02 f208 	lsl.w	r2, r2, r8
    e02a:	430a      	orrs	r2, r1
    e02c:	f847 2b04 	str.w	r2, [r7], #4
    e030:	f853 1b04 	ldr.w	r1, [r3], #4
    e034:	429d      	cmp	r5, r3
    e036:	fa21 f10c 	lsr.w	r1, r1, ip
    e03a:	d8f3      	bhi.n	e024 <rshift+0x34>
    e03c:	1ba3      	subs	r3, r4, r6
    e03e:	009b      	lsls	r3, r3, #2
    e040:	3b05      	subs	r3, #5
    e042:	089b      	lsrs	r3, r3, #2
    e044:	3301      	adds	r3, #1
    e046:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    e04a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    e04e:	b1c9      	cbz	r1, e084 <rshift+0x94>
    e050:	3404      	adds	r4, #4
    e052:	e017      	b.n	e084 <rshift+0x94>
    e054:	6141      	str	r1, [r0, #20]
    e056:	4674      	mov	r4, lr
    e058:	2900      	cmp	r1, #0
    e05a:	d1f9      	bne.n	e050 <rshift+0x60>
    e05c:	2300      	movs	r3, #0
    e05e:	6103      	str	r3, [r0, #16]
    e060:	2300      	movs	r3, #0
    e062:	6143      	str	r3, [r0, #20]
    e064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e068:	429d      	cmp	r5, r3
    e06a:	bf88      	it	hi
    e06c:	f100 0210 	addhi.w	r2, r0, #16
    e070:	d9f4      	bls.n	e05c <rshift+0x6c>
    e072:	f853 1b04 	ldr.w	r1, [r3], #4
    e076:	f842 1f04 	str.w	r1, [r2, #4]!
    e07a:	429d      	cmp	r5, r3
    e07c:	d8f9      	bhi.n	e072 <rshift+0x82>
    e07e:	1ba4      	subs	r4, r4, r6
    e080:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    e084:	eba4 030e 	sub.w	r3, r4, lr
    e088:	109b      	asrs	r3, r3, #2
    e08a:	4574      	cmp	r4, lr
    e08c:	6103      	str	r3, [r0, #16]
    e08e:	d0e7      	beq.n	e060 <rshift+0x70>
    e090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e094 <__gethex>:
    e094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e098:	ed2d 8b02 	vpush	{d8}
    e09c:	680c      	ldr	r4, [r1, #0]
    e09e:	468b      	mov	fp, r1
    e0a0:	78a1      	ldrb	r1, [r4, #2]
    e0a2:	b085      	sub	sp, #20
    e0a4:	2930      	cmp	r1, #48	; 0x30
    e0a6:	ee08 0a10 	vmov	s16, r0
    e0aa:	4692      	mov	sl, r2
    e0ac:	9302      	str	r3, [sp, #8]
    e0ae:	f040 81ce 	bne.w	e44e <__gethex+0x3ba>
    e0b2:	f06f 0001 	mvn.w	r0, #1
    e0b6:	1b00      	subs	r0, r0, r4
    e0b8:	1ce2      	adds	r2, r4, #3
    e0ba:	1883      	adds	r3, r0, r2
    e0bc:	4614      	mov	r4, r2
    e0be:	f812 1b01 	ldrb.w	r1, [r2], #1
    e0c2:	2930      	cmp	r1, #48	; 0x30
    e0c4:	d0f9      	beq.n	e0ba <__gethex+0x26>
    e0c6:	f8df 8300 	ldr.w	r8, [pc, #768]	; e3c8 <__gethex+0x334>
    e0ca:	f818 2001 	ldrb.w	r2, [r8, r1]
    e0ce:	2a00      	cmp	r2, #0
    e0d0:	f000 80e5 	beq.w	e29e <__gethex+0x20a>
    e0d4:	7822      	ldrb	r2, [r4, #0]
    e0d6:	2700      	movs	r7, #0
    e0d8:	f818 2002 	ldrb.w	r2, [r8, r2]
    e0dc:	463d      	mov	r5, r7
    e0de:	4626      	mov	r6, r4
    e0e0:	b12a      	cbz	r2, e0ee <__gethex+0x5a>
    e0e2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    e0e6:	f818 2002 	ldrb.w	r2, [r8, r2]
    e0ea:	2a00      	cmp	r2, #0
    e0ec:	d1f9      	bne.n	e0e2 <__gethex+0x4e>
    e0ee:	49b5      	ldr	r1, [pc, #724]	; (e3c4 <__gethex+0x330>)
    e0f0:	9301      	str	r3, [sp, #4]
    e0f2:	2201      	movs	r2, #1
    e0f4:	4630      	mov	r0, r6
    e0f6:	f7ff fa47 	bl	d588 <strncmp>
    e0fa:	9b01      	ldr	r3, [sp, #4]
    e0fc:	4681      	mov	r9, r0
    e0fe:	2800      	cmp	r0, #0
    e100:	d04d      	beq.n	e19e <__gethex+0x10a>
    e102:	2d00      	cmp	r5, #0
    e104:	d14e      	bne.n	e1a4 <__gethex+0x110>
    e106:	7832      	ldrb	r2, [r6, #0]
    e108:	46a9      	mov	r9, r5
    e10a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    e10e:	2a50      	cmp	r2, #80	; 0x50
    e110:	4635      	mov	r5, r6
    e112:	d050      	beq.n	e1b6 <__gethex+0x122>
    e114:	f8cb 6000 	str.w	r6, [fp]
    e118:	2f00      	cmp	r7, #0
    e11a:	d169      	bne.n	e1f0 <__gethex+0x15c>
    e11c:	1b2b      	subs	r3, r5, r4
    e11e:	3b01      	subs	r3, #1
    e120:	2b07      	cmp	r3, #7
    e122:	4639      	mov	r1, r7
    e124:	dd04      	ble.n	e130 <__gethex+0x9c>
    e126:	105b      	asrs	r3, r3, #1
    e128:	2b07      	cmp	r3, #7
    e12a:	f101 0101 	add.w	r1, r1, #1
    e12e:	dcfa      	bgt.n	e126 <__gethex+0x92>
    e130:	ee18 0a10 	vmov	r0, s16
    e134:	f003 fd4e 	bl	11bd4 <_Balloc>
    e138:	4683      	mov	fp, r0
    e13a:	2800      	cmp	r0, #0
    e13c:	f000 8266 	beq.w	e60c <__gethex+0x578>
    e140:	f100 0614 	add.w	r6, r0, #20
    e144:	42ac      	cmp	r4, r5
    e146:	9601      	str	r6, [sp, #4]
    e148:	f080 81d2 	bcs.w	e4f0 <__gethex+0x45c>
    e14c:	2700      	movs	r7, #0
    e14e:	f8cd 900c 	str.w	r9, [sp, #12]
    e152:	499c      	ldr	r1, [pc, #624]	; (e3c4 <__gethex+0x330>)
    e154:	46a1      	mov	r9, r4
    e156:	463c      	mov	r4, r7
    e158:	e00c      	b.n	e174 <__gethex+0xe0>
    e15a:	2f20      	cmp	r7, #32
    e15c:	d019      	beq.n	e192 <__gethex+0xfe>
    e15e:	4638      	mov	r0, r7
    e160:	3704      	adds	r7, #4
    e162:	782a      	ldrb	r2, [r5, #0]
    e164:	f818 2002 	ldrb.w	r2, [r8, r2]
    e168:	f002 020f 	and.w	r2, r2, #15
    e16c:	4082      	lsls	r2, r0
    e16e:	4314      	orrs	r4, r2
    e170:	454d      	cmp	r5, r9
    e172:	d047      	beq.n	e204 <__gethex+0x170>
    e174:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    e178:	2a2e      	cmp	r2, #46	; 0x2e
    e17a:	d1ee      	bne.n	e15a <__gethex+0xc6>
    e17c:	454d      	cmp	r5, r9
    e17e:	d3ec      	bcc.n	e15a <__gethex+0xc6>
    e180:	2201      	movs	r2, #1
    e182:	4628      	mov	r0, r5
    e184:	f7ff fa00 	bl	d588 <strncmp>
    e188:	498e      	ldr	r1, [pc, #568]	; (e3c4 <__gethex+0x330>)
    e18a:	2800      	cmp	r0, #0
    e18c:	d0f0      	beq.n	e170 <__gethex+0xdc>
    e18e:	2f20      	cmp	r7, #32
    e190:	d1e5      	bne.n	e15e <__gethex+0xca>
    e192:	2000      	movs	r0, #0
    e194:	f846 4b04 	str.w	r4, [r6], #4
    e198:	2704      	movs	r7, #4
    e19a:	4604      	mov	r4, r0
    e19c:	e7e1      	b.n	e162 <__gethex+0xce>
    e19e:	2d00      	cmp	r5, #0
    e1a0:	f000 8142 	beq.w	e428 <__gethex+0x394>
    e1a4:	7832      	ldrb	r2, [r6, #0]
    e1a6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    e1aa:	1bad      	subs	r5, r5, r6
    e1ac:	2a50      	cmp	r2, #80	; 0x50
    e1ae:	ea4f 0985 	mov.w	r9, r5, lsl #2
    e1b2:	4635      	mov	r5, r6
    e1b4:	d1ae      	bne.n	e114 <__gethex+0x80>
    e1b6:	786a      	ldrb	r2, [r5, #1]
    e1b8:	2a2b      	cmp	r2, #43	; 0x2b
    e1ba:	f000 8125 	beq.w	e408 <__gethex+0x374>
    e1be:	2a2d      	cmp	r2, #45	; 0x2d
    e1c0:	f000 80a5 	beq.w	e30e <__gethex+0x27a>
    e1c4:	1c6e      	adds	r6, r5, #1
    e1c6:	2000      	movs	r0, #0
    e1c8:	f818 1002 	ldrb.w	r1, [r8, r2]
    e1cc:	1e4a      	subs	r2, r1, #1
    e1ce:	2a18      	cmp	r2, #24
    e1d0:	f200 809b 	bhi.w	e30a <__gethex+0x276>
    e1d4:	7872      	ldrb	r2, [r6, #1]
    e1d6:	f818 2002 	ldrb.w	r2, [r8, r2]
    e1da:	3910      	subs	r1, #16
    e1dc:	3601      	adds	r6, #1
    e1de:	2a00      	cmp	r2, #0
    e1e0:	d15a      	bne.n	e298 <__gethex+0x204>
    e1e2:	b100      	cbz	r0, e1e6 <__gethex+0x152>
    e1e4:	4249      	negs	r1, r1
    e1e6:	4489      	add	r9, r1
    e1e8:	f8cb 6000 	str.w	r6, [fp]
    e1ec:	2f00      	cmp	r7, #0
    e1ee:	d095      	beq.n	e11c <__gethex+0x88>
    e1f0:	2b00      	cmp	r3, #0
    e1f2:	bf14      	ite	ne
    e1f4:	2500      	movne	r5, #0
    e1f6:	2506      	moveq	r5, #6
    e1f8:	4628      	mov	r0, r5
    e1fa:	b005      	add	sp, #20
    e1fc:	ecbd 8b02 	vpop	{d8}
    e200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e204:	f8dd 900c 	ldr.w	r9, [sp, #12]
    e208:	4623      	mov	r3, r4
    e20a:	f846 3b04 	str.w	r3, [r6], #4
    e20e:	4618      	mov	r0, r3
    e210:	9b01      	ldr	r3, [sp, #4]
    e212:	1af6      	subs	r6, r6, r3
    e214:	10b6      	asrs	r6, r6, #2
    e216:	f8cb 6010 	str.w	r6, [fp, #16]
    e21a:	f003 fdb5 	bl	11d88 <__hi0bits>
    e21e:	0176      	lsls	r6, r6, #5
    e220:	f8da 4000 	ldr.w	r4, [sl]
    e224:	1a30      	subs	r0, r6, r0
    e226:	42a0      	cmp	r0, r4
    e228:	dc75      	bgt.n	e316 <__gethex+0x282>
    e22a:	f2c0 80ef 	blt.w	e40c <__gethex+0x378>
    e22e:	2700      	movs	r7, #0
    e230:	f8da 3008 	ldr.w	r3, [sl, #8]
    e234:	454b      	cmp	r3, r9
    e236:	f2c0 8151 	blt.w	e4dc <__gethex+0x448>
    e23a:	f8da 3004 	ldr.w	r3, [sl, #4]
    e23e:	454b      	cmp	r3, r9
    e240:	dd4a      	ble.n	e2d8 <__gethex+0x244>
    e242:	eba3 0909 	sub.w	r9, r3, r9
    e246:	454c      	cmp	r4, r9
    e248:	f300 8082 	bgt.w	e350 <__gethex+0x2bc>
    e24c:	f8da 200c 	ldr.w	r2, [sl, #12]
    e250:	2a02      	cmp	r2, #2
    e252:	f000 8165 	beq.w	e520 <__gethex+0x48c>
    e256:	2a03      	cmp	r2, #3
    e258:	f000 8181 	beq.w	e55e <__gethex+0x4ca>
    e25c:	2a01      	cmp	r2, #1
    e25e:	f000 816f 	beq.w	e540 <__gethex+0x4ac>
    e262:	ee18 0a10 	vmov	r0, s16
    e266:	4659      	mov	r1, fp
    e268:	f003 fcda 	bl	11c20 <_Bfree>
    e26c:	2550      	movs	r5, #80	; 0x50
    e26e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e270:	2300      	movs	r3, #0
    e272:	4628      	mov	r0, r5
    e274:	6013      	str	r3, [r2, #0]
    e276:	b005      	add	sp, #20
    e278:	ecbd 8b02 	vpop	{d8}
    e27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e280:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    e284:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    e288:	f1a2 0110 	sub.w	r1, r2, #16
    e28c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    e290:	f818 2002 	ldrb.w	r2, [r8, r2]
    e294:	2a00      	cmp	r2, #0
    e296:	d0a4      	beq.n	e1e2 <__gethex+0x14e>
    e298:	2a19      	cmp	r2, #25
    e29a:	ddf1      	ble.n	e280 <__gethex+0x1ec>
    e29c:	e7a1      	b.n	e1e2 <__gethex+0x14e>
    e29e:	4949      	ldr	r1, [pc, #292]	; (e3c4 <__gethex+0x330>)
    e2a0:	9301      	str	r3, [sp, #4]
    e2a2:	2201      	movs	r2, #1
    e2a4:	4620      	mov	r0, r4
    e2a6:	f7ff f96f 	bl	d588 <strncmp>
    e2aa:	9b01      	ldr	r3, [sp, #4]
    e2ac:	2800      	cmp	r0, #0
    e2ae:	d16d      	bne.n	e38c <__gethex+0x2f8>
    e2b0:	7861      	ldrb	r1, [r4, #1]
    e2b2:	f818 2001 	ldrb.w	r2, [r8, r1]
    e2b6:	1c65      	adds	r5, r4, #1
    e2b8:	2a00      	cmp	r2, #0
    e2ba:	d069      	beq.n	e390 <__gethex+0x2fc>
    e2bc:	2930      	cmp	r1, #48	; 0x30
    e2be:	462c      	mov	r4, r5
    e2c0:	d105      	bne.n	e2ce <__gethex+0x23a>
    e2c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    e2c6:	2b30      	cmp	r3, #48	; 0x30
    e2c8:	d0fb      	beq.n	e2c2 <__gethex+0x22e>
    e2ca:	f818 2003 	ldrb.w	r2, [r8, r3]
    e2ce:	fab2 f782 	clz	r7, r2
    e2d2:	097f      	lsrs	r7, r7, #5
    e2d4:	2301      	movs	r3, #1
    e2d6:	e702      	b.n	e0de <__gethex+0x4a>
    e2d8:	2501      	movs	r5, #1
    e2da:	b157      	cbz	r7, e2f2 <__gethex+0x25e>
    e2dc:	f8da 300c 	ldr.w	r3, [sl, #12]
    e2e0:	2b02      	cmp	r3, #2
    e2e2:	d05d      	beq.n	e3a0 <__gethex+0x30c>
    e2e4:	2b03      	cmp	r3, #3
    e2e6:	d05f      	beq.n	e3a8 <__gethex+0x314>
    e2e8:	2b01      	cmp	r3, #1
    e2ea:	f000 8084 	beq.w	e3f6 <__gethex+0x362>
    e2ee:	f045 0510 	orr.w	r5, r5, #16
    e2f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e2f4:	f8c3 b000 	str.w	fp, [r3]
    e2f8:	9b02      	ldr	r3, [sp, #8]
    e2fa:	4628      	mov	r0, r5
    e2fc:	f8c3 9000 	str.w	r9, [r3]
    e300:	b005      	add	sp, #20
    e302:	ecbd 8b02 	vpop	{d8}
    e306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e30a:	462e      	mov	r6, r5
    e30c:	e702      	b.n	e114 <__gethex+0x80>
    e30e:	2001      	movs	r0, #1
    e310:	78aa      	ldrb	r2, [r5, #2]
    e312:	1cae      	adds	r6, r5, #2
    e314:	e758      	b.n	e1c8 <__gethex+0x134>
    e316:	1b06      	subs	r6, r0, r4
    e318:	4631      	mov	r1, r6
    e31a:	4658      	mov	r0, fp
    e31c:	f004 f962 	bl	125e4 <__any_on>
    e320:	4607      	mov	r7, r0
    e322:	b178      	cbz	r0, e344 <__gethex+0x2b0>
    e324:	1e72      	subs	r2, r6, #1
    e326:	1153      	asrs	r3, r2, #5
    e328:	9901      	ldr	r1, [sp, #4]
    e32a:	2701      	movs	r7, #1
    e32c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    e330:	f002 031f 	and.w	r3, r2, #31
    e334:	fa07 f303 	lsl.w	r3, r7, r3
    e338:	420b      	tst	r3, r1
    e33a:	d003      	beq.n	e344 <__gethex+0x2b0>
    e33c:	42ba      	cmp	r2, r7
    e33e:	f300 80e2 	bgt.w	e506 <__gethex+0x472>
    e342:	2702      	movs	r7, #2
    e344:	4631      	mov	r1, r6
    e346:	4658      	mov	r0, fp
    e348:	44b1      	add	r9, r6
    e34a:	f7ff fe51 	bl	dff0 <rshift>
    e34e:	e76f      	b.n	e230 <__gethex+0x19c>
    e350:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
    e354:	2f00      	cmp	r7, #0
    e356:	f040 80ce 	bne.w	e4f6 <__gethex+0x462>
    e35a:	2d00      	cmp	r5, #0
    e35c:	f040 80cd 	bne.w	e4fa <__gethex+0x466>
    e360:	116b      	asrs	r3, r5, #5
    e362:	9a01      	ldr	r2, [sp, #4]
    e364:	f005 051f 	and.w	r5, r5, #31
    e368:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    e36c:	2301      	movs	r3, #1
    e36e:	40ab      	lsls	r3, r5
    e370:	4213      	tst	r3, r2
    e372:	4649      	mov	r1, r9
    e374:	4658      	mov	r0, fp
    e376:	bf18      	it	ne
    e378:	f047 0702 	orrne.w	r7, r7, #2
    e37c:	eba4 0409 	sub.w	r4, r4, r9
    e380:	f7ff fe36 	bl	dff0 <rshift>
    e384:	2502      	movs	r5, #2
    e386:	f8da 9004 	ldr.w	r9, [sl, #4]
    e38a:	e7a6      	b.n	e2da <__gethex+0x246>
    e38c:	7821      	ldrb	r1, [r4, #0]
    e38e:	4625      	mov	r5, r4
    e390:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    e394:	2950      	cmp	r1, #80	; 0x50
    e396:	f000 80bf 	beq.w	e518 <__gethex+0x484>
    e39a:	f8cb 5000 	str.w	r5, [fp]
    e39e:	e727      	b.n	e1f0 <__gethex+0x15c>
    e3a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e3a2:	f1c3 0301 	rsb	r3, r3, #1
    e3a6:	9311      	str	r3, [sp, #68]	; 0x44
    e3a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e3aa:	2b00      	cmp	r3, #0
    e3ac:	d09f      	beq.n	e2ee <__gethex+0x25a>
    e3ae:	f8db 7010 	ldr.w	r7, [fp, #16]
    e3b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    e3b6:	00ba      	lsls	r2, r7, #2
    e3b8:	4643      	mov	r3, r8
    e3ba:	9201      	str	r2, [sp, #4]
    e3bc:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    e3c0:	2100      	movs	r1, #0
    e3c2:	e007      	b.n	e3d4 <__gethex+0x340>
    e3c4:	200007f8 	.word	0x200007f8
    e3c8:	20000bb8 	.word	0x20000bb8
    e3cc:	4298      	cmp	r0, r3
    e3ce:	f843 1c04 	str.w	r1, [r3, #-4]
    e3d2:	d93f      	bls.n	e454 <__gethex+0x3c0>
    e3d4:	461e      	mov	r6, r3
    e3d6:	f853 2b04 	ldr.w	r2, [r3], #4
    e3da:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    e3de:	d0f5      	beq.n	e3cc <__gethex+0x338>
    e3e0:	3201      	adds	r2, #1
    e3e2:	2d02      	cmp	r5, #2
    e3e4:	6032      	str	r2, [r6, #0]
    e3e6:	f000 80bf 	beq.w	e568 <__gethex+0x4d4>
    e3ea:	f014 041f 	ands.w	r4, r4, #31
    e3ee:	f040 80e7 	bne.w	e5c0 <__gethex+0x52c>
    e3f2:	2521      	movs	r5, #33	; 0x21
    e3f4:	e77d      	b.n	e2f2 <__gethex+0x25e>
    e3f6:	07ba      	lsls	r2, r7, #30
    e3f8:	f57f af79 	bpl.w	e2ee <__gethex+0x25a>
    e3fc:	9b01      	ldr	r3, [sp, #4]
    e3fe:	681b      	ldr	r3, [r3, #0]
    e400:	431f      	orrs	r7, r3
    e402:	07fb      	lsls	r3, r7, #31
    e404:	d4d3      	bmi.n	e3ae <__gethex+0x31a>
    e406:	e772      	b.n	e2ee <__gethex+0x25a>
    e408:	2000      	movs	r0, #0
    e40a:	e781      	b.n	e310 <__gethex+0x27c>
    e40c:	1a22      	subs	r2, r4, r0
    e40e:	4659      	mov	r1, fp
    e410:	ee18 0a10 	vmov	r0, s16
    e414:	eba9 0902 	sub.w	r9, r9, r2
    e418:	f003 fe42 	bl	120a0 <__lshift>
    e41c:	f100 0314 	add.w	r3, r0, #20
    e420:	4683      	mov	fp, r0
    e422:	9301      	str	r3, [sp, #4]
    e424:	2700      	movs	r7, #0
    e426:	e703      	b.n	e230 <__gethex+0x19c>
    e428:	7872      	ldrb	r2, [r6, #1]
    e42a:	f818 0002 	ldrb.w	r0, [r8, r2]
    e42e:	1c71      	adds	r1, r6, #1
    e430:	2800      	cmp	r0, #0
    e432:	f000 80a0 	beq.w	e576 <__gethex+0x4e2>
    e436:	460d      	mov	r5, r1
    e438:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    e43c:	f818 0002 	ldrb.w	r0, [r8, r2]
    e440:	2800      	cmp	r0, #0
    e442:	d1f8      	bne.n	e436 <__gethex+0x3a2>
    e444:	1b75      	subs	r5, r6, r5
    e446:	ea4f 0985 	mov.w	r9, r5, lsl #2
    e44a:	460e      	mov	r6, r1
    e44c:	e65d      	b.n	e10a <__gethex+0x76>
    e44e:	3402      	adds	r4, #2
    e450:	2300      	movs	r3, #0
    e452:	e638      	b.n	e0c6 <__gethex+0x32>
    e454:	f8db 3008 	ldr.w	r3, [fp, #8]
    e458:	429f      	cmp	r7, r3
    e45a:	f280 808e 	bge.w	e57a <__gethex+0x4e6>
    e45e:	463b      	mov	r3, r7
    e460:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    e464:	2101      	movs	r1, #1
    e466:	3301      	adds	r3, #1
    e468:	2d02      	cmp	r5, #2
    e46a:	f8cb 3010 	str.w	r3, [fp, #16]
    e46e:	6151      	str	r1, [r2, #20]
    e470:	d07a      	beq.n	e568 <__gethex+0x4d4>
    e472:	429f      	cmp	r7, r3
    e474:	dab9      	bge.n	e3ea <__gethex+0x356>
    e476:	2b00      	cmp	r3, #0
    e478:	f340 809b 	ble.w	e5b2 <__gethex+0x51e>
    e47c:	f8db 2014 	ldr.w	r2, [fp, #20]
    e480:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    e484:	f10b 0018 	add.w	r0, fp, #24
    e488:	4283      	cmp	r3, r0
    e48a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    e48e:	f240 80b1 	bls.w	e5f4 <__gethex+0x560>
    e492:	4644      	mov	r4, r8
    e494:	6801      	ldr	r1, [r0, #0]
    e496:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    e49a:	f844 2b04 	str.w	r2, [r4], #4
    e49e:	f850 2b04 	ldr.w	r2, [r0], #4
    e4a2:	4283      	cmp	r3, r0
    e4a4:	ea4f 0252 	mov.w	r2, r2, lsr #1
    e4a8:	d8f4      	bhi.n	e494 <__gethex+0x400>
    e4aa:	eba3 030b 	sub.w	r3, r3, fp
    e4ae:	3b19      	subs	r3, #25
    e4b0:	089b      	lsrs	r3, r3, #2
    e4b2:	3301      	adds	r3, #1
    e4b4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    e4b8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    e4bc:	2a00      	cmp	r2, #0
    e4be:	f040 809d 	bne.w	e5fc <__gethex+0x568>
    e4c2:	eba3 0208 	sub.w	r2, r3, r8
    e4c6:	1092      	asrs	r2, r2, #2
    e4c8:	4543      	cmp	r3, r8
    e4ca:	f8cb 2010 	str.w	r2, [fp, #16]
    e4ce:	d073      	beq.n	e5b8 <__gethex+0x524>
    e4d0:	f8da 3008 	ldr.w	r3, [sl, #8]
    e4d4:	f109 0901 	add.w	r9, r9, #1
    e4d8:	454b      	cmp	r3, r9
    e4da:	da8a      	bge.n	e3f2 <__gethex+0x35e>
    e4dc:	ee18 0a10 	vmov	r0, s16
    e4e0:	4659      	mov	r1, fp
    e4e2:	f003 fb9d 	bl	11c20 <_Bfree>
    e4e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e4e8:	2300      	movs	r3, #0
    e4ea:	6013      	str	r3, [r2, #0]
    e4ec:	25a3      	movs	r5, #163	; 0xa3
    e4ee:	e683      	b.n	e1f8 <__gethex+0x164>
    e4f0:	9e01      	ldr	r6, [sp, #4]
    e4f2:	2300      	movs	r3, #0
    e4f4:	e689      	b.n	e20a <__gethex+0x176>
    e4f6:	2701      	movs	r7, #1
    e4f8:	e732      	b.n	e360 <__gethex+0x2cc>
    e4fa:	4629      	mov	r1, r5
    e4fc:	4658      	mov	r0, fp
    e4fe:	f004 f871 	bl	125e4 <__any_on>
    e502:	4607      	mov	r7, r0
    e504:	e72c      	b.n	e360 <__gethex+0x2cc>
    e506:	1eb1      	subs	r1, r6, #2
    e508:	4658      	mov	r0, fp
    e50a:	f004 f86b 	bl	125e4 <__any_on>
    e50e:	2800      	cmp	r0, #0
    e510:	f43f af17 	beq.w	e342 <__gethex+0x2ae>
    e514:	2703      	movs	r7, #3
    e516:	e715      	b.n	e344 <__gethex+0x2b0>
    e518:	f04f 0900 	mov.w	r9, #0
    e51c:	2701      	movs	r7, #1
    e51e:	e64a      	b.n	e1b6 <__gethex+0x122>
    e520:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e522:	2a00      	cmp	r2, #0
    e524:	f47f ae9d 	bne.w	e262 <__gethex+0x1ce>
    e528:	9902      	ldr	r1, [sp, #8]
    e52a:	600b      	str	r3, [r1, #0]
    e52c:	9b01      	ldr	r3, [sp, #4]
    e52e:	2201      	movs	r2, #1
    e530:	f8cb 2010 	str.w	r2, [fp, #16]
    e534:	601a      	str	r2, [r3, #0]
    e536:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e538:	2562      	movs	r5, #98	; 0x62
    e53a:	f8c3 b000 	str.w	fp, [r3]
    e53e:	e65b      	b.n	e1f8 <__gethex+0x164>
    e540:	454c      	cmp	r4, r9
    e542:	f47f ae8e 	bne.w	e262 <__gethex+0x1ce>
    e546:	2c01      	cmp	r4, #1
    e548:	d0ee      	beq.n	e528 <__gethex+0x494>
    e54a:	1e61      	subs	r1, r4, #1
    e54c:	4658      	mov	r0, fp
    e54e:	f004 f849 	bl	125e4 <__any_on>
    e552:	2800      	cmp	r0, #0
    e554:	f43f ae85 	beq.w	e262 <__gethex+0x1ce>
    e558:	f8da 3004 	ldr.w	r3, [sl, #4]
    e55c:	e7e4      	b.n	e528 <__gethex+0x494>
    e55e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e560:	2a00      	cmp	r2, #0
    e562:	f43f ae7e 	beq.w	e262 <__gethex+0x1ce>
    e566:	e7df      	b.n	e528 <__gethex+0x494>
    e568:	f8da 3000 	ldr.w	r3, [sl]
    e56c:	3b01      	subs	r3, #1
    e56e:	42a3      	cmp	r3, r4
    e570:	d034      	beq.n	e5dc <__gethex+0x548>
    e572:	2522      	movs	r5, #34	; 0x22
    e574:	e6bd      	b.n	e2f2 <__gethex+0x25e>
    e576:	460e      	mov	r6, r1
    e578:	e5c7      	b.n	e10a <__gethex+0x76>
    e57a:	f8db 1004 	ldr.w	r1, [fp, #4]
    e57e:	ee18 0a10 	vmov	r0, s16
    e582:	3101      	adds	r1, #1
    e584:	f003 fb26 	bl	11bd4 <_Balloc>
    e588:	4606      	mov	r6, r0
    e58a:	b3c8      	cbz	r0, e600 <__gethex+0x56c>
    e58c:	f8db 3010 	ldr.w	r3, [fp, #16]
    e590:	3302      	adds	r3, #2
    e592:	009a      	lsls	r2, r3, #2
    e594:	f10b 010c 	add.w	r1, fp, #12
    e598:	300c      	adds	r0, #12
    e59a:	f7fb f9d7 	bl	994c <memcpy>
    e59e:	4659      	mov	r1, fp
    e5a0:	ee18 0a10 	vmov	r0, s16
    e5a4:	f003 fb3c 	bl	11c20 <_Bfree>
    e5a8:	f106 0814 	add.w	r8, r6, #20
    e5ac:	6933      	ldr	r3, [r6, #16]
    e5ae:	46b3      	mov	fp, r6
    e5b0:	e756      	b.n	e460 <__gethex+0x3cc>
    e5b2:	2300      	movs	r3, #0
    e5b4:	f8cb 3010 	str.w	r3, [fp, #16]
    e5b8:	2300      	movs	r3, #0
    e5ba:	f8cb 3014 	str.w	r3, [fp, #20]
    e5be:	e787      	b.n	e4d0 <__gethex+0x43c>
    e5c0:	9b01      	ldr	r3, [sp, #4]
    e5c2:	4443      	add	r3, r8
    e5c4:	f1c4 0420 	rsb	r4, r4, #32
    e5c8:	f853 0c04 	ldr.w	r0, [r3, #-4]
    e5cc:	f003 fbdc 	bl	11d88 <__hi0bits>
    e5d0:	42a0      	cmp	r0, r4
    e5d2:	f6bf af0e 	bge.w	e3f2 <__gethex+0x35e>
    e5d6:	f8db 3010 	ldr.w	r3, [fp, #16]
    e5da:	e74c      	b.n	e476 <__gethex+0x3e2>
    e5dc:	1163      	asrs	r3, r4, #5
    e5de:	f004 041f 	and.w	r4, r4, #31
    e5e2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    e5e6:	2301      	movs	r3, #1
    e5e8:	40a3      	lsls	r3, r4
    e5ea:	4213      	tst	r3, r2
    e5ec:	bf0c      	ite	eq
    e5ee:	2522      	moveq	r5, #34	; 0x22
    e5f0:	2521      	movne	r5, #33	; 0x21
    e5f2:	e67e      	b.n	e2f2 <__gethex+0x25e>
    e5f4:	f8c8 2000 	str.w	r2, [r8]
    e5f8:	4643      	mov	r3, r8
    e5fa:	b16a      	cbz	r2, e618 <__gethex+0x584>
    e5fc:	3304      	adds	r3, #4
    e5fe:	e760      	b.n	e4c2 <__gethex+0x42e>
    e600:	4b07      	ldr	r3, [pc, #28]	; (e620 <__gethex+0x58c>)
    e602:	4808      	ldr	r0, [pc, #32]	; (e624 <__gethex+0x590>)
    e604:	4632      	mov	r2, r6
    e606:	2184      	movs	r1, #132	; 0x84
    e608:	f004 fcc6 	bl	12f98 <__assert_func>
    e60c:	4b04      	ldr	r3, [pc, #16]	; (e620 <__gethex+0x58c>)
    e60e:	4805      	ldr	r0, [pc, #20]	; (e624 <__gethex+0x590>)
    e610:	465a      	mov	r2, fp
    e612:	21e4      	movs	r1, #228	; 0xe4
    e614:	f004 fcc0 	bl	12f98 <__assert_func>
    e618:	f8cb 2010 	str.w	r2, [fp, #16]
    e61c:	e7cc      	b.n	e5b8 <__gethex+0x524>
    e61e:	bf00      	nop
    e620:	20000b38 	.word	0x20000b38
    e624:	20000b4c 	.word	0x20000b4c

0000e628 <__match>:
    e628:	b410      	push	{r4}
    e62a:	6804      	ldr	r4, [r0, #0]
    e62c:	e009      	b.n	e642 <__match+0x1a>
    e62e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    e632:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    e636:	f1bc 0f19 	cmp.w	ip, #25
    e63a:	bf98      	it	ls
    e63c:	3320      	addls	r3, #32
    e63e:	4293      	cmp	r3, r2
    e640:	d109      	bne.n	e656 <__match+0x2e>
    e642:	f811 2b01 	ldrb.w	r2, [r1], #1
    e646:	2a00      	cmp	r2, #0
    e648:	d1f1      	bne.n	e62e <__match+0x6>
    e64a:	3401      	adds	r4, #1
    e64c:	6004      	str	r4, [r0, #0]
    e64e:	2001      	movs	r0, #1
    e650:	f85d 4b04 	ldr.w	r4, [sp], #4
    e654:	4770      	bx	lr
    e656:	2000      	movs	r0, #0
    e658:	f85d 4b04 	ldr.w	r4, [sp], #4
    e65c:	4770      	bx	lr
    e65e:	bf00      	nop

0000e660 <__hexnan>:
    e660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e664:	6809      	ldr	r1, [r1, #0]
    e666:	b085      	sub	sp, #20
    e668:	114b      	asrs	r3, r1, #5
    e66a:	f011 011f 	ands.w	r1, r1, #31
    e66e:	9002      	str	r0, [sp, #8]
    e670:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    e674:	9103      	str	r1, [sp, #12]
    e676:	f040 808f 	bne.w	e798 <__hexnan+0x138>
    e67a:	1f1d      	subs	r5, r3, #4
    e67c:	9301      	str	r3, [sp, #4]
    e67e:	9b02      	ldr	r3, [sp, #8]
    e680:	9901      	ldr	r1, [sp, #4]
    e682:	681c      	ldr	r4, [r3, #0]
    e684:	2300      	movs	r3, #0
    e686:	f841 3c04 	str.w	r3, [r1, #-4]
    e68a:	7861      	ldrb	r1, [r4, #1]
    e68c:	3401      	adds	r4, #1
    e68e:	2900      	cmp	r1, #0
    e690:	f000 8098 	beq.w	e7c4 <__hexnan+0x164>
    e694:	f8df 9174 	ldr.w	r9, [pc, #372]	; e80c <__hexnan+0x1ac>
    e698:	46a8      	mov	r8, r5
    e69a:	46ac      	mov	ip, r5
    e69c:	469a      	mov	sl, r3
    e69e:	461e      	mov	r6, r3
    e6a0:	e00e      	b.n	e6c0 <__hexnan+0x60>
    e6a2:	2920      	cmp	r1, #32
    e6a4:	f200 808c 	bhi.w	e7c0 <__hexnan+0x160>
    e6a8:	4556      	cmp	r6, sl
    e6aa:	dd06      	ble.n	e6ba <__hexnan+0x5a>
    e6ac:	45c4      	cmp	ip, r8
    e6ae:	d201      	bcs.n	e6b4 <__hexnan+0x54>
    e6b0:	2b07      	cmp	r3, #7
    e6b2:	dd5b      	ble.n	e76c <__hexnan+0x10c>
    e6b4:	4562      	cmp	r2, ip
    e6b6:	d351      	bcc.n	e75c <__hexnan+0xfc>
    e6b8:	2308      	movs	r3, #8
    e6ba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    e6be:	b1a1      	cbz	r1, e6ea <__hexnan+0x8a>
    e6c0:	f819 0001 	ldrb.w	r0, [r9, r1]
    e6c4:	2800      	cmp	r0, #0
    e6c6:	d0ec      	beq.n	e6a2 <__hexnan+0x42>
    e6c8:	3301      	adds	r3, #1
    e6ca:	2b08      	cmp	r3, #8
    e6cc:	f106 0601 	add.w	r6, r6, #1
    e6d0:	dc3a      	bgt.n	e748 <__hexnan+0xe8>
    e6d2:	f8dc 1000 	ldr.w	r1, [ip]
    e6d6:	0109      	lsls	r1, r1, #4
    e6d8:	f000 000f 	and.w	r0, r0, #15
    e6dc:	4308      	orrs	r0, r1
    e6de:	f8cc 0000 	str.w	r0, [ip]
    e6e2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    e6e6:	2900      	cmp	r1, #0
    e6e8:	d1ea      	bne.n	e6c0 <__hexnan+0x60>
    e6ea:	2e00      	cmp	r6, #0
    e6ec:	d06a      	beq.n	e7c4 <__hexnan+0x164>
    e6ee:	45c4      	cmp	ip, r8
    e6f0:	d201      	bcs.n	e6f6 <__hexnan+0x96>
    e6f2:	2b07      	cmp	r3, #7
    e6f4:	dd74      	ble.n	e7e0 <__hexnan+0x180>
    e6f6:	4562      	cmp	r2, ip
    e6f8:	d252      	bcs.n	e7a0 <__hexnan+0x140>
    e6fa:	1f11      	subs	r1, r2, #4
    e6fc:	4663      	mov	r3, ip
    e6fe:	f853 0b04 	ldr.w	r0, [r3], #4
    e702:	f841 0f04 	str.w	r0, [r1, #4]!
    e706:	42ab      	cmp	r3, r5
    e708:	d9f9      	bls.n	e6fe <__hexnan+0x9e>
    e70a:	eba5 030c 	sub.w	r3, r5, ip
    e70e:	f023 0303 	bic.w	r3, r3, #3
    e712:	1c69      	adds	r1, r5, #1
    e714:	3304      	adds	r3, #4
    e716:	f10c 0c01 	add.w	ip, ip, #1
    e71a:	4561      	cmp	r1, ip
    e71c:	bf38      	it	cc
    e71e:	2304      	movcc	r3, #4
    e720:	4413      	add	r3, r2
    e722:	2100      	movs	r1, #0
    e724:	f843 1b04 	str.w	r1, [r3], #4
    e728:	42ab      	cmp	r3, r5
    e72a:	d9fb      	bls.n	e724 <__hexnan+0xc4>
    e72c:	9b01      	ldr	r3, [sp, #4]
    e72e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    e732:	b92b      	cbnz	r3, e740 <__hexnan+0xe0>
    e734:	42aa      	cmp	r2, r5
    e736:	d049      	beq.n	e7cc <__hexnan+0x16c>
    e738:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    e73c:	2b00      	cmp	r3, #0
    e73e:	d0f9      	beq.n	e734 <__hexnan+0xd4>
    e740:	2005      	movs	r0, #5
    e742:	b005      	add	sp, #20
    e744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e748:	4562      	cmp	r2, ip
    e74a:	d2b6      	bcs.n	e6ba <__hexnan+0x5a>
    e74c:	2300      	movs	r3, #0
    e74e:	f84c 3c04 	str.w	r3, [ip, #-4]
    e752:	4619      	mov	r1, r3
    e754:	f1ac 0c04 	sub.w	ip, ip, #4
    e758:	2301      	movs	r3, #1
    e75a:	e7bd      	b.n	e6d8 <__hexnan+0x78>
    e75c:	2300      	movs	r3, #0
    e75e:	f1ac 0804 	sub.w	r8, ip, #4
    e762:	f84c 3c04 	str.w	r3, [ip, #-4]
    e766:	46b2      	mov	sl, r6
    e768:	46c4      	mov	ip, r8
    e76a:	e7a6      	b.n	e6ba <__hexnan+0x5a>
    e76c:	f1c3 0108 	rsb	r1, r3, #8
    e770:	f8dc 3000 	ldr.w	r3, [ip]
    e774:	0089      	lsls	r1, r1, #2
    e776:	f1c1 0e20 	rsb	lr, r1, #32
    e77a:	4660      	mov	r0, ip
    e77c:	469b      	mov	fp, r3
    e77e:	6847      	ldr	r7, [r0, #4]
    e780:	fa07 f30e 	lsl.w	r3, r7, lr
    e784:	ea43 030b 	orr.w	r3, r3, fp
    e788:	fa27 fb01 	lsr.w	fp, r7, r1
    e78c:	6003      	str	r3, [r0, #0]
    e78e:	f840 bf04 	str.w	fp, [r0, #4]!
    e792:	4540      	cmp	r0, r8
    e794:	d3f3      	bcc.n	e77e <__hexnan+0x11e>
    e796:	e78d      	b.n	e6b4 <__hexnan+0x54>
    e798:	1d19      	adds	r1, r3, #4
    e79a:	9101      	str	r1, [sp, #4]
    e79c:	461d      	mov	r5, r3
    e79e:	e76e      	b.n	e67e <__hexnan+0x1e>
    e7a0:	9b03      	ldr	r3, [sp, #12]
    e7a2:	2b00      	cmp	r3, #0
    e7a4:	d0c2      	beq.n	e72c <__hexnan+0xcc>
    e7a6:	9b03      	ldr	r3, [sp, #12]
    e7a8:	9801      	ldr	r0, [sp, #4]
    e7aa:	f1c3 0120 	rsb	r1, r3, #32
    e7ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e7b2:	40cb      	lsrs	r3, r1
    e7b4:	f850 1c04 	ldr.w	r1, [r0, #-4]
    e7b8:	400b      	ands	r3, r1
    e7ba:	f840 3c04 	str.w	r3, [r0, #-4]
    e7be:	e7b8      	b.n	e732 <__hexnan+0xd2>
    e7c0:	2929      	cmp	r1, #41	; 0x29
    e7c2:	d009      	beq.n	e7d8 <__hexnan+0x178>
    e7c4:	2004      	movs	r0, #4
    e7c6:	b005      	add	sp, #20
    e7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7cc:	2301      	movs	r3, #1
    e7ce:	2005      	movs	r0, #5
    e7d0:	602b      	str	r3, [r5, #0]
    e7d2:	b005      	add	sp, #20
    e7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7d8:	9902      	ldr	r1, [sp, #8]
    e7da:	3401      	adds	r4, #1
    e7dc:	600c      	str	r4, [r1, #0]
    e7de:	e784      	b.n	e6ea <__hexnan+0x8a>
    e7e0:	f8dc 1000 	ldr.w	r1, [ip]
    e7e4:	f1c3 0308 	rsb	r3, r3, #8
    e7e8:	009b      	lsls	r3, r3, #2
    e7ea:	f1c3 0720 	rsb	r7, r3, #32
    e7ee:	4664      	mov	r4, ip
    e7f0:	4608      	mov	r0, r1
    e7f2:	6866      	ldr	r6, [r4, #4]
    e7f4:	fa06 f107 	lsl.w	r1, r6, r7
    e7f8:	4301      	orrs	r1, r0
    e7fa:	fa26 f003 	lsr.w	r0, r6, r3
    e7fe:	6021      	str	r1, [r4, #0]
    e800:	f844 0f04 	str.w	r0, [r4, #4]!
    e804:	4544      	cmp	r4, r8
    e806:	d3f4      	bcc.n	e7f2 <__hexnan+0x192>
    e808:	e775      	b.n	e6f6 <__hexnan+0x96>
    e80a:	bf00      	nop
    e80c:	20000bb8 	.word	0x20000bb8

0000e810 <__ascii_mbtowc>:
    e810:	b082      	sub	sp, #8
    e812:	b149      	cbz	r1, e828 <__ascii_mbtowc+0x18>
    e814:	b15a      	cbz	r2, e82e <__ascii_mbtowc+0x1e>
    e816:	b16b      	cbz	r3, e834 <__ascii_mbtowc+0x24>
    e818:	7813      	ldrb	r3, [r2, #0]
    e81a:	600b      	str	r3, [r1, #0]
    e81c:	7812      	ldrb	r2, [r2, #0]
    e81e:	1e10      	subs	r0, r2, #0
    e820:	bf18      	it	ne
    e822:	2001      	movne	r0, #1
    e824:	b002      	add	sp, #8
    e826:	4770      	bx	lr
    e828:	a901      	add	r1, sp, #4
    e82a:	2a00      	cmp	r2, #0
    e82c:	d1f3      	bne.n	e816 <__ascii_mbtowc+0x6>
    e82e:	4610      	mov	r0, r2
    e830:	b002      	add	sp, #8
    e832:	4770      	bx	lr
    e834:	f06f 0001 	mvn.w	r0, #1
    e838:	e7f4      	b.n	e824 <__ascii_mbtowc+0x14>
    e83a:	bf00      	nop
    e83c:	0000      	movs	r0, r0
	...

0000e840 <_svfprintf_r>:
    e840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e844:	ed2d 8b08 	vpush	{d8-d11}
    e848:	b0d1      	sub	sp, #324	; 0x144
    e84a:	460c      	mov	r4, r1
    e84c:	ee0b 1a10 	vmov	s22, r1
    e850:	4690      	mov	r8, r2
    e852:	9308      	str	r3, [sp, #32]
    e854:	4683      	mov	fp, r0
    e856:	f004 f963 	bl	12b20 <_localeconv_r>
    e85a:	6803      	ldr	r3, [r0, #0]
    e85c:	9312      	str	r3, [sp, #72]	; 0x48
    e85e:	4618      	mov	r0, r3
    e860:	f7ff f9ae 	bl	dbc0 <strlen>
    e864:	af20      	add	r7, sp, #128	; 0x80
    e866:	9010      	str	r0, [sp, #64]	; 0x40
    e868:	2208      	movs	r2, #8
    e86a:	2100      	movs	r1, #0
    e86c:	4638      	mov	r0, r7
    e86e:	f7fe fe39 	bl	d4e4 <memset>
    e872:	89a3      	ldrh	r3, [r4, #12]
    e874:	061b      	lsls	r3, r3, #24
    e876:	d503      	bpl.n	e880 <_svfprintf_r+0x40>
    e878:	6923      	ldr	r3, [r4, #16]
    e87a:	2b00      	cmp	r3, #0
    e87c:	f000 8755 	beq.w	f72a <_svfprintf_r+0xeea>
    e880:	2300      	movs	r3, #0
    e882:	ed9f 8b83 	vldr	d8, [pc, #524]	; ea90 <_svfprintf_r+0x250>
    e886:	ed9f 9b84 	vldr	d9, [pc, #528]	; ea98 <_svfprintf_r+0x258>
    e88a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    e88e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    e892:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    e896:	aa27      	add	r2, sp, #156	; 0x9c
    e898:	930e      	str	r3, [sp, #56]	; 0x38
    e89a:	9224      	str	r2, [sp, #144]	; 0x90
    e89c:	4692      	mov	sl, r2
    e89e:	9311      	str	r3, [sp, #68]	; 0x44
    e8a0:	9304      	str	r3, [sp, #16]
    e8a2:	4644      	mov	r4, r8
    e8a4:	46a1      	mov	r9, r4
    e8a6:	4b7e      	ldr	r3, [pc, #504]	; (eaa0 <_svfprintf_r+0x260>)
    e8a8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    e8ac:	f7fe ff16 	bl	d6dc <__locale_mb_cur_max>
    e8b0:	464a      	mov	r2, r9
    e8b2:	4603      	mov	r3, r0
    e8b4:	a91c      	add	r1, sp, #112	; 0x70
    e8b6:	9700      	str	r7, [sp, #0]
    e8b8:	4658      	mov	r0, fp
    e8ba:	47a8      	blx	r5
    e8bc:	2800      	cmp	r0, #0
    e8be:	f000 80b0 	beq.w	ea22 <_svfprintf_r+0x1e2>
    e8c2:	f2c0 80a6 	blt.w	ea12 <_svfprintf_r+0x1d2>
    e8c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    e8c8:	2a25      	cmp	r2, #37	; 0x25
    e8ca:	4603      	mov	r3, r0
    e8cc:	d001      	beq.n	e8d2 <_svfprintf_r+0x92>
    e8ce:	4499      	add	r9, r3
    e8d0:	e7e9      	b.n	e8a6 <_svfprintf_r+0x66>
    e8d2:	ebb9 0504 	subs.w	r5, r9, r4
    e8d6:	4606      	mov	r6, r0
    e8d8:	f040 80a7 	bne.w	ea2a <_svfprintf_r+0x1ea>
    e8dc:	2300      	movs	r3, #0
    e8de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e8e2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    e8e6:	4698      	mov	r8, r3
    e8e8:	9306      	str	r3, [sp, #24]
    e8ea:	f109 0901 	add.w	r9, r9, #1
    e8ee:	f899 3000 	ldrb.w	r3, [r9]
    e8f2:	9203      	str	r2, [sp, #12]
    e8f4:	252b      	movs	r5, #43	; 0x2b
    e8f6:	2620      	movs	r6, #32
    e8f8:	f109 0901 	add.w	r9, r9, #1
    e8fc:	f1a3 0220 	sub.w	r2, r3, #32
    e900:	2a5a      	cmp	r2, #90	; 0x5a
    e902:	f200 80cf 	bhi.w	eaa4 <_svfprintf_r+0x264>
    e906:	e8df f012 	tbh	[pc, r2, lsl #1]
    e90a:	02e8      	.short	0x02e8
    e90c:	00cd00cd 	.word	0x00cd00cd
    e910:	00cd02e3 	.word	0x00cd02e3
    e914:	00cd00cd 	.word	0x00cd00cd
    e918:	00cd006a 	.word	0x00cd006a
    e91c:	020500cd 	.word	0x020500cd
    e920:	00cd0284 	.word	0x00cd0284
    e924:	02c90210 	.word	0x02c90210
    e928:	02bd00cd 	.word	0x02bd00cd
    e92c:	005b005b 	.word	0x005b005b
    e930:	005b005b 	.word	0x005b005b
    e934:	005b005b 	.word	0x005b005b
    e938:	005b005b 	.word	0x005b005b
    e93c:	00cd005b 	.word	0x00cd005b
    e940:	00cd00cd 	.word	0x00cd00cd
    e944:	00cd00cd 	.word	0x00cd00cd
    e948:	00cd00cd 	.word	0x00cd00cd
    e94c:	00cd0153 	.word	0x00cd0153
    e950:	021a0183 	.word	0x021a0183
    e954:	01530153 	.word	0x01530153
    e958:	00cd0153 	.word	0x00cd0153
    e95c:	00cd00cd 	.word	0x00cd00cd
    e960:	021500cd 	.word	0x021500cd
    e964:	00cd00cd 	.word	0x00cd00cd
    e968:	00cd0296 	.word	0x00cd0296
    e96c:	00cd00cd 	.word	0x00cd00cd
    e970:	00cd01ab 	.word	0x00cd01ab
    e974:	00cd02aa 	.word	0x00cd02aa
    e978:	06e300cd 	.word	0x06e300cd
    e97c:	00cd00cd 	.word	0x00cd00cd
    e980:	00cd00cd 	.word	0x00cd00cd
    e984:	00cd00cd 	.word	0x00cd00cd
    e988:	00cd00cd 	.word	0x00cd00cd
    e98c:	00cd0153 	.word	0x00cd0153
    e990:	01de0183 	.word	0x01de0183
    e994:	01530153 	.word	0x01530153
    e998:	02770153 	.word	0x02770153
    e99c:	007f01de 	.word	0x007f01de
    e9a0:	028900cd 	.word	0x028900cd
    e9a4:	025f00cd 	.word	0x025f00cd
    e9a8:	022f06e0 	.word	0x022f06e0
    e9ac:	00cd007f 	.word	0x00cd007f
    e9b0:	007c01ab 	.word	0x007c01ab
    e9b4:	00cd06b8 	.word	0x00cd06b8
    e9b8:	06bd00cd 	.word	0x06bd00cd
    e9bc:	007c00cd 	.word	0x007c00cd
    e9c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e9c4:	2100      	movs	r1, #0
    e9c6:	f819 3b01 	ldrb.w	r3, [r9], #1
    e9ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    e9ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    e9d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e9d6:	2a09      	cmp	r2, #9
    e9d8:	d9f5      	bls.n	e9c6 <_svfprintf_r+0x186>
    e9da:	9106      	str	r1, [sp, #24]
    e9dc:	e78e      	b.n	e8fc <_svfprintf_r+0xbc>
    e9de:	4658      	mov	r0, fp
    e9e0:	f004 f89e 	bl	12b20 <_localeconv_r>
    e9e4:	6843      	ldr	r3, [r0, #4]
    e9e6:	9315      	str	r3, [sp, #84]	; 0x54
    e9e8:	4618      	mov	r0, r3
    e9ea:	f7ff f8e9 	bl	dbc0 <strlen>
    e9ee:	9016      	str	r0, [sp, #88]	; 0x58
    e9f0:	4658      	mov	r0, fp
    e9f2:	f004 f895 	bl	12b20 <_localeconv_r>
    e9f6:	6883      	ldr	r3, [r0, #8]
    e9f8:	9313      	str	r3, [sp, #76]	; 0x4c
    e9fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e9fc:	2b00      	cmp	r3, #0
    e9fe:	f040 862d 	bne.w	f65c <_svfprintf_r+0xe1c>
    ea02:	f899 3000 	ldrb.w	r3, [r9]
    ea06:	e777      	b.n	e8f8 <_svfprintf_r+0xb8>
    ea08:	f899 3000 	ldrb.w	r3, [r9]
    ea0c:	f048 0820 	orr.w	r8, r8, #32
    ea10:	e772      	b.n	e8f8 <_svfprintf_r+0xb8>
    ea12:	2208      	movs	r2, #8
    ea14:	2100      	movs	r1, #0
    ea16:	4638      	mov	r0, r7
    ea18:	f7fe fd64 	bl	d4e4 <memset>
    ea1c:	2301      	movs	r3, #1
    ea1e:	4499      	add	r9, r3
    ea20:	e741      	b.n	e8a6 <_svfprintf_r+0x66>
    ea22:	ebb9 0504 	subs.w	r5, r9, r4
    ea26:	4606      	mov	r6, r0
    ea28:	d011      	beq.n	ea4e <_svfprintf_r+0x20e>
    ea2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    ea2c:	442b      	add	r3, r5
    ea2e:	9326      	str	r3, [sp, #152]	; 0x98
    ea30:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ea32:	3301      	adds	r3, #1
    ea34:	2b07      	cmp	r3, #7
    ea36:	e9ca 4500 	strd	r4, r5, [sl]
    ea3a:	9325      	str	r3, [sp, #148]	; 0x94
    ea3c:	dc1c      	bgt.n	ea78 <_svfprintf_r+0x238>
    ea3e:	f10a 0a08 	add.w	sl, sl, #8
    ea42:	9b04      	ldr	r3, [sp, #16]
    ea44:	442b      	add	r3, r5
    ea46:	9304      	str	r3, [sp, #16]
    ea48:	2e00      	cmp	r6, #0
    ea4a:	f47f af47 	bne.w	e8dc <_svfprintf_r+0x9c>
    ea4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    ea50:	2b00      	cmp	r3, #0
    ea52:	f041 820b 	bne.w	fe6c <_svfprintf_r+0x162c>
    ea56:	ee1b 3a10 	vmov	r3, s22
    ea5a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    ea5e:	f013 0f40 	tst.w	r3, #64	; 0x40
    ea62:	9b04      	ldr	r3, [sp, #16]
    ea64:	bf18      	it	ne
    ea66:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    ea6a:	9304      	str	r3, [sp, #16]
    ea6c:	9804      	ldr	r0, [sp, #16]
    ea6e:	b051      	add	sp, #324	; 0x144
    ea70:	ecbd 8b08 	vpop	{d8-d11}
    ea74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea78:	ee1b 1a10 	vmov	r1, s22
    ea7c:	aa24      	add	r2, sp, #144	; 0x90
    ea7e:	4658      	mov	r0, fp
    ea80:	f005 fb00 	bl	14084 <__ssprint_r>
    ea84:	2800      	cmp	r0, #0
    ea86:	d1e6      	bne.n	ea56 <_svfprintf_r+0x216>
    ea88:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ea8c:	e7d9      	b.n	ea42 <_svfprintf_r+0x202>
    ea8e:	bf00      	nop
	...
    ea98:	ffffffff 	.word	0xffffffff
    ea9c:	7fefffff 	.word	0x7fefffff
    eaa0:	2000810c 	.word	0x2000810c
    eaa4:	930b      	str	r3, [sp, #44]	; 0x2c
    eaa6:	2b00      	cmp	r3, #0
    eaa8:	d0d1      	beq.n	ea4e <_svfprintf_r+0x20e>
    eaaa:	2100      	movs	r1, #0
    eaac:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    eab0:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    eab4:	2301      	movs	r3, #1
    eab6:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    eaba:	9302      	str	r3, [sp, #8]
    eabc:	9107      	str	r1, [sp, #28]
    eabe:	9305      	str	r3, [sp, #20]
    eac0:	9103      	str	r1, [sp, #12]
    eac2:	910f      	str	r1, [sp, #60]	; 0x3c
    eac4:	ac37      	add	r4, sp, #220	; 0xdc
    eac6:	f018 0302 	ands.w	r3, r8, #2
    eaca:	9309      	str	r3, [sp, #36]	; 0x24
    eacc:	d002      	beq.n	ead4 <_svfprintf_r+0x294>
    eace:	9b02      	ldr	r3, [sp, #8]
    ead0:	3302      	adds	r3, #2
    ead2:	9302      	str	r3, [sp, #8]
    ead4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    ead8:	930a      	str	r3, [sp, #40]	; 0x28
    eada:	d105      	bne.n	eae8 <_svfprintf_r+0x2a8>
    eadc:	9b06      	ldr	r3, [sp, #24]
    eade:	9a02      	ldr	r2, [sp, #8]
    eae0:	1a9d      	subs	r5, r3, r2
    eae2:	2d00      	cmp	r5, #0
    eae4:	f300 8369 	bgt.w	f1ba <_svfprintf_r+0x97a>
    eae8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    eaea:	b189      	cbz	r1, eb10 <_svfprintf_r+0x2d0>
    eaec:	9925      	ldr	r1, [sp, #148]	; 0x94
    eaee:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    eaf2:	3101      	adds	r1, #1
    eaf4:	3201      	adds	r2, #1
    eaf6:	f8ca 0000 	str.w	r0, [sl]
    eafa:	2907      	cmp	r1, #7
    eafc:	f04f 0001 	mov.w	r0, #1
    eb00:	9226      	str	r2, [sp, #152]	; 0x98
    eb02:	9125      	str	r1, [sp, #148]	; 0x94
    eb04:	f8ca 0004 	str.w	r0, [sl, #4]
    eb08:	f300 83a2 	bgt.w	f250 <_svfprintf_r+0xa10>
    eb0c:	f10a 0a08 	add.w	sl, sl, #8
    eb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eb12:	b183      	cbz	r3, eb36 <_svfprintf_r+0x2f6>
    eb14:	9b25      	ldr	r3, [sp, #148]	; 0x94
    eb16:	a91a      	add	r1, sp, #104	; 0x68
    eb18:	3301      	adds	r3, #1
    eb1a:	3202      	adds	r2, #2
    eb1c:	f8ca 1000 	str.w	r1, [sl]
    eb20:	2b07      	cmp	r3, #7
    eb22:	f04f 0102 	mov.w	r1, #2
    eb26:	9226      	str	r2, [sp, #152]	; 0x98
    eb28:	9325      	str	r3, [sp, #148]	; 0x94
    eb2a:	f8ca 1004 	str.w	r1, [sl, #4]
    eb2e:	f300 83a3 	bgt.w	f278 <_svfprintf_r+0xa38>
    eb32:	f10a 0a08 	add.w	sl, sl, #8
    eb36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    eb38:	2b80      	cmp	r3, #128	; 0x80
    eb3a:	f000 826c 	beq.w	f016 <_svfprintf_r+0x7d6>
    eb3e:	9b03      	ldr	r3, [sp, #12]
    eb40:	9905      	ldr	r1, [sp, #20]
    eb42:	1a5d      	subs	r5, r3, r1
    eb44:	2d00      	cmp	r5, #0
    eb46:	f300 82a5 	bgt.w	f094 <_svfprintf_r+0x854>
    eb4a:	f418 7f80 	tst.w	r8, #256	; 0x100
    eb4e:	f040 820d 	bne.w	ef6c <_svfprintf_r+0x72c>
    eb52:	9b05      	ldr	r3, [sp, #20]
    eb54:	f8ca 3004 	str.w	r3, [sl, #4]
    eb58:	441a      	add	r2, r3
    eb5a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    eb5c:	f8ca 4000 	str.w	r4, [sl]
    eb60:	3301      	adds	r3, #1
    eb62:	2b07      	cmp	r3, #7
    eb64:	9226      	str	r2, [sp, #152]	; 0x98
    eb66:	9325      	str	r3, [sp, #148]	; 0x94
    eb68:	f300 831b 	bgt.w	f1a2 <_svfprintf_r+0x962>
    eb6c:	f10a 0a08 	add.w	sl, sl, #8
    eb70:	f018 0f04 	tst.w	r8, #4
    eb74:	d005      	beq.n	eb82 <_svfprintf_r+0x342>
    eb76:	9b06      	ldr	r3, [sp, #24]
    eb78:	9902      	ldr	r1, [sp, #8]
    eb7a:	1a5c      	subs	r4, r3, r1
    eb7c:	2c00      	cmp	r4, #0
    eb7e:	f300 8388 	bgt.w	f292 <_svfprintf_r+0xa52>
    eb82:	9b04      	ldr	r3, [sp, #16]
    eb84:	9906      	ldr	r1, [sp, #24]
    eb86:	9802      	ldr	r0, [sp, #8]
    eb88:	4281      	cmp	r1, r0
    eb8a:	bfac      	ite	ge
    eb8c:	185b      	addge	r3, r3, r1
    eb8e:	181b      	addlt	r3, r3, r0
    eb90:	9304      	str	r3, [sp, #16]
    eb92:	2a00      	cmp	r2, #0
    eb94:	f040 82b0 	bne.w	f0f8 <_svfprintf_r+0x8b8>
    eb98:	2300      	movs	r3, #0
    eb9a:	9325      	str	r3, [sp, #148]	; 0x94
    eb9c:	9b07      	ldr	r3, [sp, #28]
    eb9e:	b11b      	cbz	r3, eba8 <_svfprintf_r+0x368>
    eba0:	9907      	ldr	r1, [sp, #28]
    eba2:	4658      	mov	r0, fp
    eba4:	f7ff f91e 	bl	dde4 <_free_r>
    eba8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ebac:	464c      	mov	r4, r9
    ebae:	e679      	b.n	e8a4 <_svfprintf_r+0x64>
    ebb0:	930b      	str	r3, [sp, #44]	; 0x2c
    ebb2:	9b08      	ldr	r3, [sp, #32]
    ebb4:	3307      	adds	r3, #7
    ebb6:	f023 0307 	bic.w	r3, r3, #7
    ebba:	ecb3 8b02 	vldmia	r3!, {d8}
    ebbe:	eeb0 7bc8 	vabs.f64	d7, d8
    ebc2:	eeb4 7b49 	vcmp.f64	d7, d9
    ebc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ebca:	9308      	str	r3, [sp, #32]
    ebcc:	f340 84e9 	ble.w	f5a2 <_svfprintf_r+0xd62>
    ebd0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    ebd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ebd8:	f101 8059 	bmi.w	fc8e <_svfprintf_r+0x144e>
    ebdc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ebe0:	4cab      	ldr	r4, [pc, #684]	; (ee90 <_svfprintf_r+0x650>)
    ebe2:	4bac      	ldr	r3, [pc, #688]	; (ee94 <_svfprintf_r+0x654>)
    ebe4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    ebe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ebea:	2a47      	cmp	r2, #71	; 0x47
    ebec:	bfc8      	it	gt
    ebee:	461c      	movgt	r4, r3
    ebf0:	2300      	movs	r3, #0
    ebf2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ebf6:	2203      	movs	r2, #3
    ebf8:	9307      	str	r3, [sp, #28]
    ebfa:	9202      	str	r2, [sp, #8]
    ebfc:	9205      	str	r2, [sp, #20]
    ebfe:	9303      	str	r3, [sp, #12]
    ec00:	930f      	str	r3, [sp, #60]	; 0x3c
    ec02:	2900      	cmp	r1, #0
    ec04:	f43f af5f 	beq.w	eac6 <_svfprintf_r+0x286>
    ec08:	9b02      	ldr	r3, [sp, #8]
    ec0a:	3301      	adds	r3, #1
    ec0c:	9302      	str	r3, [sp, #8]
    ec0e:	e75a      	b.n	eac6 <_svfprintf_r+0x286>
    ec10:	2b43      	cmp	r3, #67	; 0x43
    ec12:	930b      	str	r3, [sp, #44]	; 0x2c
    ec14:	d003      	beq.n	ec1e <_svfprintf_r+0x3de>
    ec16:	f018 0f10 	tst.w	r8, #16
    ec1a:	f000 855d 	beq.w	f6d8 <_svfprintf_r+0xe98>
    ec1e:	9d08      	ldr	r5, [sp, #32]
    ec20:	2208      	movs	r2, #8
    ec22:	2100      	movs	r1, #0
    ec24:	a822      	add	r0, sp, #136	; 0x88
    ec26:	ac37      	add	r4, sp, #220	; 0xdc
    ec28:	f7fe fc5c 	bl	d4e4 <memset>
    ec2c:	ab22      	add	r3, sp, #136	; 0x88
    ec2e:	f855 2b04 	ldr.w	r2, [r5], #4
    ec32:	4621      	mov	r1, r4
    ec34:	4658      	mov	r0, fp
    ec36:	f004 f929 	bl	12e8c <_wcrtomb_r>
    ec3a:	4603      	mov	r3, r0
    ec3c:	3301      	adds	r3, #1
    ec3e:	9005      	str	r0, [sp, #20]
    ec40:	f001 82ee 	beq.w	10220 <_svfprintf_r+0x19e0>
    ec44:	9b05      	ldr	r3, [sp, #20]
    ec46:	9508      	str	r5, [sp, #32]
    ec48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ec4c:	9302      	str	r3, [sp, #8]
    ec4e:	2100      	movs	r1, #0
    ec50:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    ec54:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ec58:	9107      	str	r1, [sp, #28]
    ec5a:	9103      	str	r1, [sp, #12]
    ec5c:	910f      	str	r1, [sp, #60]	; 0x3c
    ec5e:	e732      	b.n	eac6 <_svfprintf_r+0x286>
    ec60:	930b      	str	r3, [sp, #44]	; 0x2c
    ec62:	9b08      	ldr	r3, [sp, #32]
    ec64:	461a      	mov	r2, r3
    ec66:	2300      	movs	r3, #0
    ec68:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    ec6c:	4613      	mov	r3, r2
    ec6e:	f853 4b04 	ldr.w	r4, [r3], #4
    ec72:	9308      	str	r3, [sp, #32]
    ec74:	2c00      	cmp	r4, #0
    ec76:	f000 8548 	beq.w	f70a <_svfprintf_r+0xeca>
    ec7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ec7c:	2b53      	cmp	r3, #83	; 0x53
    ec7e:	f000 86ec 	beq.w	fa5a <_svfprintf_r+0x121a>
    ec82:	f018 0310 	ands.w	r3, r8, #16
    ec86:	930c      	str	r3, [sp, #48]	; 0x30
    ec88:	f040 86e7 	bne.w	fa5a <_svfprintf_r+0x121a>
    ec8c:	9b03      	ldr	r3, [sp, #12]
    ec8e:	1c5d      	adds	r5, r3, #1
    ec90:	f001 80e5 	beq.w	fe5e <_svfprintf_r+0x161e>
    ec94:	990c      	ldr	r1, [sp, #48]	; 0x30
    ec96:	461a      	mov	r2, r3
    ec98:	4620      	mov	r0, r4
    ec9a:	f7fe ff41 	bl	db20 <memchr>
    ec9e:	9007      	str	r0, [sp, #28]
    eca0:	2800      	cmp	r0, #0
    eca2:	f001 8328 	beq.w	102f6 <_svfprintf_r+0x1ab6>
    eca6:	9b07      	ldr	r3, [sp, #28]
    eca8:	1b1a      	subs	r2, r3, r4
    ecaa:	9205      	str	r2, [sp, #20]
    ecac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ecae:	9303      	str	r3, [sp, #12]
    ecb0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    ecb4:	930f      	str	r3, [sp, #60]	; 0x3c
    ecb6:	930d      	str	r3, [sp, #52]	; 0x34
    ecb8:	9307      	str	r3, [sp, #28]
    ecba:	2373      	movs	r3, #115	; 0x73
    ecbc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ecc0:	9202      	str	r2, [sp, #8]
    ecc2:	930b      	str	r3, [sp, #44]	; 0x2c
    ecc4:	e79d      	b.n	ec02 <_svfprintf_r+0x3c2>
    ecc6:	f018 0f20 	tst.w	r8, #32
    ecca:	930b      	str	r3, [sp, #44]	; 0x2c
    eccc:	9b08      	ldr	r3, [sp, #32]
    ecce:	d03d      	beq.n	ed4c <_svfprintf_r+0x50c>
    ecd0:	3307      	adds	r3, #7
    ecd2:	f023 0307 	bic.w	r3, r3, #7
    ecd6:	461a      	mov	r2, r3
    ecd8:	4611      	mov	r1, r2
    ecda:	685b      	ldr	r3, [r3, #4]
    ecdc:	f851 2b08 	ldr.w	r2, [r1], #8
    ece0:	9108      	str	r1, [sp, #32]
    ece2:	4619      	mov	r1, r3
    ece4:	2b00      	cmp	r3, #0
    ece6:	f2c0 840c 	blt.w	f502 <_svfprintf_r+0xcc2>
    ecea:	9b03      	ldr	r3, [sp, #12]
    ecec:	3301      	adds	r3, #1
    ecee:	f000 829e 	beq.w	f22e <_svfprintf_r+0x9ee>
    ecf2:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    ecf6:	ea52 0301 	orrs.w	r3, r2, r1
    ecfa:	9002      	str	r0, [sp, #8]
    ecfc:	f040 8299 	bne.w	f232 <_svfprintf_r+0x9f2>
    ed00:	9b03      	ldr	r3, [sp, #12]
    ed02:	2b00      	cmp	r3, #0
    ed04:	f040 829a 	bne.w	f23c <_svfprintf_r+0x9fc>
    ed08:	4680      	mov	r8, r0
    ed0a:	2300      	movs	r3, #0
    ed0c:	9303      	str	r3, [sp, #12]
    ed0e:	9305      	str	r3, [sp, #20]
    ed10:	ac50      	add	r4, sp, #320	; 0x140
    ed12:	e106      	b.n	ef22 <_svfprintf_r+0x6e2>
    ed14:	9b08      	ldr	r3, [sp, #32]
    ed16:	f853 2b04 	ldr.w	r2, [r3], #4
    ed1a:	9206      	str	r2, [sp, #24]
    ed1c:	2a00      	cmp	r2, #0
    ed1e:	f280 8419 	bge.w	f554 <_svfprintf_r+0xd14>
    ed22:	9a06      	ldr	r2, [sp, #24]
    ed24:	9308      	str	r3, [sp, #32]
    ed26:	4252      	negs	r2, r2
    ed28:	9206      	str	r2, [sp, #24]
    ed2a:	f899 3000 	ldrb.w	r3, [r9]
    ed2e:	f048 0804 	orr.w	r8, r8, #4
    ed32:	e5e1      	b.n	e8f8 <_svfprintf_r+0xb8>
    ed34:	f899 3000 	ldrb.w	r3, [r9]
    ed38:	f048 0808 	orr.w	r8, r8, #8
    ed3c:	e5dc      	b.n	e8f8 <_svfprintf_r+0xb8>
    ed3e:	f048 0810 	orr.w	r8, r8, #16
    ed42:	f018 0f20 	tst.w	r8, #32
    ed46:	930b      	str	r3, [sp, #44]	; 0x2c
    ed48:	9b08      	ldr	r3, [sp, #32]
    ed4a:	d1c1      	bne.n	ecd0 <_svfprintf_r+0x490>
    ed4c:	f018 0f10 	tst.w	r8, #16
    ed50:	f040 840b 	bne.w	f56a <_svfprintf_r+0xd2a>
    ed54:	f018 0f40 	tst.w	r8, #64	; 0x40
    ed58:	f000 8403 	beq.w	f562 <_svfprintf_r+0xd22>
    ed5c:	f933 2b04 	ldrsh.w	r2, [r3], #4
    ed60:	9308      	str	r3, [sp, #32]
    ed62:	17d1      	asrs	r1, r2, #31
    ed64:	460b      	mov	r3, r1
    ed66:	e7bd      	b.n	ece4 <_svfprintf_r+0x4a4>
    ed68:	9b08      	ldr	r3, [sp, #32]
    ed6a:	f048 0202 	orr.w	r2, r8, #2
    ed6e:	9202      	str	r2, [sp, #8]
    ed70:	f853 2b04 	ldr.w	r2, [r3], #4
    ed74:	9308      	str	r3, [sp, #32]
    ed76:	f647 0330 	movw	r3, #30768	; 0x7830
    ed7a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    ed7e:	2078      	movs	r0, #120	; 0x78
    ed80:	4b45      	ldr	r3, [pc, #276]	; (ee98 <_svfprintf_r+0x658>)
    ed82:	9311      	str	r3, [sp, #68]	; 0x44
    ed84:	2100      	movs	r1, #0
    ed86:	2302      	movs	r3, #2
    ed88:	900b      	str	r0, [sp, #44]	; 0x2c
    ed8a:	2000      	movs	r0, #0
    ed8c:	9c03      	ldr	r4, [sp, #12]
    ed8e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    ed92:	1c60      	adds	r0, r4, #1
    ed94:	f000 80ad 	beq.w	eef2 <_svfprintf_r+0x6b2>
    ed98:	9802      	ldr	r0, [sp, #8]
    ed9a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    ed9e:	ea52 0001 	orrs.w	r0, r2, r1
    eda2:	f040 80a4 	bne.w	eeee <_svfprintf_r+0x6ae>
    eda6:	2c00      	cmp	r4, #0
    eda8:	f040 86ae 	bne.w	fb08 <_svfprintf_r+0x12c8>
    edac:	2b00      	cmp	r3, #0
    edae:	d1ac      	bne.n	ed0a <_svfprintf_r+0x4ca>
    edb0:	9b02      	ldr	r3, [sp, #8]
    edb2:	f013 0301 	ands.w	r3, r3, #1
    edb6:	9305      	str	r3, [sp, #20]
    edb8:	f000 83d1 	beq.w	f55e <_svfprintf_r+0xd1e>
    edbc:	2330      	movs	r3, #48	; 0x30
    edbe:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    edc2:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    edc6:	e0ac      	b.n	ef22 <_svfprintf_r+0x6e2>
    edc8:	f018 0f20 	tst.w	r8, #32
    edcc:	f040 83d4 	bne.w	f578 <_svfprintf_r+0xd38>
    edd0:	f018 0f10 	tst.w	r8, #16
    edd4:	f040 869f 	bne.w	fb16 <_svfprintf_r+0x12d6>
    edd8:	f018 0f40 	tst.w	r8, #64	; 0x40
    eddc:	f040 8797 	bne.w	fd0e <_svfprintf_r+0x14ce>
    ede0:	f418 7f00 	tst.w	r8, #512	; 0x200
    ede4:	f000 8697 	beq.w	fb16 <_svfprintf_r+0x12d6>
    ede8:	9b08      	ldr	r3, [sp, #32]
    edea:	9904      	ldr	r1, [sp, #16]
    edec:	f853 2b04 	ldr.w	r2, [r3], #4
    edf0:	9308      	str	r3, [sp, #32]
    edf2:	7011      	strb	r1, [r2, #0]
    edf4:	464c      	mov	r4, r9
    edf6:	e555      	b.n	e8a4 <_svfprintf_r+0x64>
    edf8:	f899 3000 	ldrb.w	r3, [r9]
    edfc:	2b68      	cmp	r3, #104	; 0x68
    edfe:	bf03      	ittte	eq
    ee00:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    ee04:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    ee08:	f109 0901 	addeq.w	r9, r9, #1
    ee0c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    ee10:	e572      	b.n	e8f8 <_svfprintf_r+0xb8>
    ee12:	f899 3000 	ldrb.w	r3, [r9]
    ee16:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    ee1a:	e56d      	b.n	e8f8 <_svfprintf_r+0xb8>
    ee1c:	f899 3000 	ldrb.w	r3, [r9]
    ee20:	2b6c      	cmp	r3, #108	; 0x6c
    ee22:	bf03      	ittte	eq
    ee24:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    ee28:	f048 0820 	orreq.w	r8, r8, #32
    ee2c:	f109 0901 	addeq.w	r9, r9, #1
    ee30:	f048 0810 	orrne.w	r8, r8, #16
    ee34:	e560      	b.n	e8f8 <_svfprintf_r+0xb8>
    ee36:	930b      	str	r3, [sp, #44]	; 0x2c
    ee38:	f048 0810 	orr.w	r8, r8, #16
    ee3c:	f018 0120 	ands.w	r1, r8, #32
    ee40:	f000 8351 	beq.w	f4e6 <_svfprintf_r+0xca6>
    ee44:	9b08      	ldr	r3, [sp, #32]
    ee46:	3307      	adds	r3, #7
    ee48:	f023 0307 	bic.w	r3, r3, #7
    ee4c:	6859      	ldr	r1, [r3, #4]
    ee4e:	f853 2b08 	ldr.w	r2, [r3], #8
    ee52:	9308      	str	r3, [sp, #32]
    ee54:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    ee58:	9302      	str	r3, [sp, #8]
    ee5a:	2300      	movs	r3, #0
    ee5c:	e795      	b.n	ed8a <_svfprintf_r+0x54a>
    ee5e:	930b      	str	r3, [sp, #44]	; 0x2c
    ee60:	f048 0310 	orr.w	r3, r8, #16
    ee64:	9302      	str	r3, [sp, #8]
    ee66:	9b02      	ldr	r3, [sp, #8]
    ee68:	f013 0120 	ands.w	r1, r3, #32
    ee6c:	f000 8329 	beq.w	f4c2 <_svfprintf_r+0xc82>
    ee70:	9b08      	ldr	r3, [sp, #32]
    ee72:	3307      	adds	r3, #7
    ee74:	f023 0307 	bic.w	r3, r3, #7
    ee78:	6859      	ldr	r1, [r3, #4]
    ee7a:	f853 2b08 	ldr.w	r2, [r3], #8
    ee7e:	9308      	str	r3, [sp, #32]
    ee80:	2301      	movs	r3, #1
    ee82:	e782      	b.n	ed8a <_svfprintf_r+0x54a>
    ee84:	f899 3000 	ldrb.w	r3, [r9]
    ee88:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    ee8c:	e534      	b.n	e8f8 <_svfprintf_r+0xb8>
    ee8e:	bf00      	nop
    ee90:	20000ec0 	.word	0x20000ec0
    ee94:	20000ec4 	.word	0x20000ec4
    ee98:	20000ed0 	.word	0x20000ed0
    ee9c:	4649      	mov	r1, r9
    ee9e:	f811 3b01 	ldrb.w	r3, [r1], #1
    eea2:	2b2a      	cmp	r3, #42	; 0x2a
    eea4:	f001 8249 	beq.w	1033a <_svfprintf_r+0x1afa>
    eea8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    eeac:	2a09      	cmp	r2, #9
    eeae:	4689      	mov	r9, r1
    eeb0:	bf98      	it	ls
    eeb2:	2100      	movls	r1, #0
    eeb4:	f201 8144 	bhi.w	10140 <_svfprintf_r+0x1900>
    eeb8:	f819 3b01 	ldrb.w	r3, [r9], #1
    eebc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    eec0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    eec4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    eec8:	2a09      	cmp	r2, #9
    eeca:	d9f5      	bls.n	eeb8 <_svfprintf_r+0x678>
    eecc:	9103      	str	r1, [sp, #12]
    eece:	e515      	b.n	e8fc <_svfprintf_r+0xbc>
    eed0:	f899 3000 	ldrb.w	r3, [r9]
    eed4:	f048 0801 	orr.w	r8, r8, #1
    eed8:	e50e      	b.n	e8f8 <_svfprintf_r+0xb8>
    eeda:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    eede:	2b00      	cmp	r3, #0
    eee0:	f47f ad8f 	bne.w	ea02 <_svfprintf_r+0x1c2>
    eee4:	f899 3000 	ldrb.w	r3, [r9]
    eee8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    eeec:	e504      	b.n	e8f8 <_svfprintf_r+0xb8>
    eeee:	f8cd 8008 	str.w	r8, [sp, #8]
    eef2:	2b01      	cmp	r3, #1
    eef4:	f000 819d 	beq.w	f232 <_svfprintf_r+0x9f2>
    eef8:	2b02      	cmp	r3, #2
    eefa:	ac50      	add	r4, sp, #320	; 0x140
    eefc:	d120      	bne.n	ef40 <_svfprintf_r+0x700>
    eefe:	9811      	ldr	r0, [sp, #68]	; 0x44
    ef00:	f002 030f 	and.w	r3, r2, #15
    ef04:	0912      	lsrs	r2, r2, #4
    ef06:	5cc3      	ldrb	r3, [r0, r3]
    ef08:	f804 3d01 	strb.w	r3, [r4, #-1]!
    ef0c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    ef10:	0909      	lsrs	r1, r1, #4
    ef12:	ea52 0301 	orrs.w	r3, r2, r1
    ef16:	d1f3      	bne.n	ef00 <_svfprintf_r+0x6c0>
    ef18:	ab50      	add	r3, sp, #320	; 0x140
    ef1a:	1b1b      	subs	r3, r3, r4
    ef1c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    ef20:	9305      	str	r3, [sp, #20]
    ef22:	9a05      	ldr	r2, [sp, #20]
    ef24:	9803      	ldr	r0, [sp, #12]
    ef26:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ef2a:	4282      	cmp	r2, r0
    ef2c:	f04f 0300 	mov.w	r3, #0
    ef30:	bfb8      	it	lt
    ef32:	4602      	movlt	r2, r0
    ef34:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ef38:	9307      	str	r3, [sp, #28]
    ef3a:	9202      	str	r2, [sp, #8]
    ef3c:	930f      	str	r3, [sp, #60]	; 0x3c
    ef3e:	e660      	b.n	ec02 <_svfprintf_r+0x3c2>
    ef40:	f002 0307 	and.w	r3, r2, #7
    ef44:	08d2      	lsrs	r2, r2, #3
    ef46:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    ef4a:	08c9      	lsrs	r1, r1, #3
    ef4c:	3330      	adds	r3, #48	; 0x30
    ef4e:	ea52 0501 	orrs.w	r5, r2, r1
    ef52:	4620      	mov	r0, r4
    ef54:	f804 3d01 	strb.w	r3, [r4, #-1]!
    ef58:	d1f2      	bne.n	ef40 <_svfprintf_r+0x700>
    ef5a:	9a02      	ldr	r2, [sp, #8]
    ef5c:	07d1      	lsls	r1, r2, #31
    ef5e:	f100 824d 	bmi.w	f3fc <_svfprintf_r+0xbbc>
    ef62:	ab50      	add	r3, sp, #320	; 0x140
    ef64:	1b1b      	subs	r3, r3, r4
    ef66:	4690      	mov	r8, r2
    ef68:	9305      	str	r3, [sp, #20]
    ef6a:	e7da      	b.n	ef22 <_svfprintf_r+0x6e2>
    ef6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ef6e:	2b65      	cmp	r3, #101	; 0x65
    ef70:	f340 80d4 	ble.w	f11c <_svfprintf_r+0x8dc>
    ef74:	eeb5 8b40 	vcmp.f64	d8, #0.0
    ef78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef7c:	f040 81c1 	bne.w	f302 <_svfprintf_r+0xac2>
    ef80:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ef82:	49ba      	ldr	r1, [pc, #744]	; (f26c <_svfprintf_r+0xa2c>)
    ef84:	f8ca 1000 	str.w	r1, [sl]
    ef88:	3301      	adds	r3, #1
    ef8a:	3201      	adds	r2, #1
    ef8c:	2101      	movs	r1, #1
    ef8e:	2b07      	cmp	r3, #7
    ef90:	9226      	str	r2, [sp, #152]	; 0x98
    ef92:	9325      	str	r3, [sp, #148]	; 0x94
    ef94:	f8ca 1004 	str.w	r1, [sl, #4]
    ef98:	f300 8551 	bgt.w	fa3e <_svfprintf_r+0x11fe>
    ef9c:	f10a 0a08 	add.w	sl, sl, #8
    efa0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    efa2:	990e      	ldr	r1, [sp, #56]	; 0x38
    efa4:	428b      	cmp	r3, r1
    efa6:	f280 82d0 	bge.w	f54a <_svfprintf_r+0xd0a>
    efaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    efac:	9912      	ldr	r1, [sp, #72]	; 0x48
    efae:	441a      	add	r2, r3
    efb0:	e9ca 1300 	strd	r1, r3, [sl]
    efb4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    efb6:	9226      	str	r2, [sp, #152]	; 0x98
    efb8:	3301      	adds	r3, #1
    efba:	2b07      	cmp	r3, #7
    efbc:	9325      	str	r3, [sp, #148]	; 0x94
    efbe:	f300 8397 	bgt.w	f6f0 <_svfprintf_r+0xeb0>
    efc2:	f10a 0a08 	add.w	sl, sl, #8
    efc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    efc8:	1e5c      	subs	r4, r3, #1
    efca:	2c00      	cmp	r4, #0
    efcc:	f77f add0 	ble.w	eb70 <_svfprintf_r+0x330>
    efd0:	2c10      	cmp	r4, #16
    efd2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    efd4:	f340 856e 	ble.w	fab4 <_svfprintf_r+0x1274>
    efd8:	ee1b 6a10 	vmov	r6, s22
    efdc:	2510      	movs	r5, #16
    efde:	e005      	b.n	efec <_svfprintf_r+0x7ac>
    efe0:	f10a 0a08 	add.w	sl, sl, #8
    efe4:	3c10      	subs	r4, #16
    efe6:	2c10      	cmp	r4, #16
    efe8:	f340 8564 	ble.w	fab4 <_svfprintf_r+0x1274>
    efec:	3301      	adds	r3, #1
    efee:	49a0      	ldr	r1, [pc, #640]	; (f270 <_svfprintf_r+0xa30>)
    eff0:	3210      	adds	r2, #16
    eff2:	2b07      	cmp	r3, #7
    eff4:	e9ca 1500 	strd	r1, r5, [sl]
    eff8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    effc:	ddf0      	ble.n	efe0 <_svfprintf_r+0x7a0>
    effe:	aa24      	add	r2, sp, #144	; 0x90
    f000:	4631      	mov	r1, r6
    f002:	4658      	mov	r0, fp
    f004:	f005 f83e 	bl	14084 <__ssprint_r>
    f008:	2800      	cmp	r0, #0
    f00a:	d17e      	bne.n	f10a <_svfprintf_r+0x8ca>
    f00c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f010:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f014:	e7e6      	b.n	efe4 <_svfprintf_r+0x7a4>
    f016:	9b06      	ldr	r3, [sp, #24]
    f018:	9902      	ldr	r1, [sp, #8]
    f01a:	1a5d      	subs	r5, r3, r1
    f01c:	2d00      	cmp	r5, #0
    f01e:	f77f ad8e 	ble.w	eb3e <_svfprintf_r+0x2fe>
    f022:	2d10      	cmp	r5, #16
    f024:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f026:	dd21      	ble.n	f06c <_svfprintf_r+0x82c>
    f028:	9409      	str	r4, [sp, #36]	; 0x24
    f02a:	2610      	movs	r6, #16
    f02c:	ee1b 4a10 	vmov	r4, s22
    f030:	e004      	b.n	f03c <_svfprintf_r+0x7fc>
    f032:	3d10      	subs	r5, #16
    f034:	2d10      	cmp	r5, #16
    f036:	f10a 0a08 	add.w	sl, sl, #8
    f03a:	dd16      	ble.n	f06a <_svfprintf_r+0x82a>
    f03c:	3301      	adds	r3, #1
    f03e:	498c      	ldr	r1, [pc, #560]	; (f270 <_svfprintf_r+0xa30>)
    f040:	3210      	adds	r2, #16
    f042:	2b07      	cmp	r3, #7
    f044:	e9ca 1600 	strd	r1, r6, [sl]
    f048:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f04c:	ddf1      	ble.n	f032 <_svfprintf_r+0x7f2>
    f04e:	aa24      	add	r2, sp, #144	; 0x90
    f050:	4621      	mov	r1, r4
    f052:	4658      	mov	r0, fp
    f054:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f058:	f005 f814 	bl	14084 <__ssprint_r>
    f05c:	2800      	cmp	r0, #0
    f05e:	d154      	bne.n	f10a <_svfprintf_r+0x8ca>
    f060:	3d10      	subs	r5, #16
    f062:	2d10      	cmp	r5, #16
    f064:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f068:	dce8      	bgt.n	f03c <_svfprintf_r+0x7fc>
    f06a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f06c:	4980      	ldr	r1, [pc, #512]	; (f270 <_svfprintf_r+0xa30>)
    f06e:	f8ca 5004 	str.w	r5, [sl, #4]
    f072:	3301      	adds	r3, #1
    f074:	442a      	add	r2, r5
    f076:	2b07      	cmp	r3, #7
    f078:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f07c:	f8ca 1000 	str.w	r1, [sl]
    f080:	f300 8526 	bgt.w	fad0 <_svfprintf_r+0x1290>
    f084:	9b03      	ldr	r3, [sp, #12]
    f086:	9905      	ldr	r1, [sp, #20]
    f088:	1a5d      	subs	r5, r3, r1
    f08a:	2d00      	cmp	r5, #0
    f08c:	f10a 0a08 	add.w	sl, sl, #8
    f090:	f77f ad5b 	ble.w	eb4a <_svfprintf_r+0x30a>
    f094:	2d10      	cmp	r5, #16
    f096:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f098:	dd1f      	ble.n	f0da <_svfprintf_r+0x89a>
    f09a:	4651      	mov	r1, sl
    f09c:	2610      	movs	r6, #16
    f09e:	ee1b aa10 	vmov	sl, s22
    f0a2:	e004      	b.n	f0ae <_svfprintf_r+0x86e>
    f0a4:	3d10      	subs	r5, #16
    f0a6:	2d10      	cmp	r5, #16
    f0a8:	f101 0108 	add.w	r1, r1, #8
    f0ac:	dd14      	ble.n	f0d8 <_svfprintf_r+0x898>
    f0ae:	3301      	adds	r3, #1
    f0b0:	486f      	ldr	r0, [pc, #444]	; (f270 <_svfprintf_r+0xa30>)
    f0b2:	3210      	adds	r2, #16
    f0b4:	2b07      	cmp	r3, #7
    f0b6:	e9c1 0600 	strd	r0, r6, [r1]
    f0ba:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f0be:	ddf1      	ble.n	f0a4 <_svfprintf_r+0x864>
    f0c0:	aa24      	add	r2, sp, #144	; 0x90
    f0c2:	4651      	mov	r1, sl
    f0c4:	4658      	mov	r0, fp
    f0c6:	f004 ffdd 	bl	14084 <__ssprint_r>
    f0ca:	b9f0      	cbnz	r0, f10a <_svfprintf_r+0x8ca>
    f0cc:	3d10      	subs	r5, #16
    f0ce:	2d10      	cmp	r5, #16
    f0d0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f0d4:	a927      	add	r1, sp, #156	; 0x9c
    f0d6:	dcea      	bgt.n	f0ae <_svfprintf_r+0x86e>
    f0d8:	468a      	mov	sl, r1
    f0da:	3301      	adds	r3, #1
    f0dc:	4964      	ldr	r1, [pc, #400]	; (f270 <_svfprintf_r+0xa30>)
    f0de:	f8ca 5004 	str.w	r5, [sl, #4]
    f0e2:	442a      	add	r2, r5
    f0e4:	2b07      	cmp	r3, #7
    f0e6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f0ea:	f8ca 1000 	str.w	r1, [sl]
    f0ee:	f300 81da 	bgt.w	f4a6 <_svfprintf_r+0xc66>
    f0f2:	f10a 0a08 	add.w	sl, sl, #8
    f0f6:	e528      	b.n	eb4a <_svfprintf_r+0x30a>
    f0f8:	ee1b 1a10 	vmov	r1, s22
    f0fc:	aa24      	add	r2, sp, #144	; 0x90
    f0fe:	4658      	mov	r0, fp
    f100:	f004 ffc0 	bl	14084 <__ssprint_r>
    f104:	2800      	cmp	r0, #0
    f106:	f43f ad47 	beq.w	eb98 <_svfprintf_r+0x358>
    f10a:	9b07      	ldr	r3, [sp, #28]
    f10c:	2b00      	cmp	r3, #0
    f10e:	f43f aca2 	beq.w	ea56 <_svfprintf_r+0x216>
    f112:	9907      	ldr	r1, [sp, #28]
    f114:	4658      	mov	r0, fp
    f116:	f7fe fe65 	bl	dde4 <_free_r>
    f11a:	e49c      	b.n	ea56 <_svfprintf_r+0x216>
    f11c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f11e:	2b01      	cmp	r3, #1
    f120:	f340 817a 	ble.w	f418 <_svfprintf_r+0xbd8>
    f124:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f126:	f8ca 4000 	str.w	r4, [sl]
    f12a:	3301      	adds	r3, #1
    f12c:	3201      	adds	r2, #1
    f12e:	2101      	movs	r1, #1
    f130:	2b07      	cmp	r3, #7
    f132:	9226      	str	r2, [sp, #152]	; 0x98
    f134:	9325      	str	r3, [sp, #148]	; 0x94
    f136:	f8ca 1004 	str.w	r1, [sl, #4]
    f13a:	f300 81f8 	bgt.w	f52e <_svfprintf_r+0xcee>
    f13e:	f10a 0a08 	add.w	sl, sl, #8
    f142:	9910      	ldr	r1, [sp, #64]	; 0x40
    f144:	9812      	ldr	r0, [sp, #72]	; 0x48
    f146:	3301      	adds	r3, #1
    f148:	440a      	add	r2, r1
    f14a:	2b07      	cmp	r3, #7
    f14c:	e9ca 0100 	strd	r0, r1, [sl]
    f150:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f154:	f300 81dd 	bgt.w	f512 <_svfprintf_r+0xcd2>
    f158:	f10a 0a08 	add.w	sl, sl, #8
    f15c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    f160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f164:	f000 8177 	beq.w	f456 <_svfprintf_r+0xc16>
    f168:	990e      	ldr	r1, [sp, #56]	; 0x38
    f16a:	3301      	adds	r3, #1
    f16c:	3901      	subs	r1, #1
    f16e:	3401      	adds	r4, #1
    f170:	440a      	add	r2, r1
    f172:	2b07      	cmp	r3, #7
    f174:	f8ca 4000 	str.w	r4, [sl]
    f178:	9325      	str	r3, [sp, #148]	; 0x94
    f17a:	f8ca 1004 	str.w	r1, [sl, #4]
    f17e:	9226      	str	r2, [sp, #152]	; 0x98
    f180:	f300 815b 	bgt.w	f43a <_svfprintf_r+0xbfa>
    f184:	f10a 0a08 	add.w	sl, sl, #8
    f188:	9914      	ldr	r1, [sp, #80]	; 0x50
    f18a:	f8ca 1004 	str.w	r1, [sl, #4]
    f18e:	3301      	adds	r3, #1
    f190:	440a      	add	r2, r1
    f192:	2b07      	cmp	r3, #7
    f194:	a91e      	add	r1, sp, #120	; 0x78
    f196:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f19a:	f8ca 1000 	str.w	r1, [sl]
    f19e:	f77f ace5 	ble.w	eb6c <_svfprintf_r+0x32c>
    f1a2:	ee1b 1a10 	vmov	r1, s22
    f1a6:	aa24      	add	r2, sp, #144	; 0x90
    f1a8:	4658      	mov	r0, fp
    f1aa:	f004 ff6b 	bl	14084 <__ssprint_r>
    f1ae:	2800      	cmp	r0, #0
    f1b0:	d1ab      	bne.n	f10a <_svfprintf_r+0x8ca>
    f1b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f1b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f1b8:	e4da      	b.n	eb70 <_svfprintf_r+0x330>
    f1ba:	2d10      	cmp	r5, #16
    f1bc:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    f1c0:	4e2c      	ldr	r6, [pc, #176]	; (f274 <_svfprintf_r+0xa34>)
    f1c2:	dd24      	ble.n	f20e <_svfprintf_r+0x9ce>
    f1c4:	9417      	str	r4, [sp, #92]	; 0x5c
    f1c6:	2310      	movs	r3, #16
    f1c8:	ee1b 4a10 	vmov	r4, s22
    f1cc:	4608      	mov	r0, r1
    f1ce:	e004      	b.n	f1da <_svfprintf_r+0x99a>
    f1d0:	3d10      	subs	r5, #16
    f1d2:	2d10      	cmp	r5, #16
    f1d4:	f10a 0a08 	add.w	sl, sl, #8
    f1d8:	dd17      	ble.n	f20a <_svfprintf_r+0x9ca>
    f1da:	3001      	adds	r0, #1
    f1dc:	3210      	adds	r2, #16
    f1de:	2807      	cmp	r0, #7
    f1e0:	e9ca 6300 	strd	r6, r3, [sl]
    f1e4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    f1e8:	ddf2      	ble.n	f1d0 <_svfprintf_r+0x990>
    f1ea:	aa24      	add	r2, sp, #144	; 0x90
    f1ec:	4621      	mov	r1, r4
    f1ee:	4658      	mov	r0, fp
    f1f0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f1f4:	f004 ff46 	bl	14084 <__ssprint_r>
    f1f8:	2800      	cmp	r0, #0
    f1fa:	d186      	bne.n	f10a <_svfprintf_r+0x8ca>
    f1fc:	3d10      	subs	r5, #16
    f1fe:	2d10      	cmp	r5, #16
    f200:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    f204:	f04f 0310 	mov.w	r3, #16
    f208:	dce7      	bgt.n	f1da <_svfprintf_r+0x99a>
    f20a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    f20c:	4601      	mov	r1, r0
    f20e:	3101      	adds	r1, #1
    f210:	442a      	add	r2, r5
    f212:	2907      	cmp	r1, #7
    f214:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    f218:	f8ca 6000 	str.w	r6, [sl]
    f21c:	f8ca 5004 	str.w	r5, [sl, #4]
    f220:	f300 83bd 	bgt.w	f99e <_svfprintf_r+0x115e>
    f224:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f228:	f10a 0a08 	add.w	sl, sl, #8
    f22c:	e45d      	b.n	eaea <_svfprintf_r+0x2aa>
    f22e:	f8cd 8008 	str.w	r8, [sp, #8]
    f232:	2a0a      	cmp	r2, #10
    f234:	f171 0300 	sbcs.w	r3, r1, #0
    f238:	f080 8345 	bcs.w	f8c6 <_svfprintf_r+0x1086>
    f23c:	3230      	adds	r2, #48	; 0x30
    f23e:	2301      	movs	r3, #1
    f240:	f8dd 8008 	ldr.w	r8, [sp, #8]
    f244:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    f248:	9305      	str	r3, [sp, #20]
    f24a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    f24e:	e668      	b.n	ef22 <_svfprintf_r+0x6e2>
    f250:	ee1b 1a10 	vmov	r1, s22
    f254:	aa24      	add	r2, sp, #144	; 0x90
    f256:	4658      	mov	r0, fp
    f258:	f004 ff14 	bl	14084 <__ssprint_r>
    f25c:	2800      	cmp	r0, #0
    f25e:	f47f af54 	bne.w	f10a <_svfprintf_r+0x8ca>
    f262:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f264:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f268:	e452      	b.n	eb10 <_svfprintf_r+0x2d0>
    f26a:	bf00      	nop
    f26c:	20000f00 	.word	0x20000f00
    f270:	20007f54 	.word	0x20007f54
    f274:	2000297c 	.word	0x2000297c
    f278:	ee1b 1a10 	vmov	r1, s22
    f27c:	aa24      	add	r2, sp, #144	; 0x90
    f27e:	4658      	mov	r0, fp
    f280:	f004 ff00 	bl	14084 <__ssprint_r>
    f284:	2800      	cmp	r0, #0
    f286:	f47f af40 	bne.w	f10a <_svfprintf_r+0x8ca>
    f28a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f28c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f290:	e451      	b.n	eb36 <_svfprintf_r+0x2f6>
    f292:	2c10      	cmp	r4, #16
    f294:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f296:	4ebe      	ldr	r6, [pc, #760]	; (f590 <_svfprintf_r+0xd50>)
    f298:	dd1f      	ble.n	f2da <_svfprintf_r+0xa9a>
    f29a:	ee1b 8a10 	vmov	r8, s22
    f29e:	2510      	movs	r5, #16
    f2a0:	e004      	b.n	f2ac <_svfprintf_r+0xa6c>
    f2a2:	3c10      	subs	r4, #16
    f2a4:	2c10      	cmp	r4, #16
    f2a6:	f10a 0a08 	add.w	sl, sl, #8
    f2aa:	dd16      	ble.n	f2da <_svfprintf_r+0xa9a>
    f2ac:	3301      	adds	r3, #1
    f2ae:	3210      	adds	r2, #16
    f2b0:	2b07      	cmp	r3, #7
    f2b2:	e9ca 6500 	strd	r6, r5, [sl]
    f2b6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f2ba:	ddf2      	ble.n	f2a2 <_svfprintf_r+0xa62>
    f2bc:	aa24      	add	r2, sp, #144	; 0x90
    f2be:	4641      	mov	r1, r8
    f2c0:	4658      	mov	r0, fp
    f2c2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f2c6:	f004 fedd 	bl	14084 <__ssprint_r>
    f2ca:	2800      	cmp	r0, #0
    f2cc:	f47f af1d 	bne.w	f10a <_svfprintf_r+0x8ca>
    f2d0:	3c10      	subs	r4, #16
    f2d2:	2c10      	cmp	r4, #16
    f2d4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f2d8:	dce8      	bgt.n	f2ac <_svfprintf_r+0xa6c>
    f2da:	3301      	adds	r3, #1
    f2dc:	4422      	add	r2, r4
    f2de:	2b07      	cmp	r3, #7
    f2e0:	e9ca 6400 	strd	r6, r4, [sl]
    f2e4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f2e8:	f77f ac4b 	ble.w	eb82 <_svfprintf_r+0x342>
    f2ec:	ee1b 1a10 	vmov	r1, s22
    f2f0:	aa24      	add	r2, sp, #144	; 0x90
    f2f2:	4658      	mov	r0, fp
    f2f4:	f004 fec6 	bl	14084 <__ssprint_r>
    f2f8:	2800      	cmp	r0, #0
    f2fa:	f47f af06 	bne.w	f10a <_svfprintf_r+0x8ca>
    f2fe:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f300:	e43f      	b.n	eb82 <_svfprintf_r+0x342>
    f302:	991b      	ldr	r1, [sp, #108]	; 0x6c
    f304:	2900      	cmp	r1, #0
    f306:	f340 835a 	ble.w	f9be <_svfprintf_r+0x117e>
    f30a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f30c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f30e:	429e      	cmp	r6, r3
    f310:	bfa8      	it	ge
    f312:	461e      	movge	r6, r3
    f314:	2e00      	cmp	r6, #0
    f316:	dd0b      	ble.n	f330 <_svfprintf_r+0xaf0>
    f318:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f31a:	3301      	adds	r3, #1
    f31c:	4432      	add	r2, r6
    f31e:	2b07      	cmp	r3, #7
    f320:	e9ca 4600 	strd	r4, r6, [sl]
    f324:	9226      	str	r2, [sp, #152]	; 0x98
    f326:	9325      	str	r3, [sp, #148]	; 0x94
    f328:	f300 8689 	bgt.w	1003e <_svfprintf_r+0x17fe>
    f32c:	f10a 0a08 	add.w	sl, sl, #8
    f330:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    f332:	2e00      	cmp	r6, #0
    f334:	bfa8      	it	ge
    f336:	1bad      	subge	r5, r5, r6
    f338:	2d00      	cmp	r5, #0
    f33a:	f300 8203 	bgt.w	f744 <_svfprintf_r+0xf04>
    f33e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f340:	f418 6f80 	tst.w	r8, #1024	; 0x400
    f344:	4423      	add	r3, r4
    f346:	9305      	str	r3, [sp, #20]
    f348:	f040 821f 	bne.w	f78a <_svfprintf_r+0xf4a>
    f34c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f34e:	990e      	ldr	r1, [sp, #56]	; 0x38
    f350:	428b      	cmp	r3, r1
    f352:	db03      	blt.n	f35c <_svfprintf_r+0xb1c>
    f354:	f018 0f01 	tst.w	r8, #1
    f358:	f000 84cf 	beq.w	fcfa <_svfprintf_r+0x14ba>
    f35c:	9910      	ldr	r1, [sp, #64]	; 0x40
    f35e:	9812      	ldr	r0, [sp, #72]	; 0x48
    f360:	440a      	add	r2, r1
    f362:	e9ca 0100 	strd	r0, r1, [sl]
    f366:	9925      	ldr	r1, [sp, #148]	; 0x94
    f368:	9226      	str	r2, [sp, #152]	; 0x98
    f36a:	3101      	adds	r1, #1
    f36c:	2907      	cmp	r1, #7
    f36e:	9125      	str	r1, [sp, #148]	; 0x94
    f370:	f300 86a5 	bgt.w	100be <_svfprintf_r+0x187e>
    f374:	f10a 0a08 	add.w	sl, sl, #8
    f378:	990e      	ldr	r1, [sp, #56]	; 0x38
    f37a:	1865      	adds	r5, r4, r1
    f37c:	1acc      	subs	r4, r1, r3
    f37e:	9b05      	ldr	r3, [sp, #20]
    f380:	1aed      	subs	r5, r5, r3
    f382:	42a5      	cmp	r5, r4
    f384:	bfa8      	it	ge
    f386:	4625      	movge	r5, r4
    f388:	2d00      	cmp	r5, #0
    f38a:	dd0d      	ble.n	f3a8 <_svfprintf_r+0xb68>
    f38c:	f8ca 3000 	str.w	r3, [sl]
    f390:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f392:	f8ca 5004 	str.w	r5, [sl, #4]
    f396:	3301      	adds	r3, #1
    f398:	442a      	add	r2, r5
    f39a:	2b07      	cmp	r3, #7
    f39c:	9226      	str	r2, [sp, #152]	; 0x98
    f39e:	9325      	str	r3, [sp, #148]	; 0x94
    f3a0:	f300 86bb 	bgt.w	1011a <_svfprintf_r+0x18da>
    f3a4:	f10a 0a08 	add.w	sl, sl, #8
    f3a8:	2d00      	cmp	r5, #0
    f3aa:	bfa8      	it	ge
    f3ac:	1b64      	subge	r4, r4, r5
    f3ae:	2c00      	cmp	r4, #0
    f3b0:	f77f abde 	ble.w	eb70 <_svfprintf_r+0x330>
    f3b4:	2c10      	cmp	r4, #16
    f3b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f3b8:	f340 837c 	ble.w	fab4 <_svfprintf_r+0x1274>
    f3bc:	ee1b 6a10 	vmov	r6, s22
    f3c0:	2510      	movs	r5, #16
    f3c2:	e005      	b.n	f3d0 <_svfprintf_r+0xb90>
    f3c4:	f10a 0a08 	add.w	sl, sl, #8
    f3c8:	3c10      	subs	r4, #16
    f3ca:	2c10      	cmp	r4, #16
    f3cc:	f340 8372 	ble.w	fab4 <_svfprintf_r+0x1274>
    f3d0:	3301      	adds	r3, #1
    f3d2:	4970      	ldr	r1, [pc, #448]	; (f594 <_svfprintf_r+0xd54>)
    f3d4:	3210      	adds	r2, #16
    f3d6:	2b07      	cmp	r3, #7
    f3d8:	e9ca 1500 	strd	r1, r5, [sl]
    f3dc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f3e0:	ddf0      	ble.n	f3c4 <_svfprintf_r+0xb84>
    f3e2:	aa24      	add	r2, sp, #144	; 0x90
    f3e4:	4631      	mov	r1, r6
    f3e6:	4658      	mov	r0, fp
    f3e8:	f004 fe4c 	bl	14084 <__ssprint_r>
    f3ec:	2800      	cmp	r0, #0
    f3ee:	f47f ae8c 	bne.w	f10a <_svfprintf_r+0x8ca>
    f3f2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f3f6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f3fa:	e7e5      	b.n	f3c8 <_svfprintf_r+0xb88>
    f3fc:	2b30      	cmp	r3, #48	; 0x30
    f3fe:	f43f ad8b 	beq.w	ef18 <_svfprintf_r+0x6d8>
    f402:	2330      	movs	r3, #48	; 0x30
    f404:	3802      	subs	r0, #2
    f406:	f804 3c01 	strb.w	r3, [r4, #-1]
    f40a:	ab50      	add	r3, sp, #320	; 0x140
    f40c:	1a1b      	subs	r3, r3, r0
    f40e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    f412:	9305      	str	r3, [sp, #20]
    f414:	4604      	mov	r4, r0
    f416:	e584      	b.n	ef22 <_svfprintf_r+0x6e2>
    f418:	f018 0f01 	tst.w	r8, #1
    f41c:	f47f ae82 	bne.w	f124 <_svfprintf_r+0x8e4>
    f420:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f422:	f8ca 4000 	str.w	r4, [sl]
    f426:	3301      	adds	r3, #1
    f428:	3201      	adds	r2, #1
    f42a:	2101      	movs	r1, #1
    f42c:	2b07      	cmp	r3, #7
    f42e:	9226      	str	r2, [sp, #152]	; 0x98
    f430:	9325      	str	r3, [sp, #148]	; 0x94
    f432:	f8ca 1004 	str.w	r1, [sl, #4]
    f436:	f77f aea5 	ble.w	f184 <_svfprintf_r+0x944>
    f43a:	ee1b 1a10 	vmov	r1, s22
    f43e:	aa24      	add	r2, sp, #144	; 0x90
    f440:	4658      	mov	r0, fp
    f442:	f004 fe1f 	bl	14084 <__ssprint_r>
    f446:	2800      	cmp	r0, #0
    f448:	f47f ae5f 	bne.w	f10a <_svfprintf_r+0x8ca>
    f44c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f450:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f454:	e698      	b.n	f188 <_svfprintf_r+0x948>
    f456:	990e      	ldr	r1, [sp, #56]	; 0x38
    f458:	1e4c      	subs	r4, r1, #1
    f45a:	2c00      	cmp	r4, #0
    f45c:	f77f ae94 	ble.w	f188 <_svfprintf_r+0x948>
    f460:	2c10      	cmp	r4, #16
    f462:	f340 8361 	ble.w	fb28 <_svfprintf_r+0x12e8>
    f466:	ee1b 6a10 	vmov	r6, s22
    f46a:	2510      	movs	r5, #16
    f46c:	e005      	b.n	f47a <_svfprintf_r+0xc3a>
    f46e:	f10a 0a08 	add.w	sl, sl, #8
    f472:	3c10      	subs	r4, #16
    f474:	2c10      	cmp	r4, #16
    f476:	f340 8357 	ble.w	fb28 <_svfprintf_r+0x12e8>
    f47a:	3301      	adds	r3, #1
    f47c:	4945      	ldr	r1, [pc, #276]	; (f594 <_svfprintf_r+0xd54>)
    f47e:	3210      	adds	r2, #16
    f480:	2b07      	cmp	r3, #7
    f482:	e9ca 1500 	strd	r1, r5, [sl]
    f486:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f48a:	ddf0      	ble.n	f46e <_svfprintf_r+0xc2e>
    f48c:	aa24      	add	r2, sp, #144	; 0x90
    f48e:	4631      	mov	r1, r6
    f490:	4658      	mov	r0, fp
    f492:	f004 fdf7 	bl	14084 <__ssprint_r>
    f496:	2800      	cmp	r0, #0
    f498:	f47f ae37 	bne.w	f10a <_svfprintf_r+0x8ca>
    f49c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f4a0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f4a4:	e7e5      	b.n	f472 <_svfprintf_r+0xc32>
    f4a6:	ee1b 1a10 	vmov	r1, s22
    f4aa:	aa24      	add	r2, sp, #144	; 0x90
    f4ac:	4658      	mov	r0, fp
    f4ae:	f004 fde9 	bl	14084 <__ssprint_r>
    f4b2:	2800      	cmp	r0, #0
    f4b4:	f47f ae29 	bne.w	f10a <_svfprintf_r+0x8ca>
    f4b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f4ba:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f4be:	f7ff bb44 	b.w	eb4a <_svfprintf_r+0x30a>
    f4c2:	9b02      	ldr	r3, [sp, #8]
    f4c4:	f013 0310 	ands.w	r3, r3, #16
    f4c8:	f040 80c1 	bne.w	f64e <_svfprintf_r+0xe0e>
    f4cc:	9a02      	ldr	r2, [sp, #8]
    f4ce:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    f4d2:	f000 837a 	beq.w	fbca <_svfprintf_r+0x138a>
    f4d6:	9808      	ldr	r0, [sp, #32]
    f4d8:	f850 2b04 	ldr.w	r2, [r0], #4
    f4dc:	9008      	str	r0, [sp, #32]
    f4de:	4619      	mov	r1, r3
    f4e0:	b292      	uxth	r2, r2
    f4e2:	2301      	movs	r3, #1
    f4e4:	e451      	b.n	ed8a <_svfprintf_r+0x54a>
    f4e6:	f018 0310 	ands.w	r3, r8, #16
    f4ea:	d155      	bne.n	f598 <_svfprintf_r+0xd58>
    f4ec:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    f4f0:	f000 835d 	beq.w	fbae <_svfprintf_r+0x136e>
    f4f4:	9808      	ldr	r0, [sp, #32]
    f4f6:	f850 2b04 	ldr.w	r2, [r0], #4
    f4fa:	9008      	str	r0, [sp, #32]
    f4fc:	4619      	mov	r1, r3
    f4fe:	b292      	uxth	r2, r2
    f500:	e4a8      	b.n	ee54 <_svfprintf_r+0x614>
    f502:	4252      	negs	r2, r2
    f504:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    f508:	f8cd 8008 	str.w	r8, [sp, #8]
    f50c:	202d      	movs	r0, #45	; 0x2d
    f50e:	2301      	movs	r3, #1
    f510:	e43c      	b.n	ed8c <_svfprintf_r+0x54c>
    f512:	ee1b 1a10 	vmov	r1, s22
    f516:	aa24      	add	r2, sp, #144	; 0x90
    f518:	4658      	mov	r0, fp
    f51a:	f004 fdb3 	bl	14084 <__ssprint_r>
    f51e:	2800      	cmp	r0, #0
    f520:	f47f adf3 	bne.w	f10a <_svfprintf_r+0x8ca>
    f524:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f528:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f52c:	e616      	b.n	f15c <_svfprintf_r+0x91c>
    f52e:	ee1b 1a10 	vmov	r1, s22
    f532:	aa24      	add	r2, sp, #144	; 0x90
    f534:	4658      	mov	r0, fp
    f536:	f004 fda5 	bl	14084 <__ssprint_r>
    f53a:	2800      	cmp	r0, #0
    f53c:	f47f ade5 	bne.w	f10a <_svfprintf_r+0x8ca>
    f540:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f544:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f548:	e5fb      	b.n	f142 <_svfprintf_r+0x902>
    f54a:	f018 0f01 	tst.w	r8, #1
    f54e:	f43f ab0f 	beq.w	eb70 <_svfprintf_r+0x330>
    f552:	e52a      	b.n	efaa <_svfprintf_r+0x76a>
    f554:	9308      	str	r3, [sp, #32]
    f556:	f899 3000 	ldrb.w	r3, [r9]
    f55a:	f7ff b9cd 	b.w	e8f8 <_svfprintf_r+0xb8>
    f55e:	ac50      	add	r4, sp, #320	; 0x140
    f560:	e4df      	b.n	ef22 <_svfprintf_r+0x6e2>
    f562:	f418 7f00 	tst.w	r8, #512	; 0x200
    f566:	f040 83db 	bne.w	fd20 <_svfprintf_r+0x14e0>
    f56a:	f853 2b04 	ldr.w	r2, [r3], #4
    f56e:	9308      	str	r3, [sp, #32]
    f570:	17d1      	asrs	r1, r2, #31
    f572:	460b      	mov	r3, r1
    f574:	f7ff bbb6 	b.w	ece4 <_svfprintf_r+0x4a4>
    f578:	9b08      	ldr	r3, [sp, #32]
    f57a:	9804      	ldr	r0, [sp, #16]
    f57c:	f853 1b04 	ldr.w	r1, [r3], #4
    f580:	9308      	str	r3, [sp, #32]
    f582:	17c2      	asrs	r2, r0, #31
    f584:	e9c1 0200 	strd	r0, r2, [r1]
    f588:	464c      	mov	r4, r9
    f58a:	f7ff b98b 	b.w	e8a4 <_svfprintf_r+0x64>
    f58e:	bf00      	nop
    f590:	2000297c 	.word	0x2000297c
    f594:	20007f54 	.word	0x20007f54
    f598:	9b08      	ldr	r3, [sp, #32]
    f59a:	f853 2b04 	ldr.w	r2, [r3], #4
    f59e:	9308      	str	r3, [sp, #32]
    f5a0:	e458      	b.n	ee54 <_svfprintf_r+0x614>
    f5a2:	eeb4 8b48 	vcmp.f64	d8, d8
    f5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f5aa:	f180 8694 	bvs.w	102d6 <_svfprintf_r+0x1a96>
    f5ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5b0:	2b61      	cmp	r3, #97	; 0x61
    f5b2:	f000 8552 	beq.w	1005a <_svfprintf_r+0x181a>
    f5b6:	2b41      	cmp	r3, #65	; 0x41
    f5b8:	f000 85c0 	beq.w	1013c <_svfprintf_r+0x18fc>
    f5bc:	9b03      	ldr	r3, [sp, #12]
    f5be:	3301      	adds	r3, #1
    f5c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5c2:	f023 0520 	bic.w	r5, r3, #32
    f5c6:	f000 8480 	beq.w	feca <_svfprintf_r+0x168a>
    f5ca:	2d47      	cmp	r5, #71	; 0x47
    f5cc:	d104      	bne.n	f5d8 <_svfprintf_r+0xd98>
    f5ce:	9b03      	ldr	r3, [sp, #12]
    f5d0:	2b00      	cmp	r3, #0
    f5d2:	bf08      	it	eq
    f5d4:	2301      	moveq	r3, #1
    f5d6:	9303      	str	r3, [sp, #12]
    f5d8:	ee18 3a90 	vmov	r3, s17
    f5dc:	2b00      	cmp	r3, #0
    f5de:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    f5e2:	4646      	mov	r6, r8
    f5e4:	f2c0 8618 	blt.w	10218 <_svfprintf_r+0x19d8>
    f5e8:	eeb0 ab48 	vmov.f64	d10, d8
    f5ec:	2300      	movs	r3, #0
    f5ee:	4690      	mov	r8, r2
    f5f0:	9309      	str	r3, [sp, #36]	; 0x24
    f5f2:	9307      	str	r3, [sp, #28]
    f5f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5f6:	3b41      	subs	r3, #65	; 0x41
    f5f8:	2b25      	cmp	r3, #37	; 0x25
    f5fa:	f200 8398 	bhi.w	fd2e <_svfprintf_r+0x14ee>
    f5fe:	e8df f013 	tbh	[pc, r3, lsl #1]
    f602:	046f      	.short	0x046f
    f604:	03960396 	.word	0x03960396
    f608:	04680396 	.word	0x04680396
    f60c:	0396046c 	.word	0x0396046c
    f610:	03960396 	.word	0x03960396
    f614:	03960396 	.word	0x03960396
    f618:	03960396 	.word	0x03960396
    f61c:	03960396 	.word	0x03960396
    f620:	03960396 	.word	0x03960396
    f624:	03960396 	.word	0x03960396
    f628:	03960396 	.word	0x03960396
    f62c:	03960396 	.word	0x03960396
    f630:	03960396 	.word	0x03960396
    f634:	03960396 	.word	0x03960396
    f638:	03960396 	.word	0x03960396
    f63c:	03960396 	.word	0x03960396
    f640:	03960396 	.word	0x03960396
    f644:	03960396 	.word	0x03960396
    f648:	04680396 	.word	0x04680396
    f64c:	046c      	.short	0x046c
    f64e:	9b08      	ldr	r3, [sp, #32]
    f650:	f853 2b04 	ldr.w	r2, [r3], #4
    f654:	9308      	str	r3, [sp, #32]
    f656:	2301      	movs	r3, #1
    f658:	f7ff bb97 	b.w	ed8a <_svfprintf_r+0x54a>
    f65c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f65e:	2b00      	cmp	r3, #0
    f660:	f43f a9cf 	beq.w	ea02 <_svfprintf_r+0x1c2>
    f664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f666:	781b      	ldrb	r3, [r3, #0]
    f668:	2b00      	cmp	r3, #0
    f66a:	f43f a9ca 	beq.w	ea02 <_svfprintf_r+0x1c2>
    f66e:	f899 3000 	ldrb.w	r3, [r9]
    f672:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    f676:	f7ff b93f 	b.w	e8f8 <_svfprintf_r+0xb8>
    f67a:	930b      	str	r3, [sp, #44]	; 0x2c
    f67c:	f8cd 8008 	str.w	r8, [sp, #8]
    f680:	f7ff bbf1 	b.w	ee66 <_svfprintf_r+0x626>
    f684:	930b      	str	r3, [sp, #44]	; 0x2c
    f686:	4b9a      	ldr	r3, [pc, #616]	; (f8f0 <_svfprintf_r+0x10b0>)
    f688:	9311      	str	r3, [sp, #68]	; 0x44
    f68a:	f018 0120 	ands.w	r1, r8, #32
    f68e:	f000 8105 	beq.w	f89c <_svfprintf_r+0x105c>
    f692:	9b08      	ldr	r3, [sp, #32]
    f694:	3307      	adds	r3, #7
    f696:	f023 0307 	bic.w	r3, r3, #7
    f69a:	6859      	ldr	r1, [r3, #4]
    f69c:	f853 2b08 	ldr.w	r2, [r3], #8
    f6a0:	9308      	str	r3, [sp, #32]
    f6a2:	f018 0f01 	tst.w	r8, #1
    f6a6:	d00a      	beq.n	f6be <_svfprintf_r+0xe7e>
    f6a8:	ea52 0301 	orrs.w	r3, r2, r1
    f6ac:	d007      	beq.n	f6be <_svfprintf_r+0xe7e>
    f6ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6b0:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    f6b4:	2330      	movs	r3, #48	; 0x30
    f6b6:	f048 0802 	orr.w	r8, r8, #2
    f6ba:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    f6be:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    f6c2:	9302      	str	r3, [sp, #8]
    f6c4:	2302      	movs	r3, #2
    f6c6:	f7ff bb60 	b.w	ed8a <_svfprintf_r+0x54a>
    f6ca:	930b      	str	r3, [sp, #44]	; 0x2c
    f6cc:	f7ff bbb6 	b.w	ee3c <_svfprintf_r+0x5fc>
    f6d0:	930b      	str	r3, [sp, #44]	; 0x2c
    f6d2:	4b88      	ldr	r3, [pc, #544]	; (f8f4 <_svfprintf_r+0x10b4>)
    f6d4:	9311      	str	r3, [sp, #68]	; 0x44
    f6d6:	e7d8      	b.n	f68a <_svfprintf_r+0xe4a>
    f6d8:	9b08      	ldr	r3, [sp, #32]
    f6da:	2101      	movs	r1, #1
    f6dc:	f853 2b04 	ldr.w	r2, [r3], #4
    f6e0:	9102      	str	r1, [sp, #8]
    f6e2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    f6e6:	9308      	str	r3, [sp, #32]
    f6e8:	9105      	str	r1, [sp, #20]
    f6ea:	ac37      	add	r4, sp, #220	; 0xdc
    f6ec:	f7ff baaf 	b.w	ec4e <_svfprintf_r+0x40e>
    f6f0:	ee1b 1a10 	vmov	r1, s22
    f6f4:	aa24      	add	r2, sp, #144	; 0x90
    f6f6:	4658      	mov	r0, fp
    f6f8:	f004 fcc4 	bl	14084 <__ssprint_r>
    f6fc:	2800      	cmp	r0, #0
    f6fe:	f47f ad04 	bne.w	f10a <_svfprintf_r+0x8ca>
    f702:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f704:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f708:	e45d      	b.n	efc6 <_svfprintf_r+0x786>
    f70a:	9b03      	ldr	r3, [sp, #12]
    f70c:	9407      	str	r4, [sp, #28]
    f70e:	2b06      	cmp	r3, #6
    f710:	4622      	mov	r2, r4
    f712:	bf28      	it	cs
    f714:	2306      	movcs	r3, #6
    f716:	9403      	str	r4, [sp, #12]
    f718:	4621      	mov	r1, r4
    f71a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    f71e:	4c76      	ldr	r4, [pc, #472]	; (f8f8 <_svfprintf_r+0x10b8>)
    f720:	9302      	str	r3, [sp, #8]
    f722:	9305      	str	r3, [sp, #20]
    f724:	920f      	str	r2, [sp, #60]	; 0x3c
    f726:	f7ff ba6c 	b.w	ec02 <_svfprintf_r+0x3c2>
    f72a:	2140      	movs	r1, #64	; 0x40
    f72c:	4658      	mov	r0, fp
    f72e:	f7fc f80b 	bl	b748 <_malloc_r>
    f732:	6020      	str	r0, [r4, #0]
    f734:	6120      	str	r0, [r4, #16]
    f736:	2800      	cmp	r0, #0
    f738:	f000 860f 	beq.w	1035a <_svfprintf_r+0x1b1a>
    f73c:	2340      	movs	r3, #64	; 0x40
    f73e:	6163      	str	r3, [r4, #20]
    f740:	f7ff b89e 	b.w	e880 <_svfprintf_r+0x40>
    f744:	2d10      	cmp	r5, #16
    f746:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f748:	f340 825d 	ble.w	fc06 <_svfprintf_r+0x13c6>
    f74c:	4651      	mov	r1, sl
    f74e:	2610      	movs	r6, #16
    f750:	ee1b aa10 	vmov	sl, s22
    f754:	e004      	b.n	f760 <_svfprintf_r+0xf20>
    f756:	3108      	adds	r1, #8
    f758:	3d10      	subs	r5, #16
    f75a:	2d10      	cmp	r5, #16
    f75c:	f340 8252 	ble.w	fc04 <_svfprintf_r+0x13c4>
    f760:	3301      	adds	r3, #1
    f762:	4866      	ldr	r0, [pc, #408]	; (f8fc <_svfprintf_r+0x10bc>)
    f764:	3210      	adds	r2, #16
    f766:	2b07      	cmp	r3, #7
    f768:	e9c1 0600 	strd	r0, r6, [r1]
    f76c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f770:	ddf1      	ble.n	f756 <_svfprintf_r+0xf16>
    f772:	aa24      	add	r2, sp, #144	; 0x90
    f774:	4651      	mov	r1, sl
    f776:	4658      	mov	r0, fp
    f778:	f004 fc84 	bl	14084 <__ssprint_r>
    f77c:	2800      	cmp	r0, #0
    f77e:	f47f acc4 	bne.w	f10a <_svfprintf_r+0x8ca>
    f782:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f786:	a927      	add	r1, sp, #156	; 0x9c
    f788:	e7e6      	b.n	f758 <_svfprintf_r+0xf18>
    f78a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f78c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    f790:	18e3      	adds	r3, r4, r3
    f792:	9303      	str	r3, [sp, #12]
    f794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f796:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    f79a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    f79c:	9d05      	ldr	r5, [sp, #20]
    f79e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    f7a2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    f7a6:	940b      	str	r4, [sp, #44]	; 0x2c
    f7a8:	ee1b 1a10 	vmov	r1, s22
    f7ac:	4650      	mov	r0, sl
    f7ae:	2b00      	cmp	r3, #0
    f7b0:	d034      	beq.n	f81c <_svfprintf_r+0xfdc>
    f7b2:	f1b8 0f00 	cmp.w	r8, #0
    f7b6:	d135      	bne.n	f824 <_svfprintf_r+0xfe4>
    f7b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f7ba:	3b01      	subs	r3, #1
    f7bc:	3e01      	subs	r6, #1
    f7be:	930d      	str	r3, [sp, #52]	; 0x34
    f7c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f7c2:	e9c0 3900 	strd	r3, r9, [r0]
    f7c6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f7c8:	3301      	adds	r3, #1
    f7ca:	444a      	add	r2, r9
    f7cc:	2b07      	cmp	r3, #7
    f7ce:	9226      	str	r2, [sp, #152]	; 0x98
    f7d0:	9325      	str	r3, [sp, #148]	; 0x94
    f7d2:	dc6c      	bgt.n	f8ae <_svfprintf_r+0x106e>
    f7d4:	3008      	adds	r0, #8
    f7d6:	9b03      	ldr	r3, [sp, #12]
    f7d8:	f896 c000 	ldrb.w	ip, [r6]
    f7dc:	1b5b      	subs	r3, r3, r5
    f7de:	4563      	cmp	r3, ip
    f7e0:	bfa8      	it	ge
    f7e2:	4663      	movge	r3, ip
    f7e4:	2b00      	cmp	r3, #0
    f7e6:	469a      	mov	sl, r3
    f7e8:	dd0c      	ble.n	f804 <_svfprintf_r+0xfc4>
    f7ea:	9c25      	ldr	r4, [sp, #148]	; 0x94
    f7ec:	3401      	adds	r4, #1
    f7ee:	441a      	add	r2, r3
    f7f0:	2c07      	cmp	r4, #7
    f7f2:	e9c0 5300 	strd	r5, r3, [r0]
    f7f6:	9226      	str	r2, [sp, #152]	; 0x98
    f7f8:	9425      	str	r4, [sp, #148]	; 0x94
    f7fa:	f300 8177 	bgt.w	faec <_svfprintf_r+0x12ac>
    f7fe:	f896 c000 	ldrb.w	ip, [r6]
    f802:	3008      	adds	r0, #8
    f804:	f1ba 0f00 	cmp.w	sl, #0
    f808:	bfac      	ite	ge
    f80a:	ebac 040a 	subge.w	r4, ip, sl
    f80e:	4664      	movlt	r4, ip
    f810:	2c00      	cmp	r4, #0
    f812:	dc0a      	bgt.n	f82a <_svfprintf_r+0xfea>
    f814:	4465      	add	r5, ip
    f816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f818:	2b00      	cmp	r3, #0
    f81a:	d1ca      	bne.n	f7b2 <_svfprintf_r+0xf72>
    f81c:	f1b8 0f00 	cmp.w	r8, #0
    f820:	f000 83ac 	beq.w	ff7c <_svfprintf_r+0x173c>
    f824:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    f828:	e7ca      	b.n	f7c0 <_svfprintf_r+0xf80>
    f82a:	2c10      	cmp	r4, #16
    f82c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    f830:	dd24      	ble.n	f87c <_svfprintf_r+0x103c>
    f832:	9505      	str	r5, [sp, #20]
    f834:	f04f 0a10 	mov.w	sl, #16
    f838:	4663      	mov	r3, ip
    f83a:	460d      	mov	r5, r1
    f83c:	e004      	b.n	f848 <_svfprintf_r+0x1008>
    f83e:	3c10      	subs	r4, #16
    f840:	2c10      	cmp	r4, #16
    f842:	f100 0008 	add.w	r0, r0, #8
    f846:	dd16      	ble.n	f876 <_svfprintf_r+0x1036>
    f848:	3301      	adds	r3, #1
    f84a:	492c      	ldr	r1, [pc, #176]	; (f8fc <_svfprintf_r+0x10bc>)
    f84c:	3210      	adds	r2, #16
    f84e:	2b07      	cmp	r3, #7
    f850:	e9c0 1a00 	strd	r1, sl, [r0]
    f854:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f858:	ddf1      	ble.n	f83e <_svfprintf_r+0xffe>
    f85a:	aa24      	add	r2, sp, #144	; 0x90
    f85c:	4629      	mov	r1, r5
    f85e:	4658      	mov	r0, fp
    f860:	f004 fc10 	bl	14084 <__ssprint_r>
    f864:	2800      	cmp	r0, #0
    f866:	f47f ac50 	bne.w	f10a <_svfprintf_r+0x8ca>
    f86a:	3c10      	subs	r4, #16
    f86c:	2c10      	cmp	r4, #16
    f86e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f872:	a827      	add	r0, sp, #156	; 0x9c
    f874:	dce8      	bgt.n	f848 <_svfprintf_r+0x1008>
    f876:	4629      	mov	r1, r5
    f878:	9d05      	ldr	r5, [sp, #20]
    f87a:	469c      	mov	ip, r3
    f87c:	f10c 0301 	add.w	r3, ip, #1
    f880:	4422      	add	r2, r4
    f882:	6044      	str	r4, [r0, #4]
    f884:	2b07      	cmp	r3, #7
    f886:	4c1d      	ldr	r4, [pc, #116]	; (f8fc <_svfprintf_r+0x10bc>)
    f888:	6004      	str	r4, [r0, #0]
    f88a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f88e:	f300 83c6 	bgt.w	1001e <_svfprintf_r+0x17de>
    f892:	f896 c000 	ldrb.w	ip, [r6]
    f896:	3008      	adds	r0, #8
    f898:	4465      	add	r5, ip
    f89a:	e7bc      	b.n	f816 <_svfprintf_r+0xfd6>
    f89c:	f018 0310 	ands.w	r3, r8, #16
    f8a0:	f000 80c2 	beq.w	fa28 <_svfprintf_r+0x11e8>
    f8a4:	9b08      	ldr	r3, [sp, #32]
    f8a6:	f853 2b04 	ldr.w	r2, [r3], #4
    f8aa:	9308      	str	r3, [sp, #32]
    f8ac:	e6f9      	b.n	f6a2 <_svfprintf_r+0xe62>
    f8ae:	aa24      	add	r2, sp, #144	; 0x90
    f8b0:	4658      	mov	r0, fp
    f8b2:	9105      	str	r1, [sp, #20]
    f8b4:	f004 fbe6 	bl	14084 <__ssprint_r>
    f8b8:	2800      	cmp	r0, #0
    f8ba:	f47f ac26 	bne.w	f10a <_svfprintf_r+0x8ca>
    f8be:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f8c0:	9905      	ldr	r1, [sp, #20]
    f8c2:	a827      	add	r0, sp, #156	; 0x9c
    f8c4:	e787      	b.n	f7d6 <_svfprintf_r+0xf96>
    f8c6:	9802      	ldr	r0, [sp, #8]
    f8c8:	f8cd a01c 	str.w	sl, [sp, #28]
    f8cc:	ac50      	add	r4, sp, #320	; 0x140
    f8ce:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    f8d2:	2500      	movs	r5, #0
    f8d4:	ee0a ba10 	vmov	s20, fp
    f8d8:	4b09      	ldr	r3, [pc, #36]	; (f900 <_svfprintf_r+0x10c0>)
    f8da:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    f8de:	f8cd 9014 	str.w	r9, [sp, #20]
    f8e2:	46a3      	mov	fp, r4
    f8e4:	f04f 0805 	mov.w	r8, #5
    f8e8:	46ac      	mov	ip, r5
    f8ea:	4604      	mov	r4, r0
    f8ec:	e010      	b.n	f910 <_svfprintf_r+0x10d0>
    f8ee:	bf00      	nop
    f8f0:	20000ed0 	.word	0x20000ed0
    f8f4:	20000ee4 	.word	0x20000ee4
    f8f8:	20000ef8 	.word	0x20000ef8
    f8fc:	20007f54 	.word	0x20007f54
    f900:	cccccccd 	.word	0xcccccccd
    f904:	2a0a      	cmp	r2, #10
    f906:	f171 0100 	sbcs.w	r1, r1, #0
    f90a:	d336      	bcc.n	f97a <_svfprintf_r+0x113a>
    f90c:	464a      	mov	r2, r9
    f90e:	4631      	mov	r1, r6
    f910:	1850      	adds	r0, r2, r1
    f912:	f140 0000 	adc.w	r0, r0, #0
    f916:	fba3 5600 	umull	r5, r6, r3, r0
    f91a:	f026 0503 	bic.w	r5, r6, #3
    f91e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    f922:	1b40      	subs	r0, r0, r5
    f924:	1a15      	subs	r5, r2, r0
    f926:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    f92a:	f161 0e00 	sbc.w	lr, r1, #0
    f92e:	fb06 f605 	mul.w	r6, r6, r5
    f932:	fba5 9503 	umull	r9, r5, r5, r3
    f936:	fb03 660e 	mla	r6, r3, lr, r6
    f93a:	f009 0e01 	and.w	lr, r9, #1
    f93e:	442e      	add	r6, r5
    f940:	fbae 5e08 	umull	r5, lr, lr, r8
    f944:	182d      	adds	r5, r5, r0
    f946:	ea4f 0959 	mov.w	r9, r9, lsr #1
    f94a:	3530      	adds	r5, #48	; 0x30
    f94c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    f950:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    f954:	f10c 0c01 	add.w	ip, ip, #1
    f958:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    f95c:	0876      	lsrs	r6, r6, #1
    f95e:	2c00      	cmp	r4, #0
    f960:	d0d0      	beq.n	f904 <_svfprintf_r+0x10c4>
    f962:	f89a 0000 	ldrb.w	r0, [sl]
    f966:	4584      	cmp	ip, r0
    f968:	d1cc      	bne.n	f904 <_svfprintf_r+0x10c4>
    f96a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    f96e:	d0c9      	beq.n	f904 <_svfprintf_r+0x10c4>
    f970:	2a0a      	cmp	r2, #10
    f972:	f171 0100 	sbcs.w	r1, r1, #0
    f976:	f080 818f 	bcs.w	fc98 <_svfprintf_r+0x1458>
    f97a:	465c      	mov	r4, fp
    f97c:	ab50      	add	r3, sp, #320	; 0x140
    f97e:	1b1b      	subs	r3, r3, r4
    f980:	f8dd 9014 	ldr.w	r9, [sp, #20]
    f984:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    f988:	ee1a ba10 	vmov	fp, s20
    f98c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    f990:	f8dd 8008 	ldr.w	r8, [sp, #8]
    f994:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    f998:	9305      	str	r3, [sp, #20]
    f99a:	f7ff bac2 	b.w	ef22 <_svfprintf_r+0x6e2>
    f99e:	ee1b 1a10 	vmov	r1, s22
    f9a2:	aa24      	add	r2, sp, #144	; 0x90
    f9a4:	4658      	mov	r0, fp
    f9a6:	f004 fb6d 	bl	14084 <__ssprint_r>
    f9aa:	2800      	cmp	r0, #0
    f9ac:	f47f abad 	bne.w	f10a <_svfprintf_r+0x8ca>
    f9b0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f9b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f9b6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f9ba:	f7ff b896 	b.w	eaea <_svfprintf_r+0x2aa>
    f9be:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f9c0:	48be      	ldr	r0, [pc, #760]	; (fcbc <_svfprintf_r+0x147c>)
    f9c2:	f8ca 0000 	str.w	r0, [sl]
    f9c6:	3301      	adds	r3, #1
    f9c8:	3201      	adds	r2, #1
    f9ca:	2001      	movs	r0, #1
    f9cc:	2b07      	cmp	r3, #7
    f9ce:	9226      	str	r2, [sp, #152]	; 0x98
    f9d0:	9325      	str	r3, [sp, #148]	; 0x94
    f9d2:	f8ca 0004 	str.w	r0, [sl, #4]
    f9d6:	f300 8177 	bgt.w	fcc8 <_svfprintf_r+0x1488>
    f9da:	f10a 0a08 	add.w	sl, sl, #8
    f9de:	2900      	cmp	r1, #0
    f9e0:	f040 80af 	bne.w	fb42 <_svfprintf_r+0x1302>
    f9e4:	990e      	ldr	r1, [sp, #56]	; 0x38
    f9e6:	f008 0301 	and.w	r3, r8, #1
    f9ea:	430b      	orrs	r3, r1
    f9ec:	f43f a8c0 	beq.w	eb70 <_svfprintf_r+0x330>
    f9f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f9f2:	9912      	ldr	r1, [sp, #72]	; 0x48
    f9f4:	441a      	add	r2, r3
    f9f6:	e9ca 1300 	strd	r1, r3, [sl]
    f9fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f9fc:	9226      	str	r2, [sp, #152]	; 0x98
    f9fe:	3301      	adds	r3, #1
    fa00:	2b07      	cmp	r3, #7
    fa02:	9325      	str	r3, [sp, #148]	; 0x94
    fa04:	f300 8252 	bgt.w	feac <_svfprintf_r+0x166c>
    fa08:	f10a 0a08 	add.w	sl, sl, #8
    fa0c:	990e      	ldr	r1, [sp, #56]	; 0x38
    fa0e:	f8ca 4000 	str.w	r4, [sl]
    fa12:	3301      	adds	r3, #1
    fa14:	440a      	add	r2, r1
    fa16:	2b07      	cmp	r3, #7
    fa18:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fa1c:	f8ca 1004 	str.w	r1, [sl, #4]
    fa20:	f77f a8a4 	ble.w	eb6c <_svfprintf_r+0x32c>
    fa24:	f7ff bbbd 	b.w	f1a2 <_svfprintf_r+0x962>
    fa28:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    fa2c:	f000 80dd 	beq.w	fbea <_svfprintf_r+0x13aa>
    fa30:	9808      	ldr	r0, [sp, #32]
    fa32:	f850 2b04 	ldr.w	r2, [r0], #4
    fa36:	9008      	str	r0, [sp, #32]
    fa38:	4619      	mov	r1, r3
    fa3a:	b292      	uxth	r2, r2
    fa3c:	e631      	b.n	f6a2 <_svfprintf_r+0xe62>
    fa3e:	ee1b 1a10 	vmov	r1, s22
    fa42:	aa24      	add	r2, sp, #144	; 0x90
    fa44:	4658      	mov	r0, fp
    fa46:	f004 fb1d 	bl	14084 <__ssprint_r>
    fa4a:	2800      	cmp	r0, #0
    fa4c:	f47f ab5d 	bne.w	f10a <_svfprintf_r+0x8ca>
    fa50:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fa52:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fa56:	f7ff baa3 	b.w	efa0 <_svfprintf_r+0x760>
    fa5a:	ae22      	add	r6, sp, #136	; 0x88
    fa5c:	2208      	movs	r2, #8
    fa5e:	2100      	movs	r1, #0
    fa60:	4630      	mov	r0, r6
    fa62:	941d      	str	r4, [sp, #116]	; 0x74
    fa64:	f7fd fd3e 	bl	d4e4 <memset>
    fa68:	9b03      	ldr	r3, [sp, #12]
    fa6a:	1c5a      	adds	r2, r3, #1
    fa6c:	f000 80db 	beq.w	fc26 <_svfprintf_r+0x13e6>
    fa70:	2500      	movs	r5, #0
    fa72:	f8cd 9008 	str.w	r9, [sp, #8]
    fa76:	f8cd 801c 	str.w	r8, [sp, #28]
    fa7a:	4699      	mov	r9, r3
    fa7c:	46a8      	mov	r8, r5
    fa7e:	e00c      	b.n	fa9a <_svfprintf_r+0x125a>
    fa80:	a937      	add	r1, sp, #220	; 0xdc
    fa82:	4658      	mov	r0, fp
    fa84:	f003 fa02 	bl	12e8c <_wcrtomb_r>
    fa88:	1c43      	adds	r3, r0, #1
    fa8a:	4440      	add	r0, r8
    fa8c:	f000 83c8 	beq.w	10220 <_svfprintf_r+0x19e0>
    fa90:	4548      	cmp	r0, r9
    fa92:	dc08      	bgt.n	faa6 <_svfprintf_r+0x1266>
    fa94:	f000 8418 	beq.w	102c8 <_svfprintf_r+0x1a88>
    fa98:	4680      	mov	r8, r0
    fa9a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    fa9c:	5952      	ldr	r2, [r2, r5]
    fa9e:	4633      	mov	r3, r6
    faa0:	3504      	adds	r5, #4
    faa2:	2a00      	cmp	r2, #0
    faa4:	d1ec      	bne.n	fa80 <_svfprintf_r+0x1240>
    faa6:	f8cd 8014 	str.w	r8, [sp, #20]
    faaa:	f8dd 9008 	ldr.w	r9, [sp, #8]
    faae:	f8dd 801c 	ldr.w	r8, [sp, #28]
    fab2:	e0c5      	b.n	fc40 <_svfprintf_r+0x1400>
    fab4:	3301      	adds	r3, #1
    fab6:	4982      	ldr	r1, [pc, #520]	; (fcc0 <_svfprintf_r+0x1480>)
    fab8:	f8ca 4004 	str.w	r4, [sl, #4]
    fabc:	4422      	add	r2, r4
    fabe:	2b07      	cmp	r3, #7
    fac0:	f8ca 1000 	str.w	r1, [sl]
    fac4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fac8:	f77f a850 	ble.w	eb6c <_svfprintf_r+0x32c>
    facc:	f7ff bb69 	b.w	f1a2 <_svfprintf_r+0x962>
    fad0:	ee1b 1a10 	vmov	r1, s22
    fad4:	aa24      	add	r2, sp, #144	; 0x90
    fad6:	4658      	mov	r0, fp
    fad8:	f004 fad4 	bl	14084 <__ssprint_r>
    fadc:	2800      	cmp	r0, #0
    fade:	f47f ab14 	bne.w	f10a <_svfprintf_r+0x8ca>
    fae2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fae4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fae8:	f7ff b829 	b.w	eb3e <_svfprintf_r+0x2fe>
    faec:	aa24      	add	r2, sp, #144	; 0x90
    faee:	4658      	mov	r0, fp
    faf0:	9105      	str	r1, [sp, #20]
    faf2:	f004 fac7 	bl	14084 <__ssprint_r>
    faf6:	2800      	cmp	r0, #0
    faf8:	f47f ab07 	bne.w	f10a <_svfprintf_r+0x8ca>
    fafc:	f896 c000 	ldrb.w	ip, [r6]
    fb00:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fb02:	9905      	ldr	r1, [sp, #20]
    fb04:	a827      	add	r0, sp, #156	; 0x9c
    fb06:	e67d      	b.n	f804 <_svfprintf_r+0xfc4>
    fb08:	2b01      	cmp	r3, #1
    fb0a:	f8cd 8008 	str.w	r8, [sp, #8]
    fb0e:	f47f a9f3 	bne.w	eef8 <_svfprintf_r+0x6b8>
    fb12:	f7ff bb93 	b.w	f23c <_svfprintf_r+0x9fc>
    fb16:	9b08      	ldr	r3, [sp, #32]
    fb18:	9904      	ldr	r1, [sp, #16]
    fb1a:	f853 2b04 	ldr.w	r2, [r3], #4
    fb1e:	464c      	mov	r4, r9
    fb20:	6011      	str	r1, [r2, #0]
    fb22:	9308      	str	r3, [sp, #32]
    fb24:	f7fe bebe 	b.w	e8a4 <_svfprintf_r+0x64>
    fb28:	3301      	adds	r3, #1
    fb2a:	4965      	ldr	r1, [pc, #404]	; (fcc0 <_svfprintf_r+0x1480>)
    fb2c:	f8ca 4004 	str.w	r4, [sl, #4]
    fb30:	4422      	add	r2, r4
    fb32:	2b07      	cmp	r3, #7
    fb34:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fb38:	f8ca 1000 	str.w	r1, [sl]
    fb3c:	f77f ab22 	ble.w	f184 <_svfprintf_r+0x944>
    fb40:	e47b      	b.n	f43a <_svfprintf_r+0xbfa>
    fb42:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fb44:	9812      	ldr	r0, [sp, #72]	; 0x48
    fb46:	441a      	add	r2, r3
    fb48:	e9ca 0300 	strd	r0, r3, [sl]
    fb4c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fb4e:	9226      	str	r2, [sp, #152]	; 0x98
    fb50:	3301      	adds	r3, #1
    fb52:	2b07      	cmp	r3, #7
    fb54:	9325      	str	r3, [sp, #148]	; 0x94
    fb56:	f300 81a9 	bgt.w	feac <_svfprintf_r+0x166c>
    fb5a:	f10a 0a08 	add.w	sl, sl, #8
    fb5e:	2900      	cmp	r1, #0
    fb60:	f6bf af54 	bge.w	fa0c <_svfprintf_r+0x11cc>
    fb64:	424d      	negs	r5, r1
    fb66:	3110      	adds	r1, #16
    fb68:	f280 830f 	bge.w	1018a <_svfprintf_r+0x194a>
    fb6c:	ee1b 1a10 	vmov	r1, s22
    fb70:	2610      	movs	r6, #16
    fb72:	e005      	b.n	fb80 <_svfprintf_r+0x1340>
    fb74:	f10a 0a08 	add.w	sl, sl, #8
    fb78:	3d10      	subs	r5, #16
    fb7a:	2d10      	cmp	r5, #16
    fb7c:	f340 8305 	ble.w	1018a <_svfprintf_r+0x194a>
    fb80:	3301      	adds	r3, #1
    fb82:	484f      	ldr	r0, [pc, #316]	; (fcc0 <_svfprintf_r+0x1480>)
    fb84:	3210      	adds	r2, #16
    fb86:	2b07      	cmp	r3, #7
    fb88:	e9ca 0600 	strd	r0, r6, [sl]
    fb8c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fb90:	ddf0      	ble.n	fb74 <_svfprintf_r+0x1334>
    fb92:	aa24      	add	r2, sp, #144	; 0x90
    fb94:	4658      	mov	r0, fp
    fb96:	9103      	str	r1, [sp, #12]
    fb98:	f004 fa74 	bl	14084 <__ssprint_r>
    fb9c:	2800      	cmp	r0, #0
    fb9e:	f47f aab4 	bne.w	f10a <_svfprintf_r+0x8ca>
    fba2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fba6:	9903      	ldr	r1, [sp, #12]
    fba8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fbac:	e7e4      	b.n	fb78 <_svfprintf_r+0x1338>
    fbae:	9b08      	ldr	r3, [sp, #32]
    fbb0:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    fbb4:	bf1a      	itte	ne
    fbb6:	4611      	movne	r1, r2
    fbb8:	f853 2b04 	ldrne.w	r2, [r3], #4
    fbbc:	f853 2b04 	ldreq.w	r2, [r3], #4
    fbc0:	9308      	str	r3, [sp, #32]
    fbc2:	bf18      	it	ne
    fbc4:	b2d2      	uxtbne	r2, r2
    fbc6:	f7ff b945 	b.w	ee54 <_svfprintf_r+0x614>
    fbca:	9b02      	ldr	r3, [sp, #8]
    fbcc:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    fbd0:	9b08      	ldr	r3, [sp, #32]
    fbd2:	bf1a      	itte	ne
    fbd4:	4611      	movne	r1, r2
    fbd6:	f853 2b04 	ldrne.w	r2, [r3], #4
    fbda:	f853 2b04 	ldreq.w	r2, [r3], #4
    fbde:	9308      	str	r3, [sp, #32]
    fbe0:	bf18      	it	ne
    fbe2:	b2d2      	uxtbne	r2, r2
    fbe4:	2301      	movs	r3, #1
    fbe6:	f7ff b8d0 	b.w	ed8a <_svfprintf_r+0x54a>
    fbea:	9b08      	ldr	r3, [sp, #32]
    fbec:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    fbf0:	bf1a      	itte	ne
    fbf2:	4611      	movne	r1, r2
    fbf4:	f853 2b04 	ldrne.w	r2, [r3], #4
    fbf8:	f853 2b04 	ldreq.w	r2, [r3], #4
    fbfc:	9308      	str	r3, [sp, #32]
    fbfe:	bf18      	it	ne
    fc00:	b2d2      	uxtbne	r2, r2
    fc02:	e54e      	b.n	f6a2 <_svfprintf_r+0xe62>
    fc04:	468a      	mov	sl, r1
    fc06:	3301      	adds	r3, #1
    fc08:	492d      	ldr	r1, [pc, #180]	; (fcc0 <_svfprintf_r+0x1480>)
    fc0a:	f8ca 5004 	str.w	r5, [sl, #4]
    fc0e:	442a      	add	r2, r5
    fc10:	2b07      	cmp	r3, #7
    fc12:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fc16:	f8ca 1000 	str.w	r1, [sl]
    fc1a:	f300 8139 	bgt.w	fe90 <_svfprintf_r+0x1650>
    fc1e:	f10a 0a08 	add.w	sl, sl, #8
    fc22:	f7ff bb8c 	b.w	f33e <_svfprintf_r+0xafe>
    fc26:	2300      	movs	r3, #0
    fc28:	4619      	mov	r1, r3
    fc2a:	9600      	str	r6, [sp, #0]
    fc2c:	aa1d      	add	r2, sp, #116	; 0x74
    fc2e:	4658      	mov	r0, fp
    fc30:	f003 f952 	bl	12ed8 <_wcsrtombs_r>
    fc34:	4603      	mov	r3, r0
    fc36:	3301      	adds	r3, #1
    fc38:	9005      	str	r0, [sp, #20]
    fc3a:	f000 82f1 	beq.w	10220 <_svfprintf_r+0x19e0>
    fc3e:	941d      	str	r4, [sp, #116]	; 0x74
    fc40:	9b05      	ldr	r3, [sp, #20]
    fc42:	2b00      	cmp	r3, #0
    fc44:	d04e      	beq.n	fce4 <_svfprintf_r+0x14a4>
    fc46:	2b63      	cmp	r3, #99	; 0x63
    fc48:	f300 8118 	bgt.w	fe7c <_svfprintf_r+0x163c>
    fc4c:	2300      	movs	r3, #0
    fc4e:	9307      	str	r3, [sp, #28]
    fc50:	ac37      	add	r4, sp, #220	; 0xdc
    fc52:	2208      	movs	r2, #8
    fc54:	2100      	movs	r1, #0
    fc56:	4630      	mov	r0, r6
    fc58:	f7fd fc44 	bl	d4e4 <memset>
    fc5c:	9d05      	ldr	r5, [sp, #20]
    fc5e:	9600      	str	r6, [sp, #0]
    fc60:	462b      	mov	r3, r5
    fc62:	aa1d      	add	r2, sp, #116	; 0x74
    fc64:	4621      	mov	r1, r4
    fc66:	4658      	mov	r0, fp
    fc68:	f003 f936 	bl	12ed8 <_wcsrtombs_r>
    fc6c:	4285      	cmp	r5, r0
    fc6e:	f040 837c 	bne.w	1036a <_svfprintf_r+0x1b2a>
    fc72:	9a05      	ldr	r2, [sp, #20]
    fc74:	2300      	movs	r3, #0
    fc76:	54a3      	strb	r3, [r4, r2]
    fc78:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    fc7c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    fc80:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    fc84:	9303      	str	r3, [sp, #12]
    fc86:	9202      	str	r2, [sp, #8]
    fc88:	930f      	str	r3, [sp, #60]	; 0x3c
    fc8a:	f7fe bfba 	b.w	ec02 <_svfprintf_r+0x3c2>
    fc8e:	212d      	movs	r1, #45	; 0x2d
    fc90:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    fc94:	f7fe bfa4 	b.w	ebe0 <_svfprintf_r+0x3a0>
    fc98:	9b16      	ldr	r3, [sp, #88]	; 0x58
    fc9a:	9915      	ldr	r1, [sp, #84]	; 0x54
    fc9c:	ebab 0b03 	sub.w	fp, fp, r3
    fca0:	461a      	mov	r2, r3
    fca2:	4658      	mov	r0, fp
    fca4:	f7fd fcb6 	bl	d614 <strncpy>
    fca8:	f89a 2001 	ldrb.w	r2, [sl, #1]
    fcac:	4b05      	ldr	r3, [pc, #20]	; (fcc4 <_svfprintf_r+0x1484>)
    fcae:	b10a      	cbz	r2, fcb4 <_svfprintf_r+0x1474>
    fcb0:	f10a 0a01 	add.w	sl, sl, #1
    fcb4:	f04f 0c00 	mov.w	ip, #0
    fcb8:	e628      	b.n	f90c <_svfprintf_r+0x10cc>
    fcba:	bf00      	nop
    fcbc:	20000f00 	.word	0x20000f00
    fcc0:	20007f54 	.word	0x20007f54
    fcc4:	cccccccd 	.word	0xcccccccd
    fcc8:	ee1b 1a10 	vmov	r1, s22
    fccc:	aa24      	add	r2, sp, #144	; 0x90
    fcce:	4658      	mov	r0, fp
    fcd0:	f004 f9d8 	bl	14084 <__ssprint_r>
    fcd4:	2800      	cmp	r0, #0
    fcd6:	f47f aa18 	bne.w	f10a <_svfprintf_r+0x8ca>
    fcda:	991b      	ldr	r1, [sp, #108]	; 0x6c
    fcdc:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fcde:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fce2:	e67c      	b.n	f9de <_svfprintf_r+0x119e>
    fce4:	9b05      	ldr	r3, [sp, #20]
    fce6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    fcea:	930f      	str	r3, [sp, #60]	; 0x3c
    fcec:	e9cd 3302 	strd	r3, r3, [sp, #8]
    fcf0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    fcf4:	9307      	str	r3, [sp, #28]
    fcf6:	f7fe bf84 	b.w	ec02 <_svfprintf_r+0x3c2>
    fcfa:	990e      	ldr	r1, [sp, #56]	; 0x38
    fcfc:	9805      	ldr	r0, [sp, #20]
    fcfe:	1865      	adds	r5, r4, r1
    fd00:	1a2d      	subs	r5, r5, r0
    fd02:	1acc      	subs	r4, r1, r3
    fd04:	42a5      	cmp	r5, r4
    fd06:	bfa8      	it	ge
    fd08:	4625      	movge	r5, r4
    fd0a:	f7ff bb4d 	b.w	f3a8 <_svfprintf_r+0xb68>
    fd0e:	9b08      	ldr	r3, [sp, #32]
    fd10:	9904      	ldr	r1, [sp, #16]
    fd12:	f853 2b04 	ldr.w	r2, [r3], #4
    fd16:	9308      	str	r3, [sp, #32]
    fd18:	8011      	strh	r1, [r2, #0]
    fd1a:	464c      	mov	r4, r9
    fd1c:	f7fe bdc2 	b.w	e8a4 <_svfprintf_r+0x64>
    fd20:	f913 2b04 	ldrsb.w	r2, [r3], #4
    fd24:	9308      	str	r3, [sp, #32]
    fd26:	17d1      	asrs	r1, r2, #31
    fd28:	460b      	mov	r3, r1
    fd2a:	f7fe bfdb 	b.w	ece4 <_svfprintf_r+0x4a4>
    fd2e:	9a03      	ldr	r2, [sp, #12]
    fd30:	2102      	movs	r1, #2
    fd32:	ab22      	add	r3, sp, #136	; 0x88
    fd34:	9301      	str	r3, [sp, #4]
    fd36:	ab1d      	add	r3, sp, #116	; 0x74
    fd38:	9300      	str	r3, [sp, #0]
    fd3a:	4658      	mov	r0, fp
    fd3c:	ab1b      	add	r3, sp, #108	; 0x6c
    fd3e:	eeb0 0b4a 	vmov.f64	d0, d10
    fd42:	9202      	str	r2, [sp, #8]
    fd44:	f003 fae4 	bl	13310 <_dtoa_r>
    fd48:	2d47      	cmp	r5, #71	; 0x47
    fd4a:	9a02      	ldr	r2, [sp, #8]
    fd4c:	4604      	mov	r4, r0
    fd4e:	f000 8161 	beq.w	10014 <_svfprintf_r+0x17d4>
    fd52:	2d46      	cmp	r5, #70	; 0x46
    fd54:	4410      	add	r0, r2
    fd56:	d105      	bne.n	fd64 <_svfprintf_r+0x1524>
    fd58:	7823      	ldrb	r3, [r4, #0]
    fd5a:	2b30      	cmp	r3, #48	; 0x30
    fd5c:	f000 826f 	beq.w	1023e <_svfprintf_r+0x19fe>
    fd60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    fd62:	4410      	add	r0, r2
    fd64:	eeb5 ab40 	vcmp.f64	d10, #0.0
    fd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fd6c:	f040 8146 	bne.w	fffc <_svfprintf_r+0x17bc>
    fd70:	4603      	mov	r3, r0
    fd72:	1b1b      	subs	r3, r3, r4
    fd74:	930e      	str	r3, [sp, #56]	; 0x38
    fd76:	2d47      	cmp	r5, #71	; 0x47
    fd78:	f000 8110 	beq.w	ff9c <_svfprintf_r+0x175c>
    fd7c:	2d46      	cmp	r5, #70	; 0x46
    fd7e:	f000 81b5 	beq.w	100ec <_svfprintf_r+0x18ac>
    fd82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fd84:	930c      	str	r3, [sp, #48]	; 0x30
    fd86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fd88:	2d41      	cmp	r5, #65	; 0x41
    fd8a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    fd8e:	931b      	str	r3, [sp, #108]	; 0x6c
    fd90:	f000 81e5 	beq.w	1015e <_svfprintf_r+0x191e>
    fd94:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    fd98:	2100      	movs	r1, #0
    fd9a:	2b00      	cmp	r3, #0
    fd9c:	bfb8      	it	lt
    fd9e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    fda0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    fda4:	bfba      	itte	lt
    fda6:	f1c3 0301 	rsblt	r3, r3, #1
    fdaa:	222d      	movlt	r2, #45	; 0x2d
    fdac:	222b      	movge	r2, #43	; 0x2b
    fdae:	2b09      	cmp	r3, #9
    fdb0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    fdb4:	f340 81da 	ble.w	1016c <_svfprintf_r+0x192c>
    fdb8:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    fdbc:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 101dc <_svfprintf_r+0x199c>
    fdc0:	462a      	mov	r2, r5
    fdc2:	4610      	mov	r0, r2
    fdc4:	fb8c 2103 	smull	r2, r1, ip, r3
    fdc8:	17da      	asrs	r2, r3, #31
    fdca:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    fdce:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    fdd2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    fdd6:	3130      	adds	r1, #48	; 0x30
    fdd8:	f800 1c01 	strb.w	r1, [r0, #-1]
    fddc:	4619      	mov	r1, r3
    fdde:	2963      	cmp	r1, #99	; 0x63
    fde0:	4613      	mov	r3, r2
    fde2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    fde6:	dcec      	bgt.n	fdc2 <_svfprintf_r+0x1582>
    fde8:	3330      	adds	r3, #48	; 0x30
    fdea:	b2d9      	uxtb	r1, r3
    fdec:	1e83      	subs	r3, r0, #2
    fdee:	429d      	cmp	r5, r3
    fdf0:	f802 1c01 	strb.w	r1, [r2, #-1]
    fdf4:	f240 828b 	bls.w	1030e <_svfprintf_r+0x1ace>
    fdf8:	4613      	mov	r3, r2
    fdfa:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    fdfe:	e001      	b.n	fe04 <_svfprintf_r+0x15c4>
    fe00:	f813 1b01 	ldrb.w	r1, [r3], #1
    fe04:	f802 1b01 	strb.w	r1, [r2], #1
    fe08:	429d      	cmp	r5, r3
    fe0a:	d1f9      	bne.n	fe00 <_svfprintf_r+0x15c0>
    fe0c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    fe10:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    fe14:	1a1b      	subs	r3, r3, r0
    fe16:	4413      	add	r3, r2
    fe18:	aa1e      	add	r2, sp, #120	; 0x78
    fe1a:	1a9b      	subs	r3, r3, r2
    fe1c:	9314      	str	r3, [sp, #80]	; 0x50
    fe1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fe20:	9a14      	ldr	r2, [sp, #80]	; 0x50
    fe22:	2b01      	cmp	r3, #1
    fe24:	441a      	add	r2, r3
    fe26:	9205      	str	r2, [sp, #20]
    fe28:	f340 8203 	ble.w	10232 <_svfprintf_r+0x19f2>
    fe2c:	9b05      	ldr	r3, [sp, #20]
    fe2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fe30:	4413      	add	r3, r2
    fe32:	9305      	str	r3, [sp, #20]
    fe34:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    fe38:	9a05      	ldr	r2, [sp, #20]
    fe3a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    fe3e:	2300      	movs	r3, #0
    fe40:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    fe44:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    fe48:	930f      	str	r3, [sp, #60]	; 0x3c
    fe4a:	9202      	str	r2, [sp, #8]
    fe4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fe4e:	2b00      	cmp	r3, #0
    fe50:	f040 80b1 	bne.w	ffb6 <_svfprintf_r+0x1776>
    fe54:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    fe58:	9303      	str	r3, [sp, #12]
    fe5a:	f7fe bed2 	b.w	ec02 <_svfprintf_r+0x3c2>
    fe5e:	4620      	mov	r0, r4
    fe60:	f7fd feae 	bl	dbc0 <strlen>
    fe64:	4602      	mov	r2, r0
    fe66:	9005      	str	r0, [sp, #20]
    fe68:	f7fe bf20 	b.w	ecac <_svfprintf_r+0x46c>
    fe6c:	ee1b 1a10 	vmov	r1, s22
    fe70:	aa24      	add	r2, sp, #144	; 0x90
    fe72:	4658      	mov	r0, fp
    fe74:	f004 f906 	bl	14084 <__ssprint_r>
    fe78:	f7fe bded 	b.w	ea56 <_svfprintf_r+0x216>
    fe7c:	1c59      	adds	r1, r3, #1
    fe7e:	4658      	mov	r0, fp
    fe80:	f7fb fc62 	bl	b748 <_malloc_r>
    fe84:	4604      	mov	r4, r0
    fe86:	2800      	cmp	r0, #0
    fe88:	f000 81ca 	beq.w	10220 <_svfprintf_r+0x19e0>
    fe8c:	9007      	str	r0, [sp, #28]
    fe8e:	e6e0      	b.n	fc52 <_svfprintf_r+0x1412>
    fe90:	ee1b 1a10 	vmov	r1, s22
    fe94:	aa24      	add	r2, sp, #144	; 0x90
    fe96:	4658      	mov	r0, fp
    fe98:	f004 f8f4 	bl	14084 <__ssprint_r>
    fe9c:	2800      	cmp	r0, #0
    fe9e:	f47f a934 	bne.w	f10a <_svfprintf_r+0x8ca>
    fea2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fea4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fea8:	f7ff ba49 	b.w	f33e <_svfprintf_r+0xafe>
    feac:	ee1b 1a10 	vmov	r1, s22
    feb0:	aa24      	add	r2, sp, #144	; 0x90
    feb2:	4658      	mov	r0, fp
    feb4:	f004 f8e6 	bl	14084 <__ssprint_r>
    feb8:	2800      	cmp	r0, #0
    feba:	f47f a926 	bne.w	f10a <_svfprintf_r+0x8ca>
    febe:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fec2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    fec4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fec8:	e649      	b.n	fb5e <_svfprintf_r+0x131e>
    feca:	2306      	movs	r3, #6
    fecc:	9303      	str	r3, [sp, #12]
    fece:	f7ff bb83 	b.w	f5d8 <_svfprintf_r+0xd98>
    fed2:	9b03      	ldr	r3, [sp, #12]
    fed4:	2102      	movs	r1, #2
    fed6:	1c5a      	adds	r2, r3, #1
    fed8:	e72b      	b.n	fd32 <_svfprintf_r+0x14f2>
    feda:	9a03      	ldr	r2, [sp, #12]
    fedc:	2103      	movs	r1, #3
    fede:	e728      	b.n	fd32 <_svfprintf_r+0x14f2>
    fee0:	a81b      	add	r0, sp, #108	; 0x6c
    fee2:	eeb0 0b4a 	vmov.f64	d0, d10
    fee6:	f003 f81b 	bl	12f20 <frexp>
    feea:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    feee:	ee20 0b07 	vmul.f64	d0, d0, d7
    fef2:	eeb5 0b40 	vcmp.f64	d0, #0.0
    fef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fefa:	d101      	bne.n	ff00 <_svfprintf_r+0x16c0>
    fefc:	2301      	movs	r3, #1
    fefe:	931b      	str	r3, [sp, #108]	; 0x6c
    ff00:	48b3      	ldr	r0, [pc, #716]	; (101d0 <_svfprintf_r+0x1990>)
    ff02:	9b03      	ldr	r3, [sp, #12]
    ff04:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    ff08:	3b01      	subs	r3, #1
    ff0a:	4622      	mov	r2, r4
    ff0c:	e004      	b.n	ff18 <_svfprintf_r+0x16d8>
    ff0e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    ff12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ff16:	d013      	beq.n	ff40 <_svfprintf_r+0x1700>
    ff18:	ee20 0b05 	vmul.f64	d0, d0, d5
    ff1c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    ff20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ff24:	ee17 1a90 	vmov	r1, s15
    ff28:	5c41      	ldrb	r1, [r0, r1]
    ff2a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    ff2e:	4694      	mov	ip, r2
    ff30:	ee30 0b46 	vsub.f64	d0, d0, d6
    ff34:	f802 1b01 	strb.w	r1, [r2], #1
    ff38:	4619      	mov	r1, r3
    ff3a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    ff3e:	d1e6      	bne.n	ff0e <_svfprintf_r+0x16ce>
    ff40:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    ff44:	eeb4 0bc6 	vcmpe.f64	d0, d6
    ff48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ff4c:	f300 8148 	bgt.w	101e0 <_svfprintf_r+0x19a0>
    ff50:	eeb4 0b46 	vcmp.f64	d0, d6
    ff54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ff58:	d104      	bne.n	ff64 <_svfprintf_r+0x1724>
    ff5a:	ee17 3a90 	vmov	r3, s15
    ff5e:	07db      	lsls	r3, r3, #31
    ff60:	f100 813e 	bmi.w	101e0 <_svfprintf_r+0x19a0>
    ff64:	2900      	cmp	r1, #0
    ff66:	db06      	blt.n	ff76 <_svfprintf_r+0x1736>
    ff68:	1c4b      	adds	r3, r1, #1
    ff6a:	4413      	add	r3, r2
    ff6c:	2130      	movs	r1, #48	; 0x30
    ff6e:	f802 1b01 	strb.w	r1, [r2], #1
    ff72:	4293      	cmp	r3, r2
    ff74:	d1fb      	bne.n	ff6e <_svfprintf_r+0x172e>
    ff76:	1b13      	subs	r3, r2, r4
    ff78:	930e      	str	r3, [sp, #56]	; 0x38
    ff7a:	e6fc      	b.n	fd76 <_svfprintf_r+0x1536>
    ff7c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ff7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ff80:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    ff84:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    ff88:	9613      	str	r6, [sp, #76]	; 0x4c
    ff8a:	18e3      	adds	r3, r4, r3
    ff8c:	429d      	cmp	r5, r3
    ff8e:	4629      	mov	r1, r5
    ff90:	bf28      	it	cs
    ff92:	4619      	movcs	r1, r3
    ff94:	4682      	mov	sl, r0
    ff96:	9105      	str	r1, [sp, #20]
    ff98:	f7ff b9d8 	b.w	f34c <_svfprintf_r+0xb0c>
    ff9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ff9e:	930c      	str	r3, [sp, #48]	; 0x30
    ffa0:	1cda      	adds	r2, r3, #3
    ffa2:	db02      	blt.n	ffaa <_svfprintf_r+0x176a>
    ffa4:	9a03      	ldr	r2, [sp, #12]
    ffa6:	4293      	cmp	r3, r2
    ffa8:	dd0c      	ble.n	ffc4 <_svfprintf_r+0x1784>
    ffaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ffac:	3b02      	subs	r3, #2
    ffae:	930b      	str	r3, [sp, #44]	; 0x2c
    ffb0:	f023 0520 	bic.w	r5, r3, #32
    ffb4:	e6e7      	b.n	fd86 <_svfprintf_r+0x1546>
    ffb6:	212d      	movs	r1, #45	; 0x2d
    ffb8:	2300      	movs	r3, #0
    ffba:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ffbe:	9303      	str	r3, [sp, #12]
    ffc0:	f7fe be22 	b.w	ec08 <_svfprintf_r+0x3c8>
    ffc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ffc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ffc8:	4293      	cmp	r3, r2
    ffca:	f2c0 80bd 	blt.w	10148 <_svfprintf_r+0x1908>
    ffce:	07f0      	lsls	r0, r6, #31
    ffd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ffd2:	f140 8132 	bpl.w	1023a <_svfprintf_r+0x19fa>
    ffd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ffd8:	4413      	add	r3, r2
    ffda:	9305      	str	r3, [sp, #20]
    ffdc:	0571      	lsls	r1, r6, #21
    ffde:	d503      	bpl.n	ffe8 <_svfprintf_r+0x17a8>
    ffe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ffe2:	2b00      	cmp	r3, #0
    ffe4:	f300 8135 	bgt.w	10252 <_svfprintf_r+0x1a12>
    ffe8:	9b05      	ldr	r3, [sp, #20]
    ffea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ffee:	9302      	str	r3, [sp, #8]
    fff0:	2367      	movs	r3, #103	; 0x67
    fff2:	930b      	str	r3, [sp, #44]	; 0x2c
    fff4:	2300      	movs	r3, #0
    fff6:	930f      	str	r3, [sp, #60]	; 0x3c
    fff8:	930d      	str	r3, [sp, #52]	; 0x34
    fffa:	e727      	b.n	fe4c <_svfprintf_r+0x160c>
    fffc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fffe:	4283      	cmp	r3, r0
   10000:	f4bf aeb7 	bcs.w	fd72 <_svfprintf_r+0x1532>
   10004:	2130      	movs	r1, #48	; 0x30
   10006:	1c5a      	adds	r2, r3, #1
   10008:	9222      	str	r2, [sp, #136]	; 0x88
   1000a:	7019      	strb	r1, [r3, #0]
   1000c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1000e:	4298      	cmp	r0, r3
   10010:	d8f9      	bhi.n	10006 <_svfprintf_r+0x17c6>
   10012:	e6ae      	b.n	fd72 <_svfprintf_r+0x1532>
   10014:	07f3      	lsls	r3, r6, #31
   10016:	f100 80a7 	bmi.w	10168 <_svfprintf_r+0x1928>
   1001a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1001c:	e6a9      	b.n	fd72 <_svfprintf_r+0x1532>
   1001e:	aa24      	add	r2, sp, #144	; 0x90
   10020:	4658      	mov	r0, fp
   10022:	9105      	str	r1, [sp, #20]
   10024:	f004 f82e 	bl	14084 <__ssprint_r>
   10028:	2800      	cmp	r0, #0
   1002a:	f47f a86e 	bne.w	f10a <_svfprintf_r+0x8ca>
   1002e:	f896 c000 	ldrb.w	ip, [r6]
   10032:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10034:	9905      	ldr	r1, [sp, #20]
   10036:	a827      	add	r0, sp, #156	; 0x9c
   10038:	4465      	add	r5, ip
   1003a:	f7ff bbec 	b.w	f816 <_svfprintf_r+0xfd6>
   1003e:	ee1b 1a10 	vmov	r1, s22
   10042:	aa24      	add	r2, sp, #144	; 0x90
   10044:	4658      	mov	r0, fp
   10046:	f004 f81d 	bl	14084 <__ssprint_r>
   1004a:	2800      	cmp	r0, #0
   1004c:	f47f a85d 	bne.w	f10a <_svfprintf_r+0x8ca>
   10050:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10052:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10056:	f7ff b96b 	b.w	f330 <_svfprintf_r+0xaf0>
   1005a:	2378      	movs	r3, #120	; 0x78
   1005c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   10060:	2330      	movs	r3, #48	; 0x30
   10062:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   10066:	9b03      	ldr	r3, [sp, #12]
   10068:	2b63      	cmp	r3, #99	; 0x63
   1006a:	f048 0602 	orr.w	r6, r8, #2
   1006e:	f300 80a6 	bgt.w	101be <_svfprintf_r+0x197e>
   10072:	2300      	movs	r3, #0
   10074:	9307      	str	r3, [sp, #28]
   10076:	ac37      	add	r4, sp, #220	; 0xdc
   10078:	ee18 3a90 	vmov	r3, s17
   1007c:	2b00      	cmp	r3, #0
   1007e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   10082:	db2b      	blt.n	100dc <_svfprintf_r+0x189c>
   10084:	eeb0 ab48 	vmov.f64	d10, d8
   10088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1008a:	f023 0520 	bic.w	r5, r3, #32
   1008e:	2300      	movs	r3, #0
   10090:	9309      	str	r3, [sp, #36]	; 0x24
   10092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10094:	2b61      	cmp	r3, #97	; 0x61
   10096:	f47f aaad 	bne.w	f5f4 <_svfprintf_r+0xdb4>
   1009a:	eeb0 0b4a 	vmov.f64	d0, d10
   1009e:	a81b      	add	r0, sp, #108	; 0x6c
   100a0:	f002 ff3e 	bl	12f20 <frexp>
   100a4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   100a8:	ee20 0b07 	vmul.f64	d0, d0, d7
   100ac:	eeb5 0b40 	vcmp.f64	d0, #0.0
   100b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   100b4:	d101      	bne.n	100ba <_svfprintf_r+0x187a>
   100b6:	2301      	movs	r3, #1
   100b8:	931b      	str	r3, [sp, #108]	; 0x6c
   100ba:	4846      	ldr	r0, [pc, #280]	; (101d4 <_svfprintf_r+0x1994>)
   100bc:	e721      	b.n	ff02 <_svfprintf_r+0x16c2>
   100be:	ee1b 1a10 	vmov	r1, s22
   100c2:	aa24      	add	r2, sp, #144	; 0x90
   100c4:	4658      	mov	r0, fp
   100c6:	f003 ffdd 	bl	14084 <__ssprint_r>
   100ca:	2800      	cmp	r0, #0
   100cc:	f47f a81d 	bne.w	f10a <_svfprintf_r+0x8ca>
   100d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   100d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   100d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   100d8:	f7ff b94e 	b.w	f378 <_svfprintf_r+0xb38>
   100dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   100de:	f023 0520 	bic.w	r5, r3, #32
   100e2:	232d      	movs	r3, #45	; 0x2d
   100e4:	9309      	str	r3, [sp, #36]	; 0x24
   100e6:	eeb1 ab48 	vneg.f64	d10, d8
   100ea:	e7d2      	b.n	10092 <_svfprintf_r+0x1852>
   100ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   100ee:	920c      	str	r2, [sp, #48]	; 0x30
   100f0:	2a00      	cmp	r2, #0
   100f2:	f006 0301 	and.w	r3, r6, #1
   100f6:	f340 810d 	ble.w	10314 <_svfprintf_r+0x1ad4>
   100fa:	9903      	ldr	r1, [sp, #12]
   100fc:	430b      	orrs	r3, r1
   100fe:	f040 80cf 	bne.w	102a0 <_svfprintf_r+0x1a60>
   10102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10104:	9305      	str	r3, [sp, #20]
   10106:	2366      	movs	r3, #102	; 0x66
   10108:	930b      	str	r3, [sp, #44]	; 0x2c
   1010a:	0572      	lsls	r2, r6, #21
   1010c:	f100 80a3 	bmi.w	10256 <_svfprintf_r+0x1a16>
   10110:	9b05      	ldr	r3, [sp, #20]
   10112:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10116:	9302      	str	r3, [sp, #8]
   10118:	e76c      	b.n	fff4 <_svfprintf_r+0x17b4>
   1011a:	ee1b 1a10 	vmov	r1, s22
   1011e:	aa24      	add	r2, sp, #144	; 0x90
   10120:	4658      	mov	r0, fp
   10122:	f003 ffaf 	bl	14084 <__ssprint_r>
   10126:	2800      	cmp	r0, #0
   10128:	f47e afef 	bne.w	f10a <_svfprintf_r+0x8ca>
   1012c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   1012e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10130:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10132:	1b1c      	subs	r4, r3, r4
   10134:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10138:	f7ff b936 	b.w	f3a8 <_svfprintf_r+0xb68>
   1013c:	2358      	movs	r3, #88	; 0x58
   1013e:	e78d      	b.n	1005c <_svfprintf_r+0x181c>
   10140:	2200      	movs	r2, #0
   10142:	9203      	str	r2, [sp, #12]
   10144:	f7fe bbda 	b.w	e8fc <_svfprintf_r+0xbc>
   10148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1014a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1014c:	189a      	adds	r2, r3, r2
   1014e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10150:	9205      	str	r2, [sp, #20]
   10152:	2b00      	cmp	r3, #0
   10154:	f340 80ab 	ble.w	102ae <_svfprintf_r+0x1a6e>
   10158:	2367      	movs	r3, #103	; 0x67
   1015a:	930b      	str	r3, [sp, #44]	; 0x2c
   1015c:	e7d5      	b.n	1010a <_svfprintf_r+0x18ca>
   1015e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10160:	320f      	adds	r2, #15
   10162:	b2d2      	uxtb	r2, r2
   10164:	2101      	movs	r1, #1
   10166:	e618      	b.n	fd9a <_svfprintf_r+0x155a>
   10168:	18a0      	adds	r0, r4, r2
   1016a:	e5fb      	b.n	fd64 <_svfprintf_r+0x1524>
   1016c:	2900      	cmp	r1, #0
   1016e:	f040 80a8 	bne.w	102c2 <_svfprintf_r+0x1a82>
   10172:	2230      	movs	r2, #48	; 0x30
   10174:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   10178:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   1017c:	3330      	adds	r3, #48	; 0x30
   1017e:	f802 3b01 	strb.w	r3, [r2], #1
   10182:	ab1e      	add	r3, sp, #120	; 0x78
   10184:	1ad3      	subs	r3, r2, r3
   10186:	9314      	str	r3, [sp, #80]	; 0x50
   10188:	e649      	b.n	fe1e <_svfprintf_r+0x15de>
   1018a:	3301      	adds	r3, #1
   1018c:	4912      	ldr	r1, [pc, #72]	; (101d8 <_svfprintf_r+0x1998>)
   1018e:	f8ca 5004 	str.w	r5, [sl, #4]
   10192:	442a      	add	r2, r5
   10194:	2b07      	cmp	r3, #7
   10196:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1019a:	f8ca 1000 	str.w	r1, [sl]
   1019e:	f77f ac33 	ble.w	fa08 <_svfprintf_r+0x11c8>
   101a2:	ee1b 1a10 	vmov	r1, s22
   101a6:	aa24      	add	r2, sp, #144	; 0x90
   101a8:	4658      	mov	r0, fp
   101aa:	f003 ff6b 	bl	14084 <__ssprint_r>
   101ae:	2800      	cmp	r0, #0
   101b0:	f47e afab 	bne.w	f10a <_svfprintf_r+0x8ca>
   101b4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   101b8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   101bc:	e426      	b.n	fa0c <_svfprintf_r+0x11cc>
   101be:	1c59      	adds	r1, r3, #1
   101c0:	4658      	mov	r0, fp
   101c2:	f7fb fac1 	bl	b748 <_malloc_r>
   101c6:	4604      	mov	r4, r0
   101c8:	b350      	cbz	r0, 10220 <_svfprintf_r+0x19e0>
   101ca:	9007      	str	r0, [sp, #28]
   101cc:	e754      	b.n	10078 <_svfprintf_r+0x1838>
   101ce:	bf00      	nop
   101d0:	20000ee4 	.word	0x20000ee4
   101d4:	20000ed0 	.word	0x20000ed0
   101d8:	20007f54 	.word	0x20007f54
   101dc:	66666667 	.word	0x66666667
   101e0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   101e4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   101e8:	f890 c00f 	ldrb.w	ip, [r0, #15]
   101ec:	4561      	cmp	r1, ip
   101ee:	4613      	mov	r3, r2
   101f0:	d10a      	bne.n	10208 <_svfprintf_r+0x19c8>
   101f2:	f04f 0e30 	mov.w	lr, #48	; 0x30
   101f6:	f803 ec01 	strb.w	lr, [r3, #-1]
   101fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   101fc:	1e59      	subs	r1, r3, #1
   101fe:	9122      	str	r1, [sp, #136]	; 0x88
   10200:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   10204:	458c      	cmp	ip, r1
   10206:	d0f6      	beq.n	101f6 <_svfprintf_r+0x19b6>
   10208:	2939      	cmp	r1, #57	; 0x39
   1020a:	bf16      	itet	ne
   1020c:	3101      	addne	r1, #1
   1020e:	7a81      	ldrbeq	r1, [r0, #10]
   10210:	b2c9      	uxtbne	r1, r1
   10212:	f803 1c01 	strb.w	r1, [r3, #-1]
   10216:	e6ae      	b.n	ff76 <_svfprintf_r+0x1736>
   10218:	2300      	movs	r3, #0
   1021a:	4690      	mov	r8, r2
   1021c:	9307      	str	r3, [sp, #28]
   1021e:	e760      	b.n	100e2 <_svfprintf_r+0x18a2>
   10220:	ee1b 2a10 	vmov	r2, s22
   10224:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1022c:	8193      	strh	r3, [r2, #12]
   1022e:	f7fe bc16 	b.w	ea5e <_svfprintf_r+0x21e>
   10232:	07f5      	lsls	r5, r6, #31
   10234:	f57f adfe 	bpl.w	fe34 <_svfprintf_r+0x15f4>
   10238:	e5f8      	b.n	fe2c <_svfprintf_r+0x15ec>
   1023a:	9305      	str	r3, [sp, #20]
   1023c:	e6ce      	b.n	ffdc <_svfprintf_r+0x179c>
   1023e:	eeb5 ab40 	vcmp.f64	d10, #0.0
   10242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10246:	f43f ad8b 	beq.w	fd60 <_svfprintf_r+0x1520>
   1024a:	f1c2 0201 	rsb	r2, r2, #1
   1024e:	921b      	str	r2, [sp, #108]	; 0x6c
   10250:	e587      	b.n	fd62 <_svfprintf_r+0x1522>
   10252:	2367      	movs	r3, #103	; 0x67
   10254:	930b      	str	r3, [sp, #44]	; 0x2c
   10256:	9913      	ldr	r1, [sp, #76]	; 0x4c
   10258:	780b      	ldrb	r3, [r1, #0]
   1025a:	2bff      	cmp	r3, #255	; 0xff
   1025c:	d079      	beq.n	10352 <_svfprintf_r+0x1b12>
   1025e:	2500      	movs	r5, #0
   10260:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10262:	4628      	mov	r0, r5
   10264:	e003      	b.n	1026e <_svfprintf_r+0x1a2e>
   10266:	3001      	adds	r0, #1
   10268:	3101      	adds	r1, #1
   1026a:	2bff      	cmp	r3, #255	; 0xff
   1026c:	d008      	beq.n	10280 <_svfprintf_r+0x1a40>
   1026e:	4293      	cmp	r3, r2
   10270:	da06      	bge.n	10280 <_svfprintf_r+0x1a40>
   10272:	1ad2      	subs	r2, r2, r3
   10274:	784b      	ldrb	r3, [r1, #1]
   10276:	2b00      	cmp	r3, #0
   10278:	d1f5      	bne.n	10266 <_svfprintf_r+0x1a26>
   1027a:	780b      	ldrb	r3, [r1, #0]
   1027c:	3501      	adds	r5, #1
   1027e:	e7f4      	b.n	1026a <_svfprintf_r+0x1a2a>
   10280:	920c      	str	r2, [sp, #48]	; 0x30
   10282:	9113      	str	r1, [sp, #76]	; 0x4c
   10284:	900d      	str	r0, [sp, #52]	; 0x34
   10286:	950f      	str	r5, [sp, #60]	; 0x3c
   10288:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1028a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1028c:	9916      	ldr	r1, [sp, #88]	; 0x58
   1028e:	4413      	add	r3, r2
   10290:	9a05      	ldr	r2, [sp, #20]
   10292:	fb01 2303 	mla	r3, r1, r3, r2
   10296:	9305      	str	r3, [sp, #20]
   10298:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1029c:	9302      	str	r3, [sp, #8]
   1029e:	e5d5      	b.n	fe4c <_svfprintf_r+0x160c>
   102a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   102a2:	18d3      	adds	r3, r2, r3
   102a4:	4419      	add	r1, r3
   102a6:	2366      	movs	r3, #102	; 0x66
   102a8:	9105      	str	r1, [sp, #20]
   102aa:	930b      	str	r3, [sp, #44]	; 0x2c
   102ac:	e72d      	b.n	1010a <_svfprintf_r+0x18ca>
   102ae:	f1c3 0301 	rsb	r3, r3, #1
   102b2:	441a      	add	r2, r3
   102b4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   102b8:	9302      	str	r3, [sp, #8]
   102ba:	2367      	movs	r3, #103	; 0x67
   102bc:	9205      	str	r2, [sp, #20]
   102be:	930b      	str	r3, [sp, #44]	; 0x2c
   102c0:	e698      	b.n	fff4 <_svfprintf_r+0x17b4>
   102c2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   102c6:	e759      	b.n	1017c <_svfprintf_r+0x193c>
   102c8:	9b03      	ldr	r3, [sp, #12]
   102ca:	f8dd 9008 	ldr.w	r9, [sp, #8]
   102ce:	f8dd 801c 	ldr.w	r8, [sp, #28]
   102d2:	9305      	str	r3, [sp, #20]
   102d4:	e4b4      	b.n	fc40 <_svfprintf_r+0x1400>
   102d6:	ee18 3a90 	vmov	r3, s17
   102da:	2b00      	cmp	r3, #0
   102dc:	bfb4      	ite	lt
   102de:	212d      	movlt	r1, #45	; 0x2d
   102e0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   102e4:	4c25      	ldr	r4, [pc, #148]	; (1037c <_svfprintf_r+0x1b3c>)
   102e6:	4b26      	ldr	r3, [pc, #152]	; (10380 <_svfprintf_r+0x1b40>)
   102e8:	bfb8      	it	lt
   102ea:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   102ee:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   102f2:	f7fe bc79 	b.w	ebe8 <_svfprintf_r+0x3a8>
   102f6:	9b03      	ldr	r3, [sp, #12]
   102f8:	9302      	str	r3, [sp, #8]
   102fa:	9305      	str	r3, [sp, #20]
   102fc:	2373      	movs	r3, #115	; 0x73
   102fe:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   10302:	9003      	str	r0, [sp, #12]
   10304:	900f      	str	r0, [sp, #60]	; 0x3c
   10306:	900d      	str	r0, [sp, #52]	; 0x34
   10308:	930b      	str	r3, [sp, #44]	; 0x2c
   1030a:	f7fe bc7a 	b.w	ec02 <_svfprintf_r+0x3c2>
   1030e:	2302      	movs	r3, #2
   10310:	9314      	str	r3, [sp, #80]	; 0x50
   10312:	e584      	b.n	fe1e <_svfprintf_r+0x15de>
   10314:	9a03      	ldr	r2, [sp, #12]
   10316:	4313      	orrs	r3, r2
   10318:	d105      	bne.n	10326 <_svfprintf_r+0x1ae6>
   1031a:	2301      	movs	r3, #1
   1031c:	2266      	movs	r2, #102	; 0x66
   1031e:	9302      	str	r3, [sp, #8]
   10320:	920b      	str	r2, [sp, #44]	; 0x2c
   10322:	9305      	str	r3, [sp, #20]
   10324:	e666      	b.n	fff4 <_svfprintf_r+0x17b4>
   10326:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10328:	3301      	adds	r3, #1
   1032a:	441a      	add	r2, r3
   1032c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10330:	9302      	str	r3, [sp, #8]
   10332:	2366      	movs	r3, #102	; 0x66
   10334:	9205      	str	r2, [sp, #20]
   10336:	930b      	str	r3, [sp, #44]	; 0x2c
   10338:	e65c      	b.n	fff4 <_svfprintf_r+0x17b4>
   1033a:	9a08      	ldr	r2, [sp, #32]
   1033c:	f899 3001 	ldrb.w	r3, [r9, #1]
   10340:	4689      	mov	r9, r1
   10342:	f852 1b04 	ldr.w	r1, [r2], #4
   10346:	9208      	str	r2, [sp, #32]
   10348:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   1034c:	9103      	str	r1, [sp, #12]
   1034e:	f7fe bad3 	b.w	e8f8 <_svfprintf_r+0xb8>
   10352:	2300      	movs	r3, #0
   10354:	930f      	str	r3, [sp, #60]	; 0x3c
   10356:	930d      	str	r3, [sp, #52]	; 0x34
   10358:	e796      	b.n	10288 <_svfprintf_r+0x1a48>
   1035a:	230c      	movs	r3, #12
   1035c:	f8cb 3000 	str.w	r3, [fp]
   10360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10364:	9304      	str	r3, [sp, #16]
   10366:	f7fe bb81 	b.w	ea6c <_svfprintf_r+0x22c>
   1036a:	ee1b 2a10 	vmov	r2, s22
   1036e:	8993      	ldrh	r3, [r2, #12]
   10370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10374:	8193      	strh	r3, [r2, #12]
   10376:	f7fe bec8 	b.w	f10a <_svfprintf_r+0x8ca>
   1037a:	bf00      	nop
   1037c:	20000ec8 	.word	0x20000ec8
   10380:	20000ecc 	.word	0x20000ecc

00010384 <__ssvfscanf_r>:
   10384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10388:	ed2d 8b02 	vpush	{d8}
   1038c:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
   10390:	468b      	mov	fp, r1
   10392:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   10396:	af02      	add	r7, sp, #8
   10398:	048c      	lsls	r4, r1, #18
   1039a:	4681      	mov	r9, r0
   1039c:	64fa      	str	r2, [r7, #76]	; 0x4c
   1039e:	633b      	str	r3, [r7, #48]	; 0x30
   103a0:	d409      	bmi.n	103b6 <__ssvfscanf_r+0x32>
   103a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   103a6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   103aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   103ae:	f8ab 100c 	strh.w	r1, [fp, #12]
   103b2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   103b6:	2300      	movs	r3, #0
   103b8:	461c      	mov	r4, r3
   103ba:	2208      	movs	r2, #8
   103bc:	4619      	mov	r1, r3
   103be:	f107 0058 	add.w	r0, r7, #88	; 0x58
   103c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   103c4:	46a2      	mov	sl, r4
   103c6:	f7fd f88d 	bl	d4e4 <memset>
   103ca:	643c      	str	r4, [r7, #64]	; 0x40
   103cc:	627c      	str	r4, [r7, #36]	; 0x24
   103ce:	63bc      	str	r4, [r7, #56]	; 0x38
   103d0:	647c      	str	r4, [r7, #68]	; 0x44
   103d2:	4b83      	ldr	r3, [pc, #524]	; (105e0 <__ssvfscanf_r+0x25c>)
   103d4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   103d8:	f7fd f980 	bl	d6dc <__locale_mb_cur_max>
   103dc:	f107 0258 	add.w	r2, r7, #88	; 0x58
   103e0:	4603      	mov	r3, r0
   103e2:	9200      	str	r2, [sp, #0]
   103e4:	f107 0154 	add.w	r1, r7, #84	; 0x54
   103e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   103ea:	4648      	mov	r0, r9
   103ec:	47a0      	blx	r4
   103ee:	1e05      	subs	r5, r0, #0
   103f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   103f2:	db33      	blt.n	1045c <__ssvfscanf_r+0xd8>
   103f4:	442b      	add	r3, r5
   103f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   103f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   103fa:	462e      	mov	r6, r5
   103fc:	2b00      	cmp	r3, #0
   103fe:	f000 80b6 	beq.w	1056e <__ssvfscanf_r+0x1ea>
   10402:	2d01      	cmp	r5, #1
   10404:	d038      	beq.n	10478 <__ssvfscanf_r+0xf4>
   10406:	2b25      	cmp	r3, #37	; 0x25
   10408:	d040      	beq.n	1048c <__ssvfscanf_r+0x108>
   1040a:	2d00      	cmp	r5, #0
   1040c:	d0e1      	beq.n	103d2 <__ssvfscanf_r+0x4e>
   1040e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10410:	1b9e      	subs	r6, r3, r6
   10412:	f8db 3004 	ldr.w	r3, [fp, #4]
   10416:	1e74      	subs	r4, r6, #1
   10418:	2b00      	cmp	r3, #0
   1041a:	f340 8098 	ble.w	1054e <__ssvfscanf_r+0x1ca>
   1041e:	f8db 1000 	ldr.w	r1, [fp]
   10422:	f894 c001 	ldrb.w	ip, [r4, #1]
   10426:	f891 e000 	ldrb.w	lr, [r1]
   1042a:	1ca3      	adds	r3, r4, #2
   1042c:	eb0a 0003 	add.w	r0, sl, r3
   10430:	45e6      	cmp	lr, ip
   10432:	f101 0101 	add.w	r1, r1, #1
   10436:	eba3 0206 	sub.w	r2, r3, r6
   1043a:	f104 0401 	add.w	r4, r4, #1
   1043e:	eba0 0006 	sub.w	r0, r0, r6
   10442:	f040 8094 	bne.w	1056e <__ssvfscanf_r+0x1ea>
   10446:	f8db 3004 	ldr.w	r3, [fp, #4]
   1044a:	f8cb 1000 	str.w	r1, [fp]
   1044e:	3b01      	subs	r3, #1
   10450:	42aa      	cmp	r2, r5
   10452:	f8cb 3004 	str.w	r3, [fp, #4]
   10456:	dbdf      	blt.n	10418 <__ssvfscanf_r+0x94>
   10458:	4682      	mov	sl, r0
   1045a:	e7ba      	b.n	103d2 <__ssvfscanf_r+0x4e>
   1045c:	3301      	adds	r3, #1
   1045e:	64fb      	str	r3, [r7, #76]	; 0x4c
   10460:	2208      	movs	r2, #8
   10462:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   10466:	2100      	movs	r1, #0
   10468:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1046c:	657b      	str	r3, [r7, #84]	; 0x54
   1046e:	f7fd f839 	bl	d4e4 <memset>
   10472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   10474:	2b00      	cmp	r3, #0
   10476:	d07a      	beq.n	1056e <__ssvfscanf_r+0x1ea>
   10478:	4e5a      	ldr	r6, [pc, #360]	; (105e4 <__ssvfscanf_r+0x260>)
   1047a:	5cf2      	ldrb	r2, [r6, r3]
   1047c:	0710      	lsls	r0, r2, #28
   1047e:	f100 851c 	bmi.w	10eba <__ssvfscanf_r+0xb36>
   10482:	2b25      	cmp	r3, #37	; 0x25
   10484:	f040 8086 	bne.w	10594 <__ssvfscanf_r+0x210>
   10488:	2501      	movs	r5, #1
   1048a:	462e      	mov	r6, r5
   1048c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1048e:	2400      	movs	r4, #0
   10490:	7802      	ldrb	r2, [r0, #0]
   10492:	46a0      	mov	r8, r4
   10494:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   10498:	1c41      	adds	r1, r0, #1
   1049a:	2b55      	cmp	r3, #85	; 0x55
   1049c:	d867      	bhi.n	1056e <__ssvfscanf_r+0x1ea>
   1049e:	e8df f013 	tbh	[pc, r3, lsl #1]
   104a2:	070a      	.short	0x070a
   104a4:	00660066 	.word	0x00660066
   104a8:	00660066 	.word	0x00660066
   104ac:	00660701 	.word	0x00660701
   104b0:	00660066 	.word	0x00660066
   104b4:	00660066 	.word	0x00660066
   104b8:	060c060c 	.word	0x060c060c
   104bc:	060c060c 	.word	0x060c060c
   104c0:	060c060c 	.word	0x060c060c
   104c4:	060c060c 	.word	0x060c060c
   104c8:	060c060c 	.word	0x060c060c
   104cc:	00660066 	.word	0x00660066
   104d0:	00660066 	.word	0x00660066
   104d4:	00660066 	.word	0x00660066
   104d8:	06180066 	.word	0x06180066
   104dc:	048e0066 	.word	0x048e0066
   104e0:	061804c9 	.word	0x061804c9
   104e4:	06180618 	.word	0x06180618
   104e8:	00660066 	.word	0x00660066
   104ec:	00660066 	.word	0x00660066
   104f0:	00660082 	.word	0x00660082
   104f4:	04bf0066 	.word	0x04bf0066
   104f8:	00660066 	.word	0x00660066
   104fc:	00890066 	.word	0x00890066
   10500:	00660066 	.word	0x00660066
   10504:	00660066 	.word	0x00660066
   10508:	0066066b 	.word	0x0066066b
   1050c:	06dd0066 	.word	0x06dd0066
   10510:	00660066 	.word	0x00660066
   10514:	00660066 	.word	0x00660066
   10518:	06180066 	.word	0x06180066
   1051c:	04900066 	.word	0x04900066
   10520:	061804cb 	.word	0x061804cb
   10524:	06180618 	.word	0x06180618
   10528:	06d206be 	.word	0x06d206be
   1052c:	00660082 	.word	0x00660082
   10530:	06f306e7 	.word	0x06f306e7
   10534:	04c106ac 	.word	0x04c106ac
   10538:	006606da 	.word	0x006606da
   1053c:	008b0066 	.word	0x008b0066
   10540:	06ca007d 	.word	0x06ca007d
   10544:	00660066 	.word	0x00660066
   10548:	0066066b 	.word	0x0066066b
   1054c:	007d      	.short	0x007d
   1054e:	4659      	mov	r1, fp
   10550:	4648      	mov	r0, r9
   10552:	f003 fe57 	bl	14204 <__ssrefill_r>
   10556:	2800      	cmp	r0, #0
   10558:	f43f af61 	beq.w	1041e <__ssvfscanf_r+0x9a>
   1055c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1055e:	2b00      	cmp	r3, #0
   10560:	f001 8052 	beq.w	11608 <__ssvfscanf_r+0x1284>
   10564:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10568:	065a      	lsls	r2, r3, #25
   1056a:	f101 804d 	bmi.w	11608 <__ssvfscanf_r+0x1284>
   1056e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10570:	b143      	cbz	r3, 10584 <__ssvfscanf_r+0x200>
   10572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10574:	f8d3 8000 	ldr.w	r8, [r3]
   10578:	f1b8 0f00 	cmp.w	r8, #0
   1057c:	d002      	beq.n	10584 <__ssvfscanf_r+0x200>
   1057e:	4640      	mov	r0, r8
   10580:	f7fb f8da 	bl	b738 <free>
   10584:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10586:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
   1058a:	46bd      	mov	sp, r7
   1058c:	ecbd 8b02 	vpop	{d8}
   10590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10596:	2501      	movs	r5, #1
   10598:	1e5e      	subs	r6, r3, #1
   1059a:	e73a      	b.n	10412 <__ssvfscanf_r+0x8e>
   1059c:	0723      	lsls	r3, r4, #28
   1059e:	d1e6      	bne.n	1056e <__ssvfscanf_r+0x1ea>
   105a0:	7842      	ldrb	r2, [r0, #1]
   105a2:	4608      	mov	r0, r1
   105a4:	e776      	b.n	10494 <__ssvfscanf_r+0x110>
   105a6:	0722      	lsls	r2, r4, #28
   105a8:	d1e1      	bne.n	1056e <__ssvfscanf_r+0x1ea>
   105aa:	7842      	ldrb	r2, [r0, #1]
   105ac:	f044 0402 	orr.w	r4, r4, #2
   105b0:	4608      	mov	r0, r1
   105b2:	e76f      	b.n	10494 <__ssvfscanf_r+0x110>
   105b4:	f044 0401 	orr.w	r4, r4, #1
   105b8:	64f9      	str	r1, [r7, #76]	; 0x4c
   105ba:	2502      	movs	r5, #2
   105bc:	f8db 3004 	ldr.w	r3, [fp, #4]
   105c0:	2b00      	cmp	r3, #0
   105c2:	f340 8408 	ble.w	10dd6 <__ssvfscanf_r+0xa52>
   105c6:	0660      	lsls	r0, r4, #25
   105c8:	f140 840f 	bpl.w	10dea <__ssvfscanf_r+0xa66>
   105cc:	1e6b      	subs	r3, r5, #1
   105ce:	2b03      	cmp	r3, #3
   105d0:	f201 80eb 	bhi.w	117aa <__ssvfscanf_r+0x1426>
   105d4:	e8df f013 	tbh	[pc, r3, lsl #1]
   105d8:	01f1027b 	.word	0x01f1027b
   105dc:	0008014b 	.word	0x0008014b
   105e0:	2000810c 	.word	0x2000810c
   105e4:	20000d25 	.word	0x20000d25
   105e8:	4648      	mov	r0, r9
   105ea:	f002 fa99 	bl	12b20 <_localeconv_r>
   105ee:	6803      	ldr	r3, [r0, #0]
   105f0:	623b      	str	r3, [r7, #32]
   105f2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   105f6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   105fa:	f240 855a 	bls.w	110b2 <__ssvfscanf_r+0xd2e>
   105fe:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
   10602:	eb08 0305 	add.w	r3, r8, r5
   10606:	613b      	str	r3, [r7, #16]
   10608:	f240 185d 	movw	r8, #349	; 0x15d
   1060c:	2600      	movs	r6, #0
   1060e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   10612:	ee08 9a10 	vmov	s16, r9
   10616:	e9c7 6605 	strd	r6, r6, [r7, #20]
   1061a:	63fe      	str	r6, [r7, #60]	; 0x3c
   1061c:	637e      	str	r6, [r7, #52]	; 0x34
   1061e:	61fe      	str	r6, [r7, #28]
   10620:	64be      	str	r6, [r7, #72]	; 0x48
   10622:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
   10626:	62bb      	str	r3, [r7, #40]	; 0x28
   10628:	461d      	mov	r5, r3
   1062a:	4646      	mov	r6, r8
   1062c:	f8db 1000 	ldr.w	r1, [fp]
   10630:	780a      	ldrb	r2, [r1, #0]
   10632:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   10636:	2b4e      	cmp	r3, #78	; 0x4e
   10638:	d850      	bhi.n	106dc <__ssvfscanf_r+0x358>
   1063a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1063e:	037e      	.short	0x037e
   10640:	037e004f 	.word	0x037e004f
   10644:	004f004f 	.word	0x004f004f
   10648:	00a600a3 	.word	0x00a600a3
   1064c:	00a600a6 	.word	0x00a600a6
   10650:	00a600a6 	.word	0x00a600a6
   10654:	00a600a6 	.word	0x00a600a6
   10658:	00a600a6 	.word	0x00a600a6
   1065c:	004f004f 	.word	0x004f004f
   10660:	004f004f 	.word	0x004f004f
   10664:	004f004f 	.word	0x004f004f
   10668:	0374004f 	.word	0x0374004f
   1066c:	030b030b 	.word	0x030b030b
   10670:	039e030b 	.word	0x039e030b
   10674:	004f0394 	.word	0x004f0394
   10678:	0384004f 	.word	0x0384004f
   1067c:	004f004f 	.word	0x004f004f
   10680:	004f004f 	.word	0x004f004f
   10684:	004f035d 	.word	0x004f035d
   10688:	004f033a 	.word	0x004f033a
   1068c:	004f004f 	.word	0x004f004f
   10690:	004f0333 	.word	0x004f0333
   10694:	004f004f 	.word	0x004f004f
   10698:	036d031e 	.word	0x036d031e
   1069c:	004f004f 	.word	0x004f004f
   106a0:	004f004f 	.word	0x004f004f
   106a4:	004f004f 	.word	0x004f004f
   106a8:	0374004f 	.word	0x0374004f
   106ac:	030b030b 	.word	0x030b030b
   106b0:	039e030b 	.word	0x039e030b
   106b4:	004f0394 	.word	0x004f0394
   106b8:	0384004f 	.word	0x0384004f
   106bc:	004f004f 	.word	0x004f004f
   106c0:	004f004f 	.word	0x004f004f
   106c4:	004f035d 	.word	0x004f035d
   106c8:	004f033a 	.word	0x004f033a
   106cc:	004f004f 	.word	0x004f004f
   106d0:	004f0333 	.word	0x004f0333
   106d4:	004f004f 	.word	0x004f004f
   106d8:	036d031e 	.word	0x036d031e
   106dc:	05a0      	lsls	r0, r4, #22
   106de:	d56f      	bpl.n	107c0 <__ssvfscanf_r+0x43c>
   106e0:	6a38      	ldr	r0, [r7, #32]
   106e2:	7803      	ldrb	r3, [r0, #0]
   106e4:	4293      	cmp	r3, r2
   106e6:	d16b      	bne.n	107c0 <__ssvfscanf_r+0x43c>
   106e8:	e9c7 4502 	strd	r4, r5, [r7, #8]
   106ec:	607e      	str	r6, [r7, #4]
   106ee:	4681      	mov	r9, r0
   106f0:	ee18 6a10 	vmov	r6, s16
   106f4:	f04f 0800 	mov.w	r8, #0
   106f8:	465c      	mov	r4, fp
   106fa:	e007      	b.n	1070c <__ssvfscanf_r+0x388>
   106fc:	6021      	str	r1, [r4, #0]
   106fe:	f891 e000 	ldrb.w	lr, [r1]
   10702:	f899 0000 	ldrb.w	r0, [r9]
   10706:	4586      	cmp	lr, r0
   10708:	d11c      	bne.n	10744 <__ssvfscanf_r+0x3c0>
   1070a:	46da      	mov	sl, fp
   1070c:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   10710:	4645      	mov	r5, r8
   10712:	f10a 0b01 	add.w	fp, sl, #1
   10716:	3101      	adds	r1, #1
   10718:	f108 0801 	add.w	r8, r8, #1
   1071c:	2800      	cmp	r0, #0
   1071e:	f000 8664 	beq.w	113ea <__ssvfscanf_r+0x1066>
   10722:	6860      	ldr	r0, [r4, #4]
   10724:	3801      	subs	r0, #1
   10726:	2800      	cmp	r0, #0
   10728:	6060      	str	r0, [r4, #4]
   1072a:	dce7      	bgt.n	106fc <__ssvfscanf_r+0x378>
   1072c:	4621      	mov	r1, r4
   1072e:	4630      	mov	r0, r6
   10730:	f003 fd68 	bl	14204 <__ssrefill_r>
   10734:	b930      	cbnz	r0, 10744 <__ssvfscanf_r+0x3c0>
   10736:	6821      	ldr	r1, [r4, #0]
   10738:	f899 0000 	ldrb.w	r0, [r9]
   1073c:	f891 e000 	ldrb.w	lr, [r1]
   10740:	4586      	cmp	lr, r0
   10742:	d0e2      	beq.n	1070a <__ssvfscanf_r+0x386>
   10744:	46a3      	mov	fp, r4
   10746:	6a3a      	ldr	r2, [r7, #32]
   10748:	68bc      	ldr	r4, [r7, #8]
   1074a:	613d      	str	r5, [r7, #16]
   1074c:	462b      	mov	r3, r5
   1074e:	46b1      	mov	r9, r6
   10750:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   10752:	68fd      	ldr	r5, [r7, #12]
   10754:	64bd      	str	r5, [r7, #72]	; 0x48
   10756:	3301      	adds	r3, #1
   10758:	465d      	mov	r5, fp
   1075a:	eb02 0803 	add.w	r8, r2, r3
   1075e:	46b3      	mov	fp, r6
   10760:	4626      	mov	r6, r4
   10762:	4614      	mov	r4, r2
   10764:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
   10768:	462a      	mov	r2, r5
   1076a:	4648      	mov	r0, r9
   1076c:	f003 fd0a 	bl	14184 <_sungetc_r>
   10770:	4544      	cmp	r4, r8
   10772:	d1f7      	bne.n	10764 <__ssvfscanf_r+0x3e0>
   10774:	693b      	ldr	r3, [r7, #16]
   10776:	4634      	mov	r4, r6
   10778:	ebaa 0a03 	sub.w	sl, sl, r3
   1077c:	465e      	mov	r6, fp
   1077e:	46ab      	mov	fp, r5
   10780:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   10782:	e020      	b.n	107c6 <__ssvfscanf_r+0x442>
   10784:	05e0      	lsls	r0, r4, #23
   10786:	f100 8501 	bmi.w	1118c <__ssvfscanf_r+0xe08>
   1078a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1078c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1078e:	42d9      	cmn	r1, r3
   10790:	d116      	bne.n	107c0 <__ssvfscanf_r+0x43c>
   10792:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   10796:	f805 2b01 	strb.w	r2, [r5], #1
   1079a:	3e01      	subs	r6, #1
   1079c:	f8db 3004 	ldr.w	r3, [fp, #4]
   107a0:	3b01      	subs	r3, #1
   107a2:	2b00      	cmp	r3, #0
   107a4:	f10a 0a01 	add.w	sl, sl, #1
   107a8:	f8cb 3004 	str.w	r3, [fp, #4]
   107ac:	f340 836f 	ble.w	10e8e <__ssvfscanf_r+0xb0a>
   107b0:	f8db 3000 	ldr.w	r3, [fp]
   107b4:	3301      	adds	r3, #1
   107b6:	f8cb 3000 	str.w	r3, [fp]
   107ba:	2e00      	cmp	r6, #0
   107bc:	f47f af36 	bne.w	1062c <__ssvfscanf_r+0x2a8>
   107c0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   107c2:	ee18 9a10 	vmov	r9, s16
   107c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   107c8:	2b00      	cmp	r3, #0
   107ca:	f040 82dc 	bne.w	10d86 <__ssvfscanf_r+0xa02>
   107ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   107d0:	3b01      	subs	r3, #1
   107d2:	2b01      	cmp	r3, #1
   107d4:	f241 8016 	bls.w	11804 <__ssvfscanf_r+0x1480>
   107d8:	1e73      	subs	r3, r6, #1
   107da:	2b06      	cmp	r3, #6
   107dc:	f240 8627 	bls.w	1142e <__ssvfscanf_r+0x10aa>
   107e0:	05e3      	lsls	r3, r4, #23
   107e2:	d51b      	bpl.n	1081c <__ssvfscanf_r+0x498>
   107e4:	0566      	lsls	r6, r4, #21
   107e6:	f101 80b5 	bmi.w	11954 <__ssvfscanf_r+0x15d0>
   107ea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   107ee:	2965      	cmp	r1, #101	; 0x65
   107f0:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
   107f4:	f10a 36ff 	add.w	r6, sl, #4294967295	; 0xffffffff
   107f8:	d00a      	beq.n	10810 <__ssvfscanf_r+0x48c>
   107fa:	2945      	cmp	r1, #69	; 0x45
   107fc:	d008      	beq.n	10810 <__ssvfscanf_r+0x48c>
   107fe:	465a      	mov	r2, fp
   10800:	4648      	mov	r0, r9
   10802:	f003 fcbf 	bl	14184 <_sungetc_r>
   10806:	f815 1c02 	ldrb.w	r1, [r5, #-2]
   1080a:	f1aa 0602 	sub.w	r6, sl, #2
   1080e:	1eab      	subs	r3, r5, #2
   10810:	465a      	mov	r2, fp
   10812:	4648      	mov	r0, r9
   10814:	46b2      	mov	sl, r6
   10816:	461d      	mov	r5, r3
   10818:	f003 fcb4 	bl	14184 <_sungetc_r>
   1081c:	f014 0210 	ands.w	r2, r4, #16
   10820:	f47f add7 	bne.w	103d2 <__ssvfscanf_r+0x4e>
   10824:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   10828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1082c:	702a      	strb	r2, [r5, #0]
   1082e:	f000 84d2 	beq.w	111d6 <__ssvfscanf_r+0xe52>
   10832:	69bb      	ldr	r3, [r7, #24]
   10834:	2b00      	cmp	r3, #0
   10836:	f040 872c 	bne.w	11692 <__ssvfscanf_r+0x130e>
   1083a:	4648      	mov	r0, r9
   1083c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1083e:	2200      	movs	r2, #0
   10840:	f7fc fb6e 	bl	cf20 <_strtod_r>
   10844:	07e0      	lsls	r0, r4, #31
   10846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10848:	f100 85c9 	bmi.w	113de <__ssvfscanf_r+0x105a>
   1084c:	07a1      	lsls	r1, r4, #30
   1084e:	f100 85c6 	bmi.w	113de <__ssvfscanf_r+0x105a>
   10852:	eeb4 0b40 	vcmp.f64	d0, d0
   10856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1085a:	f853 4b04 	ldr.w	r4, [r3], #4
   1085e:	f180 86f4 	bvs.w	1164a <__ssvfscanf_r+0x12c6>
   10862:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   10866:	633b      	str	r3, [r7, #48]	; 0x30
   10868:	ed84 0a00 	vstr	s0, [r4]
   1086c:	e3a2      	b.n	10fb4 <__ssvfscanf_r+0xc30>
   1086e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   10872:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   10876:	f240 83a2 	bls.w	10fbe <__ssvfscanf_r+0xc3a>
   1087a:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
   1087e:	eb08 0302 	add.w	r3, r8, r2
   10882:	63fb      	str	r3, [r7, #60]	; 0x3c
   10884:	f240 185d 	movw	r8, #349	; 0x15d
   10888:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   1088c:	2200      	movs	r2, #0
   1088e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   10890:	62bb      	str	r3, [r7, #40]	; 0x28
   10892:	4659      	mov	r1, fp
   10894:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
   10898:	46d3      	mov	fp, sl
   1089a:	461d      	mov	r5, r3
   1089c:	4692      	mov	sl, r2
   1089e:	680a      	ldr	r2, [r1, #0]
   108a0:	7810      	ldrb	r0, [r2, #0]
   108a2:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   108a6:	2b4d      	cmp	r3, #77	; 0x4d
   108a8:	d860      	bhi.n	1096c <__ssvfscanf_r+0x5e8>
   108aa:	e8df f013 	tbh	[pc, r3, lsl #1]
   108ae:	0282      	.short	0x0282
   108b0:	0282005f 	.word	0x0282005f
   108b4:	005f005f 	.word	0x005f005f
   108b8:	01e002cd 	.word	0x01e002cd
   108bc:	01e001e0 	.word	0x01e001e0
   108c0:	01e001e0 	.word	0x01e001e0
   108c4:	01e001e0 	.word	0x01e001e0
   108c8:	026f026f 	.word	0x026f026f
   108cc:	005f005f 	.word	0x005f005f
   108d0:	005f005f 	.word	0x005f005f
   108d4:	005f005f 	.word	0x005f005f
   108d8:	004e005f 	.word	0x004e005f
   108dc:	004e004e 	.word	0x004e004e
   108e0:	004e004e 	.word	0x004e004e
   108e4:	005f004e 	.word	0x005f004e
   108e8:	005f005f 	.word	0x005f005f
   108ec:	005f005f 	.word	0x005f005f
   108f0:	005f005f 	.word	0x005f005f
   108f4:	005f005f 	.word	0x005f005f
   108f8:	005f005f 	.word	0x005f005f
   108fc:	005f005f 	.word	0x005f005f
   10900:	005f005f 	.word	0x005f005f
   10904:	005f005f 	.word	0x005f005f
   10908:	005f0276 	.word	0x005f0276
   1090c:	005f005f 	.word	0x005f005f
   10910:	005f005f 	.word	0x005f005f
   10914:	005f005f 	.word	0x005f005f
   10918:	004e005f 	.word	0x004e005f
   1091c:	004e004e 	.word	0x004e004e
   10920:	004e004e 	.word	0x004e004e
   10924:	005f004e 	.word	0x005f004e
   10928:	005f005f 	.word	0x005f005f
   1092c:	005f005f 	.word	0x005f005f
   10930:	005f005f 	.word	0x005f005f
   10934:	005f005f 	.word	0x005f005f
   10938:	005f005f 	.word	0x005f005f
   1093c:	005f005f 	.word	0x005f005f
   10940:	005f005f 	.word	0x005f005f
   10944:	005f005f 	.word	0x005f005f
   10948:	0276      	.short	0x0276
   1094a:	2e0a      	cmp	r6, #10
   1094c:	dd0e      	ble.n	1096c <__ssvfscanf_r+0x5e8>
   1094e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   10952:	684b      	ldr	r3, [r1, #4]
   10954:	f805 0b01 	strb.w	r0, [r5], #1
   10958:	3b01      	subs	r3, #1
   1095a:	2b00      	cmp	r3, #0
   1095c:	604b      	str	r3, [r1, #4]
   1095e:	f340 828d 	ble.w	10e7c <__ssvfscanf_r+0xaf8>
   10962:	3201      	adds	r2, #1
   10964:	600a      	str	r2, [r1, #0]
   10966:	f1b8 0801 	subs.w	r8, r8, #1
   1096a:	d198      	bne.n	1089e <__ssvfscanf_r+0x51a>
   1096c:	05e0      	lsls	r0, r4, #23
   1096e:	46d0      	mov	r8, sl
   10970:	63be      	str	r6, [r7, #56]	; 0x38
   10972:	46da      	mov	sl, fp
   10974:	468b      	mov	fp, r1
   10976:	d507      	bpl.n	10988 <__ssvfscanf_r+0x604>
   10978:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1097a:	429d      	cmp	r5, r3
   1097c:	f200 8422 	bhi.w	111c4 <__ssvfscanf_r+0xe40>
   10980:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10982:	429d      	cmp	r5, r3
   10984:	f43f adf3 	beq.w	1056e <__ssvfscanf_r+0x1ea>
   10988:	f014 0210 	ands.w	r2, r4, #16
   1098c:	d110      	bne.n	109b0 <__ssvfscanf_r+0x62c>
   1098e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   10990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10992:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   10994:	702a      	strb	r2, [r5, #0]
   10996:	4648      	mov	r0, r9
   10998:	47b0      	blx	r6
   1099a:	06a1      	lsls	r1, r4, #26
   1099c:	f140 8408 	bpl.w	111b0 <__ssvfscanf_r+0xe2c>
   109a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   109a2:	f853 2b04 	ldr.w	r2, [r3], #4
   109a6:	6010      	str	r0, [r2, #0]
   109a8:	633b      	str	r3, [r7, #48]	; 0x30
   109aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   109ac:	3301      	adds	r3, #1
   109ae:	647b      	str	r3, [r7, #68]	; 0x44
   109b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   109b2:	1aed      	subs	r5, r5, r3
   109b4:	4445      	add	r5, r8
   109b6:	44aa      	add	sl, r5
   109b8:	e50b      	b.n	103d2 <__ssvfscanf_r+0x4e>
   109ba:	f1b8 0f00 	cmp.w	r8, #0
   109be:	bf08      	it	eq
   109c0:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
   109c4:	07e0      	lsls	r0, r4, #31
   109c6:	f140 8295 	bpl.w	10ef4 <__ssvfscanf_r+0xb70>
   109ca:	f014 0310 	ands.w	r3, r4, #16
   109ce:	637b      	str	r3, [r7, #52]	; 0x34
   109d0:	f040 8474 	bne.w	112bc <__ssvfscanf_r+0xf38>
   109d4:	0621      	lsls	r1, r4, #24
   109d6:	f140 8666 	bpl.w	116a6 <__ssvfscanf_r+0x1322>
   109da:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   109dc:	f854 3b04 	ldr.w	r3, [r4], #4
   109e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   109e2:	2b00      	cmp	r3, #0
   109e4:	f43f adc3 	beq.w	1056e <__ssvfscanf_r+0x1ea>
   109e8:	2080      	movs	r0, #128	; 0x80
   109ea:	f7fa fe9d 	bl	b728 <malloc>
   109ee:	64b8      	str	r0, [r7, #72]	; 0x48
   109f0:	2800      	cmp	r0, #0
   109f2:	f000 8778 	beq.w	118e6 <__ssvfscanf_r+0x1562>
   109f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   109f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
   109fa:	601a      	str	r2, [r3, #0]
   109fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   109fe:	88d5      	ldrh	r5, [r2, #6]
   10a00:	8893      	ldrh	r3, [r2, #4]
   10a02:	429d      	cmp	r5, r3
   10a04:	f080 8552 	bcs.w	114ac <__ssvfscanf_r+0x1128>
   10a08:	6810      	ldr	r0, [r2, #0]
   10a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10a0c:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   10a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10a12:	633c      	str	r4, [r7, #48]	; 0x30
   10a14:	3501      	adds	r5, #1
   10a16:	80dd      	strh	r5, [r3, #6]
   10a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   10a1c:	2320      	movs	r3, #32
   10a1e:	623b      	str	r3, [r7, #32]
   10a20:	f8db 3000 	ldr.w	r3, [fp]
   10a24:	4eb1      	ldr	r6, [pc, #708]	; (10cec <__ssvfscanf_r+0x968>)
   10a26:	781b      	ldrb	r3, [r3, #0]
   10a28:	5cf3      	ldrb	r3, [r6, r3]
   10a2a:	f013 0308 	ands.w	r3, r3, #8
   10a2e:	f040 84bb 	bne.w	113a8 <__ssvfscanf_r+0x1024>
   10a32:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   10a34:	627e      	str	r6, [r7, #36]	; 0x24
   10a36:	461d      	mov	r5, r3
   10a38:	f7fc fe50 	bl	d6dc <__locale_mb_cur_max>
   10a3c:	42a8      	cmp	r0, r5
   10a3e:	f43f ad8d 	beq.w	1055c <__ssvfscanf_r+0x1d8>
   10a42:	e9db 3200 	ldrd	r3, r2, [fp]
   10a46:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   10a4a:	f813 1b01 	ldrb.w	r1, [r3], #1
   10a4e:	5541      	strb	r1, [r0, r5]
   10a50:	3a01      	subs	r2, #1
   10a52:	2c03      	cmp	r4, #3
   10a54:	e9cb 3200 	strd	r3, r2, [fp]
   10a58:	f105 0501 	add.w	r5, r5, #1
   10a5c:	f107 0668 	add.w	r6, r7, #104	; 0x68
   10a60:	d102      	bne.n	10a68 <__ssvfscanf_r+0x6e4>
   10a62:	6833      	ldr	r3, [r6, #0]
   10a64:	2b04      	cmp	r3, #4
   10a66:	d004      	beq.n	10a72 <__ssvfscanf_r+0x6ee>
   10a68:	2208      	movs	r2, #8
   10a6a:	2100      	movs	r1, #0
   10a6c:	4630      	mov	r0, r6
   10a6e:	f7fc fd39 	bl	d4e4 <memset>
   10a72:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   10a76:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   10a78:	9600      	str	r6, [sp, #0]
   10a7a:	462b      	mov	r3, r5
   10a7c:	4648      	mov	r0, r9
   10a7e:	f002 f9db 	bl	12e38 <_mbrtowc_r>
   10a82:	1c42      	adds	r2, r0, #1
   10a84:	4604      	mov	r4, r0
   10a86:	f43f ad69 	beq.w	1055c <__ssvfscanf_r+0x1d8>
   10a8a:	2800      	cmp	r0, #0
   10a8c:	f040 8478 	bne.w	11380 <__ssvfscanf_r+0xffc>
   10a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10a92:	6018      	str	r0, [r3, #0]
   10a94:	f002 fa2c 	bl	12ef0 <iswspace>
   10a98:	2800      	cmp	r0, #0
   10a9a:	f040 865c 	bne.w	11756 <__ssvfscanf_r+0x13d2>
   10a9e:	44aa      	add	sl, r5
   10aa0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   10aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10aa6:	2b00      	cmp	r3, #0
   10aa8:	f040 8633 	bne.w	11712 <__ssvfscanf_r+0x138e>
   10aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10aae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   10ab0:	3304      	adds	r3, #4
   10ab2:	64bb      	str	r3, [r7, #72]	; 0x48
   10ab4:	2a00      	cmp	r2, #0
   10ab6:	f000 862c 	beq.w	11712 <__ssvfscanf_r+0x138e>
   10aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10abc:	1a9d      	subs	r5, r3, r2
   10abe:	6a3b      	ldr	r3, [r7, #32]
   10ac0:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
   10ac4:	f240 8756 	bls.w	11974 <__ssvfscanf_r+0x15f0>
   10ac8:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   10aca:	f000 bc5c 	b.w	11386 <__ssvfscanf_r+0x1002>
   10ace:	f1b8 0f00 	cmp.w	r8, #0
   10ad2:	bf08      	it	eq
   10ad4:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
   10ad8:	07e0      	lsls	r0, r4, #31
   10ada:	f140 827b 	bpl.w	10fd4 <__ssvfscanf_r+0xc50>
   10ade:	f014 0310 	ands.w	r3, r4, #16
   10ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   10ae4:	f040 83f3 	bne.w	112ce <__ssvfscanf_r+0xf4a>
   10ae8:	0621      	lsls	r1, r4, #24
   10aea:	f140 85ed 	bpl.w	116c8 <__ssvfscanf_r+0x1344>
   10aee:	6b3e      	ldr	r6, [r7, #48]	; 0x30
   10af0:	f856 3b04 	ldr.w	r3, [r6], #4
   10af4:	623b      	str	r3, [r7, #32]
   10af6:	2b00      	cmp	r3, #0
   10af8:	f43f ad39 	beq.w	1056e <__ssvfscanf_r+0x1ea>
   10afc:	2080      	movs	r0, #128	; 0x80
   10afe:	f7fa fe13 	bl	b728 <malloc>
   10b02:	4604      	mov	r4, r0
   10b04:	2800      	cmp	r0, #0
   10b06:	f000 86ee 	beq.w	118e6 <__ssvfscanf_r+0x1562>
   10b0a:	6a3b      	ldr	r3, [r7, #32]
   10b0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10b0e:	6018      	str	r0, [r3, #0]
   10b10:	88d5      	ldrh	r5, [r2, #6]
   10b12:	8893      	ldrh	r3, [r2, #4]
   10b14:	429d      	cmp	r5, r3
   10b16:	f080 84dd 	bcs.w	114d4 <__ssvfscanf_r+0x1150>
   10b1a:	6810      	ldr	r0, [r2, #0]
   10b1c:	6a3b      	ldr	r3, [r7, #32]
   10b1e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   10b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10b24:	633e      	str	r6, [r7, #48]	; 0x30
   10b26:	3501      	adds	r5, #1
   10b28:	80dd      	strh	r5, [r3, #6]
   10b2a:	2320      	movs	r3, #32
   10b2c:	61fc      	str	r4, [r7, #28]
   10b2e:	61bb      	str	r3, [r7, #24]
   10b30:	6a7e      	ldr	r6, [r7, #36]	; 0x24
   10b32:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   10b36:	2500      	movs	r5, #0
   10b38:	46c2      	mov	sl, r8
   10b3a:	46a0      	mov	r8, r4
   10b3c:	f7fc fdce 	bl	d6dc <__locale_mb_cur_max>
   10b40:	42a8      	cmp	r0, r5
   10b42:	f43f ad0b 	beq.w	1055c <__ssvfscanf_r+0x1d8>
   10b46:	e9db 3200 	ldrd	r3, r2, [fp]
   10b4a:	f813 1b01 	ldrb.w	r1, [r3], #1
   10b4e:	3a01      	subs	r2, #1
   10b50:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   10b54:	e9cb 3200 	strd	r3, r2, [fp]
   10b58:	2e03      	cmp	r6, #3
   10b5a:	f105 0301 	add.w	r3, r5, #1
   10b5e:	5541      	strb	r1, [r0, r5]
   10b60:	64bb      	str	r3, [r7, #72]	; 0x48
   10b62:	f107 0460 	add.w	r4, r7, #96	; 0x60
   10b66:	d102      	bne.n	10b6e <__ssvfscanf_r+0x7ea>
   10b68:	6823      	ldr	r3, [r4, #0]
   10b6a:	2b04      	cmp	r3, #4
   10b6c:	d004      	beq.n	10b78 <__ssvfscanf_r+0x7f4>
   10b6e:	2208      	movs	r2, #8
   10b70:	2100      	movs	r1, #0
   10b72:	4620      	mov	r0, r4
   10b74:	f7fc fcb6 	bl	d4e4 <memset>
   10b78:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   10b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10b7e:	9400      	str	r4, [sp, #0]
   10b80:	4641      	mov	r1, r8
   10b82:	4648      	mov	r0, r9
   10b84:	f002 f958 	bl	12e38 <_mbrtowc_r>
   10b88:	1c42      	adds	r2, r0, #1
   10b8a:	4606      	mov	r6, r0
   10b8c:	f43f ace6 	beq.w	1055c <__ssvfscanf_r+0x1d8>
   10b90:	2800      	cmp	r0, #0
   10b92:	f040 82ca 	bne.w	1112a <__ssvfscanf_r+0xda6>
   10b96:	f8c8 0000 	str.w	r0, [r8]
   10b9a:	4605      	mov	r5, r0
   10b9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
   10ba0:	2208      	movs	r2, #8
   10ba2:	2100      	movs	r1, #0
   10ba4:	4618      	mov	r0, r3
   10ba6:	637b      	str	r3, [r7, #52]	; 0x34
   10ba8:	f7fc fc9c 	bl	d4e4 <memset>
   10bac:	4950      	ldr	r1, [pc, #320]	; (10cf0 <__ssvfscanf_r+0x96c>)
   10bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10bb0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
   10bb4:	462a      	mov	r2, r5
   10bb6:	4648      	mov	r0, r9
   10bb8:	460d      	mov	r5, r1
   10bba:	f107 0150 	add.w	r1, r7, #80	; 0x50
   10bbe:	47a8      	blx	r5
   10bc0:	2801      	cmp	r0, #1
   10bc2:	f000 83d5 	beq.w	11370 <__ssvfscanf_r+0xfec>
   10bc6:	2200      	movs	r2, #0
   10bc8:	f107 0370 	add.w	r3, r7, #112	; 0x70
   10bcc:	5c9b      	ldrb	r3, [r3, r2]
   10bce:	2b00      	cmp	r3, #0
   10bd0:	f000 85a1 	beq.w	11716 <__ssvfscanf_r+0x1392>
   10bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10bd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10bd8:	2e03      	cmp	r6, #3
   10bda:	4413      	add	r3, r2
   10bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   10bde:	f000 83ca 	beq.w	11376 <__ssvfscanf_r+0xff2>
   10be2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   10be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10be8:	b95b      	cbnz	r3, 10c02 <__ssvfscanf_r+0x87e>
   10bea:	6a3b      	ldr	r3, [r7, #32]
   10bec:	f108 0804 	add.w	r8, r8, #4
   10bf0:	b13b      	cbz	r3, 10c02 <__ssvfscanf_r+0x87e>
   10bf2:	69fb      	ldr	r3, [r7, #28]
   10bf4:	eba8 0403 	sub.w	r4, r8, r3
   10bf8:	69bb      	ldr	r3, [r7, #24]
   10bfa:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   10bfe:	f240 8405 	bls.w	1140c <__ssvfscanf_r+0x1088>
   10c02:	f8db 3004 	ldr.w	r3, [fp, #4]
   10c06:	2b00      	cmp	r3, #0
   10c08:	f04f 0500 	mov.w	r5, #0
   10c0c:	f340 8296 	ble.w	1113c <__ssvfscanf_r+0xdb8>
   10c10:	f1ba 0f00 	cmp.w	sl, #0
   10c14:	d192      	bne.n	10b3c <__ssvfscanf_r+0x7b8>
   10c16:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   10c1a:	627e      	str	r6, [r7, #36]	; 0x24
   10c1c:	4644      	mov	r4, r8
   10c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10c20:	2b00      	cmp	r3, #0
   10c22:	f47f abd6 	bne.w	103d2 <__ssvfscanf_r+0x4e>
   10c26:	6023      	str	r3, [r4, #0]
   10c28:	6a3b      	ldr	r3, [r7, #32]
   10c2a:	2b00      	cmp	r3, #0
   10c2c:	f000 81c2 	beq.w	10fb4 <__ssvfscanf_r+0xc30>
   10c30:	69fb      	ldr	r3, [r7, #28]
   10c32:	69ba      	ldr	r2, [r7, #24]
   10c34:	1ae1      	subs	r1, r4, r3
   10c36:	108b      	asrs	r3, r1, #2
   10c38:	3301      	adds	r3, #1
   10c3a:	429a      	cmp	r2, r3
   10c3c:	f240 81ba 	bls.w	10fb4 <__ssvfscanf_r+0xc30>
   10c40:	6a3c      	ldr	r4, [r7, #32]
   10c42:	3104      	adds	r1, #4
   10c44:	6820      	ldr	r0, [r4, #0]
   10c46:	f7fb f83b 	bl	bcc0 <realloc>
   10c4a:	2800      	cmp	r0, #0
   10c4c:	f000 81b2 	beq.w	10fb4 <__ssvfscanf_r+0xc30>
   10c50:	6020      	str	r0, [r4, #0]
   10c52:	e1af      	b.n	10fb4 <__ssvfscanf_r+0xc30>
   10c54:	0521      	lsls	r1, r4, #20
   10c56:	f57f adb3 	bpl.w	107c0 <__ssvfscanf_r+0x43c>
   10c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10c5c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   10c5e:	185b      	adds	r3, r3, r1
   10c60:	f47f adae 	bne.w	107c0 <__ssvfscanf_r+0x43c>
   10c64:	64bb      	str	r3, [r7, #72]	; 0x48
   10c66:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   10c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   10c6c:	e593      	b.n	10796 <__ssvfscanf_r+0x412>
   10c6e:	4b21      	ldr	r3, [pc, #132]	; (10cf4 <__ssvfscanf_r+0x970>)
   10c70:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   10c74:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   10c78:	e66b      	b.n	10952 <__ssvfscanf_r+0x5ce>
   10c7a:	f404 6318 	and.w	r3, r4, #2432	; 0x980
   10c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   10c82:	f47f ad9d 	bne.w	107c0 <__ssvfscanf_r+0x43c>
   10c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10c88:	2b01      	cmp	r3, #1
   10c8a:	f47f ad99 	bne.w	107c0 <__ssvfscanf_r+0x43c>
   10c8e:	2330      	movs	r3, #48	; 0x30
   10c90:	f805 3b01 	strb.w	r3, [r5], #1
   10c94:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   10c98:	2300      	movs	r3, #0
   10c9a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   10c9e:	3e01      	subs	r6, #1
   10ca0:	637b      	str	r3, [r7, #52]	; 0x34
   10ca2:	e578      	b.n	10796 <__ssvfscanf_r+0x412>
   10ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10ca6:	2b06      	cmp	r3, #6
   10ca8:	f040 8574 	bne.w	11794 <__ssvfscanf_r+0x1410>
   10cac:	2307      	movs	r3, #7
   10cae:	64bb      	str	r3, [r7, #72]	; 0x48
   10cb0:	e571      	b.n	10796 <__ssvfscanf_r+0x412>
   10cb2:	0523      	lsls	r3, r4, #20
   10cb4:	f57f ad84 	bpl.w	107c0 <__ssvfscanf_r+0x43c>
   10cb8:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
   10cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   10cc0:	d005      	beq.n	10cce <__ssvfscanf_r+0x94a>
   10cc2:	0561      	lsls	r1, r4, #21
   10cc4:	f57f ad7c 	bpl.w	107c0 <__ssvfscanf_r+0x43c>
   10cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10cca:	2b00      	cmp	r3, #0
   10ccc:	d047      	beq.n	10d5e <__ssvfscanf_r+0x9da>
   10cce:	05a3      	lsls	r3, r4, #22
   10cd0:	d404      	bmi.n	10cdc <__ssvfscanf_r+0x958>
   10cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10cd4:	69f9      	ldr	r1, [r7, #28]
   10cd6:	1a5b      	subs	r3, r3, r1
   10cd8:	e9c7 5305 	strd	r5, r3, [r7, #20]
   10cdc:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
   10ce0:	2300      	movs	r3, #0
   10ce2:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
   10ce6:	637b      	str	r3, [r7, #52]	; 0x34
   10ce8:	e555      	b.n	10796 <__ssvfscanf_r+0x412>
   10cea:	bf00      	nop
   10cec:	20000d25 	.word	0x20000d25
   10cf0:	2000810c 	.word	0x2000810c
   10cf4:	20002958 	.word	0x20002958
   10cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10cfa:	2b00      	cmp	r3, #0
   10cfc:	f000 81ff 	beq.w	110fe <__ssvfscanf_r+0xd7a>
   10d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10d02:	2b02      	cmp	r3, #2
   10d04:	f000 83b0 	beq.w	11468 <__ssvfscanf_r+0x10e4>
   10d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10d0a:	2b01      	cmp	r3, #1
   10d0c:	f000 81f1 	beq.w	110f2 <__ssvfscanf_r+0xd6e>
   10d10:	2b04      	cmp	r3, #4
   10d12:	f000 81ee 	beq.w	110f2 <__ssvfscanf_r+0xd6e>
   10d16:	e553      	b.n	107c0 <__ssvfscanf_r+0x43c>
   10d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10d1a:	2b07      	cmp	r3, #7
   10d1c:	f040 853a 	bne.w	11794 <__ssvfscanf_r+0x1410>
   10d20:	2308      	movs	r3, #8
   10d22:	64bb      	str	r3, [r7, #72]	; 0x48
   10d24:	e537      	b.n	10796 <__ssvfscanf_r+0x412>
   10d26:	0520      	lsls	r0, r4, #20
   10d28:	f100 81f9 	bmi.w	1111e <__ssvfscanf_r+0xd9a>
   10d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10d2e:	2b01      	cmp	r3, #1
   10d30:	f47f ad46 	bne.w	107c0 <__ssvfscanf_r+0x43c>
   10d34:	2302      	movs	r3, #2
   10d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   10d38:	e52d      	b.n	10796 <__ssvfscanf_r+0x412>
   10d3a:	0623      	lsls	r3, r4, #24
   10d3c:	f57f ad40 	bpl.w	107c0 <__ssvfscanf_r+0x43c>
   10d40:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   10d44:	e527      	b.n	10796 <__ssvfscanf_r+0x412>
   10d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10d48:	2b00      	cmp	r3, #0
   10d4a:	f040 81cc 	bne.w	110e6 <__ssvfscanf_r+0xd62>
   10d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10d50:	b9b3      	cbnz	r3, 10d80 <__ssvfscanf_r+0x9fc>
   10d52:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   10d56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   10d5a:	f000 8520 	beq.w	1179e <__ssvfscanf_r+0x141a>
   10d5e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   10d60:	ee18 9a10 	vmov	r9, s16
   10d64:	e533      	b.n	107ce <__ssvfscanf_r+0x44a>
   10d66:	0521      	lsls	r1, r4, #20
   10d68:	f100 81b7 	bmi.w	110da <__ssvfscanf_r+0xd56>
   10d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10d6e:	2b02      	cmp	r3, #2
   10d70:	f040 8510 	bne.w	11794 <__ssvfscanf_r+0x1410>
   10d74:	2303      	movs	r3, #3
   10d76:	64bb      	str	r3, [r7, #72]	; 0x48
   10d78:	e50d      	b.n	10796 <__ssvfscanf_r+0x412>
   10d7a:	0520      	lsls	r0, r4, #20
   10d7c:	d59c      	bpl.n	10cb8 <__ssvfscanf_r+0x934>
   10d7e:	e76c      	b.n	10c5a <__ssvfscanf_r+0x8d6>
   10d80:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   10d82:	ee18 9a10 	vmov	r9, s16
   10d86:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   10d8a:	e520      	b.n	107ce <__ssvfscanf_r+0x44a>
   10d8c:	4b8d      	ldr	r3, [pc, #564]	; (10fc4 <__ssvfscanf_r+0xc40>)
   10d8e:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   10d92:	2e08      	cmp	r6, #8
   10d94:	f73f addb 	bgt.w	1094e <__ssvfscanf_r+0x5ca>
   10d98:	e5e8      	b.n	1096c <__ssvfscanf_r+0x5e8>
   10d9a:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   10d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   10da2:	f47f ade3 	bne.w	1096c <__ssvfscanf_r+0x5e8>
   10da6:	f424 7400 	bic.w	r4, r4, #512	; 0x200
   10daa:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
   10dae:	2610      	movs	r6, #16
   10db0:	e5cf      	b.n	10952 <__ssvfscanf_r+0x5ce>
   10db2:	0623      	lsls	r3, r4, #24
   10db4:	f57f adda 	bpl.w	1096c <__ssvfscanf_r+0x5e8>
   10db8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   10dbc:	e5c9      	b.n	10952 <__ssvfscanf_r+0x5ce>
   10dbe:	f044 0401 	orr.w	r4, r4, #1
   10dc2:	f8db 3004 	ldr.w	r3, [fp, #4]
   10dc6:	64f9      	str	r1, [r7, #76]	; 0x4c
   10dc8:	2b00      	cmp	r3, #0
   10dca:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   10dce:	f04f 0500 	mov.w	r5, #0
   10dd2:	f73f abf8 	bgt.w	105c6 <__ssvfscanf_r+0x242>
   10dd6:	4659      	mov	r1, fp
   10dd8:	4648      	mov	r0, r9
   10dda:	f003 fa13 	bl	14204 <__ssrefill_r>
   10dde:	2800      	cmp	r0, #0
   10de0:	f47f abbc 	bne.w	1055c <__ssvfscanf_r+0x1d8>
   10de4:	0660      	lsls	r0, r4, #25
   10de6:	f53f abf1 	bmi.w	105cc <__ssvfscanf_r+0x248>
   10dea:	f8db 2000 	ldr.w	r2, [fp]
   10dee:	4e76      	ldr	r6, [pc, #472]	; (10fc8 <__ssvfscanf_r+0xc44>)
   10df0:	7813      	ldrb	r3, [r2, #0]
   10df2:	5cf3      	ldrb	r3, [r6, r3]
   10df4:	0719      	lsls	r1, r3, #28
   10df6:	f57f abe9 	bpl.w	105cc <__ssvfscanf_r+0x248>
   10dfa:	f8db 3004 	ldr.w	r3, [fp, #4]
   10dfe:	3b01      	subs	r3, #1
   10e00:	2b00      	cmp	r3, #0
   10e02:	f10a 0a01 	add.w	sl, sl, #1
   10e06:	f8cb 3004 	str.w	r3, [fp, #4]
   10e0a:	f102 0201 	add.w	r2, r2, #1
   10e0e:	dd4a      	ble.n	10ea6 <__ssvfscanf_r+0xb22>
   10e10:	f8cb 2000 	str.w	r2, [fp]
   10e14:	7813      	ldrb	r3, [r2, #0]
   10e16:	5cf3      	ldrb	r3, [r6, r3]
   10e18:	0719      	lsls	r1, r3, #28
   10e1a:	f57f abd7 	bpl.w	105cc <__ssvfscanf_r+0x248>
   10e1e:	e7ec      	b.n	10dfa <__ssvfscanf_r+0xa76>
   10e20:	f044 0401 	orr.w	r4, r4, #1
   10e24:	4b69      	ldr	r3, [pc, #420]	; (10fcc <__ssvfscanf_r+0xc48>)
   10e26:	62fb      	str	r3, [r7, #44]	; 0x2c
   10e28:	2308      	movs	r3, #8
   10e2a:	64f9      	str	r1, [r7, #76]	; 0x4c
   10e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   10e2e:	2503      	movs	r5, #3
   10e30:	f7ff bbc4 	b.w	105bc <__ssvfscanf_r+0x238>
   10e34:	f044 0401 	orr.w	r4, r4, #1
   10e38:	4b65      	ldr	r3, [pc, #404]	; (10fd0 <__ssvfscanf_r+0xc4c>)
   10e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   10e3c:	230a      	movs	r3, #10
   10e3e:	64f9      	str	r1, [r7, #76]	; 0x4c
   10e40:	63bb      	str	r3, [r7, #56]	; 0x38
   10e42:	2503      	movs	r5, #3
   10e44:	f7ff bbba 	b.w	105bc <__ssvfscanf_r+0x238>
   10e48:	0523      	lsls	r3, r4, #20
   10e4a:	f57f ad82 	bpl.w	10952 <__ssvfscanf_r+0x5ce>
   10e4e:	b916      	cbnz	r6, 10e56 <__ssvfscanf_r+0xad2>
   10e50:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   10e54:	2608      	movs	r6, #8
   10e56:	0563      	lsls	r3, r4, #21
   10e58:	f100 81a6 	bmi.w	111a8 <__ssvfscanf_r+0xe24>
   10e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10e5e:	f424 7460 	bic.w	r4, r4, #896	; 0x380
   10e62:	b11b      	cbz	r3, 10e6c <__ssvfscanf_r+0xae8>
   10e64:	3b01      	subs	r3, #1
   10e66:	63fb      	str	r3, [r7, #60]	; 0x3c
   10e68:	f108 0801 	add.w	r8, r8, #1
   10e6c:	684b      	ldr	r3, [r1, #4]
   10e6e:	3b01      	subs	r3, #1
   10e70:	2b00      	cmp	r3, #0
   10e72:	f10a 0a01 	add.w	sl, sl, #1
   10e76:	604b      	str	r3, [r1, #4]
   10e78:	f73f ad73 	bgt.w	10962 <__ssvfscanf_r+0x5de>
   10e7c:	4648      	mov	r0, r9
   10e7e:	64b9      	str	r1, [r7, #72]	; 0x48
   10e80:	f003 f9c0 	bl	14204 <__ssrefill_r>
   10e84:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   10e86:	2800      	cmp	r0, #0
   10e88:	f43f ad6d 	beq.w	10966 <__ssvfscanf_r+0x5e2>
   10e8c:	e56e      	b.n	1096c <__ssvfscanf_r+0x5e8>
   10e8e:	ee18 0a10 	vmov	r0, s16
   10e92:	4659      	mov	r1, fp
   10e94:	f003 f9b6 	bl	14204 <__ssrefill_r>
   10e98:	2800      	cmp	r0, #0
   10e9a:	f47f ac91 	bne.w	107c0 <__ssvfscanf_r+0x43c>
   10e9e:	2e00      	cmp	r6, #0
   10ea0:	f47f abc4 	bne.w	1062c <__ssvfscanf_r+0x2a8>
   10ea4:	e48c      	b.n	107c0 <__ssvfscanf_r+0x43c>
   10ea6:	4659      	mov	r1, fp
   10ea8:	4648      	mov	r0, r9
   10eaa:	f003 f9ab 	bl	14204 <__ssrefill_r>
   10eae:	2800      	cmp	r0, #0
   10eb0:	f47f ab54 	bne.w	1055c <__ssvfscanf_r+0x1d8>
   10eb4:	f8db 2000 	ldr.w	r2, [fp]
   10eb8:	e79a      	b.n	10df0 <__ssvfscanf_r+0xa6c>
   10eba:	f8db 2004 	ldr.w	r2, [fp, #4]
   10ebe:	e00f      	b.n	10ee0 <__ssvfscanf_r+0xb5c>
   10ec0:	f8db 3000 	ldr.w	r3, [fp]
   10ec4:	781a      	ldrb	r2, [r3, #0]
   10ec6:	5cb2      	ldrb	r2, [r6, r2]
   10ec8:	0711      	lsls	r1, r2, #28
   10eca:	f103 0301 	add.w	r3, r3, #1
   10ece:	f57f aa80 	bpl.w	103d2 <__ssvfscanf_r+0x4e>
   10ed2:	f8db 2004 	ldr.w	r2, [fp, #4]
   10ed6:	3a01      	subs	r2, #1
   10ed8:	e9cb 3200 	strd	r3, r2, [fp]
   10edc:	f10a 0a01 	add.w	sl, sl, #1
   10ee0:	2a00      	cmp	r2, #0
   10ee2:	dced      	bgt.n	10ec0 <__ssvfscanf_r+0xb3c>
   10ee4:	4659      	mov	r1, fp
   10ee6:	4648      	mov	r0, r9
   10ee8:	f003 f98c 	bl	14204 <__ssrefill_r>
   10eec:	2800      	cmp	r0, #0
   10eee:	d0e7      	beq.n	10ec0 <__ssvfscanf_r+0xb3c>
   10ef0:	f7ff ba6f 	b.w	103d2 <__ssvfscanf_r+0x4e>
   10ef4:	06e1      	lsls	r1, r4, #27
   10ef6:	f100 8349 	bmi.w	1158c <__ssvfscanf_r+0x1208>
   10efa:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   10efe:	f000 83ab 	beq.w	11658 <__ssvfscanf_r+0x12d4>
   10f02:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   10f04:	f854 6b04 	ldr.w	r6, [r4], #4
   10f08:	64be      	str	r6, [r7, #72]	; 0x48
   10f0a:	2e00      	cmp	r6, #0
   10f0c:	f43f ab2f 	beq.w	1056e <__ssvfscanf_r+0x1ea>
   10f10:	2020      	movs	r0, #32
   10f12:	f7fa fc09 	bl	b728 <malloc>
   10f16:	4605      	mov	r5, r0
   10f18:	2800      	cmp	r0, #0
   10f1a:	f000 8462 	beq.w	117e2 <__ssvfscanf_r+0x145e>
   10f1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10f20:	6030      	str	r0, [r6, #0]
   10f22:	8893      	ldrh	r3, [r2, #4]
   10f24:	88d6      	ldrh	r6, [r2, #6]
   10f26:	429e      	cmp	r6, r3
   10f28:	f080 82a8 	bcs.w	1147c <__ssvfscanf_r+0x10f8>
   10f2c:	6810      	ldr	r0, [r2, #0]
   10f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10f30:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   10f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10f36:	633c      	str	r4, [r7, #48]	; 0x30
   10f38:	3601      	adds	r6, #1
   10f3a:	80de      	strh	r6, [r3, #6]
   10f3c:	2320      	movs	r3, #32
   10f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   10f40:	f8db 2000 	ldr.w	r2, [fp]
   10f44:	4e20      	ldr	r6, [pc, #128]	; (10fc8 <__ssvfscanf_r+0xc44>)
   10f46:	7811      	ldrb	r1, [r2, #0]
   10f48:	5c71      	ldrb	r1, [r6, r1]
   10f4a:	0708      	lsls	r0, r1, #28
   10f4c:	f100 82ac 	bmi.w	114a8 <__ssvfscanf_r+0x1124>
   10f50:	4633      	mov	r3, r6
   10f52:	462c      	mov	r4, r5
   10f54:	4610      	mov	r0, r2
   10f56:	462e      	mov	r6, r5
   10f58:	f8db 1004 	ldr.w	r1, [fp, #4]
   10f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10f5e:	3901      	subs	r1, #1
   10f60:	f8cb 1004 	str.w	r1, [fp, #4]
   10f64:	1c41      	adds	r1, r0, #1
   10f66:	f8cb 1000 	str.w	r1, [fp]
   10f6a:	4635      	mov	r5, r6
   10f6c:	7801      	ldrb	r1, [r0, #0]
   10f6e:	f805 1b01 	strb.w	r1, [r5], #1
   10f72:	b122      	cbz	r2, 10f7e <__ssvfscanf_r+0xbfa>
   10f74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   10f76:	1b2e      	subs	r6, r5, r4
   10f78:	4296      	cmp	r6, r2
   10f7a:	f080 837a 	bcs.w	11672 <__ssvfscanf_r+0x12ee>
   10f7e:	f1b8 0801 	subs.w	r8, r8, #1
   10f82:	d00b      	beq.n	10f9c <__ssvfscanf_r+0xc18>
   10f84:	f8db 1004 	ldr.w	r1, [fp, #4]
   10f88:	2900      	cmp	r1, #0
   10f8a:	462e      	mov	r6, r5
   10f8c:	f340 83ae 	ble.w	116ec <__ssvfscanf_r+0x1368>
   10f90:	f8db 0000 	ldr.w	r0, [fp]
   10f94:	7801      	ldrb	r1, [r0, #0]
   10f96:	5c59      	ldrb	r1, [r3, r1]
   10f98:	0709      	lsls	r1, r1, #28
   10f9a:	d5dd      	bpl.n	10f58 <__ssvfscanf_r+0xbd4>
   10f9c:	1b29      	subs	r1, r5, r4
   10f9e:	448a      	add	sl, r1
   10fa0:	3101      	adds	r1, #1
   10fa2:	f04f 0300 	mov.w	r3, #0
   10fa6:	702b      	strb	r3, [r5, #0]
   10fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10faa:	b11b      	cbz	r3, 10fb4 <__ssvfscanf_r+0xc30>
   10fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10fae:	428b      	cmp	r3, r1
   10fb0:	f200 8394 	bhi.w	116dc <__ssvfscanf_r+0x1358>
   10fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10fb6:	3301      	adds	r3, #1
   10fb8:	647b      	str	r3, [r7, #68]	; 0x44
   10fba:	f7ff ba0a 	b.w	103d2 <__ssvfscanf_r+0x4e>
   10fbe:	2300      	movs	r3, #0
   10fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   10fc2:	e461      	b.n	10888 <__ssvfscanf_r+0x504>
   10fc4:	20002958 	.word	0x20002958
   10fc8:	20000d25 	.word	0x20000d25
   10fcc:	000128d9 	.word	0x000128d9
   10fd0:	0000d071 	.word	0x0000d071
   10fd4:	06e6      	lsls	r6, r4, #27
   10fd6:	f100 8181 	bmi.w	112dc <__ssvfscanf_r+0xf58>
   10fda:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   10fde:	f000 836d 	beq.w	116bc <__ssvfscanf_r+0x1338>
   10fe2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   10fe4:	f854 6b04 	ldr.w	r6, [r4], #4
   10fe8:	64be      	str	r6, [r7, #72]	; 0x48
   10fea:	2e00      	cmp	r6, #0
   10fec:	f43f aabf 	beq.w	1056e <__ssvfscanf_r+0x1ea>
   10ff0:	2020      	movs	r0, #32
   10ff2:	f7fa fb99 	bl	b728 <malloc>
   10ff6:	4605      	mov	r5, r0
   10ff8:	2800      	cmp	r0, #0
   10ffa:	f000 83f2 	beq.w	117e2 <__ssvfscanf_r+0x145e>
   10ffe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11000:	6030      	str	r0, [r6, #0]
   11002:	8893      	ldrh	r3, [r2, #4]
   11004:	88d6      	ldrh	r6, [r2, #6]
   11006:	429e      	cmp	r6, r3
   11008:	f080 827a 	bcs.w	11500 <__ssvfscanf_r+0x117c>
   1100c:	6810      	ldr	r0, [r2, #0]
   1100e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11010:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   11014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11016:	633c      	str	r4, [r7, #48]	; 0x30
   11018:	3601      	adds	r6, #1
   1101a:	80de      	strh	r6, [r3, #6]
   1101c:	2420      	movs	r4, #32
   1101e:	f8db 2000 	ldr.w	r2, [fp]
   11022:	f107 0370 	add.w	r3, r7, #112	; 0x70
   11026:	4619      	mov	r1, r3
   11028:	7813      	ldrb	r3, [r2, #0]
   1102a:	5ccb      	ldrb	r3, [r1, r3]
   1102c:	2b00      	cmp	r3, #0
   1102e:	f43f aa9e 	beq.w	1056e <__ssvfscanf_r+0x1ea>
   11032:	ee08 9a10 	vmov	s16, r9
   11036:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
   1103a:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   1103e:	462e      	mov	r6, r5
   11040:	46a2      	mov	sl, r4
   11042:	4610      	mov	r0, r2
   11044:	460c      	mov	r4, r1
   11046:	f8db 1004 	ldr.w	r1, [fp, #4]
   1104a:	1c43      	adds	r3, r0, #1
   1104c:	3901      	subs	r1, #1
   1104e:	e9cb 3100 	strd	r3, r1, [fp]
   11052:	4629      	mov	r1, r5
   11054:	7800      	ldrb	r0, [r0, #0]
   11056:	f801 0b01 	strb.w	r0, [r1], #1
   1105a:	f1b9 0f00 	cmp.w	r9, #0
   1105e:	d002      	beq.n	11066 <__ssvfscanf_r+0xce2>
   11060:	1b8d      	subs	r5, r1, r6
   11062:	4555      	cmp	r5, sl
   11064:	d27a      	bcs.n	1115c <__ssvfscanf_r+0xdd8>
   11066:	460d      	mov	r5, r1
   11068:	f1b8 0801 	subs.w	r8, r8, #1
   1106c:	d00a      	beq.n	11084 <__ssvfscanf_r+0xd00>
   1106e:	f8db 1004 	ldr.w	r1, [fp, #4]
   11072:	2900      	cmp	r1, #0
   11074:	f340 816a 	ble.w	1134c <__ssvfscanf_r+0xfc8>
   11078:	f8db 0000 	ldr.w	r0, [fp]
   1107c:	7801      	ldrb	r1, [r0, #0]
   1107e:	5c61      	ldrb	r1, [r4, r1]
   11080:	2900      	cmp	r1, #0
   11082:	d1e0      	bne.n	11046 <__ssvfscanf_r+0xcc2>
   11084:	4654      	mov	r4, sl
   11086:	ee18 9a10 	vmov	r9, s16
   1108a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1108e:	1bae      	subs	r6, r5, r6
   11090:	f43f aa6d 	beq.w	1056e <__ssvfscanf_r+0x1ea>
   11094:	f04f 0300 	mov.w	r3, #0
   11098:	702b      	strb	r3, [r5, #0]
   1109a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1109c:	b11b      	cbz	r3, 110a6 <__ssvfscanf_r+0xd22>
   1109e:	1c71      	adds	r1, r6, #1
   110a0:	428c      	cmp	r4, r1
   110a2:	f200 832d 	bhi.w	11700 <__ssvfscanf_r+0x137c>
   110a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   110a8:	3301      	adds	r3, #1
   110aa:	44b2      	add	sl, r6
   110ac:	647b      	str	r3, [r7, #68]	; 0x44
   110ae:	f7ff b990 	b.w	103d2 <__ssvfscanf_r+0x4e>
   110b2:	2300      	movs	r3, #0
   110b4:	613b      	str	r3, [r7, #16]
   110b6:	f7ff baa9 	b.w	1060c <__ssvfscanf_r+0x288>
   110ba:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   110be:	f47f aa56 	bne.w	1056e <__ssvfscanf_r+0x1ea>
   110c2:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   110c6:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   110ca:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   110ce:	f7ff ba67 	b.w	105a0 <__ssvfscanf_r+0x21c>
   110d2:	64f9      	str	r1, [r7, #76]	; 0x4c
   110d4:	2504      	movs	r5, #4
   110d6:	f7ff ba71 	b.w	105bc <__ssvfscanf_r+0x238>
   110da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   110dc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   110de:	185b      	adds	r3, r3, r1
   110e0:	f47f ae44 	bne.w	10d6c <__ssvfscanf_r+0x9e8>
   110e4:	e5be      	b.n	10c64 <__ssvfscanf_r+0x8e0>
   110e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   110e8:	2b03      	cmp	r3, #3
   110ea:	d002      	beq.n	110f2 <__ssvfscanf_r+0xd6e>
   110ec:	2b05      	cmp	r3, #5
   110ee:	f47f ab67 	bne.w	107c0 <__ssvfscanf_r+0x43c>
   110f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   110f4:	3301      	adds	r3, #1
   110f6:	b2db      	uxtb	r3, r3
   110f8:	64bb      	str	r3, [r7, #72]	; 0x48
   110fa:	f7ff bb4c 	b.w	10796 <__ssvfscanf_r+0x412>
   110fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11100:	2b00      	cmp	r3, #0
   11102:	f47f ae01 	bne.w	10d08 <__ssvfscanf_r+0x984>
   11106:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   1110a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   1110e:	f47f adfb 	bne.w	10d08 <__ssvfscanf_r+0x984>
   11112:	2301      	movs	r3, #1
   11114:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   11118:	63fb      	str	r3, [r7, #60]	; 0x3c
   1111a:	f7ff bb3c 	b.w	10796 <__ssvfscanf_r+0x412>
   1111e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11120:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   11122:	185b      	adds	r3, r3, r1
   11124:	f47f ae02 	bne.w	10d2c <__ssvfscanf_r+0x9a8>
   11128:	e59c      	b.n	10c64 <__ssvfscanf_r+0x8e0>
   1112a:	1c83      	adds	r3, r0, #2
   1112c:	f040 845b 	bne.w	119e6 <__ssvfscanf_r+0x1662>
   11130:	f8db 3004 	ldr.w	r3, [fp, #4]
   11134:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   11136:	2b00      	cmp	r3, #0
   11138:	f73f ad00 	bgt.w	10b3c <__ssvfscanf_r+0x7b8>
   1113c:	4659      	mov	r1, fp
   1113e:	4648      	mov	r0, r9
   11140:	f003 f860 	bl	14204 <__ssrefill_r>
   11144:	2800      	cmp	r0, #0
   11146:	f43f ad63 	beq.w	10c10 <__ssvfscanf_r+0x88c>
   1114a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1114e:	627e      	str	r6, [r7, #36]	; 0x24
   11150:	4644      	mov	r4, r8
   11152:	2d00      	cmp	r5, #0
   11154:	f43f ad63 	beq.w	10c1e <__ssvfscanf_r+0x89a>
   11158:	f7ff ba00 	b.w	1055c <__ssvfscanf_r+0x1d8>
   1115c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   11160:	4630      	mov	r0, r6
   11162:	4651      	mov	r1, sl
   11164:	f7fa fdac 	bl	bcc0 <realloc>
   11168:	4606      	mov	r6, r0
   1116a:	2800      	cmp	r0, #0
   1116c:	f000 8339 	beq.w	117e2 <__ssvfscanf_r+0x145e>
   11170:	4405      	add	r5, r0
   11172:	f8c9 0000 	str.w	r0, [r9]
   11176:	e777      	b.n	11068 <__ssvfscanf_r+0xce4>
   11178:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   1117c:	4bbc      	ldr	r3, [pc, #752]	; (11470 <__ssvfscanf_r+0x10ec>)
   1117e:	62fb      	str	r3, [r7, #44]	; 0x2c
   11180:	2310      	movs	r3, #16
   11182:	64f9      	str	r1, [r7, #76]	; 0x4c
   11184:	63bb      	str	r3, [r7, #56]	; 0x38
   11186:	2503      	movs	r5, #3
   11188:	f7ff ba18 	b.w	105bc <__ssvfscanf_r+0x238>
   1118c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1118e:	3301      	adds	r3, #1
   11190:	637b      	str	r3, [r7, #52]	; 0x34
   11192:	693b      	ldr	r3, [r7, #16]
   11194:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   11198:	2b00      	cmp	r3, #0
   1119a:	f43f aafe 	beq.w	1079a <__ssvfscanf_r+0x416>
   1119e:	693b      	ldr	r3, [r7, #16]
   111a0:	3b01      	subs	r3, #1
   111a2:	613b      	str	r3, [r7, #16]
   111a4:	f7ff bafa 	b.w	1079c <__ssvfscanf_r+0x418>
   111a8:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   111ac:	f7ff bbd1 	b.w	10952 <__ssvfscanf_r+0x5ce>
   111b0:	0722      	lsls	r2, r4, #28
   111b2:	f140 81c7 	bpl.w	11544 <__ssvfscanf_r+0x11c0>
   111b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   111b8:	f853 2b04 	ldr.w	r2, [r3], #4
   111bc:	633b      	str	r3, [r7, #48]	; 0x30
   111be:	7010      	strb	r0, [r2, #0]
   111c0:	f7ff bbf3 	b.w	109aa <__ssvfscanf_r+0x626>
   111c4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   111c8:	465a      	mov	r2, fp
   111ca:	4648      	mov	r0, r9
   111cc:	3d01      	subs	r5, #1
   111ce:	f002 ffd9 	bl	14184 <_sungetc_r>
   111d2:	f7ff bbd5 	b.w	10980 <__ssvfscanf_r+0x5fc>
   111d6:	69fb      	ldr	r3, [r7, #28]
   111d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   111da:	4293      	cmp	r3, r2
   111dc:	f43f ab2d 	beq.w	1083a <__ssvfscanf_r+0x4b6>
   111e0:	1a9a      	subs	r2, r3, r2
   111e2:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
   111e6:	429d      	cmp	r5, r3
   111e8:	bf28      	it	cs
   111ea:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
   111ee:	49a1      	ldr	r1, [pc, #644]	; (11474 <__ssvfscanf_r+0x10f0>)
   111f0:	4628      	mov	r0, r5
   111f2:	f001 fc35 	bl	12a60 <sprintf>
   111f6:	f7ff bb20 	b.w	1083a <__ssvfscanf_r+0x4b6>
   111fa:	06e2      	lsls	r2, r4, #27
   111fc:	f100 8131 	bmi.w	11462 <__ssvfscanf_r+0x10de>
   11200:	0723      	lsls	r3, r4, #28
   11202:	f100 81ba 	bmi.w	1157a <__ssvfscanf_r+0x11f6>
   11206:	0766      	lsls	r6, r4, #29
   11208:	f140 82b4 	bpl.w	11774 <__ssvfscanf_r+0x13f0>
   1120c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1120e:	64f9      	str	r1, [r7, #76]	; 0x4c
   11210:	f853 2b04 	ldr.w	r2, [r3], #4
   11214:	633b      	str	r3, [r7, #48]	; 0x30
   11216:	f8a2 a000 	strh.w	sl, [r2]
   1121a:	f7ff b8da 	b.w	103d2 <__ssvfscanf_r+0x4e>
   1121e:	0723      	lsls	r3, r4, #28
   11220:	f47f a9a5 	bne.w	1056e <__ssvfscanf_r+0x1ea>
   11224:	7842      	ldrb	r2, [r0, #1]
   11226:	2a68      	cmp	r2, #104	; 0x68
   11228:	f000 8186 	beq.w	11538 <__ssvfscanf_r+0x11b4>
   1122c:	f044 0404 	orr.w	r4, r4, #4
   11230:	4608      	mov	r0, r1
   11232:	f7ff b92f 	b.w	10494 <__ssvfscanf_r+0x110>
   11236:	4b8e      	ldr	r3, [pc, #568]	; (11470 <__ssvfscanf_r+0x10ec>)
   11238:	62fb      	str	r3, [r7, #44]	; 0x2c
   1123a:	230a      	movs	r3, #10
   1123c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1123e:	63bb      	str	r3, [r7, #56]	; 0x38
   11240:	2503      	movs	r5, #3
   11242:	f7ff b9bb 	b.w	105bc <__ssvfscanf_r+0x238>
   11246:	4b8c      	ldr	r3, [pc, #560]	; (11478 <__ssvfscanf_r+0x10f4>)
   11248:	62fb      	str	r3, [r7, #44]	; 0x2c
   1124a:	2300      	movs	r3, #0
   1124c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1124e:	63bb      	str	r3, [r7, #56]	; 0x38
   11250:	2503      	movs	r5, #3
   11252:	f7ff b9b3 	b.w	105bc <__ssvfscanf_r+0x238>
   11256:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   1125a:	e78f      	b.n	1117c <__ssvfscanf_r+0xdf8>
   1125c:	f107 0070 	add.w	r0, r7, #112	; 0x70
   11260:	f001 fa56 	bl	12710 <__sccl>
   11264:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   11268:	64f8      	str	r0, [r7, #76]	; 0x4c
   1126a:	2501      	movs	r5, #1
   1126c:	f7ff b9a6 	b.w	105bc <__ssvfscanf_r+0x238>
   11270:	0722      	lsls	r2, r4, #28
   11272:	f47f a97c 	bne.w	1056e <__ssvfscanf_r+0x1ea>
   11276:	7842      	ldrb	r2, [r0, #1]
   11278:	2a6c      	cmp	r2, #108	; 0x6c
   1127a:	f000 8157 	beq.w	1152c <__ssvfscanf_r+0x11a8>
   1127e:	f044 0401 	orr.w	r4, r4, #1
   11282:	4608      	mov	r0, r1
   11284:	f7ff b906 	b.w	10494 <__ssvfscanf_r+0x110>
   11288:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   1128c:	f47f a96f 	bne.w	1056e <__ssvfscanf_r+0x1ea>
   11290:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11292:	2a00      	cmp	r2, #0
   11294:	f000 81e7 	beq.w	11666 <__ssvfscanf_r+0x12e2>
   11298:	7842      	ldrb	r2, [r0, #1]
   1129a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   1129e:	4608      	mov	r0, r1
   112a0:	f7ff b8f8 	b.w	10494 <__ssvfscanf_r+0x110>
   112a4:	ea58 0804 	orrs.w	r8, r8, r4
   112a8:	f47f a961 	bne.w	1056e <__ssvfscanf_r+0x1ea>
   112ac:	7842      	ldrb	r2, [r0, #1]
   112ae:	2410      	movs	r4, #16
   112b0:	4608      	mov	r0, r1
   112b2:	f7ff b8ef 	b.w	10494 <__ssvfscanf_r+0x110>
   112b6:	64f9      	str	r1, [r7, #76]	; 0x4c
   112b8:	f7ff b8a7 	b.w	1040a <__ssvfscanf_r+0x86>
   112bc:	2300      	movs	r3, #0
   112be:	623b      	str	r3, [r7, #32]
   112c0:	62bb      	str	r3, [r7, #40]	; 0x28
   112c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   112c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
   112c8:	64bb      	str	r3, [r7, #72]	; 0x48
   112ca:	f7ff bba9 	b.w	10a20 <__ssvfscanf_r+0x69c>
   112ce:	2300      	movs	r3, #0
   112d0:	e9c7 3306 	strd	r3, r3, [r7, #24]
   112d4:	623b      	str	r3, [r7, #32]
   112d6:	f107 0454 	add.w	r4, r7, #84	; 0x54
   112da:	e429      	b.n	10b30 <__ssvfscanf_r+0x7ac>
   112dc:	f8db 3000 	ldr.w	r3, [fp]
   112e0:	f107 0270 	add.w	r2, r7, #112	; 0x70
   112e4:	4611      	mov	r1, r2
   112e6:	781a      	ldrb	r2, [r3, #0]
   112e8:	5c8a      	ldrb	r2, [r1, r2]
   112ea:	2a00      	cmp	r2, #0
   112ec:	f43f a93f 	beq.w	1056e <__ssvfscanf_r+0x1ea>
   112f0:	3301      	adds	r3, #1
   112f2:	f8cb 3000 	str.w	r3, [fp]
   112f6:	f8db 3004 	ldr.w	r3, [fp, #4]
   112fa:	f1b8 0f01 	cmp.w	r8, #1
   112fe:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11302:	f8cb 3004 	str.w	r3, [fp, #4]
   11306:	bf18      	it	ne
   11308:	460c      	movne	r4, r1
   1130a:	d114      	bne.n	11336 <__ssvfscanf_r+0xfb2>
   1130c:	f7ff bb53 	b.w	109b6 <__ssvfscanf_r+0x632>
   11310:	f8db 3000 	ldr.w	r3, [fp]
   11314:	781a      	ldrb	r2, [r3, #0]
   11316:	5ca2      	ldrb	r2, [r4, r2]
   11318:	3301      	adds	r3, #1
   1131a:	2a00      	cmp	r2, #0
   1131c:	f43f ab4b 	beq.w	109b6 <__ssvfscanf_r+0x632>
   11320:	f8cb 3000 	str.w	r3, [fp]
   11324:	f8db 3004 	ldr.w	r3, [fp, #4]
   11328:	3501      	adds	r5, #1
   1132a:	3b01      	subs	r3, #1
   1132c:	4545      	cmp	r5, r8
   1132e:	f8cb 3004 	str.w	r3, [fp, #4]
   11332:	f43f ab40 	beq.w	109b6 <__ssvfscanf_r+0x632>
   11336:	2b00      	cmp	r3, #0
   11338:	dcea      	bgt.n	11310 <__ssvfscanf_r+0xf8c>
   1133a:	4659      	mov	r1, fp
   1133c:	4648      	mov	r0, r9
   1133e:	f002 ff61 	bl	14204 <__ssrefill_r>
   11342:	2800      	cmp	r0, #0
   11344:	d0e4      	beq.n	11310 <__ssvfscanf_r+0xf8c>
   11346:	44aa      	add	sl, r5
   11348:	f7ff b843 	b.w	103d2 <__ssvfscanf_r+0x4e>
   1134c:	ee18 0a10 	vmov	r0, s16
   11350:	4659      	mov	r1, fp
   11352:	f002 ff57 	bl	14204 <__ssrefill_r>
   11356:	2800      	cmp	r0, #0
   11358:	f43f ae8e 	beq.w	11078 <__ssvfscanf_r+0xcf4>
   1135c:	42b5      	cmp	r5, r6
   1135e:	4654      	mov	r4, sl
   11360:	ee18 9a10 	vmov	r9, s16
   11364:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   11368:	f47f ae91 	bne.w	1108e <__ssvfscanf_r+0xd0a>
   1136c:	f7ff b8f6 	b.w	1055c <__ssvfscanf_r+0x1d8>
   11370:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   11374:	e428      	b.n	10bc8 <__ssvfscanf_r+0x844>
   11376:	6823      	ldr	r3, [r4, #0]
   11378:	2b04      	cmp	r3, #4
   1137a:	f47f ac32 	bne.w	10be2 <__ssvfscanf_r+0x85e>
   1137e:	e432      	b.n	10be6 <__ssvfscanf_r+0x862>
   11380:	1c83      	adds	r3, r0, #2
   11382:	f040 8339 	bne.w	119f8 <__ssvfscanf_r+0x1674>
   11386:	f8db 3004 	ldr.w	r3, [fp, #4]
   1138a:	2b00      	cmp	r3, #0
   1138c:	f340 81d7 	ble.w	1173e <__ssvfscanf_r+0x13ba>
   11390:	f8db 3000 	ldr.w	r3, [fp]
   11394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11396:	781b      	ldrb	r3, [r3, #0]
   11398:	5cd3      	ldrb	r3, [r2, r3]
   1139a:	0718      	lsls	r0, r3, #28
   1139c:	d403      	bmi.n	113a6 <__ssvfscanf_r+0x1022>
   1139e:	f1b8 0f00 	cmp.w	r8, #0
   113a2:	f47f ab49 	bne.w	10a38 <__ssvfscanf_r+0x6b4>
   113a6:	627c      	str	r4, [r7, #36]	; 0x24
   113a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   113aa:	2b00      	cmp	r3, #0
   113ac:	f47f a811 	bne.w	103d2 <__ssvfscanf_r+0x4e>
   113b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
   113b2:	6013      	str	r3, [r2, #0]
   113b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   113b6:	2b00      	cmp	r3, #0
   113b8:	f43f adfc 	beq.w	10fb4 <__ssvfscanf_r+0xc30>
   113bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   113be:	1ad1      	subs	r1, r2, r3
   113c0:	108b      	asrs	r3, r1, #2
   113c2:	6a3a      	ldr	r2, [r7, #32]
   113c4:	3301      	adds	r3, #1
   113c6:	429a      	cmp	r2, r3
   113c8:	f67f adf4 	bls.w	10fb4 <__ssvfscanf_r+0xc30>
   113cc:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   113ce:	3104      	adds	r1, #4
   113d0:	6820      	ldr	r0, [r4, #0]
   113d2:	f7fa fc75 	bl	bcc0 <realloc>
   113d6:	2800      	cmp	r0, #0
   113d8:	f47f ac3a 	bne.w	10c50 <__ssvfscanf_r+0x8cc>
   113dc:	e5ea      	b.n	10fb4 <__ssvfscanf_r+0xc30>
   113de:	f853 2b04 	ldr.w	r2, [r3], #4
   113e2:	ed82 0b00 	vstr	d0, [r2]
   113e6:	633b      	str	r3, [r7, #48]	; 0x30
   113e8:	e5e4      	b.n	10fb4 <__ssvfscanf_r+0xc30>
   113ea:	68fd      	ldr	r5, [r7, #12]
   113ec:	6a39      	ldr	r1, [r7, #32]
   113ee:	687e      	ldr	r6, [r7, #4]
   113f0:	4628      	mov	r0, r5
   113f2:	4642      	mov	r2, r8
   113f4:	46a3      	mov	fp, r4
   113f6:	68bc      	ldr	r4, [r7, #8]
   113f8:	f001 fb60 	bl	12abc <stpncpy>
   113fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   113fe:	61fb      	str	r3, [r7, #28]
   11400:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   11404:	3e01      	subs	r6, #1
   11406:	4605      	mov	r5, r0
   11408:	f7ff b9c8 	b.w	1079c <__ssvfscanf_r+0x418>
   1140c:	69f8      	ldr	r0, [r7, #28]
   1140e:	00d9      	lsls	r1, r3, #3
   11410:	461d      	mov	r5, r3
   11412:	f7fa fc55 	bl	bcc0 <realloc>
   11416:	61f8      	str	r0, [r7, #28]
   11418:	2800      	cmp	r0, #0
   1141a:	f000 8264 	beq.w	118e6 <__ssvfscanf_r+0x1562>
   1141e:	6a3a      	ldr	r2, [r7, #32]
   11420:	006b      	lsls	r3, r5, #1
   11422:	eb00 0804 	add.w	r8, r0, r4
   11426:	6010      	str	r0, [r2, #0]
   11428:	61bb      	str	r3, [r7, #24]
   1142a:	f7ff bbea 	b.w	10c02 <__ssvfscanf_r+0x87e>
   1142e:	2e02      	cmp	r6, #2
   11430:	f240 82c4 	bls.w	119bc <__ssvfscanf_r+0x1638>
   11434:	2e03      	cmp	r6, #3
   11436:	f43f a9d3 	beq.w	107e0 <__ssvfscanf_r+0x45c>
   1143a:	3e04      	subs	r6, #4
   1143c:	fa5f f886 	uxtb.w	r8, r6
   11440:	ea6f 0308 	mvn.w	r3, r8
   11444:	18ee      	adds	r6, r5, r3
   11446:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1144a:	465a      	mov	r2, fp
   1144c:	4648      	mov	r0, r9
   1144e:	f002 fe99 	bl	14184 <_sungetc_r>
   11452:	42ae      	cmp	r6, r5
   11454:	d1f7      	bne.n	11446 <__ssvfscanf_r+0x10c2>
   11456:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1145a:	ebaa 0a08 	sub.w	sl, sl, r8
   1145e:	f7ff b9bf 	b.w	107e0 <__ssvfscanf_r+0x45c>
   11462:	64f9      	str	r1, [r7, #76]	; 0x4c
   11464:	f7fe bfb5 	b.w	103d2 <__ssvfscanf_r+0x4e>
   11468:	2303      	movs	r3, #3
   1146a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1146c:	f7ff b993 	b.w	10796 <__ssvfscanf_r+0x412>
   11470:	000128d9 	.word	0x000128d9
   11474:	20000d1c 	.word	0x20000d1c
   11478:	0000d071 	.word	0x0000d071
   1147c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   11480:	4293      	cmp	r3, r2
   11482:	f200 8297 	bhi.w	119b4 <__ssvfscanf_r+0x1630>
   11486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11488:	3308      	adds	r3, #8
   1148a:	b29b      	uxth	r3, r3
   1148c:	6810      	ldr	r0, [r2, #0]
   1148e:	63f8      	str	r0, [r7, #60]	; 0x3c
   11490:	0099      	lsls	r1, r3, #2
   11492:	637b      	str	r3, [r7, #52]	; 0x34
   11494:	f7fa fc14 	bl	bcc0 <realloc>
   11498:	2800      	cmp	r0, #0
   1149a:	f000 827b 	beq.w	11994 <__ssvfscanf_r+0x1610>
   1149e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   114a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   114a2:	8093      	strh	r3, [r2, #4]
   114a4:	6010      	str	r0, [r2, #0]
   114a6:	e542      	b.n	10f2e <__ssvfscanf_r+0xbaa>
   114a8:	2101      	movs	r1, #1
   114aa:	e57a      	b.n	10fa2 <__ssvfscanf_r+0xc1e>
   114ac:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   114b0:	4293      	cmp	r3, r2
   114b2:	f200 8293 	bhi.w	119dc <__ssvfscanf_r+0x1658>
   114b6:	3308      	adds	r3, #8
   114b8:	b29e      	uxth	r6, r3
   114ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   114bc:	00b1      	lsls	r1, r6, #2
   114be:	6818      	ldr	r0, [r3, #0]
   114c0:	f7fa fbfe 	bl	bcc0 <realloc>
   114c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   114c6:	2800      	cmp	r0, #0
   114c8:	f000 823e 	beq.w	11948 <__ssvfscanf_r+0x15c4>
   114cc:	809e      	strh	r6, [r3, #4]
   114ce:	6018      	str	r0, [r3, #0]
   114d0:	f7ff ba9b 	b.w	10a0a <__ssvfscanf_r+0x686>
   114d4:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   114d8:	4293      	cmp	r3, r2
   114da:	f200 827f 	bhi.w	119dc <__ssvfscanf_r+0x1658>
   114de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   114e0:	3308      	adds	r3, #8
   114e2:	b29b      	uxth	r3, r3
   114e4:	0099      	lsls	r1, r3, #2
   114e6:	6810      	ldr	r0, [r2, #0]
   114e8:	64bb      	str	r3, [r7, #72]	; 0x48
   114ea:	f7fa fbe9 	bl	bcc0 <realloc>
   114ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   114f0:	2800      	cmp	r0, #0
   114f2:	f000 8228 	beq.w	11946 <__ssvfscanf_r+0x15c2>
   114f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   114f8:	8093      	strh	r3, [r2, #4]
   114fa:	6010      	str	r0, [r2, #0]
   114fc:	f7ff bb0e 	b.w	10b1c <__ssvfscanf_r+0x798>
   11500:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   11504:	4293      	cmp	r3, r2
   11506:	f200 8255 	bhi.w	119b4 <__ssvfscanf_r+0x1630>
   1150a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1150c:	3308      	adds	r3, #8
   1150e:	b29b      	uxth	r3, r3
   11510:	6810      	ldr	r0, [r2, #0]
   11512:	63f8      	str	r0, [r7, #60]	; 0x3c
   11514:	0099      	lsls	r1, r3, #2
   11516:	637b      	str	r3, [r7, #52]	; 0x34
   11518:	f7fa fbd2 	bl	bcc0 <realloc>
   1151c:	2800      	cmp	r0, #0
   1151e:	f000 8239 	beq.w	11994 <__ssvfscanf_r+0x1610>
   11522:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11526:	8093      	strh	r3, [r2, #4]
   11528:	6010      	str	r0, [r2, #0]
   1152a:	e570      	b.n	1100e <__ssvfscanf_r+0xc8a>
   1152c:	7882      	ldrb	r2, [r0, #2]
   1152e:	f044 0402 	orr.w	r4, r4, #2
   11532:	3002      	adds	r0, #2
   11534:	f7fe bfae 	b.w	10494 <__ssvfscanf_r+0x110>
   11538:	7882      	ldrb	r2, [r0, #2]
   1153a:	f044 0408 	orr.w	r4, r4, #8
   1153e:	3002      	adds	r0, #2
   11540:	f7fe bfa8 	b.w	10494 <__ssvfscanf_r+0x110>
   11544:	0763      	lsls	r3, r4, #29
   11546:	d458      	bmi.n	115fa <__ssvfscanf_r+0x1276>
   11548:	f014 0201 	ands.w	r2, r4, #1
   1154c:	f47f aa28 	bne.w	109a0 <__ssvfscanf_r+0x61c>
   11550:	07a6      	lsls	r6, r4, #30
   11552:	f57f aa25 	bpl.w	109a0 <__ssvfscanf_r+0x61c>
   11556:	4bb3      	ldr	r3, [pc, #716]	; (11824 <__ssvfscanf_r+0x14a0>)
   11558:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1155a:	4299      	cmp	r1, r3
   1155c:	4648      	mov	r0, r9
   1155e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11562:	f000 823d 	beq.w	119e0 <__ssvfscanf_r+0x165c>
   11566:	f001 fb95 	bl	12c94 <_strtoll_r>
   1156a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1156c:	f853 2b04 	ldr.w	r2, [r3], #4
   11570:	633b      	str	r3, [r7, #48]	; 0x30
   11572:	e9c2 0100 	strd	r0, r1, [r2]
   11576:	f7ff ba18 	b.w	109aa <__ssvfscanf_r+0x626>
   1157a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1157c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1157e:	f853 2b04 	ldr.w	r2, [r3], #4
   11582:	633b      	str	r3, [r7, #48]	; 0x30
   11584:	f882 a000 	strb.w	sl, [r2]
   11588:	f7fe bf23 	b.w	103d2 <__ssvfscanf_r+0x4e>
   1158c:	f8db 3000 	ldr.w	r3, [fp]
   11590:	4ea5      	ldr	r6, [pc, #660]	; (11828 <__ssvfscanf_r+0x14a4>)
   11592:	781a      	ldrb	r2, [r3, #0]
   11594:	5cb2      	ldrb	r2, [r6, r2]
   11596:	0712      	lsls	r2, r2, #28
   11598:	f53e af1b 	bmi.w	103d2 <__ssvfscanf_r+0x4e>
   1159c:	3301      	adds	r3, #1
   1159e:	f8cb 3000 	str.w	r3, [fp]
   115a2:	f8db 3004 	ldr.w	r3, [fp, #4]
   115a6:	f1b8 0f01 	cmp.w	r8, #1
   115aa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   115ae:	f8cb 3004 	str.w	r3, [fp, #4]
   115b2:	bf08      	it	eq
   115b4:	f10a 0a01 	addeq.w	sl, sl, #1
   115b8:	f43e af0b 	beq.w	103d2 <__ssvfscanf_r+0x4e>
   115bc:	2401      	movs	r4, #1
   115be:	e011      	b.n	115e4 <__ssvfscanf_r+0x1260>
   115c0:	f8db 3000 	ldr.w	r3, [fp]
   115c4:	781a      	ldrb	r2, [r3, #0]
   115c6:	5cb2      	ldrb	r2, [r6, r2]
   115c8:	0715      	lsls	r5, r2, #28
   115ca:	f103 0301 	add.w	r3, r3, #1
   115ce:	d411      	bmi.n	115f4 <__ssvfscanf_r+0x1270>
   115d0:	f8cb 3000 	str.w	r3, [fp]
   115d4:	f8db 3004 	ldr.w	r3, [fp, #4]
   115d8:	3401      	adds	r4, #1
   115da:	3b01      	subs	r3, #1
   115dc:	4544      	cmp	r4, r8
   115de:	f8cb 3004 	str.w	r3, [fp, #4]
   115e2:	d007      	beq.n	115f4 <__ssvfscanf_r+0x1270>
   115e4:	2b00      	cmp	r3, #0
   115e6:	dceb      	bgt.n	115c0 <__ssvfscanf_r+0x123c>
   115e8:	4659      	mov	r1, fp
   115ea:	4648      	mov	r0, r9
   115ec:	f002 fe0a 	bl	14204 <__ssrefill_r>
   115f0:	2800      	cmp	r0, #0
   115f2:	d0e5      	beq.n	115c0 <__ssvfscanf_r+0x123c>
   115f4:	44a2      	add	sl, r4
   115f6:	f7fe beec 	b.w	103d2 <__ssvfscanf_r+0x4e>
   115fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   115fc:	f853 2b04 	ldr.w	r2, [r3], #4
   11600:	633b      	str	r3, [r7, #48]	; 0x30
   11602:	8010      	strh	r0, [r2, #0]
   11604:	f7ff b9d1 	b.w	109aa <__ssvfscanf_r+0x626>
   11608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1160a:	2b00      	cmp	r3, #0
   1160c:	f000 816e 	beq.w	118ec <__ssvfscanf_r+0x1568>
   11610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11612:	f8d3 8000 	ldr.w	r8, [r3]
   11616:	88de      	ldrh	r6, [r3, #6]
   11618:	b176      	cbz	r6, 11638 <__ssvfscanf_r+0x12b4>
   1161a:	2400      	movs	r4, #0
   1161c:	f1a8 0504 	sub.w	r5, r8, #4
   11620:	46a1      	mov	r9, r4
   11622:	f855 3f04 	ldr.w	r3, [r5, #4]!
   11626:	6818      	ldr	r0, [r3, #0]
   11628:	f7fa f886 	bl	b738 <free>
   1162c:	3401      	adds	r4, #1
   1162e:	682b      	ldr	r3, [r5, #0]
   11630:	42a6      	cmp	r6, r4
   11632:	f8c3 9000 	str.w	r9, [r3]
   11636:	d1f4      	bne.n	11622 <__ssvfscanf_r+0x129e>
   11638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1163c:	647b      	str	r3, [r7, #68]	; 0x44
   1163e:	f1b8 0f00 	cmp.w	r8, #0
   11642:	f47e af9c 	bne.w	1057e <__ssvfscanf_r+0x1fa>
   11646:	f7fe bf9d 	b.w	10584 <__ssvfscanf_r+0x200>
   1164a:	4878      	ldr	r0, [pc, #480]	; (1182c <__ssvfscanf_r+0x14a8>)
   1164c:	633b      	str	r3, [r7, #48]	; 0x30
   1164e:	f7fc fb73 	bl	dd38 <nanf>
   11652:	ed84 0a00 	vstr	s0, [r4]
   11656:	e4ad      	b.n	10fb4 <__ssvfscanf_r+0xc30>
   11658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1165a:	63fc      	str	r4, [r7, #60]	; 0x3c
   1165c:	f852 5b04 	ldr.w	r5, [r2], #4
   11660:	633a      	str	r2, [r7, #48]	; 0x30
   11662:	64bc      	str	r4, [r7, #72]	; 0x48
   11664:	e46c      	b.n	10f40 <__ssvfscanf_r+0xbbc>
   11666:	b082      	sub	sp, #8
   11668:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1166c:	ab02      	add	r3, sp, #8
   1166e:	643b      	str	r3, [r7, #64]	; 0x40
   11670:	e612      	b.n	11298 <__ssvfscanf_r+0xf14>
   11672:	637b      	str	r3, [r7, #52]	; 0x34
   11674:	0053      	lsls	r3, r2, #1
   11676:	4620      	mov	r0, r4
   11678:	4619      	mov	r1, r3
   1167a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1167c:	f7fa fb20 	bl	bcc0 <realloc>
   11680:	4604      	mov	r4, r0
   11682:	2800      	cmp	r0, #0
   11684:	f000 80ad 	beq.w	117e2 <__ssvfscanf_r+0x145e>
   11688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1168a:	1985      	adds	r5, r0, r6
   1168c:	6018      	str	r0, [r3, #0]
   1168e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11690:	e475      	b.n	10f7e <__ssvfscanf_r+0xbfa>
   11692:	697d      	ldr	r5, [r7, #20]
   11694:	4629      	mov	r1, r5
   11696:	230a      	movs	r3, #10
   11698:	3101      	adds	r1, #1
   1169a:	4648      	mov	r0, r9
   1169c:	f7fb fce8 	bl	d070 <_strtol_r>
   116a0:	69bb      	ldr	r3, [r7, #24]
   116a2:	1ac2      	subs	r2, r0, r3
   116a4:	e59d      	b.n	111e2 <__ssvfscanf_r+0xe5e>
   116a6:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   116aa:	f853 1b04 	ldr.w	r1, [r3], #4
   116ae:	623a      	str	r2, [r7, #32]
   116b0:	64b9      	str	r1, [r7, #72]	; 0x48
   116b2:	633b      	str	r3, [r7, #48]	; 0x30
   116b4:	62ba      	str	r2, [r7, #40]	; 0x28
   116b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   116b8:	f7ff b9b2 	b.w	10a20 <__ssvfscanf_r+0x69c>
   116bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   116be:	64bc      	str	r4, [r7, #72]	; 0x48
   116c0:	f853 5b04 	ldr.w	r5, [r3], #4
   116c4:	633b      	str	r3, [r7, #48]	; 0x30
   116c6:	e4aa      	b.n	1101e <__ssvfscanf_r+0xc9a>
   116c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   116ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   116cc:	f853 4b04 	ldr.w	r4, [r3], #4
   116d0:	61ba      	str	r2, [r7, #24]
   116d2:	e9c7 2207 	strd	r2, r2, [r7, #28]
   116d6:	633b      	str	r3, [r7, #48]	; 0x30
   116d8:	f7ff ba2a 	b.w	10b30 <__ssvfscanf_r+0x7ac>
   116dc:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   116de:	6820      	ldr	r0, [r4, #0]
   116e0:	f7fa faee 	bl	bcc0 <realloc>
   116e4:	2800      	cmp	r0, #0
   116e6:	f47f aab3 	bne.w	10c50 <__ssvfscanf_r+0x8cc>
   116ea:	e463      	b.n	10fb4 <__ssvfscanf_r+0xc30>
   116ec:	4659      	mov	r1, fp
   116ee:	4648      	mov	r0, r9
   116f0:	637b      	str	r3, [r7, #52]	; 0x34
   116f2:	f002 fd87 	bl	14204 <__ssrefill_r>
   116f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   116f8:	2800      	cmp	r0, #0
   116fa:	f43f ac49 	beq.w	10f90 <__ssvfscanf_r+0xc0c>
   116fe:	e44d      	b.n	10f9c <__ssvfscanf_r+0xc18>
   11700:	6818      	ldr	r0, [r3, #0]
   11702:	461c      	mov	r4, r3
   11704:	f7fa fadc 	bl	bcc0 <realloc>
   11708:	2800      	cmp	r0, #0
   1170a:	f43f accc 	beq.w	110a6 <__ssvfscanf_r+0xd22>
   1170e:	6020      	str	r0, [r4, #0]
   11710:	e4c9      	b.n	110a6 <__ssvfscanf_r+0xd22>
   11712:	2500      	movs	r5, #0
   11714:	e637      	b.n	11386 <__ssvfscanf_r+0x1002>
   11716:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   11718:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1171c:	627e      	str	r6, [r7, #36]	; 0x24
   1171e:	4644      	mov	r4, r8
   11720:	2d00      	cmp	r5, #0
   11722:	f43f aa7c 	beq.w	10c1e <__ssvfscanf_r+0x89a>
   11726:	3d01      	subs	r5, #1
   11728:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   1172c:	465a      	mov	r2, fp
   1172e:	5d59      	ldrb	r1, [r3, r5]
   11730:	4648      	mov	r0, r9
   11732:	f002 fd27 	bl	14184 <_sungetc_r>
   11736:	2d00      	cmp	r5, #0
   11738:	d1f5      	bne.n	11726 <__ssvfscanf_r+0x13a2>
   1173a:	f7ff ba70 	b.w	10c1e <__ssvfscanf_r+0x89a>
   1173e:	4659      	mov	r1, fp
   11740:	4648      	mov	r0, r9
   11742:	f002 fd5f 	bl	14204 <__ssrefill_r>
   11746:	2800      	cmp	r0, #0
   11748:	f43f ae22 	beq.w	11390 <__ssvfscanf_r+0x100c>
   1174c:	627c      	str	r4, [r7, #36]	; 0x24
   1174e:	2d00      	cmp	r5, #0
   11750:	f47e af04 	bne.w	1055c <__ssvfscanf_r+0x1d8>
   11754:	e628      	b.n	113a8 <__ssvfscanf_r+0x1024>
   11756:	627c      	str	r4, [r7, #36]	; 0x24
   11758:	2d00      	cmp	r5, #0
   1175a:	f43f ae25 	beq.w	113a8 <__ssvfscanf_r+0x1024>
   1175e:	3d01      	subs	r5, #1
   11760:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   11764:	465a      	mov	r2, fp
   11766:	5d59      	ldrb	r1, [r3, r5]
   11768:	4648      	mov	r0, r9
   1176a:	f002 fd0b 	bl	14184 <_sungetc_r>
   1176e:	2d00      	cmp	r5, #0
   11770:	d1f5      	bne.n	1175e <__ssvfscanf_r+0x13da>
   11772:	e619      	b.n	113a8 <__ssvfscanf_r+0x1024>
   11774:	07e5      	lsls	r5, r4, #31
   11776:	d43c      	bmi.n	117f2 <__ssvfscanf_r+0x146e>
   11778:	07a4      	lsls	r4, r4, #30
   1177a:	d53a      	bpl.n	117f2 <__ssvfscanf_r+0x146e>
   1177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1177e:	64f9      	str	r1, [r7, #76]	; 0x4c
   11780:	f853 2b04 	ldr.w	r2, [r3], #4
   11784:	633b      	str	r3, [r7, #48]	; 0x30
   11786:	ea4f 73ea 	mov.w	r3, sl, asr #31
   1178a:	f8c2 a000 	str.w	sl, [r2]
   1178e:	6053      	str	r3, [r2, #4]
   11790:	f7fe be1f 	b.w	103d2 <__ssvfscanf_r+0x4e>
   11794:	ee18 9a10 	vmov	r9, s16
   11798:	461e      	mov	r6, r3
   1179a:	f7ff b814 	b.w	107c6 <__ssvfscanf_r+0x442>
   1179e:	2301      	movs	r3, #1
   117a0:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   117a4:	64bb      	str	r3, [r7, #72]	; 0x48
   117a6:	f7fe bff6 	b.w	10796 <__ssvfscanf_r+0x412>
   117aa:	f1b8 0f01 	cmp.w	r8, #1
   117ae:	bf38      	it	cc
   117b0:	f04f 0801 	movcc.w	r8, #1
   117b4:	f014 0301 	ands.w	r3, r4, #1
   117b8:	d13a      	bne.n	11830 <__ssvfscanf_r+0x14ac>
   117ba:	06e5      	lsls	r5, r4, #27
   117bc:	f100 8136 	bmi.w	11a2c <__ssvfscanf_r+0x16a8>
   117c0:	0624      	lsls	r4, r4, #24
   117c2:	f140 814c 	bpl.w	11a5e <__ssvfscanf_r+0x16da>
   117c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   117c8:	f853 5b04 	ldr.w	r5, [r3], #4
   117cc:	64bb      	str	r3, [r7, #72]	; 0x48
   117ce:	2d00      	cmp	r5, #0
   117d0:	f43e aecd 	beq.w	1056e <__ssvfscanf_r+0x1ea>
   117d4:	4640      	mov	r0, r8
   117d6:	f7f9 ffa7 	bl	b728 <malloc>
   117da:	4603      	mov	r3, r0
   117dc:	2800      	cmp	r0, #0
   117de:	f040 80dc 	bne.w	1199a <__ssvfscanf_r+0x1616>
   117e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   117e4:	2b00      	cmp	r3, #0
   117e6:	f000 8081 	beq.w	118ec <__ssvfscanf_r+0x1568>
   117ea:	f8d3 8000 	ldr.w	r8, [r3]
   117ee:	88de      	ldrh	r6, [r3, #6]
   117f0:	e712      	b.n	11618 <__ssvfscanf_r+0x1294>
   117f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   117f4:	64f9      	str	r1, [r7, #76]	; 0x4c
   117f6:	f853 2b04 	ldr.w	r2, [r3], #4
   117fa:	f8c2 a000 	str.w	sl, [r2]
   117fe:	633b      	str	r3, [r7, #48]	; 0x30
   11800:	f7fe bde7 	b.w	103d2 <__ssvfscanf_r+0x4e>
   11804:	462b      	mov	r3, r5
   11806:	6abd      	ldr	r5, [r7, #40]	; 0x28
   11808:	42ab      	cmp	r3, r5
   1180a:	f67e aeb0 	bls.w	1056e <__ssvfscanf_r+0x1ea>
   1180e:	461c      	mov	r4, r3
   11810:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   11814:	465a      	mov	r2, fp
   11816:	4648      	mov	r0, r9
   11818:	f002 fcb4 	bl	14184 <_sungetc_r>
   1181c:	42ac      	cmp	r4, r5
   1181e:	d1f7      	bne.n	11810 <__ssvfscanf_r+0x148c>
   11820:	f7fe bea5 	b.w	1056e <__ssvfscanf_r+0x1ea>
   11824:	000128d9 	.word	0x000128d9
   11828:	20000d25 	.word	0x20000d25
   1182c:	20000798 	.word	0x20000798
   11830:	f014 0310 	ands.w	r3, r4, #16
   11834:	637b      	str	r3, [r7, #52]	; 0x34
   11836:	d05e      	beq.n	118f6 <__ssvfscanf_r+0x1572>
   11838:	2500      	movs	r5, #0
   1183a:	63fd      	str	r5, [r7, #60]	; 0x3c
   1183c:	64bd      	str	r5, [r7, #72]	; 0x48
   1183e:	462e      	mov	r6, r5
   11840:	2400      	movs	r4, #0
   11842:	464b      	mov	r3, r9
   11844:	46c1      	mov	r9, r8
   11846:	46a8      	mov	r8, r5
   11848:	4625      	mov	r5, r4
   1184a:	461c      	mov	r4, r3
   1184c:	f7fb ff46 	bl	d6dc <__locale_mb_cur_max>
   11850:	42a8      	cmp	r0, r5
   11852:	f43e ae83 	beq.w	1055c <__ssvfscanf_r+0x1d8>
   11856:	e9db 3200 	ldrd	r3, r2, [fp]
   1185a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1185e:	3a01      	subs	r2, #1
   11860:	e9cb 3200 	strd	r3, r2, [fp]
   11864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11866:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   1186a:	2a03      	cmp	r2, #3
   1186c:	5541      	strb	r1, [r0, r5]
   1186e:	f105 0301 	add.w	r3, r5, #1
   11872:	f107 0568 	add.w	r5, r7, #104	; 0x68
   11876:	d102      	bne.n	1187e <__ssvfscanf_r+0x14fa>
   11878:	682a      	ldr	r2, [r5, #0]
   1187a:	2a04      	cmp	r2, #4
   1187c:	d006      	beq.n	1188c <__ssvfscanf_r+0x1508>
   1187e:	2208      	movs	r2, #8
   11880:	2100      	movs	r1, #0
   11882:	4628      	mov	r0, r5
   11884:	62bb      	str	r3, [r7, #40]	; 0x28
   11886:	f7fb fe2d 	bl	d4e4 <memset>
   1188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1188c:	9500      	str	r5, [sp, #0]
   1188e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   11892:	4631      	mov	r1, r6
   11894:	4620      	mov	r0, r4
   11896:	62bb      	str	r3, [r7, #40]	; 0x28
   11898:	f001 face 	bl	12e38 <_mbrtowc_r>
   1189c:	1c43      	adds	r3, r0, #1
   1189e:	6278      	str	r0, [r7, #36]	; 0x24
   118a0:	f43e ae5c 	beq.w	1055c <__ssvfscanf_r+0x1d8>
   118a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   118a6:	2800      	cmp	r0, #0
   118a8:	f040 8147 	bne.w	11b3a <__ssvfscanf_r+0x17b6>
   118ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   118ae:	b902      	cbnz	r2, 118b2 <__ssvfscanf_r+0x152e>
   118b0:	6032      	str	r2, [r6, #0]
   118b2:	449a      	add	sl, r3
   118b4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   118b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   118ba:	2b00      	cmp	r3, #0
   118bc:	f040 8175 	bne.w	11baa <__ssvfscanf_r+0x1826>
   118c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   118c2:	2b00      	cmp	r3, #0
   118c4:	f000 8170 	beq.w	11ba8 <__ssvfscanf_r+0x1824>
   118c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   118ca:	1af5      	subs	r5, r6, r3
   118cc:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   118d0:	f200 816a 	bhi.w	11ba8 <__ssvfscanf_r+0x1824>
   118d4:	4618      	mov	r0, r3
   118d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   118da:	f7fa f9f1 	bl	bcc0 <realloc>
   118de:	63f8      	str	r0, [r7, #60]	; 0x3c
   118e0:	2800      	cmp	r0, #0
   118e2:	f040 815c 	bne.w	11b9e <__ssvfscanf_r+0x181a>
   118e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   118e8:	2b00      	cmp	r3, #0
   118ea:	d12d      	bne.n	11948 <__ssvfscanf_r+0x15c4>
   118ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   118f0:	647b      	str	r3, [r7, #68]	; 0x44
   118f2:	f7fe be47 	b.w	10584 <__ssvfscanf_r+0x200>
   118f6:	0622      	lsls	r2, r4, #24
   118f8:	f140 808f 	bpl.w	11a1a <__ssvfscanf_r+0x1696>
   118fc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   118fe:	f854 3b04 	ldr.w	r3, [r4], #4
   11902:	64bb      	str	r3, [r7, #72]	; 0x48
   11904:	2b00      	cmp	r3, #0
   11906:	f43e ae32 	beq.w	1056e <__ssvfscanf_r+0x1ea>
   1190a:	2080      	movs	r0, #128	; 0x80
   1190c:	f7f9 ff0c 	bl	b728 <malloc>
   11910:	4606      	mov	r6, r0
   11912:	2800      	cmp	r0, #0
   11914:	d0e7      	beq.n	118e6 <__ssvfscanf_r+0x1562>
   11916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11918:	6018      	str	r0, [r3, #0]
   1191a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1191c:	88dd      	ldrh	r5, [r3, #6]
   1191e:	889a      	ldrh	r2, [r3, #4]
   11920:	4295      	cmp	r5, r2
   11922:	f0c0 80b3 	bcc.w	11a8c <__ssvfscanf_r+0x1708>
   11926:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1192a:	428a      	cmp	r2, r1
   1192c:	d856      	bhi.n	119dc <__ssvfscanf_r+0x1658>
   1192e:	3208      	adds	r2, #8
   11930:	b293      	uxth	r3, r2
   11932:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11934:	63fb      	str	r3, [r7, #60]	; 0x3c
   11936:	0099      	lsls	r1, r3, #2
   11938:	6810      	ldr	r0, [r2, #0]
   1193a:	f7fa f9c1 	bl	bcc0 <realloc>
   1193e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11940:	2800      	cmp	r0, #0
   11942:	f040 80ae 	bne.w	11aa2 <__ssvfscanf_r+0x171e>
   11946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11948:	88db      	ldrh	r3, [r3, #6]
   1194a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1194c:	461e      	mov	r6, r3
   1194e:	f8d2 8000 	ldr.w	r8, [r2]
   11952:	e661      	b.n	11618 <__ssvfscanf_r+0x1294>
   11954:	462b      	mov	r3, r5
   11956:	6abd      	ldr	r5, [r7, #40]	; 0x28
   11958:	42ab      	cmp	r3, r5
   1195a:	f67e ae08 	bls.w	1056e <__ssvfscanf_r+0x1ea>
   1195e:	461c      	mov	r4, r3
   11960:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   11964:	465a      	mov	r2, fp
   11966:	4648      	mov	r0, r9
   11968:	f002 fc0c 	bl	14184 <_sungetc_r>
   1196c:	42ac      	cmp	r4, r5
   1196e:	d1f7      	bne.n	11960 <__ssvfscanf_r+0x15dc>
   11970:	f7fe bdfd 	b.w	1056e <__ssvfscanf_r+0x1ea>
   11974:	4610      	mov	r0, r2
   11976:	00d9      	lsls	r1, r3, #3
   11978:	461e      	mov	r6, r3
   1197a:	f7fa f9a1 	bl	bcc0 <realloc>
   1197e:	62b8      	str	r0, [r7, #40]	; 0x28
   11980:	2800      	cmp	r0, #0
   11982:	d0b0      	beq.n	118e6 <__ssvfscanf_r+0x1562>
   11984:	1942      	adds	r2, r0, r5
   11986:	64ba      	str	r2, [r7, #72]	; 0x48
   11988:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1198a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   1198c:	6010      	str	r0, [r2, #0]
   1198e:	0073      	lsls	r3, r6, #1
   11990:	623b      	str	r3, [r7, #32]
   11992:	e4f8      	b.n	11386 <__ssvfscanf_r+0x1002>
   11994:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   11998:	e63e      	b.n	11618 <__ssvfscanf_r+0x1294>
   1199a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1199c:	6028      	str	r0, [r5, #0]
   1199e:	88ce      	ldrh	r6, [r1, #6]
   119a0:	888a      	ldrh	r2, [r1, #4]
   119a2:	4296      	cmp	r6, r2
   119a4:	f0c0 808e 	bcc.w	11ac4 <__ssvfscanf_r+0x1740>
   119a8:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   119ac:	428a      	cmp	r2, r1
   119ae:	6338      	str	r0, [r7, #48]	; 0x30
   119b0:	f240 80a5 	bls.w	11afe <__ssvfscanf_r+0x177a>
   119b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   119b6:	f8d3 8000 	ldr.w	r8, [r3]
   119ba:	e62d      	b.n	11618 <__ssvfscanf_r+0x1294>
   119bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   119be:	4295      	cmp	r5, r2
   119c0:	f67e add5 	bls.w	1056e <__ssvfscanf_r+0x1ea>
   119c4:	462c      	mov	r4, r5
   119c6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   119c8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   119cc:	465a      	mov	r2, fp
   119ce:	4648      	mov	r0, r9
   119d0:	f002 fbd8 	bl	14184 <_sungetc_r>
   119d4:	42ac      	cmp	r4, r5
   119d6:	d1f7      	bne.n	119c8 <__ssvfscanf_r+0x1644>
   119d8:	f7fe bdc9 	b.w	1056e <__ssvfscanf_r+0x1ea>
   119dc:	462b      	mov	r3, r5
   119de:	e7b4      	b.n	1194a <__ssvfscanf_r+0x15c6>
   119e0:	f001 fa28 	bl	12e34 <_strtoull_r>
   119e4:	e5c1      	b.n	1156a <__ssvfscanf_r+0x11e6>
   119e6:	f8d8 3000 	ldr.w	r3, [r8]
   119ea:	461d      	mov	r5, r3
   119ec:	3301      	adds	r3, #1
   119ee:	f47f a8d5 	bne.w	10b9c <__ssvfscanf_r+0x818>
   119f2:	462a      	mov	r2, r5
   119f4:	f7ff b8e8 	b.w	10bc8 <__ssvfscanf_r+0x844>
   119f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   119fa:	6818      	ldr	r0, [r3, #0]
   119fc:	f001 fa78 	bl	12ef0 <iswspace>
   11a00:	2800      	cmp	r0, #0
   11a02:	f47f aea8 	bne.w	11756 <__ssvfscanf_r+0x13d2>
   11a06:	2c03      	cmp	r4, #3
   11a08:	44aa      	add	sl, r5
   11a0a:	f47f a849 	bne.w	10aa0 <__ssvfscanf_r+0x71c>
   11a0e:	6833      	ldr	r3, [r6, #0]
   11a10:	2b04      	cmp	r3, #4
   11a12:	f47f a845 	bne.w	10aa0 <__ssvfscanf_r+0x71c>
   11a16:	f7ff b845 	b.w	10aa4 <__ssvfscanf_r+0x720>
   11a1a:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   11a1e:	f853 6b04 	ldr.w	r6, [r3], #4
   11a22:	633b      	str	r3, [r7, #48]	; 0x30
   11a24:	4615      	mov	r5, r2
   11a26:	63fa      	str	r2, [r7, #60]	; 0x3c
   11a28:	64ba      	str	r2, [r7, #72]	; 0x48
   11a2a:	e709      	b.n	11840 <__ssvfscanf_r+0x14bc>
   11a2c:	461c      	mov	r4, r3
   11a2e:	f8db 3004 	ldr.w	r3, [fp, #4]
   11a32:	4598      	cmp	r8, r3
   11a34:	dd39      	ble.n	11aaa <__ssvfscanf_r+0x1726>
   11a36:	f8db 2000 	ldr.w	r2, [fp]
   11a3a:	441a      	add	r2, r3
   11a3c:	f8cb 2000 	str.w	r2, [fp]
   11a40:	4659      	mov	r1, fp
   11a42:	4648      	mov	r0, r9
   11a44:	441c      	add	r4, r3
   11a46:	eba8 0803 	sub.w	r8, r8, r3
   11a4a:	f002 fbdb 	bl	14204 <__ssrefill_r>
   11a4e:	2800      	cmp	r0, #0
   11a50:	d0ed      	beq.n	11a2e <__ssvfscanf_r+0x16aa>
   11a52:	2c00      	cmp	r4, #0
   11a54:	f43e ad82 	beq.w	1055c <__ssvfscanf_r+0x1d8>
   11a58:	44a2      	add	sl, r4
   11a5a:	f7fe bcba 	b.w	103d2 <__ssvfscanf_r+0x4e>
   11a5e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   11a60:	4643      	mov	r3, r8
   11a62:	6829      	ldr	r1, [r5, #0]
   11a64:	f8cd b000 	str.w	fp, [sp]
   11a68:	2201      	movs	r2, #1
   11a6a:	4648      	mov	r0, r9
   11a6c:	f002 fbe8 	bl	14240 <_sfread_r>
   11a70:	4604      	mov	r4, r0
   11a72:	2800      	cmp	r0, #0
   11a74:	f43e ad72 	beq.w	1055c <__ssvfscanf_r+0x1d8>
   11a78:	3504      	adds	r5, #4
   11a7a:	64bd      	str	r5, [r7, #72]	; 0x48
   11a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   11a7e:	3301      	adds	r3, #1
   11a80:	647b      	str	r3, [r7, #68]	; 0x44
   11a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11a84:	633b      	str	r3, [r7, #48]	; 0x30
   11a86:	44a2      	add	sl, r4
   11a88:	f7fe bca3 	b.w	103d2 <__ssvfscanf_r+0x4e>
   11a8c:	6818      	ldr	r0, [r3, #0]
   11a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11a90:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   11a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11a96:	633c      	str	r4, [r7, #48]	; 0x30
   11a98:	3501      	adds	r5, #1
   11a9a:	80dd      	strh	r5, [r3, #6]
   11a9c:	63fe      	str	r6, [r7, #60]	; 0x3c
   11a9e:	2520      	movs	r5, #32
   11aa0:	e6ce      	b.n	11840 <__ssvfscanf_r+0x14bc>
   11aa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11aa4:	8093      	strh	r3, [r2, #4]
   11aa6:	6010      	str	r0, [r2, #0]
   11aa8:	e7f1      	b.n	11a8e <__ssvfscanf_r+0x170a>
   11aaa:	eba3 0308 	sub.w	r3, r3, r8
   11aae:	f8cb 3004 	str.w	r3, [fp, #4]
   11ab2:	f8db 3000 	ldr.w	r3, [fp]
   11ab6:	4444      	add	r4, r8
   11ab8:	4443      	add	r3, r8
   11aba:	f8cb 3000 	str.w	r3, [fp]
   11abe:	44a2      	add	sl, r4
   11ac0:	f7fe bc87 	b.w	103d2 <__ssvfscanf_r+0x4e>
   11ac4:	680a      	ldr	r2, [r1, #0]
   11ac6:	63fa      	str	r2, [r7, #60]	; 0x3c
   11ac8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11aca:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   11ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11ad0:	3601      	adds	r6, #1
   11ad2:	b2b6      	uxth	r6, r6
   11ad4:	80d6      	strh	r6, [r2, #6]
   11ad6:	4619      	mov	r1, r3
   11ad8:	f8cd b000 	str.w	fp, [sp]
   11adc:	4643      	mov	r3, r8
   11ade:	2201      	movs	r2, #1
   11ae0:	4648      	mov	r0, r9
   11ae2:	f002 fbad 	bl	14240 <_sfread_r>
   11ae6:	4604      	mov	r4, r0
   11ae8:	b1d8      	cbz	r0, 11b22 <__ssvfscanf_r+0x179e>
   11aea:	4580      	cmp	r8, r0
   11aec:	d9c6      	bls.n	11a7c <__ssvfscanf_r+0x16f8>
   11aee:	6828      	ldr	r0, [r5, #0]
   11af0:	4621      	mov	r1, r4
   11af2:	f7fa f8e5 	bl	bcc0 <realloc>
   11af6:	2800      	cmp	r0, #0
   11af8:	d0c0      	beq.n	11a7c <__ssvfscanf_r+0x16f8>
   11afa:	6028      	str	r0, [r5, #0]
   11afc:	e7be      	b.n	11a7c <__ssvfscanf_r+0x16f8>
   11afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11b00:	3208      	adds	r2, #8
   11b02:	b294      	uxth	r4, r2
   11b04:	681a      	ldr	r2, [r3, #0]
   11b06:	637a      	str	r2, [r7, #52]	; 0x34
   11b08:	4610      	mov	r0, r2
   11b0a:	00a1      	lsls	r1, r4, #2
   11b0c:	f7fa f8d8 	bl	bcc0 <realloc>
   11b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   11b12:	63f8      	str	r0, [r7, #60]	; 0x3c
   11b14:	2800      	cmp	r0, #0
   11b16:	d05b      	beq.n	11bd0 <__ssvfscanf_r+0x184c>
   11b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11b1a:	809c      	strh	r4, [r3, #4]
   11b1c:	6018      	str	r0, [r3, #0]
   11b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11b20:	e7d2      	b.n	11ac8 <__ssvfscanf_r+0x1744>
   11b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   11b24:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   11b28:	2b00      	cmp	r3, #0
   11b2a:	f43f ad75 	beq.w	11618 <__ssvfscanf_r+0x1294>
   11b2e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   11b32:	065b      	lsls	r3, r3, #25
   11b34:	f57e ad1d 	bpl.w	10572 <__ssvfscanf_r+0x1ee>
   11b38:	e56a      	b.n	11610 <__ssvfscanf_r+0x128c>
   11b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11b3c:	3202      	adds	r2, #2
   11b3e:	d11d      	bne.n	11b7c <__ssvfscanf_r+0x17f8>
   11b40:	f8db 2004 	ldr.w	r2, [fp, #4]
   11b44:	2a00      	cmp	r2, #0
   11b46:	461d      	mov	r5, r3
   11b48:	f73f ae80 	bgt.w	1184c <__ssvfscanf_r+0x14c8>
   11b4c:	4659      	mov	r1, fp
   11b4e:	4620      	mov	r0, r4
   11b50:	f002 fb58 	bl	14204 <__ssrefill_r>
   11b54:	b9e0      	cbnz	r0, 11b90 <__ssvfscanf_r+0x180c>
   11b56:	f1b9 0f00 	cmp.w	r9, #0
   11b5a:	f47f ae77 	bne.w	1184c <__ssvfscanf_r+0x14c8>
   11b5e:	4645      	mov	r5, r8
   11b60:	46a1      	mov	r9, r4
   11b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11b64:	b123      	cbz	r3, 11b70 <__ssvfscanf_r+0x17ec>
   11b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11b68:	1af1      	subs	r1, r6, r3
   11b6a:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   11b6e:	d827      	bhi.n	11bc0 <__ssvfscanf_r+0x183c>
   11b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11b72:	2b00      	cmp	r3, #0
   11b74:	f47e ac2d 	bne.w	103d2 <__ssvfscanf_r+0x4e>
   11b78:	f7ff ba1c 	b.w	10fb4 <__ssvfscanf_r+0xc30>
   11b7c:	449a      	add	sl, r3
   11b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11b80:	2b03      	cmp	r3, #3
   11b82:	f47f ae97 	bne.w	118b4 <__ssvfscanf_r+0x1530>
   11b86:	682b      	ldr	r3, [r5, #0]
   11b88:	2b04      	cmp	r3, #4
   11b8a:	f47f ae93 	bne.w	118b4 <__ssvfscanf_r+0x1530>
   11b8e:	e693      	b.n	118b8 <__ssvfscanf_r+0x1534>
   11b90:	46a1      	mov	r9, r4
   11b92:	462c      	mov	r4, r5
   11b94:	4645      	mov	r5, r8
   11b96:	2c00      	cmp	r4, #0
   11b98:	d0e3      	beq.n	11b62 <__ssvfscanf_r+0x17de>
   11b9a:	f7fe bcdf 	b.w	1055c <__ssvfscanf_r+0x1d8>
   11b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   11ba0:	1946      	adds	r6, r0, r5
   11ba2:	6010      	str	r0, [r2, #0]
   11ba4:	ea4f 0848 	mov.w	r8, r8, lsl #1
   11ba8:	3604      	adds	r6, #4
   11baa:	f8db 3004 	ldr.w	r3, [fp, #4]
   11bae:	2b00      	cmp	r3, #0
   11bb0:	f04f 0500 	mov.w	r5, #0
   11bb4:	ddca      	ble.n	11b4c <__ssvfscanf_r+0x17c8>
   11bb6:	f1b9 0f00 	cmp.w	r9, #0
   11bba:	f47f ae47 	bne.w	1184c <__ssvfscanf_r+0x14c8>
   11bbe:	e7ce      	b.n	11b5e <__ssvfscanf_r+0x17da>
   11bc0:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   11bc2:	6820      	ldr	r0, [r4, #0]
   11bc4:	f7fa f87c 	bl	bcc0 <realloc>
   11bc8:	2800      	cmp	r0, #0
   11bca:	d0d1      	beq.n	11b70 <__ssvfscanf_r+0x17ec>
   11bcc:	6020      	str	r0, [r4, #0]
   11bce:	e7cf      	b.n	11b70 <__ssvfscanf_r+0x17ec>
   11bd0:	4690      	mov	r8, r2
   11bd2:	e521      	b.n	11618 <__ssvfscanf_r+0x1294>

00011bd4 <_Balloc>:
   11bd4:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11bd6:	b570      	push	{r4, r5, r6, lr}
   11bd8:	4605      	mov	r5, r0
   11bda:	460c      	mov	r4, r1
   11bdc:	b14b      	cbz	r3, 11bf2 <_Balloc+0x1e>
   11bde:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   11be2:	b180      	cbz	r0, 11c06 <_Balloc+0x32>
   11be4:	6802      	ldr	r2, [r0, #0]
   11be6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   11bea:	2300      	movs	r3, #0
   11bec:	e9c0 3303 	strd	r3, r3, [r0, #12]
   11bf0:	bd70      	pop	{r4, r5, r6, pc}
   11bf2:	2221      	movs	r2, #33	; 0x21
   11bf4:	2104      	movs	r1, #4
   11bf6:	f001 fabb 	bl	13170 <_calloc_r>
   11bfa:	4603      	mov	r3, r0
   11bfc:	6468      	str	r0, [r5, #68]	; 0x44
   11bfe:	2800      	cmp	r0, #0
   11c00:	d1ed      	bne.n	11bde <_Balloc+0xa>
   11c02:	2000      	movs	r0, #0
   11c04:	bd70      	pop	{r4, r5, r6, pc}
   11c06:	2101      	movs	r1, #1
   11c08:	fa01 f604 	lsl.w	r6, r1, r4
   11c0c:	1d72      	adds	r2, r6, #5
   11c0e:	0092      	lsls	r2, r2, #2
   11c10:	4628      	mov	r0, r5
   11c12:	f001 faad 	bl	13170 <_calloc_r>
   11c16:	2800      	cmp	r0, #0
   11c18:	d0f3      	beq.n	11c02 <_Balloc+0x2e>
   11c1a:	e9c0 4601 	strd	r4, r6, [r0, #4]
   11c1e:	e7e4      	b.n	11bea <_Balloc+0x16>

00011c20 <_Bfree>:
   11c20:	b131      	cbz	r1, 11c30 <_Bfree+0x10>
   11c22:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11c24:	684a      	ldr	r2, [r1, #4]
   11c26:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   11c2a:	6008      	str	r0, [r1, #0]
   11c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   11c30:	4770      	bx	lr
   11c32:	bf00      	nop

00011c34 <__multadd>:
   11c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c38:	690e      	ldr	r6, [r1, #16]
   11c3a:	4680      	mov	r8, r0
   11c3c:	460f      	mov	r7, r1
   11c3e:	461d      	mov	r5, r3
   11c40:	f101 0e14 	add.w	lr, r1, #20
   11c44:	2000      	movs	r0, #0
   11c46:	f8de 1000 	ldr.w	r1, [lr]
   11c4a:	b28c      	uxth	r4, r1
   11c4c:	fb02 5304 	mla	r3, r2, r4, r5
   11c50:	0c09      	lsrs	r1, r1, #16
   11c52:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   11c56:	fb02 cc01 	mla	ip, r2, r1, ip
   11c5a:	3001      	adds	r0, #1
   11c5c:	b29c      	uxth	r4, r3
   11c5e:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   11c62:	4286      	cmp	r6, r0
   11c64:	f84e 4b04 	str.w	r4, [lr], #4
   11c68:	ea4f 451c 	mov.w	r5, ip, lsr #16
   11c6c:	dceb      	bgt.n	11c46 <__multadd+0x12>
   11c6e:	b13d      	cbz	r5, 11c80 <__multadd+0x4c>
   11c70:	68bb      	ldr	r3, [r7, #8]
   11c72:	42b3      	cmp	r3, r6
   11c74:	dd07      	ble.n	11c86 <__multadd+0x52>
   11c76:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   11c7a:	3601      	adds	r6, #1
   11c7c:	615d      	str	r5, [r3, #20]
   11c7e:	613e      	str	r6, [r7, #16]
   11c80:	4638      	mov	r0, r7
   11c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11c86:	6879      	ldr	r1, [r7, #4]
   11c88:	4640      	mov	r0, r8
   11c8a:	3101      	adds	r1, #1
   11c8c:	f7ff ffa2 	bl	11bd4 <_Balloc>
   11c90:	4604      	mov	r4, r0
   11c92:	b1b0      	cbz	r0, 11cc2 <__multadd+0x8e>
   11c94:	693a      	ldr	r2, [r7, #16]
   11c96:	3202      	adds	r2, #2
   11c98:	f107 010c 	add.w	r1, r7, #12
   11c9c:	0092      	lsls	r2, r2, #2
   11c9e:	300c      	adds	r0, #12
   11ca0:	f7f7 fe54 	bl	994c <memcpy>
   11ca4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   11ca8:	687a      	ldr	r2, [r7, #4]
   11caa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11cae:	6039      	str	r1, [r7, #0]
   11cb0:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   11cb4:	4627      	mov	r7, r4
   11cb6:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   11cba:	3601      	adds	r6, #1
   11cbc:	615d      	str	r5, [r3, #20]
   11cbe:	613e      	str	r6, [r7, #16]
   11cc0:	e7de      	b.n	11c80 <__multadd+0x4c>
   11cc2:	4b03      	ldr	r3, [pc, #12]	; (11cd0 <__multadd+0x9c>)
   11cc4:	4803      	ldr	r0, [pc, #12]	; (11cd4 <__multadd+0xa0>)
   11cc6:	4622      	mov	r2, r4
   11cc8:	21ba      	movs	r1, #186	; 0xba
   11cca:	f001 f965 	bl	12f98 <__assert_func>
   11cce:	bf00      	nop
   11cd0:	20000b38 	.word	0x20000b38
   11cd4:	20000cb8 	.word	0x20000cb8

00011cd8 <__s2b>:
   11cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11cdc:	4617      	mov	r7, r2
   11cde:	4a27      	ldr	r2, [pc, #156]	; (11d7c <__s2b+0xa4>)
   11ce0:	461e      	mov	r6, r3
   11ce2:	3308      	adds	r3, #8
   11ce4:	460c      	mov	r4, r1
   11ce6:	2e09      	cmp	r6, #9
   11ce8:	fb82 1203 	smull	r1, r2, r2, r3
   11cec:	ea4f 73e3 	mov.w	r3, r3, asr #31
   11cf0:	4605      	mov	r5, r0
   11cf2:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   11cf6:	dd39      	ble.n	11d6c <__s2b+0x94>
   11cf8:	f04f 0c01 	mov.w	ip, #1
   11cfc:	2100      	movs	r1, #0
   11cfe:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   11d02:	4563      	cmp	r3, ip
   11d04:	f101 0101 	add.w	r1, r1, #1
   11d08:	dcf9      	bgt.n	11cfe <__s2b+0x26>
   11d0a:	4628      	mov	r0, r5
   11d0c:	f7ff ff62 	bl	11bd4 <_Balloc>
   11d10:	4601      	mov	r1, r0
   11d12:	b368      	cbz	r0, 11d70 <__s2b+0x98>
   11d14:	9b08      	ldr	r3, [sp, #32]
   11d16:	6143      	str	r3, [r0, #20]
   11d18:	2f09      	cmp	r7, #9
   11d1a:	f04f 0301 	mov.w	r3, #1
   11d1e:	6103      	str	r3, [r0, #16]
   11d20:	dc12      	bgt.n	11d48 <__s2b+0x70>
   11d22:	340a      	adds	r4, #10
   11d24:	2709      	movs	r7, #9
   11d26:	42be      	cmp	r6, r7
   11d28:	dd0b      	ble.n	11d42 <__s2b+0x6a>
   11d2a:	1bf2      	subs	r2, r6, r7
   11d2c:	18a6      	adds	r6, r4, r2
   11d2e:	f814 3b01 	ldrb.w	r3, [r4], #1
   11d32:	220a      	movs	r2, #10
   11d34:	3b30      	subs	r3, #48	; 0x30
   11d36:	4628      	mov	r0, r5
   11d38:	f7ff ff7c 	bl	11c34 <__multadd>
   11d3c:	42a6      	cmp	r6, r4
   11d3e:	4601      	mov	r1, r0
   11d40:	d1f5      	bne.n	11d2e <__s2b+0x56>
   11d42:	4608      	mov	r0, r1
   11d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11d48:	f104 0909 	add.w	r9, r4, #9
   11d4c:	46c8      	mov	r8, r9
   11d4e:	443c      	add	r4, r7
   11d50:	f818 3b01 	ldrb.w	r3, [r8], #1
   11d54:	220a      	movs	r2, #10
   11d56:	3b30      	subs	r3, #48	; 0x30
   11d58:	4628      	mov	r0, r5
   11d5a:	f7ff ff6b 	bl	11c34 <__multadd>
   11d5e:	45a0      	cmp	r8, r4
   11d60:	4601      	mov	r1, r0
   11d62:	d1f5      	bne.n	11d50 <__s2b+0x78>
   11d64:	f1a7 0408 	sub.w	r4, r7, #8
   11d68:	444c      	add	r4, r9
   11d6a:	e7dc      	b.n	11d26 <__s2b+0x4e>
   11d6c:	2100      	movs	r1, #0
   11d6e:	e7cc      	b.n	11d0a <__s2b+0x32>
   11d70:	460a      	mov	r2, r1
   11d72:	4b03      	ldr	r3, [pc, #12]	; (11d80 <__s2b+0xa8>)
   11d74:	4803      	ldr	r0, [pc, #12]	; (11d84 <__s2b+0xac>)
   11d76:	21d3      	movs	r1, #211	; 0xd3
   11d78:	f001 f90e 	bl	12f98 <__assert_func>
   11d7c:	38e38e39 	.word	0x38e38e39
   11d80:	20000b38 	.word	0x20000b38
   11d84:	20000cb8 	.word	0x20000cb8

00011d88 <__hi0bits>:
   11d88:	0c03      	lsrs	r3, r0, #16
   11d8a:	041b      	lsls	r3, r3, #16
   11d8c:	b9d3      	cbnz	r3, 11dc4 <__hi0bits+0x3c>
   11d8e:	0400      	lsls	r0, r0, #16
   11d90:	2310      	movs	r3, #16
   11d92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   11d96:	bf04      	itt	eq
   11d98:	0200      	lsleq	r0, r0, #8
   11d9a:	3308      	addeq	r3, #8
   11d9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   11da0:	bf04      	itt	eq
   11da2:	0100      	lsleq	r0, r0, #4
   11da4:	3304      	addeq	r3, #4
   11da6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   11daa:	bf04      	itt	eq
   11dac:	0080      	lsleq	r0, r0, #2
   11dae:	3302      	addeq	r3, #2
   11db0:	2800      	cmp	r0, #0
   11db2:	db05      	blt.n	11dc0 <__hi0bits+0x38>
   11db4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   11db8:	f103 0301 	add.w	r3, r3, #1
   11dbc:	bf08      	it	eq
   11dbe:	2320      	moveq	r3, #32
   11dc0:	4618      	mov	r0, r3
   11dc2:	4770      	bx	lr
   11dc4:	2300      	movs	r3, #0
   11dc6:	e7e4      	b.n	11d92 <__hi0bits+0xa>

00011dc8 <__lo0bits>:
   11dc8:	6803      	ldr	r3, [r0, #0]
   11dca:	f013 0207 	ands.w	r2, r3, #7
   11dce:	d008      	beq.n	11de2 <__lo0bits+0x1a>
   11dd0:	07d9      	lsls	r1, r3, #31
   11dd2:	d41f      	bmi.n	11e14 <__lo0bits+0x4c>
   11dd4:	079a      	lsls	r2, r3, #30
   11dd6:	d522      	bpl.n	11e1e <__lo0bits+0x56>
   11dd8:	085b      	lsrs	r3, r3, #1
   11dda:	6003      	str	r3, [r0, #0]
   11ddc:	2201      	movs	r2, #1
   11dde:	4610      	mov	r0, r2
   11de0:	4770      	bx	lr
   11de2:	b299      	uxth	r1, r3
   11de4:	b909      	cbnz	r1, 11dea <__lo0bits+0x22>
   11de6:	0c1b      	lsrs	r3, r3, #16
   11de8:	2210      	movs	r2, #16
   11dea:	b2d9      	uxtb	r1, r3
   11dec:	b909      	cbnz	r1, 11df2 <__lo0bits+0x2a>
   11dee:	3208      	adds	r2, #8
   11df0:	0a1b      	lsrs	r3, r3, #8
   11df2:	0719      	lsls	r1, r3, #28
   11df4:	bf04      	itt	eq
   11df6:	091b      	lsreq	r3, r3, #4
   11df8:	3204      	addeq	r2, #4
   11dfa:	0799      	lsls	r1, r3, #30
   11dfc:	bf04      	itt	eq
   11dfe:	089b      	lsreq	r3, r3, #2
   11e00:	3202      	addeq	r2, #2
   11e02:	07d9      	lsls	r1, r3, #31
   11e04:	d403      	bmi.n	11e0e <__lo0bits+0x46>
   11e06:	085b      	lsrs	r3, r3, #1
   11e08:	f102 0201 	add.w	r2, r2, #1
   11e0c:	d005      	beq.n	11e1a <__lo0bits+0x52>
   11e0e:	6003      	str	r3, [r0, #0]
   11e10:	4610      	mov	r0, r2
   11e12:	4770      	bx	lr
   11e14:	2200      	movs	r2, #0
   11e16:	4610      	mov	r0, r2
   11e18:	4770      	bx	lr
   11e1a:	2220      	movs	r2, #32
   11e1c:	e7df      	b.n	11dde <__lo0bits+0x16>
   11e1e:	089b      	lsrs	r3, r3, #2
   11e20:	2202      	movs	r2, #2
   11e22:	6003      	str	r3, [r0, #0]
   11e24:	4610      	mov	r0, r2
   11e26:	4770      	bx	lr

00011e28 <__i2b>:
   11e28:	b538      	push	{r3, r4, r5, lr}
   11e2a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11e2c:	4604      	mov	r4, r0
   11e2e:	460d      	mov	r5, r1
   11e30:	b14b      	cbz	r3, 11e46 <__i2b+0x1e>
   11e32:	6858      	ldr	r0, [r3, #4]
   11e34:	b1b0      	cbz	r0, 11e64 <__i2b+0x3c>
   11e36:	6802      	ldr	r2, [r0, #0]
   11e38:	605a      	str	r2, [r3, #4]
   11e3a:	2200      	movs	r2, #0
   11e3c:	2301      	movs	r3, #1
   11e3e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   11e42:	60c2      	str	r2, [r0, #12]
   11e44:	bd38      	pop	{r3, r4, r5, pc}
   11e46:	2221      	movs	r2, #33	; 0x21
   11e48:	2104      	movs	r1, #4
   11e4a:	f001 f991 	bl	13170 <_calloc_r>
   11e4e:	4603      	mov	r3, r0
   11e50:	6460      	str	r0, [r4, #68]	; 0x44
   11e52:	2800      	cmp	r0, #0
   11e54:	d1ed      	bne.n	11e32 <__i2b+0xa>
   11e56:	4b09      	ldr	r3, [pc, #36]	; (11e7c <__i2b+0x54>)
   11e58:	4809      	ldr	r0, [pc, #36]	; (11e80 <__i2b+0x58>)
   11e5a:	2200      	movs	r2, #0
   11e5c:	f240 1145 	movw	r1, #325	; 0x145
   11e60:	f001 f89a 	bl	12f98 <__assert_func>
   11e64:	221c      	movs	r2, #28
   11e66:	2101      	movs	r1, #1
   11e68:	4620      	mov	r0, r4
   11e6a:	f001 f981 	bl	13170 <_calloc_r>
   11e6e:	2800      	cmp	r0, #0
   11e70:	d0f1      	beq.n	11e56 <__i2b+0x2e>
   11e72:	2201      	movs	r2, #1
   11e74:	2302      	movs	r3, #2
   11e76:	e9c0 2301 	strd	r2, r3, [r0, #4]
   11e7a:	e7de      	b.n	11e3a <__i2b+0x12>
   11e7c:	20000b38 	.word	0x20000b38
   11e80:	20000cb8 	.word	0x20000cb8

00011e84 <__multiply>:
   11e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e88:	690e      	ldr	r6, [r1, #16]
   11e8a:	6915      	ldr	r5, [r2, #16]
   11e8c:	42ae      	cmp	r6, r5
   11e8e:	b085      	sub	sp, #20
   11e90:	4688      	mov	r8, r1
   11e92:	4614      	mov	r4, r2
   11e94:	db05      	blt.n	11ea2 <__multiply+0x1e>
   11e96:	462a      	mov	r2, r5
   11e98:	4623      	mov	r3, r4
   11e9a:	4635      	mov	r5, r6
   11e9c:	460c      	mov	r4, r1
   11e9e:	4616      	mov	r6, r2
   11ea0:	4698      	mov	r8, r3
   11ea2:	68a3      	ldr	r3, [r4, #8]
   11ea4:	6861      	ldr	r1, [r4, #4]
   11ea6:	19af      	adds	r7, r5, r6
   11ea8:	42bb      	cmp	r3, r7
   11eaa:	bfb8      	it	lt
   11eac:	3101      	addlt	r1, #1
   11eae:	f7ff fe91 	bl	11bd4 <_Balloc>
   11eb2:	9001      	str	r0, [sp, #4]
   11eb4:	2800      	cmp	r0, #0
   11eb6:	f000 8087 	beq.w	11fc8 <__multiply+0x144>
   11eba:	9b01      	ldr	r3, [sp, #4]
   11ebc:	f103 0914 	add.w	r9, r3, #20
   11ec0:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   11ec4:	45d1      	cmp	r9, sl
   11ec6:	d205      	bcs.n	11ed4 <__multiply+0x50>
   11ec8:	464b      	mov	r3, r9
   11eca:	2200      	movs	r2, #0
   11ecc:	f843 2b04 	str.w	r2, [r3], #4
   11ed0:	459a      	cmp	sl, r3
   11ed2:	d8fb      	bhi.n	11ecc <__multiply+0x48>
   11ed4:	f108 0814 	add.w	r8, r8, #20
   11ed8:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   11edc:	f104 0314 	add.w	r3, r4, #20
   11ee0:	45d8      	cmp	r8, fp
   11ee2:	461a      	mov	r2, r3
   11ee4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   11ee8:	d25f      	bcs.n	11faa <__multiply+0x126>
   11eea:	1b2b      	subs	r3, r5, r4
   11eec:	3b15      	subs	r3, #21
   11eee:	f023 0303 	bic.w	r3, r3, #3
   11ef2:	3304      	adds	r3, #4
   11ef4:	3415      	adds	r4, #21
   11ef6:	42a5      	cmp	r5, r4
   11ef8:	bf38      	it	cc
   11efa:	2304      	movcc	r3, #4
   11efc:	e9cd a702 	strd	sl, r7, [sp, #8]
   11f00:	46ac      	mov	ip, r5
   11f02:	461f      	mov	r7, r3
   11f04:	4692      	mov	sl, r2
   11f06:	e005      	b.n	11f14 <__multiply+0x90>
   11f08:	0c09      	lsrs	r1, r1, #16
   11f0a:	d129      	bne.n	11f60 <__multiply+0xdc>
   11f0c:	45c3      	cmp	fp, r8
   11f0e:	f109 0904 	add.w	r9, r9, #4
   11f12:	d948      	bls.n	11fa6 <__multiply+0x122>
   11f14:	f858 1b04 	ldr.w	r1, [r8], #4
   11f18:	b28d      	uxth	r5, r1
   11f1a:	2d00      	cmp	r5, #0
   11f1c:	d0f4      	beq.n	11f08 <__multiply+0x84>
   11f1e:	4656      	mov	r6, sl
   11f20:	464c      	mov	r4, r9
   11f22:	2300      	movs	r3, #0
   11f24:	f856 1b04 	ldr.w	r1, [r6], #4
   11f28:	6822      	ldr	r2, [r4, #0]
   11f2a:	fa1f fe81 	uxth.w	lr, r1
   11f2e:	b290      	uxth	r0, r2
   11f30:	0c09      	lsrs	r1, r1, #16
   11f32:	fb05 000e 	mla	r0, r5, lr, r0
   11f36:	0c12      	lsrs	r2, r2, #16
   11f38:	4403      	add	r3, r0
   11f3a:	fb05 2201 	mla	r2, r5, r1, r2
   11f3e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   11f42:	b29b      	uxth	r3, r3
   11f44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   11f48:	45b4      	cmp	ip, r6
   11f4a:	f844 3b04 	str.w	r3, [r4], #4
   11f4e:	ea4f 4312 	mov.w	r3, r2, lsr #16
   11f52:	d8e7      	bhi.n	11f24 <__multiply+0xa0>
   11f54:	f849 3007 	str.w	r3, [r9, r7]
   11f58:	f858 1c04 	ldr.w	r1, [r8, #-4]
   11f5c:	0c09      	lsrs	r1, r1, #16
   11f5e:	d0d5      	beq.n	11f0c <__multiply+0x88>
   11f60:	f8d9 3000 	ldr.w	r3, [r9]
   11f64:	4650      	mov	r0, sl
   11f66:	461a      	mov	r2, r3
   11f68:	464c      	mov	r4, r9
   11f6a:	2600      	movs	r6, #0
   11f6c:	8805      	ldrh	r5, [r0, #0]
   11f6e:	0c12      	lsrs	r2, r2, #16
   11f70:	fb01 2205 	mla	r2, r1, r5, r2
   11f74:	4416      	add	r6, r2
   11f76:	b29b      	uxth	r3, r3
   11f78:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   11f7c:	f844 3b04 	str.w	r3, [r4], #4
   11f80:	f850 5b04 	ldr.w	r5, [r0], #4
   11f84:	6822      	ldr	r2, [r4, #0]
   11f86:	0c2d      	lsrs	r5, r5, #16
   11f88:	b293      	uxth	r3, r2
   11f8a:	fb01 3305 	mla	r3, r1, r5, r3
   11f8e:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   11f92:	4584      	cmp	ip, r0
   11f94:	ea4f 4613 	mov.w	r6, r3, lsr #16
   11f98:	d8e8      	bhi.n	11f6c <__multiply+0xe8>
   11f9a:	45c3      	cmp	fp, r8
   11f9c:	f849 3007 	str.w	r3, [r9, r7]
   11fa0:	f109 0904 	add.w	r9, r9, #4
   11fa4:	d8b6      	bhi.n	11f14 <__multiply+0x90>
   11fa6:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   11faa:	2f00      	cmp	r7, #0
   11fac:	dc02      	bgt.n	11fb4 <__multiply+0x130>
   11fae:	e005      	b.n	11fbc <__multiply+0x138>
   11fb0:	3f01      	subs	r7, #1
   11fb2:	d003      	beq.n	11fbc <__multiply+0x138>
   11fb4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   11fb8:	2b00      	cmp	r3, #0
   11fba:	d0f9      	beq.n	11fb0 <__multiply+0x12c>
   11fbc:	9b01      	ldr	r3, [sp, #4]
   11fbe:	4618      	mov	r0, r3
   11fc0:	611f      	str	r7, [r3, #16]
   11fc2:	b005      	add	sp, #20
   11fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fc8:	4b03      	ldr	r3, [pc, #12]	; (11fd8 <__multiply+0x154>)
   11fca:	4804      	ldr	r0, [pc, #16]	; (11fdc <__multiply+0x158>)
   11fcc:	9a01      	ldr	r2, [sp, #4]
   11fce:	f44f 71b1 	mov.w	r1, #354	; 0x162
   11fd2:	f000 ffe1 	bl	12f98 <__assert_func>
   11fd6:	bf00      	nop
   11fd8:	20000b38 	.word	0x20000b38
   11fdc:	20000cb8 	.word	0x20000cb8

00011fe0 <__pow5mult>:
   11fe0:	f012 0303 	ands.w	r3, r2, #3
   11fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11fe8:	4614      	mov	r4, r2
   11fea:	4606      	mov	r6, r0
   11fec:	d132      	bne.n	12054 <__pow5mult+0x74>
   11fee:	460d      	mov	r5, r1
   11ff0:	10a4      	asrs	r4, r4, #2
   11ff2:	d020      	beq.n	12036 <__pow5mult+0x56>
   11ff4:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   11ff8:	f1b8 0f00 	cmp.w	r8, #0
   11ffc:	d033      	beq.n	12066 <__pow5mult+0x86>
   11ffe:	07e3      	lsls	r3, r4, #31
   12000:	f04f 0700 	mov.w	r7, #0
   12004:	d407      	bmi.n	12016 <__pow5mult+0x36>
   12006:	1064      	asrs	r4, r4, #1
   12008:	d015      	beq.n	12036 <__pow5mult+0x56>
   1200a:	f8d8 0000 	ldr.w	r0, [r8]
   1200e:	b1a8      	cbz	r0, 1203c <__pow5mult+0x5c>
   12010:	4680      	mov	r8, r0
   12012:	07e3      	lsls	r3, r4, #31
   12014:	d5f7      	bpl.n	12006 <__pow5mult+0x26>
   12016:	4642      	mov	r2, r8
   12018:	4629      	mov	r1, r5
   1201a:	4630      	mov	r0, r6
   1201c:	f7ff ff32 	bl	11e84 <__multiply>
   12020:	b1b5      	cbz	r5, 12050 <__pow5mult+0x70>
   12022:	6869      	ldr	r1, [r5, #4]
   12024:	6c73      	ldr	r3, [r6, #68]	; 0x44
   12026:	1064      	asrs	r4, r4, #1
   12028:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   1202c:	602a      	str	r2, [r5, #0]
   1202e:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   12032:	4605      	mov	r5, r0
   12034:	d1e9      	bne.n	1200a <__pow5mult+0x2a>
   12036:	4628      	mov	r0, r5
   12038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1203c:	4642      	mov	r2, r8
   1203e:	4641      	mov	r1, r8
   12040:	4630      	mov	r0, r6
   12042:	f7ff ff1f 	bl	11e84 <__multiply>
   12046:	f8c8 0000 	str.w	r0, [r8]
   1204a:	6007      	str	r7, [r0, #0]
   1204c:	4680      	mov	r8, r0
   1204e:	e7e0      	b.n	12012 <__pow5mult+0x32>
   12050:	4605      	mov	r5, r0
   12052:	e7d8      	b.n	12006 <__pow5mult+0x26>
   12054:	3b01      	subs	r3, #1
   12056:	4a0f      	ldr	r2, [pc, #60]	; (12094 <__pow5mult+0xb4>)
   12058:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1205c:	2300      	movs	r3, #0
   1205e:	f7ff fde9 	bl	11c34 <__multadd>
   12062:	4605      	mov	r5, r0
   12064:	e7c4      	b.n	11ff0 <__pow5mult+0x10>
   12066:	2101      	movs	r1, #1
   12068:	4630      	mov	r0, r6
   1206a:	f7ff fdb3 	bl	11bd4 <_Balloc>
   1206e:	4680      	mov	r8, r0
   12070:	b140      	cbz	r0, 12084 <__pow5mult+0xa4>
   12072:	2301      	movs	r3, #1
   12074:	f240 2271 	movw	r2, #625	; 0x271
   12078:	e9c0 3204 	strd	r3, r2, [r0, #16]
   1207c:	2300      	movs	r3, #0
   1207e:	6430      	str	r0, [r6, #64]	; 0x40
   12080:	6003      	str	r3, [r0, #0]
   12082:	e7bc      	b.n	11ffe <__pow5mult+0x1e>
   12084:	4b04      	ldr	r3, [pc, #16]	; (12098 <__pow5mult+0xb8>)
   12086:	4805      	ldr	r0, [pc, #20]	; (1209c <__pow5mult+0xbc>)
   12088:	4642      	mov	r2, r8
   1208a:	f240 1145 	movw	r1, #325	; 0x145
   1208e:	f000 ff83 	bl	12f98 <__assert_func>
   12092:	bf00      	nop
   12094:	20007dfc 	.word	0x20007dfc
   12098:	20000b38 	.word	0x20000b38
   1209c:	20000cb8 	.word	0x20000cb8

000120a0 <__lshift>:
   120a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   120a4:	460d      	mov	r5, r1
   120a6:	4614      	mov	r4, r2
   120a8:	692f      	ldr	r7, [r5, #16]
   120aa:	68ab      	ldr	r3, [r5, #8]
   120ac:	6849      	ldr	r1, [r1, #4]
   120ae:	eb07 1762 	add.w	r7, r7, r2, asr #5
   120b2:	1c7e      	adds	r6, r7, #1
   120b4:	429e      	cmp	r6, r3
   120b6:	4680      	mov	r8, r0
   120b8:	ea4f 1962 	mov.w	r9, r2, asr #5
   120bc:	dd04      	ble.n	120c8 <__lshift+0x28>
   120be:	005b      	lsls	r3, r3, #1
   120c0:	429e      	cmp	r6, r3
   120c2:	f101 0101 	add.w	r1, r1, #1
   120c6:	dcfa      	bgt.n	120be <__lshift+0x1e>
   120c8:	4640      	mov	r0, r8
   120ca:	f7ff fd83 	bl	11bd4 <_Balloc>
   120ce:	4684      	mov	ip, r0
   120d0:	2800      	cmp	r0, #0
   120d2:	d052      	beq.n	1217a <__lshift+0xda>
   120d4:	f1b9 0f00 	cmp.w	r9, #0
   120d8:	f100 0214 	add.w	r2, r0, #20
   120dc:	dd0e      	ble.n	120fc <__lshift+0x5c>
   120de:	f109 0105 	add.w	r1, r9, #5
   120e2:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   120e6:	4613      	mov	r3, r2
   120e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   120ec:	2000      	movs	r0, #0
   120ee:	f843 0b04 	str.w	r0, [r3], #4
   120f2:	428b      	cmp	r3, r1
   120f4:	d1fb      	bne.n	120ee <__lshift+0x4e>
   120f6:	f1ae 0314 	sub.w	r3, lr, #20
   120fa:	441a      	add	r2, r3
   120fc:	6929      	ldr	r1, [r5, #16]
   120fe:	f105 0314 	add.w	r3, r5, #20
   12102:	f014 0e1f 	ands.w	lr, r4, #31
   12106:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1210a:	d02e      	beq.n	1216a <__lshift+0xca>
   1210c:	f1ce 0920 	rsb	r9, lr, #32
   12110:	4610      	mov	r0, r2
   12112:	f04f 0a00 	mov.w	sl, #0
   12116:	681c      	ldr	r4, [r3, #0]
   12118:	fa04 f40e 	lsl.w	r4, r4, lr
   1211c:	ea44 040a 	orr.w	r4, r4, sl
   12120:	f840 4b04 	str.w	r4, [r0], #4
   12124:	f853 4b04 	ldr.w	r4, [r3], #4
   12128:	4299      	cmp	r1, r3
   1212a:	fa24 fa09 	lsr.w	sl, r4, r9
   1212e:	d8f2      	bhi.n	12116 <__lshift+0x76>
   12130:	1b4b      	subs	r3, r1, r5
   12132:	3b15      	subs	r3, #21
   12134:	f023 0303 	bic.w	r3, r3, #3
   12138:	3304      	adds	r3, #4
   1213a:	f105 0015 	add.w	r0, r5, #21
   1213e:	4281      	cmp	r1, r0
   12140:	bf38      	it	cc
   12142:	2304      	movcc	r3, #4
   12144:	f1ba 0f00 	cmp.w	sl, #0
   12148:	bf18      	it	ne
   1214a:	4637      	movne	r7, r6
   1214c:	f842 a003 	str.w	sl, [r2, r3]
   12150:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   12154:	686a      	ldr	r2, [r5, #4]
   12156:	f8cc 7010 	str.w	r7, [ip, #16]
   1215a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1215e:	6029      	str	r1, [r5, #0]
   12160:	4660      	mov	r0, ip
   12162:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   12166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1216a:	3a04      	subs	r2, #4
   1216c:	f853 0b04 	ldr.w	r0, [r3], #4
   12170:	f842 0f04 	str.w	r0, [r2, #4]!
   12174:	4299      	cmp	r1, r3
   12176:	d8f9      	bhi.n	1216c <__lshift+0xcc>
   12178:	e7ea      	b.n	12150 <__lshift+0xb0>
   1217a:	4b03      	ldr	r3, [pc, #12]	; (12188 <__lshift+0xe8>)
   1217c:	4803      	ldr	r0, [pc, #12]	; (1218c <__lshift+0xec>)
   1217e:	4662      	mov	r2, ip
   12180:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   12184:	f000 ff08 	bl	12f98 <__assert_func>
   12188:	20000b38 	.word	0x20000b38
   1218c:	20000cb8 	.word	0x20000cb8

00012190 <__mcmp>:
   12190:	690b      	ldr	r3, [r1, #16]
   12192:	4684      	mov	ip, r0
   12194:	6900      	ldr	r0, [r0, #16]
   12196:	1ac0      	subs	r0, r0, r3
   12198:	d116      	bne.n	121c8 <__mcmp+0x38>
   1219a:	f10c 0c14 	add.w	ip, ip, #20
   1219e:	3114      	adds	r1, #20
   121a0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   121a4:	b410      	push	{r4}
   121a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   121aa:	e001      	b.n	121b0 <__mcmp+0x20>
   121ac:	4594      	cmp	ip, r2
   121ae:	d208      	bcs.n	121c2 <__mcmp+0x32>
   121b0:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   121b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   121b8:	428c      	cmp	r4, r1
   121ba:	d0f7      	beq.n	121ac <__mcmp+0x1c>
   121bc:	d205      	bcs.n	121ca <__mcmp+0x3a>
   121be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121c2:	f85d 4b04 	ldr.w	r4, [sp], #4
   121c6:	4770      	bx	lr
   121c8:	4770      	bx	lr
   121ca:	2001      	movs	r0, #1
   121cc:	f85d 4b04 	ldr.w	r4, [sp], #4
   121d0:	4770      	bx	lr
   121d2:	bf00      	nop

000121d4 <__mdiff>:
   121d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121d8:	690f      	ldr	r7, [r1, #16]
   121da:	6913      	ldr	r3, [r2, #16]
   121dc:	1aff      	subs	r7, r7, r3
   121de:	2f00      	cmp	r7, #0
   121e0:	460e      	mov	r6, r1
   121e2:	4690      	mov	r8, r2
   121e4:	d17f      	bne.n	122e6 <__mdiff+0x112>
   121e6:	f101 0514 	add.w	r5, r1, #20
   121ea:	3214      	adds	r2, #20
   121ec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   121f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   121f4:	e001      	b.n	121fa <__mdiff+0x26>
   121f6:	429d      	cmp	r5, r3
   121f8:	d278      	bcs.n	122ec <__mdiff+0x118>
   121fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   121fe:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   12202:	42a1      	cmp	r1, r4
   12204:	d0f7      	beq.n	121f6 <__mdiff+0x22>
   12206:	d369      	bcc.n	122dc <__mdiff+0x108>
   12208:	6871      	ldr	r1, [r6, #4]
   1220a:	f7ff fce3 	bl	11bd4 <_Balloc>
   1220e:	4681      	mov	r9, r0
   12210:	2800      	cmp	r0, #0
   12212:	d077      	beq.n	12304 <__mdiff+0x130>
   12214:	6935      	ldr	r5, [r6, #16]
   12216:	f8d8 2010 	ldr.w	r2, [r8, #16]
   1221a:	60c7      	str	r7, [r0, #12]
   1221c:	f108 0e14 	add.w	lr, r8, #20
   12220:	f106 0014 	add.w	r0, r6, #20
   12224:	f109 0a14 	add.w	sl, r9, #20
   12228:	f106 0110 	add.w	r1, r6, #16
   1222c:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   12230:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   12234:	4656      	mov	r6, sl
   12236:	f04f 0c00 	mov.w	ip, #0
   1223a:	f85e 4b04 	ldr.w	r4, [lr], #4
   1223e:	f851 bf04 	ldr.w	fp, [r1, #4]!
   12242:	b2a3      	uxth	r3, r4
   12244:	fa1c fc8b 	uxtah	ip, ip, fp
   12248:	ebac 0303 	sub.w	r3, ip, r3
   1224c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   12250:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   12254:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   12258:	b29b      	uxth	r3, r3
   1225a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   1225e:	4572      	cmp	r2, lr
   12260:	f846 3b04 	str.w	r3, [r6], #4
   12264:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   12268:	d8e7      	bhi.n	1223a <__mdiff+0x66>
   1226a:	eba2 0108 	sub.w	r1, r2, r8
   1226e:	3915      	subs	r1, #21
   12270:	f108 0815 	add.w	r8, r8, #21
   12274:	4542      	cmp	r2, r8
   12276:	f021 0403 	bic.w	r4, r1, #3
   1227a:	f104 0404 	add.w	r4, r4, #4
   1227e:	bf38      	it	cc
   12280:	2404      	movcc	r4, #4
   12282:	4420      	add	r0, r4
   12284:	f021 0203 	bic.w	r2, r1, #3
   12288:	bf38      	it	cc
   1228a:	2200      	movcc	r2, #0
   1228c:	4287      	cmp	r7, r0
   1228e:	4452      	add	r2, sl
   12290:	4454      	add	r4, sl
   12292:	d918      	bls.n	122c6 <__mdiff+0xf2>
   12294:	4626      	mov	r6, r4
   12296:	4601      	mov	r1, r0
   12298:	f851 3b04 	ldr.w	r3, [r1], #4
   1229c:	fa1c fc83 	uxtah	ip, ip, r3
   122a0:	ea4f 422c 	mov.w	r2, ip, asr #16
   122a4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   122a8:	fa1f fc8c 	uxth.w	ip, ip
   122ac:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   122b0:	428f      	cmp	r7, r1
   122b2:	f846 3b04 	str.w	r3, [r6], #4
   122b6:	ea4f 4c22 	mov.w	ip, r2, asr #16
   122ba:	d8ed      	bhi.n	12298 <__mdiff+0xc4>
   122bc:	3f01      	subs	r7, #1
   122be:	1a3f      	subs	r7, r7, r0
   122c0:	f027 0703 	bic.w	r7, r7, #3
   122c4:	19e2      	adds	r2, r4, r7
   122c6:	b923      	cbnz	r3, 122d2 <__mdiff+0xfe>
   122c8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   122cc:	3d01      	subs	r5, #1
   122ce:	2b00      	cmp	r3, #0
   122d0:	d0fa      	beq.n	122c8 <__mdiff+0xf4>
   122d2:	f8c9 5010 	str.w	r5, [r9, #16]
   122d6:	4648      	mov	r0, r9
   122d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122dc:	4633      	mov	r3, r6
   122de:	2701      	movs	r7, #1
   122e0:	4646      	mov	r6, r8
   122e2:	4698      	mov	r8, r3
   122e4:	e790      	b.n	12208 <__mdiff+0x34>
   122e6:	dbf9      	blt.n	122dc <__mdiff+0x108>
   122e8:	2700      	movs	r7, #0
   122ea:	e78d      	b.n	12208 <__mdiff+0x34>
   122ec:	2100      	movs	r1, #0
   122ee:	f7ff fc71 	bl	11bd4 <_Balloc>
   122f2:	4681      	mov	r9, r0
   122f4:	b168      	cbz	r0, 12312 <__mdiff+0x13e>
   122f6:	2201      	movs	r2, #1
   122f8:	2300      	movs	r3, #0
   122fa:	e9c9 2304 	strd	r2, r3, [r9, #16]
   122fe:	4648      	mov	r0, r9
   12300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12304:	4b06      	ldr	r3, [pc, #24]	; (12320 <__mdiff+0x14c>)
   12306:	4807      	ldr	r0, [pc, #28]	; (12324 <__mdiff+0x150>)
   12308:	464a      	mov	r2, r9
   1230a:	f240 2145 	movw	r1, #581	; 0x245
   1230e:	f000 fe43 	bl	12f98 <__assert_func>
   12312:	4b03      	ldr	r3, [pc, #12]	; (12320 <__mdiff+0x14c>)
   12314:	4803      	ldr	r0, [pc, #12]	; (12324 <__mdiff+0x150>)
   12316:	464a      	mov	r2, r9
   12318:	f240 2137 	movw	r1, #567	; 0x237
   1231c:	f000 fe3c 	bl	12f98 <__assert_func>
   12320:	20000b38 	.word	0x20000b38
   12324:	20000cb8 	.word	0x20000cb8

00012328 <__ulp>:
   12328:	b082      	sub	sp, #8
   1232a:	ed8d 0b00 	vstr	d0, [sp]
   1232e:	4b16      	ldr	r3, [pc, #88]	; (12388 <__ulp+0x60>)
   12330:	9a01      	ldr	r2, [sp, #4]
   12332:	4013      	ands	r3, r2
   12334:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   12338:	2b00      	cmp	r3, #0
   1233a:	dd06      	ble.n	1234a <__ulp+0x22>
   1233c:	2200      	movs	r2, #0
   1233e:	4619      	mov	r1, r3
   12340:	4610      	mov	r0, r2
   12342:	ec41 0b10 	vmov	d0, r0, r1
   12346:	b002      	add	sp, #8
   12348:	4770      	bx	lr
   1234a:	425b      	negs	r3, r3
   1234c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   12350:	ea4f 5223 	mov.w	r2, r3, asr #20
   12354:	da09      	bge.n	1236a <__ulp+0x42>
   12356:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1235a:	4113      	asrs	r3, r2
   1235c:	2200      	movs	r2, #0
   1235e:	4619      	mov	r1, r3
   12360:	4610      	mov	r0, r2
   12362:	ec41 0b10 	vmov	d0, r0, r1
   12366:	b002      	add	sp, #8
   12368:	4770      	bx	lr
   1236a:	f1a2 0314 	sub.w	r3, r2, #20
   1236e:	2b1e      	cmp	r3, #30
   12370:	bfda      	itte	le
   12372:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   12376:	40da      	lsrle	r2, r3
   12378:	2201      	movgt	r2, #1
   1237a:	2300      	movs	r3, #0
   1237c:	4619      	mov	r1, r3
   1237e:	4610      	mov	r0, r2
   12380:	ec41 0b10 	vmov	d0, r0, r1
   12384:	b002      	add	sp, #8
   12386:	4770      	bx	lr
   12388:	7ff00000 	.word	0x7ff00000

0001238c <__b2d>:
   1238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1238e:	6904      	ldr	r4, [r0, #16]
   12390:	f100 0614 	add.w	r6, r0, #20
   12394:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   12398:	1f27      	subs	r7, r4, #4
   1239a:	f854 5c04 	ldr.w	r5, [r4, #-4]
   1239e:	4628      	mov	r0, r5
   123a0:	f7ff fcf2 	bl	11d88 <__hi0bits>
   123a4:	f1c0 0320 	rsb	r3, r0, #32
   123a8:	280a      	cmp	r0, #10
   123aa:	600b      	str	r3, [r1, #0]
   123ac:	dd1b      	ble.n	123e6 <__b2d+0x5a>
   123ae:	42be      	cmp	r6, r7
   123b0:	d20b      	bcs.n	123ca <__b2d+0x3e>
   123b2:	380b      	subs	r0, #11
   123b4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   123b8:	d12e      	bne.n	12418 <__b2d+0x8c>
   123ba:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   123be:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   123c2:	460a      	mov	r2, r1
   123c4:	ec43 2b10 	vmov	d0, r2, r3
   123c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   123ca:	f1b0 010b 	subs.w	r1, r0, #11
   123ce:	d0f4      	beq.n	123ba <__b2d+0x2e>
   123d0:	fa05 f101 	lsl.w	r1, r5, r1
   123d4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   123d8:	2100      	movs	r1, #0
   123da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   123de:	460a      	mov	r2, r1
   123e0:	ec43 2b10 	vmov	d0, r2, r3
   123e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   123e6:	f1c0 0c0b 	rsb	ip, r0, #11
   123ea:	fa25 f10c 	lsr.w	r1, r5, ip
   123ee:	42be      	cmp	r6, r7
   123f0:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   123f4:	bf38      	it	cc
   123f6:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
   123fa:	f100 0015 	add.w	r0, r0, #21
   123fe:	bf34      	ite	cc
   12400:	fa21 f10c 	lsrcc.w	r1, r1, ip
   12404:	2100      	movcs	r1, #0
   12406:	fa05 f000 	lsl.w	r0, r5, r0
   1240a:	4301      	orrs	r1, r0
   1240c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   12410:	460a      	mov	r2, r1
   12412:	ec43 2b10 	vmov	d0, r2, r3
   12416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12418:	f1c0 0c20 	rsb	ip, r0, #32
   1241c:	4085      	lsls	r5, r0
   1241e:	fa21 f30c 	lsr.w	r3, r1, ip
   12422:	ea45 0703 	orr.w	r7, r5, r3
   12426:	f1a4 0508 	sub.w	r5, r4, #8
   1242a:	42ae      	cmp	r6, r5
   1242c:	fa01 f100 	lsl.w	r1, r1, r0
   12430:	bf3c      	itt	cc
   12432:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
   12436:	fa20 f00c 	lsrcc.w	r0, r0, ip
   1243a:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   1243e:	bf38      	it	cc
   12440:	4301      	orrcc	r1, r0
   12442:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   12446:	460a      	mov	r2, r1
   12448:	ec43 2b10 	vmov	d0, r2, r3
   1244c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1244e:	bf00      	nop

00012450 <__d2b>:
   12450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12454:	4688      	mov	r8, r1
   12456:	b083      	sub	sp, #12
   12458:	2101      	movs	r1, #1
   1245a:	ec57 6b10 	vmov	r6, r7, d0
   1245e:	4615      	mov	r5, r2
   12460:	f7ff fbb8 	bl	11bd4 <_Balloc>
   12464:	4604      	mov	r4, r0
   12466:	2800      	cmp	r0, #0
   12468:	d051      	beq.n	1250e <__d2b+0xbe>
   1246a:	f3c7 590a 	ubfx	r9, r7, #20, #11
   1246e:	f3c7 0313 	ubfx	r3, r7, #0, #20
   12472:	f1b9 0f00 	cmp.w	r9, #0
   12476:	d001      	beq.n	1247c <__d2b+0x2c>
   12478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1247c:	2e00      	cmp	r6, #0
   1247e:	9301      	str	r3, [sp, #4]
   12480:	d118      	bne.n	124b4 <__d2b+0x64>
   12482:	a801      	add	r0, sp, #4
   12484:	f7ff fca0 	bl	11dc8 <__lo0bits>
   12488:	9a01      	ldr	r2, [sp, #4]
   1248a:	6162      	str	r2, [r4, #20]
   1248c:	2201      	movs	r2, #1
   1248e:	f100 0320 	add.w	r3, r0, #32
   12492:	6122      	str	r2, [r4, #16]
   12494:	f1b9 0f00 	cmp.w	r9, #0
   12498:	d025      	beq.n	124e6 <__d2b+0x96>
   1249a:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   1249e:	eb09 0203 	add.w	r2, r9, r3
   124a2:	4620      	mov	r0, r4
   124a4:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   124a8:	f8c8 2000 	str.w	r2, [r8]
   124ac:	602b      	str	r3, [r5, #0]
   124ae:	b003      	add	sp, #12
   124b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   124b4:	4668      	mov	r0, sp
   124b6:	9600      	str	r6, [sp, #0]
   124b8:	f7ff fc86 	bl	11dc8 <__lo0bits>
   124bc:	4603      	mov	r3, r0
   124be:	b310      	cbz	r0, 12506 <__d2b+0xb6>
   124c0:	e9dd 0200 	ldrd	r0, r2, [sp]
   124c4:	f1c3 0120 	rsb	r1, r3, #32
   124c8:	fa02 f101 	lsl.w	r1, r2, r1
   124cc:	4301      	orrs	r1, r0
   124ce:	40da      	lsrs	r2, r3
   124d0:	6161      	str	r1, [r4, #20]
   124d2:	9201      	str	r2, [sp, #4]
   124d4:	2a00      	cmp	r2, #0
   124d6:	61a2      	str	r2, [r4, #24]
   124d8:	bf14      	ite	ne
   124da:	2202      	movne	r2, #2
   124dc:	2201      	moveq	r2, #1
   124de:	6122      	str	r2, [r4, #16]
   124e0:	f1b9 0f00 	cmp.w	r9, #0
   124e4:	d1d9      	bne.n	1249a <__d2b+0x4a>
   124e6:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   124ea:	f8c8 3000 	str.w	r3, [r8]
   124ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   124f2:	6918      	ldr	r0, [r3, #16]
   124f4:	f7ff fc48 	bl	11d88 <__hi0bits>
   124f8:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   124fc:	4620      	mov	r0, r4
   124fe:	602b      	str	r3, [r5, #0]
   12500:	b003      	add	sp, #12
   12502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12506:	9a00      	ldr	r2, [sp, #0]
   12508:	6162      	str	r2, [r4, #20]
   1250a:	9a01      	ldr	r2, [sp, #4]
   1250c:	e7e2      	b.n	124d4 <__d2b+0x84>
   1250e:	4b03      	ldr	r3, [pc, #12]	; (1251c <__d2b+0xcc>)
   12510:	4803      	ldr	r0, [pc, #12]	; (12520 <__d2b+0xd0>)
   12512:	4622      	mov	r2, r4
   12514:	f240 310f 	movw	r1, #783	; 0x30f
   12518:	f000 fd3e 	bl	12f98 <__assert_func>
   1251c:	20000b38 	.word	0x20000b38
   12520:	20000cb8 	.word	0x20000cb8

00012524 <__ratio>:
   12524:	b5f0      	push	{r4, r5, r6, r7, lr}
   12526:	b083      	sub	sp, #12
   12528:	460e      	mov	r6, r1
   1252a:	4669      	mov	r1, sp
   1252c:	4607      	mov	r7, r0
   1252e:	f7ff ff2d 	bl	1238c <__b2d>
   12532:	a901      	add	r1, sp, #4
   12534:	4630      	mov	r0, r6
   12536:	ec55 4b10 	vmov	r4, r5, d0
   1253a:	eeb0 7b40 	vmov.f64	d7, d0
   1253e:	f7ff ff25 	bl	1238c <__b2d>
   12542:	6933      	ldr	r3, [r6, #16]
   12544:	693a      	ldr	r2, [r7, #16]
   12546:	1ad2      	subs	r2, r2, r3
   12548:	e9dd 3100 	ldrd	r3, r1, [sp]
   1254c:	1a5b      	subs	r3, r3, r1
   1254e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   12552:	2b00      	cmp	r3, #0
   12554:	dd09      	ble.n	1256a <__ratio+0x46>
   12556:	ee17 2a90 	vmov	r2, s15
   1255a:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   1255e:	ec45 4b17 	vmov	d7, r4, r5
   12562:	ee87 0b00 	vdiv.f64	d0, d7, d0
   12566:	b003      	add	sp, #12
   12568:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1256a:	ee10 2a90 	vmov	r2, s1
   1256e:	ec51 0b10 	vmov	r0, r1, d0
   12572:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   12576:	eb02 5103 	add.w	r1, r2, r3, lsl #20
   1257a:	ec41 0b10 	vmov	d0, r0, r1
   1257e:	ee87 0b00 	vdiv.f64	d0, d7, d0
   12582:	b003      	add	sp, #12
   12584:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12586:	bf00      	nop

00012588 <__copybits>:
   12588:	3901      	subs	r1, #1
   1258a:	1149      	asrs	r1, r1, #5
   1258c:	f101 0c01 	add.w	ip, r1, #1
   12590:	6911      	ldr	r1, [r2, #16]
   12592:	f102 0314 	add.w	r3, r2, #20
   12596:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1259a:	428b      	cmp	r3, r1
   1259c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   125a0:	d217      	bcs.n	125d2 <__copybits+0x4a>
   125a2:	b510      	push	{r4, lr}
   125a4:	f1a0 0e04 	sub.w	lr, r0, #4
   125a8:	f853 4b04 	ldr.w	r4, [r3], #4
   125ac:	f84e 4f04 	str.w	r4, [lr, #4]!
   125b0:	4299      	cmp	r1, r3
   125b2:	d8f9      	bhi.n	125a8 <__copybits+0x20>
   125b4:	1a8a      	subs	r2, r1, r2
   125b6:	f1a2 0315 	sub.w	r3, r2, #21
   125ba:	f023 0303 	bic.w	r3, r3, #3
   125be:	3304      	adds	r3, #4
   125c0:	4418      	add	r0, r3
   125c2:	4584      	cmp	ip, r0
   125c4:	d904      	bls.n	125d0 <__copybits+0x48>
   125c6:	2300      	movs	r3, #0
   125c8:	f840 3b04 	str.w	r3, [r0], #4
   125cc:	4584      	cmp	ip, r0
   125ce:	d8fb      	bhi.n	125c8 <__copybits+0x40>
   125d0:	bd10      	pop	{r4, pc}
   125d2:	4584      	cmp	ip, r0
   125d4:	d905      	bls.n	125e2 <__copybits+0x5a>
   125d6:	2300      	movs	r3, #0
   125d8:	f840 3b04 	str.w	r3, [r0], #4
   125dc:	4584      	cmp	ip, r0
   125de:	d8fb      	bhi.n	125d8 <__copybits+0x50>
   125e0:	4770      	bx	lr
   125e2:	4770      	bx	lr

000125e4 <__any_on>:
   125e4:	6903      	ldr	r3, [r0, #16]
   125e6:	114a      	asrs	r2, r1, #5
   125e8:	4293      	cmp	r3, r2
   125ea:	f100 0014 	add.w	r0, r0, #20
   125ee:	da09      	bge.n	12604 <__any_on+0x20>
   125f0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   125f4:	e002      	b.n	125fc <__any_on+0x18>
   125f6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   125fa:	b9c2      	cbnz	r2, 1262e <__any_on+0x4a>
   125fc:	4283      	cmp	r3, r0
   125fe:	d8fa      	bhi.n	125f6 <__any_on+0x12>
   12600:	2000      	movs	r0, #0
   12602:	4770      	bx	lr
   12604:	dd10      	ble.n	12628 <__any_on+0x44>
   12606:	f011 011f 	ands.w	r1, r1, #31
   1260a:	d00d      	beq.n	12628 <__any_on+0x44>
   1260c:	b410      	push	{r4}
   1260e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   12612:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   12616:	fa24 f201 	lsr.w	r2, r4, r1
   1261a:	408a      	lsls	r2, r1
   1261c:	4294      	cmp	r4, r2
   1261e:	d00c      	beq.n	1263a <__any_on+0x56>
   12620:	2001      	movs	r0, #1
   12622:	f85d 4b04 	ldr.w	r4, [sp], #4
   12626:	4770      	bx	lr
   12628:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   1262c:	e7e6      	b.n	125fc <__any_on+0x18>
   1262e:	2001      	movs	r0, #1
   12630:	4770      	bx	lr
   12632:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   12636:	2a00      	cmp	r2, #0
   12638:	d1f2      	bne.n	12620 <__any_on+0x3c>
   1263a:	4283      	cmp	r3, r0
   1263c:	d8f9      	bhi.n	12632 <__any_on+0x4e>
   1263e:	2000      	movs	r0, #0
   12640:	f85d 4b04 	ldr.w	r4, [sp], #4
   12644:	4770      	bx	lr
   12646:	bf00      	nop

00012648 <_fclose_r>:
   12648:	b570      	push	{r4, r5, r6, lr}
   1264a:	2900      	cmp	r1, #0
   1264c:	d04b      	beq.n	126e6 <_fclose_r+0x9e>
   1264e:	4606      	mov	r6, r0
   12650:	460c      	mov	r4, r1
   12652:	b110      	cbz	r0, 1265a <_fclose_r+0x12>
   12654:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12656:	2b00      	cmp	r3, #0
   12658:	d048      	beq.n	126ec <_fclose_r+0xa4>
   1265a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1265c:	07d8      	lsls	r0, r3, #31
   1265e:	d534      	bpl.n	126ca <_fclose_r+0x82>
   12660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12664:	2b00      	cmp	r3, #0
   12666:	d03e      	beq.n	126e6 <_fclose_r+0x9e>
   12668:	4621      	mov	r1, r4
   1266a:	4630      	mov	r0, r6
   1266c:	f000 f936 	bl	128dc <__sflush_r>
   12670:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12672:	4605      	mov	r5, r0
   12674:	b133      	cbz	r3, 12684 <_fclose_r+0x3c>
   12676:	69e1      	ldr	r1, [r4, #28]
   12678:	4630      	mov	r0, r6
   1267a:	4798      	blx	r3
   1267c:	2800      	cmp	r0, #0
   1267e:	bfb8      	it	lt
   12680:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   12684:	89a3      	ldrh	r3, [r4, #12]
   12686:	061a      	lsls	r2, r3, #24
   12688:	d43c      	bmi.n	12704 <_fclose_r+0xbc>
   1268a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1268c:	b141      	cbz	r1, 126a0 <_fclose_r+0x58>
   1268e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   12692:	4299      	cmp	r1, r3
   12694:	d002      	beq.n	1269c <_fclose_r+0x54>
   12696:	4630      	mov	r0, r6
   12698:	f7fb fba4 	bl	dde4 <_free_r>
   1269c:	2300      	movs	r3, #0
   1269e:	6323      	str	r3, [r4, #48]	; 0x30
   126a0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   126a2:	b121      	cbz	r1, 126ae <_fclose_r+0x66>
   126a4:	4630      	mov	r0, r6
   126a6:	f7fb fb9d 	bl	dde4 <_free_r>
   126aa:	2300      	movs	r3, #0
   126ac:	6463      	str	r3, [r4, #68]	; 0x44
   126ae:	f7fa fe09 	bl	d2c4 <__sfp_lock_acquire>
   126b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   126b4:	2200      	movs	r2, #0
   126b6:	07db      	lsls	r3, r3, #31
   126b8:	81a2      	strh	r2, [r4, #12]
   126ba:	d51f      	bpl.n	126fc <_fclose_r+0xb4>
   126bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   126be:	f7fb fa23 	bl	db08 <__retarget_lock_close_recursive>
   126c2:	f7fa fe05 	bl	d2d0 <__sfp_lock_release>
   126c6:	4628      	mov	r0, r5
   126c8:	bd70      	pop	{r4, r5, r6, pc}
   126ca:	89a3      	ldrh	r3, [r4, #12]
   126cc:	0599      	lsls	r1, r3, #22
   126ce:	d4cb      	bmi.n	12668 <_fclose_r+0x20>
   126d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   126d2:	f7fb fa1b 	bl	db0c <__retarget_lock_acquire_recursive>
   126d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   126da:	2b00      	cmp	r3, #0
   126dc:	d1c4      	bne.n	12668 <_fclose_r+0x20>
   126de:	6e65      	ldr	r5, [r4, #100]	; 0x64
   126e0:	f015 0501 	ands.w	r5, r5, #1
   126e4:	d005      	beq.n	126f2 <_fclose_r+0xaa>
   126e6:	2500      	movs	r5, #0
   126e8:	4628      	mov	r0, r5
   126ea:	bd70      	pop	{r4, r5, r6, pc}
   126ec:	f7fa fdcc 	bl	d288 <__sinit>
   126f0:	e7b3      	b.n	1265a <_fclose_r+0x12>
   126f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   126f4:	f7fb fa0c 	bl	db10 <__retarget_lock_release_recursive>
   126f8:	4628      	mov	r0, r5
   126fa:	bd70      	pop	{r4, r5, r6, pc}
   126fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   126fe:	f7fb fa07 	bl	db10 <__retarget_lock_release_recursive>
   12702:	e7db      	b.n	126bc <_fclose_r+0x74>
   12704:	6921      	ldr	r1, [r4, #16]
   12706:	4630      	mov	r0, r6
   12708:	f7fb fb6c 	bl	dde4 <_free_r>
   1270c:	e7bd      	b.n	1268a <_fclose_r+0x42>
   1270e:	bf00      	nop

00012710 <__sccl>:
   12710:	b570      	push	{r4, r5, r6, lr}
   12712:	780c      	ldrb	r4, [r1, #0]
   12714:	2c5e      	cmp	r4, #94	; 0x5e
   12716:	4686      	mov	lr, r0
   12718:	d01e      	beq.n	12758 <__sccl+0x48>
   1271a:	2200      	movs	r2, #0
   1271c:	1c48      	adds	r0, r1, #1
   1271e:	4694      	mov	ip, r2
   12720:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
   12724:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   12728:	f803 2f01 	strb.w	r2, [r3, #1]!
   1272c:	428b      	cmp	r3, r1
   1272e:	d1fb      	bne.n	12728 <__sccl+0x18>
   12730:	b184      	cbz	r4, 12754 <__sccl+0x44>
   12732:	f08c 0101 	eor.w	r1, ip, #1
   12736:	f80e 1004 	strb.w	r1, [lr, r4]
   1273a:	1c45      	adds	r5, r0, #1
   1273c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   12740:	2b2d      	cmp	r3, #45	; 0x2d
   12742:	d00e      	beq.n	12762 <__sccl+0x52>
   12744:	2b5d      	cmp	r3, #93	; 0x5d
   12746:	d003      	beq.n	12750 <__sccl+0x40>
   12748:	b11b      	cbz	r3, 12752 <__sccl+0x42>
   1274a:	461c      	mov	r4, r3
   1274c:	4628      	mov	r0, r5
   1274e:	e7f2      	b.n	12736 <__sccl+0x26>
   12750:	4628      	mov	r0, r5
   12752:	bd70      	pop	{r4, r5, r6, pc}
   12754:	3801      	subs	r0, #1
   12756:	bd70      	pop	{r4, r5, r6, pc}
   12758:	2201      	movs	r2, #1
   1275a:	784c      	ldrb	r4, [r1, #1]
   1275c:	1c88      	adds	r0, r1, #2
   1275e:	4694      	mov	ip, r2
   12760:	e7de      	b.n	12720 <__sccl+0x10>
   12762:	f890 c001 	ldrb.w	ip, [r0, #1]
   12766:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   1276a:	d0ee      	beq.n	1274a <__sccl+0x3a>
   1276c:	4564      	cmp	r4, ip
   1276e:	dcec      	bgt.n	1274a <__sccl+0x3a>
   12770:	1c66      	adds	r6, r4, #1
   12772:	3002      	adds	r0, #2
   12774:	eb0e 0206 	add.w	r2, lr, r6
   12778:	f802 1b01 	strb.w	r1, [r2], #1
   1277c:	eba2 030e 	sub.w	r3, r2, lr
   12780:	3b01      	subs	r3, #1
   12782:	459c      	cmp	ip, r3
   12784:	dcf8      	bgt.n	12778 <__sccl+0x68>
   12786:	ebac 0304 	sub.w	r3, ip, r4
   1278a:	3b01      	subs	r3, #1
   1278c:	4564      	cmp	r4, ip
   1278e:	bfa8      	it	ge
   12790:	2300      	movge	r3, #0
   12792:	3502      	adds	r5, #2
   12794:	199c      	adds	r4, r3, r6
   12796:	e7d1      	b.n	1273c <__sccl+0x2c>

00012798 <_strtoul_l.constprop.0>:
   12798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1279c:	4607      	mov	r7, r0
   1279e:	484c      	ldr	r0, [pc, #304]	; (128d0 <_strtoul_l.constprop.0+0x138>)
   127a0:	460e      	mov	r6, r1
   127a2:	4635      	mov	r5, r6
   127a4:	f816 eb01 	ldrb.w	lr, [r6], #1
   127a8:	f810 c00e 	ldrb.w	ip, [r0, lr]
   127ac:	f01c 0c08 	ands.w	ip, ip, #8
   127b0:	d1f7      	bne.n	127a2 <_strtoul_l.constprop.0+0xa>
   127b2:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   127b6:	d05a      	beq.n	1286e <_strtoul_l.constprop.0+0xd6>
   127b8:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   127bc:	bf03      	ittte	eq
   127be:	f896 e000 	ldrbeq.w	lr, [r6]
   127c2:	4664      	moveq	r4, ip
   127c4:	1cae      	addeq	r6, r5, #2
   127c6:	4664      	movne	r4, ip
   127c8:	b15b      	cbz	r3, 127e2 <_strtoul_l.constprop.0+0x4a>
   127ca:	2b10      	cmp	r3, #16
   127cc:	d054      	beq.n	12878 <_strtoul_l.constprop.0+0xe0>
   127ce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   127d2:	fbb8 f8f3 	udiv	r8, r8, r3
   127d6:	fb03 fa08 	mul.w	sl, r3, r8
   127da:	ea6f 0a0a 	mvn.w	sl, sl
   127de:	4699      	mov	r9, r3
   127e0:	e008      	b.n	127f4 <_strtoul_l.constprop.0+0x5c>
   127e2:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   127e6:	d05a      	beq.n	1289e <_strtoul_l.constprop.0+0x106>
   127e8:	230a      	movs	r3, #10
   127ea:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 128d4 <_strtoul_l.constprop.0+0x13c>
   127ee:	f04f 0a05 	mov.w	sl, #5
   127f2:	4699      	mov	r9, r3
   127f4:	2500      	movs	r5, #0
   127f6:	4628      	mov	r0, r5
   127f8:	e005      	b.n	12806 <_strtoul_l.constprop.0+0x6e>
   127fa:	d02c      	beq.n	12856 <_strtoul_l.constprop.0+0xbe>
   127fc:	fb09 c000 	mla	r0, r9, r0, ip
   12800:	2501      	movs	r5, #1
   12802:	f816 eb01 	ldrb.w	lr, [r6], #1
   12806:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   1280a:	f1bc 0f09 	cmp.w	ip, #9
   1280e:	d906      	bls.n	1281e <_strtoul_l.constprop.0+0x86>
   12810:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   12814:	f1bc 0f19 	cmp.w	ip, #25
   12818:	d80b      	bhi.n	12832 <_strtoul_l.constprop.0+0x9a>
   1281a:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   1281e:	4563      	cmp	r3, ip
   12820:	dd10      	ble.n	12844 <_strtoul_l.constprop.0+0xac>
   12822:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   12826:	d0ec      	beq.n	12802 <_strtoul_l.constprop.0+0x6a>
   12828:	4540      	cmp	r0, r8
   1282a:	d9e6      	bls.n	127fa <_strtoul_l.constprop.0+0x62>
   1282c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12830:	e7e7      	b.n	12802 <_strtoul_l.constprop.0+0x6a>
   12832:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   12836:	f1bc 0f19 	cmp.w	ip, #25
   1283a:	d803      	bhi.n	12844 <_strtoul_l.constprop.0+0xac>
   1283c:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   12840:	4563      	cmp	r3, ip
   12842:	dcee      	bgt.n	12822 <_strtoul_l.constprop.0+0x8a>
   12844:	1c6b      	adds	r3, r5, #1
   12846:	d00b      	beq.n	12860 <_strtoul_l.constprop.0+0xc8>
   12848:	b104      	cbz	r4, 1284c <_strtoul_l.constprop.0+0xb4>
   1284a:	4240      	negs	r0, r0
   1284c:	b10a      	cbz	r2, 12852 <_strtoul_l.constprop.0+0xba>
   1284e:	b965      	cbnz	r5, 1286a <_strtoul_l.constprop.0+0xd2>
   12850:	6011      	str	r1, [r2, #0]
   12852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12856:	45d4      	cmp	ip, sl
   12858:	ddd0      	ble.n	127fc <_strtoul_l.constprop.0+0x64>
   1285a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1285e:	e7d0      	b.n	12802 <_strtoul_l.constprop.0+0x6a>
   12860:	2322      	movs	r3, #34	; 0x22
   12862:	603b      	str	r3, [r7, #0]
   12864:	4628      	mov	r0, r5
   12866:	2a00      	cmp	r2, #0
   12868:	d0f3      	beq.n	12852 <_strtoul_l.constprop.0+0xba>
   1286a:	1e71      	subs	r1, r6, #1
   1286c:	e7f0      	b.n	12850 <_strtoul_l.constprop.0+0xb8>
   1286e:	f896 e000 	ldrb.w	lr, [r6]
   12872:	2401      	movs	r4, #1
   12874:	1cae      	adds	r6, r5, #2
   12876:	e7a7      	b.n	127c8 <_strtoul_l.constprop.0+0x30>
   12878:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   1287c:	d121      	bne.n	128c2 <_strtoul_l.constprop.0+0x12a>
   1287e:	7830      	ldrb	r0, [r6, #0]
   12880:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   12884:	2858      	cmp	r0, #88	; 0x58
   12886:	d116      	bne.n	128b6 <_strtoul_l.constprop.0+0x11e>
   12888:	f04f 0910 	mov.w	r9, #16
   1288c:	f896 e001 	ldrb.w	lr, [r6, #1]
   12890:	f04f 0a0f 	mov.w	sl, #15
   12894:	3602      	adds	r6, #2
   12896:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   1289a:	464b      	mov	r3, r9
   1289c:	e7aa      	b.n	127f4 <_strtoul_l.constprop.0+0x5c>
   1289e:	7833      	ldrb	r3, [r6, #0]
   128a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   128a4:	2b58      	cmp	r3, #88	; 0x58
   128a6:	d0ef      	beq.n	12888 <_strtoul_l.constprop.0+0xf0>
   128a8:	2308      	movs	r3, #8
   128aa:	f04f 0a07 	mov.w	sl, #7
   128ae:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   128b2:	4699      	mov	r9, r3
   128b4:	e79e      	b.n	127f4 <_strtoul_l.constprop.0+0x5c>
   128b6:	4699      	mov	r9, r3
   128b8:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   128bc:	f04f 0a0f 	mov.w	sl, #15
   128c0:	e798      	b.n	127f4 <_strtoul_l.constprop.0+0x5c>
   128c2:	f04f 0a0f 	mov.w	sl, #15
   128c6:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   128ca:	4699      	mov	r9, r3
   128cc:	e792      	b.n	127f4 <_strtoul_l.constprop.0+0x5c>
   128ce:	bf00      	nop
   128d0:	20000d25 	.word	0x20000d25
   128d4:	19999999 	.word	0x19999999

000128d8 <_strtoul_r>:
   128d8:	f7ff bf5e 	b.w	12798 <_strtoul_l.constprop.0>

000128dc <__sflush_r>:
   128dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   128e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128e4:	460c      	mov	r4, r1
   128e6:	0711      	lsls	r1, r2, #28
   128e8:	4680      	mov	r8, r0
   128ea:	d447      	bmi.n	1297c <__sflush_r+0xa0>
   128ec:	6863      	ldr	r3, [r4, #4]
   128ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   128f2:	2b00      	cmp	r3, #0
   128f4:	81a2      	strh	r2, [r4, #12]
   128f6:	dd5e      	ble.n	129b6 <__sflush_r+0xda>
   128f8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   128fa:	2d00      	cmp	r5, #0
   128fc:	d058      	beq.n	129b0 <__sflush_r+0xd4>
   128fe:	2300      	movs	r3, #0
   12900:	f8d8 6000 	ldr.w	r6, [r8]
   12904:	f8c8 3000 	str.w	r3, [r8]
   12908:	b293      	uxth	r3, r2
   1290a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   1290e:	d156      	bne.n	129be <__sflush_r+0xe2>
   12910:	2301      	movs	r3, #1
   12912:	69e1      	ldr	r1, [r4, #28]
   12914:	4640      	mov	r0, r8
   12916:	47a8      	blx	r5
   12918:	1c43      	adds	r3, r0, #1
   1291a:	d067      	beq.n	129ec <__sflush_r+0x110>
   1291c:	89a3      	ldrh	r3, [r4, #12]
   1291e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   12920:	075f      	lsls	r7, r3, #29
   12922:	d505      	bpl.n	12930 <__sflush_r+0x54>
   12924:	6863      	ldr	r3, [r4, #4]
   12926:	1ac0      	subs	r0, r0, r3
   12928:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1292a:	b10b      	cbz	r3, 12930 <__sflush_r+0x54>
   1292c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1292e:	1ac0      	subs	r0, r0, r3
   12930:	69e1      	ldr	r1, [r4, #28]
   12932:	4602      	mov	r2, r0
   12934:	2300      	movs	r3, #0
   12936:	4640      	mov	r0, r8
   12938:	47a8      	blx	r5
   1293a:	1c41      	adds	r1, r0, #1
   1293c:	d141      	bne.n	129c2 <__sflush_r+0xe6>
   1293e:	f8d8 3000 	ldr.w	r3, [r8]
   12942:	2b00      	cmp	r3, #0
   12944:	d03d      	beq.n	129c2 <__sflush_r+0xe6>
   12946:	2b1d      	cmp	r3, #29
   12948:	d001      	beq.n	1294e <__sflush_r+0x72>
   1294a:	2b16      	cmp	r3, #22
   1294c:	d156      	bne.n	129fc <__sflush_r+0x120>
   1294e:	89a3      	ldrh	r3, [r4, #12]
   12950:	6922      	ldr	r2, [r4, #16]
   12952:	6022      	str	r2, [r4, #0]
   12954:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   12958:	2100      	movs	r1, #0
   1295a:	6061      	str	r1, [r4, #4]
   1295c:	81a3      	strh	r3, [r4, #12]
   1295e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   12960:	f8c8 6000 	str.w	r6, [r8]
   12964:	b321      	cbz	r1, 129b0 <__sflush_r+0xd4>
   12966:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1296a:	4299      	cmp	r1, r3
   1296c:	d002      	beq.n	12974 <__sflush_r+0x98>
   1296e:	4640      	mov	r0, r8
   12970:	f7fb fa38 	bl	dde4 <_free_r>
   12974:	2000      	movs	r0, #0
   12976:	6320      	str	r0, [r4, #48]	; 0x30
   12978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1297c:	6926      	ldr	r6, [r4, #16]
   1297e:	b1be      	cbz	r6, 129b0 <__sflush_r+0xd4>
   12980:	b293      	uxth	r3, r2
   12982:	6825      	ldr	r5, [r4, #0]
   12984:	6026      	str	r6, [r4, #0]
   12986:	079a      	lsls	r2, r3, #30
   12988:	bf0c      	ite	eq
   1298a:	6963      	ldreq	r3, [r4, #20]
   1298c:	2300      	movne	r3, #0
   1298e:	1bad      	subs	r5, r5, r6
   12990:	60a3      	str	r3, [r4, #8]
   12992:	e00b      	b.n	129ac <__sflush_r+0xd0>
   12994:	462b      	mov	r3, r5
   12996:	4632      	mov	r2, r6
   12998:	69e1      	ldr	r1, [r4, #28]
   1299a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1299c:	4640      	mov	r0, r8
   1299e:	47b8      	blx	r7
   129a0:	f1b0 0c00 	subs.w	ip, r0, #0
   129a4:	eba5 050c 	sub.w	r5, r5, ip
   129a8:	4466      	add	r6, ip
   129aa:	dd17      	ble.n	129dc <__sflush_r+0x100>
   129ac:	2d00      	cmp	r5, #0
   129ae:	dcf1      	bgt.n	12994 <__sflush_r+0xb8>
   129b0:	2000      	movs	r0, #0
   129b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   129b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   129b8:	2b00      	cmp	r3, #0
   129ba:	dc9d      	bgt.n	128f8 <__sflush_r+0x1c>
   129bc:	e7f8      	b.n	129b0 <__sflush_r+0xd4>
   129be:	6d20      	ldr	r0, [r4, #80]	; 0x50
   129c0:	e7ae      	b.n	12920 <__sflush_r+0x44>
   129c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   129c6:	6922      	ldr	r2, [r4, #16]
   129c8:	6022      	str	r2, [r4, #0]
   129ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   129ce:	81a3      	strh	r3, [r4, #12]
   129d0:	2200      	movs	r2, #0
   129d2:	04db      	lsls	r3, r3, #19
   129d4:	6062      	str	r2, [r4, #4]
   129d6:	d5c2      	bpl.n	1295e <__sflush_r+0x82>
   129d8:	6520      	str	r0, [r4, #80]	; 0x50
   129da:	e7c0      	b.n	1295e <__sflush_r+0x82>
   129dc:	89a3      	ldrh	r3, [r4, #12]
   129de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   129e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   129e6:	81a3      	strh	r3, [r4, #12]
   129e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   129ec:	f8d8 3000 	ldr.w	r3, [r8]
   129f0:	2b00      	cmp	r3, #0
   129f2:	d093      	beq.n	1291c <__sflush_r+0x40>
   129f4:	2b1d      	cmp	r3, #29
   129f6:	d006      	beq.n	12a06 <__sflush_r+0x12a>
   129f8:	2b16      	cmp	r3, #22
   129fa:	d004      	beq.n	12a06 <__sflush_r+0x12a>
   129fc:	89a3      	ldrh	r3, [r4, #12]
   129fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12a02:	81a3      	strh	r3, [r4, #12]
   12a04:	e7d5      	b.n	129b2 <__sflush_r+0xd6>
   12a06:	f8c8 6000 	str.w	r6, [r8]
   12a0a:	e7d1      	b.n	129b0 <__sflush_r+0xd4>

00012a0c <_fflush_r>:
   12a0c:	b538      	push	{r3, r4, r5, lr}
   12a0e:	460c      	mov	r4, r1
   12a10:	4605      	mov	r5, r0
   12a12:	b108      	cbz	r0, 12a18 <_fflush_r+0xc>
   12a14:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12a16:	b303      	cbz	r3, 12a5a <_fflush_r+0x4e>
   12a18:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   12a1c:	b188      	cbz	r0, 12a42 <_fflush_r+0x36>
   12a1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   12a20:	07db      	lsls	r3, r3, #31
   12a22:	d401      	bmi.n	12a28 <_fflush_r+0x1c>
   12a24:	0581      	lsls	r1, r0, #22
   12a26:	d50f      	bpl.n	12a48 <_fflush_r+0x3c>
   12a28:	4628      	mov	r0, r5
   12a2a:	4621      	mov	r1, r4
   12a2c:	f7ff ff56 	bl	128dc <__sflush_r>
   12a30:	6e63      	ldr	r3, [r4, #100]	; 0x64
   12a32:	07da      	lsls	r2, r3, #31
   12a34:	4605      	mov	r5, r0
   12a36:	d402      	bmi.n	12a3e <_fflush_r+0x32>
   12a38:	89a3      	ldrh	r3, [r4, #12]
   12a3a:	059b      	lsls	r3, r3, #22
   12a3c:	d508      	bpl.n	12a50 <_fflush_r+0x44>
   12a3e:	4628      	mov	r0, r5
   12a40:	bd38      	pop	{r3, r4, r5, pc}
   12a42:	4605      	mov	r5, r0
   12a44:	4628      	mov	r0, r5
   12a46:	bd38      	pop	{r3, r4, r5, pc}
   12a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12a4a:	f7fb f85f 	bl	db0c <__retarget_lock_acquire_recursive>
   12a4e:	e7eb      	b.n	12a28 <_fflush_r+0x1c>
   12a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12a52:	f7fb f85d 	bl	db10 <__retarget_lock_release_recursive>
   12a56:	4628      	mov	r0, r5
   12a58:	bd38      	pop	{r3, r4, r5, pc}
   12a5a:	f7fa fc15 	bl	d288 <__sinit>
   12a5e:	e7db      	b.n	12a18 <_fflush_r+0xc>

00012a60 <sprintf>:
   12a60:	b40e      	push	{r1, r2, r3}
   12a62:	b510      	push	{r4, lr}
   12a64:	b09d      	sub	sp, #116	; 0x74
   12a66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12a6a:	ab1f      	add	r3, sp, #124	; 0x7c
   12a6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   12a70:	9104      	str	r1, [sp, #16]
   12a72:	4909      	ldr	r1, [pc, #36]	; (12a98 <sprintf+0x38>)
   12a74:	f853 2b04 	ldr.w	r2, [r3], #4
   12a78:	9002      	str	r0, [sp, #8]
   12a7a:	4c08      	ldr	r4, [pc, #32]	; (12a9c <sprintf+0x3c>)
   12a7c:	6808      	ldr	r0, [r1, #0]
   12a7e:	9301      	str	r3, [sp, #4]
   12a80:	a902      	add	r1, sp, #8
   12a82:	9405      	str	r4, [sp, #20]
   12a84:	f7fb fedc 	bl	e840 <_svfprintf_r>
   12a88:	9b02      	ldr	r3, [sp, #8]
   12a8a:	2200      	movs	r2, #0
   12a8c:	701a      	strb	r2, [r3, #0]
   12a8e:	b01d      	add	sp, #116	; 0x74
   12a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12a94:	b003      	add	sp, #12
   12a96:	4770      	bx	lr
   12a98:	20008694 	.word	0x20008694
   12a9c:	ffff0208 	.word	0xffff0208

00012aa0 <__ascii_wctomb>:
   12aa0:	b149      	cbz	r1, 12ab6 <__ascii_wctomb+0x16>
   12aa2:	2aff      	cmp	r2, #255	; 0xff
   12aa4:	d802      	bhi.n	12aac <__ascii_wctomb+0xc>
   12aa6:	700a      	strb	r2, [r1, #0]
   12aa8:	2001      	movs	r0, #1
   12aaa:	4770      	bx	lr
   12aac:	238a      	movs	r3, #138	; 0x8a
   12aae:	6003      	str	r3, [r0, #0]
   12ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ab4:	4770      	bx	lr
   12ab6:	4608      	mov	r0, r1
   12ab8:	4770      	bx	lr
   12aba:	bf00      	nop

00012abc <stpncpy>:
   12abc:	ea41 0300 	orr.w	r3, r1, r0
   12ac0:	079b      	lsls	r3, r3, #30
   12ac2:	b430      	push	{r4, r5}
   12ac4:	d101      	bne.n	12aca <stpncpy+0xe>
   12ac6:	2a03      	cmp	r2, #3
   12ac8:	d80f      	bhi.n	12aea <stpncpy+0x2e>
   12aca:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   12ace:	e007      	b.n	12ae0 <stpncpy+0x24>
   12ad0:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   12ad4:	f803 1b01 	strb.w	r1, [r3], #1
   12ad8:	1e54      	subs	r4, r2, #1
   12ada:	b1c1      	cbz	r1, 12b0e <stpncpy+0x52>
   12adc:	4622      	mov	r2, r4
   12ade:	4618      	mov	r0, r3
   12ae0:	4603      	mov	r3, r0
   12ae2:	2a00      	cmp	r2, #0
   12ae4:	d1f4      	bne.n	12ad0 <stpncpy+0x14>
   12ae6:	bc30      	pop	{r4, r5}
   12ae8:	4770      	bx	lr
   12aea:	460b      	mov	r3, r1
   12aec:	4619      	mov	r1, r3
   12aee:	f853 5b04 	ldr.w	r5, [r3], #4
   12af2:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   12af6:	ea24 0405 	bic.w	r4, r4, r5
   12afa:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   12afe:	d1e4      	bne.n	12aca <stpncpy+0xe>
   12b00:	3a04      	subs	r2, #4
   12b02:	2a03      	cmp	r2, #3
   12b04:	f840 5b04 	str.w	r5, [r0], #4
   12b08:	4619      	mov	r1, r3
   12b0a:	d8ef      	bhi.n	12aec <stpncpy+0x30>
   12b0c:	e7dd      	b.n	12aca <stpncpy+0xe>
   12b0e:	4402      	add	r2, r0
   12b10:	2c00      	cmp	r4, #0
   12b12:	d0e8      	beq.n	12ae6 <stpncpy+0x2a>
   12b14:	f803 1b01 	strb.w	r1, [r3], #1
   12b18:	4293      	cmp	r3, r2
   12b1a:	d1fb      	bne.n	12b14 <stpncpy+0x58>
   12b1c:	bc30      	pop	{r4, r5}
   12b1e:	4770      	bx	lr

00012b20 <_localeconv_r>:
   12b20:	4800      	ldr	r0, [pc, #0]	; (12b24 <_localeconv_r+0x4>)
   12b22:	4770      	bx	lr
   12b24:	200081fc 	.word	0x200081fc

00012b28 <_strtoll_l.constprop.0>:
   12b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b2c:	b085      	sub	sp, #20
   12b2e:	461f      	mov	r7, r3
   12b30:	4b57      	ldr	r3, [pc, #348]	; (12c90 <_strtoll_l.constprop.0+0x168>)
   12b32:	9003      	str	r0, [sp, #12]
   12b34:	468a      	mov	sl, r1
   12b36:	9200      	str	r2, [sp, #0]
   12b38:	460d      	mov	r5, r1
   12b3a:	462a      	mov	r2, r5
   12b3c:	f815 4b01 	ldrb.w	r4, [r5], #1
   12b40:	5d1e      	ldrb	r6, [r3, r4]
   12b42:	f016 0608 	ands.w	r6, r6, #8
   12b46:	d1f8      	bne.n	12b3a <_strtoll_l.constprop.0+0x12>
   12b48:	2c2d      	cmp	r4, #45	; 0x2d
   12b4a:	d075      	beq.n	12c38 <_strtoll_l.constprop.0+0x110>
   12b4c:	2c2b      	cmp	r4, #43	; 0x2b
   12b4e:	bf05      	ittet	eq
   12b50:	782c      	ldrbeq	r4, [r5, #0]
   12b52:	9602      	streq	r6, [sp, #8]
   12b54:	9602      	strne	r6, [sp, #8]
   12b56:	1c95      	addeq	r5, r2, #2
   12b58:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12b5c:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   12b60:	b12f      	cbz	r7, 12b6e <_strtoll_l.constprop.0+0x46>
   12b62:	2f10      	cmp	r7, #16
   12b64:	d06f      	beq.n	12c46 <_strtoll_l.constprop.0+0x11e>
   12b66:	46b8      	mov	r8, r7
   12b68:	ea4f 79e7 	mov.w	r9, r7, asr #31
   12b6c:	e005      	b.n	12b7a <_strtoll_l.constprop.0+0x52>
   12b6e:	2c30      	cmp	r4, #48	; 0x30
   12b70:	d074      	beq.n	12c5c <_strtoll_l.constprop.0+0x134>
   12b72:	f04f 080a 	mov.w	r8, #10
   12b76:	46b9      	mov	r9, r7
   12b78:	4647      	mov	r7, r8
   12b7a:	4642      	mov	r2, r8
   12b7c:	464b      	mov	r3, r9
   12b7e:	4630      	mov	r0, r6
   12b80:	4659      	mov	r1, fp
   12b82:	f7f8 fc53 	bl	b42c <__aeabi_uldivmod>
   12b86:	2300      	movs	r3, #0
   12b88:	9201      	str	r2, [sp, #4]
   12b8a:	4684      	mov	ip, r0
   12b8c:	460a      	mov	r2, r1
   12b8e:	4618      	mov	r0, r3
   12b90:	4619      	mov	r1, r3
   12b92:	e011      	b.n	12bb8 <_strtoll_l.constprop.0+0x90>
   12b94:	428a      	cmp	r2, r1
   12b96:	bf08      	it	eq
   12b98:	4584      	cmpeq	ip, r0
   12b9a:	d03d      	beq.n	12c18 <_strtoll_l.constprop.0+0xf0>
   12b9c:	fb00 f309 	mul.w	r3, r0, r9
   12ba0:	fb08 3301 	mla	r3, r8, r1, r3
   12ba4:	fba0 0108 	umull	r0, r1, r0, r8
   12ba8:	440b      	add	r3, r1
   12baa:	eb1e 0000 	adds.w	r0, lr, r0
   12bae:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   12bb2:	2301      	movs	r3, #1
   12bb4:	f815 4b01 	ldrb.w	r4, [r5], #1
   12bb8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   12bbc:	f1be 0f09 	cmp.w	lr, #9
   12bc0:	d906      	bls.n	12bd0 <_strtoll_l.constprop.0+0xa8>
   12bc2:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   12bc6:	f1be 0f19 	cmp.w	lr, #25
   12bca:	d80c      	bhi.n	12be6 <_strtoll_l.constprop.0+0xbe>
   12bcc:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   12bd0:	4577      	cmp	r7, lr
   12bd2:	dd11      	ble.n	12bf8 <_strtoll_l.constprop.0+0xd0>
   12bd4:	1c5c      	adds	r4, r3, #1
   12bd6:	d0ed      	beq.n	12bb4 <_strtoll_l.constprop.0+0x8c>
   12bd8:	4584      	cmp	ip, r0
   12bda:	eb72 0301 	sbcs.w	r3, r2, r1
   12bde:	d2d9      	bcs.n	12b94 <_strtoll_l.constprop.0+0x6c>
   12be0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12be4:	e7e6      	b.n	12bb4 <_strtoll_l.constprop.0+0x8c>
   12be6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   12bea:	f1be 0f19 	cmp.w	lr, #25
   12bee:	d803      	bhi.n	12bf8 <_strtoll_l.constprop.0+0xd0>
   12bf0:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   12bf4:	4577      	cmp	r7, lr
   12bf6:	dced      	bgt.n	12bd4 <_strtoll_l.constprop.0+0xac>
   12bf8:	1c5a      	adds	r2, r3, #1
   12bfa:	d013      	beq.n	12c24 <_strtoll_l.constprop.0+0xfc>
   12bfc:	9a02      	ldr	r2, [sp, #8]
   12bfe:	b112      	cbz	r2, 12c06 <_strtoll_l.constprop.0+0xde>
   12c00:	4240      	negs	r0, r0
   12c02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12c06:	9a00      	ldr	r2, [sp, #0]
   12c08:	b11a      	cbz	r2, 12c12 <_strtoll_l.constprop.0+0xea>
   12c0a:	bba3      	cbnz	r3, 12c76 <_strtoll_l.constprop.0+0x14e>
   12c0c:	9b00      	ldr	r3, [sp, #0]
   12c0e:	f8c3 a000 	str.w	sl, [r3]
   12c12:	b005      	add	sp, #20
   12c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c18:	9b01      	ldr	r3, [sp, #4]
   12c1a:	4573      	cmp	r3, lr
   12c1c:	dabe      	bge.n	12b9c <_strtoll_l.constprop.0+0x74>
   12c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12c22:	e7c7      	b.n	12bb4 <_strtoll_l.constprop.0+0x8c>
   12c24:	9a03      	ldr	r2, [sp, #12]
   12c26:	2322      	movs	r3, #34	; 0x22
   12c28:	6013      	str	r3, [r2, #0]
   12c2a:	9b00      	ldr	r3, [sp, #0]
   12c2c:	b333      	cbz	r3, 12c7c <_strtoll_l.constprop.0+0x154>
   12c2e:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   12c32:	4630      	mov	r0, r6
   12c34:	4659      	mov	r1, fp
   12c36:	e7e9      	b.n	12c0c <_strtoll_l.constprop.0+0xe4>
   12c38:	2301      	movs	r3, #1
   12c3a:	782c      	ldrb	r4, [r5, #0]
   12c3c:	9302      	str	r3, [sp, #8]
   12c3e:	1c95      	adds	r5, r2, #2
   12c40:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   12c44:	e78c      	b.n	12b60 <_strtoll_l.constprop.0+0x38>
   12c46:	2c30      	cmp	r4, #48	; 0x30
   12c48:	d104      	bne.n	12c54 <_strtoll_l.constprop.0+0x12c>
   12c4a:	782b      	ldrb	r3, [r5, #0]
   12c4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12c50:	2b58      	cmp	r3, #88	; 0x58
   12c52:	d008      	beq.n	12c66 <_strtoll_l.constprop.0+0x13e>
   12c54:	46b8      	mov	r8, r7
   12c56:	f04f 0900 	mov.w	r9, #0
   12c5a:	e78e      	b.n	12b7a <_strtoll_l.constprop.0+0x52>
   12c5c:	782b      	ldrb	r3, [r5, #0]
   12c5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12c62:	2b58      	cmp	r3, #88	; 0x58
   12c64:	d10f      	bne.n	12c86 <_strtoll_l.constprop.0+0x15e>
   12c66:	f04f 0810 	mov.w	r8, #16
   12c6a:	786c      	ldrb	r4, [r5, #1]
   12c6c:	f04f 0900 	mov.w	r9, #0
   12c70:	3502      	adds	r5, #2
   12c72:	4647      	mov	r7, r8
   12c74:	e781      	b.n	12b7a <_strtoll_l.constprop.0+0x52>
   12c76:	4606      	mov	r6, r0
   12c78:	468b      	mov	fp, r1
   12c7a:	e7d8      	b.n	12c2e <_strtoll_l.constprop.0+0x106>
   12c7c:	4630      	mov	r0, r6
   12c7e:	4659      	mov	r1, fp
   12c80:	b005      	add	sp, #20
   12c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c86:	f04f 0808 	mov.w	r8, #8
   12c8a:	46b9      	mov	r9, r7
   12c8c:	4647      	mov	r7, r8
   12c8e:	e774      	b.n	12b7a <_strtoll_l.constprop.0+0x52>
   12c90:	20000d25 	.word	0x20000d25

00012c94 <_strtoll_r>:
   12c94:	f7ff bf48 	b.w	12b28 <_strtoll_l.constprop.0>

00012c98 <_strtoull_l.constprop.0>:
   12c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c9c:	b085      	sub	sp, #20
   12c9e:	468b      	mov	fp, r1
   12ca0:	9201      	str	r2, [sp, #4]
   12ca2:	4a62      	ldr	r2, [pc, #392]	; (12e2c <_strtoull_l.constprop.0+0x194>)
   12ca4:	9003      	str	r0, [sp, #12]
   12ca6:	461e      	mov	r6, r3
   12ca8:	460d      	mov	r5, r1
   12caa:	4629      	mov	r1, r5
   12cac:	f815 4b01 	ldrb.w	r4, [r5], #1
   12cb0:	5d13      	ldrb	r3, [r2, r4]
   12cb2:	f013 0308 	ands.w	r3, r3, #8
   12cb6:	d1f8      	bne.n	12caa <_strtoull_l.constprop.0+0x12>
   12cb8:	2c2d      	cmp	r4, #45	; 0x2d
   12cba:	f000 8082 	beq.w	12dc2 <_strtoull_l.constprop.0+0x12a>
   12cbe:	2c2b      	cmp	r4, #43	; 0x2b
   12cc0:	bf03      	ittte	eq
   12cc2:	782c      	ldrbeq	r4, [r5, #0]
   12cc4:	9302      	streq	r3, [sp, #8]
   12cc6:	1c8d      	addeq	r5, r1, #2
   12cc8:	9302      	strne	r3, [sp, #8]
   12cca:	b1be      	cbz	r6, 12cfc <_strtoull_l.constprop.0+0x64>
   12ccc:	2e10      	cmp	r6, #16
   12cce:	d07d      	beq.n	12dcc <_strtoull_l.constprop.0+0x134>
   12cd0:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   12cd4:	4632      	mov	r2, r6
   12cd6:	4653      	mov	r3, sl
   12cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12cdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12ce0:	f7f8 fba4 	bl	b42c <__aeabi_uldivmod>
   12ce4:	4632      	mov	r2, r6
   12ce6:	4607      	mov	r7, r0
   12ce8:	4688      	mov	r8, r1
   12cea:	4653      	mov	r3, sl
   12cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12cf4:	46b1      	mov	r9, r6
   12cf6:	f7f8 fb99 	bl	b42c <__aeabi_uldivmod>
   12cfa:	e00a      	b.n	12d12 <_strtoull_l.constprop.0+0x7a>
   12cfc:	2c30      	cmp	r4, #48	; 0x30
   12cfe:	d079      	beq.n	12df4 <_strtoull_l.constprop.0+0x15c>
   12d00:	f04f 090a 	mov.w	r9, #10
   12d04:	f8df 8128 	ldr.w	r8, [pc, #296]	; 12e30 <_strtoull_l.constprop.0+0x198>
   12d08:	46b2      	mov	sl, r6
   12d0a:	2205      	movs	r2, #5
   12d0c:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   12d10:	464e      	mov	r6, r9
   12d12:	f04f 0c00 	mov.w	ip, #0
   12d16:	4660      	mov	r0, ip
   12d18:	4661      	mov	r1, ip
   12d1a:	e011      	b.n	12d40 <_strtoull_l.constprop.0+0xa8>
   12d1c:	4541      	cmp	r1, r8
   12d1e:	bf08      	it	eq
   12d20:	42b8      	cmpeq	r0, r7
   12d22:	d03e      	beq.n	12da2 <_strtoull_l.constprop.0+0x10a>
   12d24:	fb00 f40a 	mul.w	r4, r0, sl
   12d28:	fb09 4101 	mla	r1, r9, r1, r4
   12d2c:	fba0 0409 	umull	r0, r4, r0, r9
   12d30:	4421      	add	r1, r4
   12d32:	1818      	adds	r0, r3, r0
   12d34:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   12d38:	f04f 0c01 	mov.w	ip, #1
   12d3c:	f815 4b01 	ldrb.w	r4, [r5], #1
   12d40:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   12d44:	2b09      	cmp	r3, #9
   12d46:	d905      	bls.n	12d54 <_strtoull_l.constprop.0+0xbc>
   12d48:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   12d4c:	2b19      	cmp	r3, #25
   12d4e:	d80d      	bhi.n	12d6c <_strtoull_l.constprop.0+0xd4>
   12d50:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   12d54:	429e      	cmp	r6, r3
   12d56:	dd11      	ble.n	12d7c <_strtoull_l.constprop.0+0xe4>
   12d58:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   12d5c:	d0ee      	beq.n	12d3c <_strtoull_l.constprop.0+0xa4>
   12d5e:	4287      	cmp	r7, r0
   12d60:	eb78 0401 	sbcs.w	r4, r8, r1
   12d64:	d2da      	bcs.n	12d1c <_strtoull_l.constprop.0+0x84>
   12d66:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   12d6a:	e7e7      	b.n	12d3c <_strtoull_l.constprop.0+0xa4>
   12d6c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   12d70:	2b19      	cmp	r3, #25
   12d72:	d803      	bhi.n	12d7c <_strtoull_l.constprop.0+0xe4>
   12d74:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   12d78:	429e      	cmp	r6, r3
   12d7a:	dced      	bgt.n	12d58 <_strtoull_l.constprop.0+0xc0>
   12d7c:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   12d80:	d014      	beq.n	12dac <_strtoull_l.constprop.0+0x114>
   12d82:	9b02      	ldr	r3, [sp, #8]
   12d84:	b113      	cbz	r3, 12d8c <_strtoull_l.constprop.0+0xf4>
   12d86:	4240      	negs	r0, r0
   12d88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12d8c:	9b01      	ldr	r3, [sp, #4]
   12d8e:	b12b      	cbz	r3, 12d9c <_strtoull_l.constprop.0+0x104>
   12d90:	f1bc 0f00 	cmp.w	ip, #0
   12d94:	d112      	bne.n	12dbc <_strtoull_l.constprop.0+0x124>
   12d96:	9b01      	ldr	r3, [sp, #4]
   12d98:	f8c3 b000 	str.w	fp, [r3]
   12d9c:	b005      	add	sp, #20
   12d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12da2:	4293      	cmp	r3, r2
   12da4:	ddbe      	ble.n	12d24 <_strtoull_l.constprop.0+0x8c>
   12da6:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   12daa:	e7c7      	b.n	12d3c <_strtoull_l.constprop.0+0xa4>
   12dac:	9a03      	ldr	r2, [sp, #12]
   12dae:	2322      	movs	r3, #34	; 0x22
   12db0:	6013      	str	r3, [r2, #0]
   12db2:	9b01      	ldr	r3, [sp, #4]
   12db4:	4660      	mov	r0, ip
   12db6:	4661      	mov	r1, ip
   12db8:	2b00      	cmp	r3, #0
   12dba:	d0ef      	beq.n	12d9c <_strtoull_l.constprop.0+0x104>
   12dbc:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   12dc0:	e7e9      	b.n	12d96 <_strtoull_l.constprop.0+0xfe>
   12dc2:	2301      	movs	r3, #1
   12dc4:	782c      	ldrb	r4, [r5, #0]
   12dc6:	9302      	str	r3, [sp, #8]
   12dc8:	1c8d      	adds	r5, r1, #2
   12dca:	e77e      	b.n	12cca <_strtoull_l.constprop.0+0x32>
   12dcc:	2c30      	cmp	r4, #48	; 0x30
   12dce:	d123      	bne.n	12e18 <_strtoull_l.constprop.0+0x180>
   12dd0:	782b      	ldrb	r3, [r5, #0]
   12dd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12dd6:	2b58      	cmp	r3, #88	; 0x58
   12dd8:	d11b      	bne.n	12e12 <_strtoull_l.constprop.0+0x17a>
   12dda:	f04f 0910 	mov.w	r9, #16
   12dde:	786c      	ldrb	r4, [r5, #1]
   12de0:	220f      	movs	r2, #15
   12de2:	3502      	adds	r5, #2
   12de4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12de8:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   12dec:	f04f 0a00 	mov.w	sl, #0
   12df0:	464e      	mov	r6, r9
   12df2:	e78e      	b.n	12d12 <_strtoull_l.constprop.0+0x7a>
   12df4:	782b      	ldrb	r3, [r5, #0]
   12df6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12dfa:	2b58      	cmp	r3, #88	; 0x58
   12dfc:	d0ed      	beq.n	12dda <_strtoull_l.constprop.0+0x142>
   12dfe:	f04f 0908 	mov.w	r9, #8
   12e02:	46b2      	mov	sl, r6
   12e04:	2207      	movs	r2, #7
   12e06:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12e0a:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   12e0e:	464e      	mov	r6, r9
   12e10:	e77f      	b.n	12d12 <_strtoull_l.constprop.0+0x7a>
   12e12:	f04f 0a00 	mov.w	sl, #0
   12e16:	e75d      	b.n	12cd4 <_strtoull_l.constprop.0+0x3c>
   12e18:	220f      	movs	r2, #15
   12e1a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12e1e:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   12e22:	46b1      	mov	r9, r6
   12e24:	f04f 0a00 	mov.w	sl, #0
   12e28:	e773      	b.n	12d12 <_strtoull_l.constprop.0+0x7a>
   12e2a:	bf00      	nop
   12e2c:	20000d25 	.word	0x20000d25
   12e30:	19999999 	.word	0x19999999

00012e34 <_strtoull_r>:
   12e34:	f7ff bf30 	b.w	12c98 <_strtoull_l.constprop.0>

00012e38 <_mbrtowc_r>:
   12e38:	b570      	push	{r4, r5, r6, lr}
   12e3a:	b082      	sub	sp, #8
   12e3c:	4604      	mov	r4, r0
   12e3e:	9d06      	ldr	r5, [sp, #24]
   12e40:	b155      	cbz	r5, 12e58 <_mbrtowc_r+0x20>
   12e42:	b16a      	cbz	r2, 12e60 <_mbrtowc_r+0x28>
   12e44:	480f      	ldr	r0, [pc, #60]	; (12e84 <_mbrtowc_r+0x4c>)
   12e46:	9500      	str	r5, [sp, #0]
   12e48:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   12e4c:	4620      	mov	r0, r4
   12e4e:	47b0      	blx	r6
   12e50:	1c43      	adds	r3, r0, #1
   12e52:	d010      	beq.n	12e76 <_mbrtowc_r+0x3e>
   12e54:	b002      	add	sp, #8
   12e56:	bd70      	pop	{r4, r5, r6, pc}
   12e58:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   12e5c:	2a00      	cmp	r2, #0
   12e5e:	d1f1      	bne.n	12e44 <_mbrtowc_r+0xc>
   12e60:	4b08      	ldr	r3, [pc, #32]	; (12e84 <_mbrtowc_r+0x4c>)
   12e62:	9500      	str	r5, [sp, #0]
   12e64:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   12e68:	4611      	mov	r1, r2
   12e6a:	2301      	movs	r3, #1
   12e6c:	4a06      	ldr	r2, [pc, #24]	; (12e88 <_mbrtowc_r+0x50>)
   12e6e:	4620      	mov	r0, r4
   12e70:	47b0      	blx	r6
   12e72:	1c43      	adds	r3, r0, #1
   12e74:	d1ee      	bne.n	12e54 <_mbrtowc_r+0x1c>
   12e76:	2200      	movs	r2, #0
   12e78:	238a      	movs	r3, #138	; 0x8a
   12e7a:	602a      	str	r2, [r5, #0]
   12e7c:	6023      	str	r3, [r4, #0]
   12e7e:	b002      	add	sp, #8
   12e80:	bd70      	pop	{r4, r5, r6, pc}
   12e82:	bf00      	nop
   12e84:	2000810c 	.word	0x2000810c
   12e88:	20000798 	.word	0x20000798

00012e8c <_wcrtomb_r>:
   12e8c:	b570      	push	{r4, r5, r6, lr}
   12e8e:	4605      	mov	r5, r0
   12e90:	b084      	sub	sp, #16
   12e92:	b15b      	cbz	r3, 12eac <_wcrtomb_r+0x20>
   12e94:	461c      	mov	r4, r3
   12e96:	b169      	cbz	r1, 12eb4 <_wcrtomb_r+0x28>
   12e98:	4b0e      	ldr	r3, [pc, #56]	; (12ed4 <_wcrtomb_r+0x48>)
   12e9a:	4628      	mov	r0, r5
   12e9c:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   12ea0:	4623      	mov	r3, r4
   12ea2:	47b0      	blx	r6
   12ea4:	1c43      	adds	r3, r0, #1
   12ea6:	d00f      	beq.n	12ec8 <_wcrtomb_r+0x3c>
   12ea8:	b004      	add	sp, #16
   12eaa:	bd70      	pop	{r4, r5, r6, pc}
   12eac:	f500 7482 	add.w	r4, r0, #260	; 0x104
   12eb0:	2900      	cmp	r1, #0
   12eb2:	d1f1      	bne.n	12e98 <_wcrtomb_r+0xc>
   12eb4:	4a07      	ldr	r2, [pc, #28]	; (12ed4 <_wcrtomb_r+0x48>)
   12eb6:	4623      	mov	r3, r4
   12eb8:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   12ebc:	4628      	mov	r0, r5
   12ebe:	460a      	mov	r2, r1
   12ec0:	a901      	add	r1, sp, #4
   12ec2:	47b0      	blx	r6
   12ec4:	1c43      	adds	r3, r0, #1
   12ec6:	d1ef      	bne.n	12ea8 <_wcrtomb_r+0x1c>
   12ec8:	2200      	movs	r2, #0
   12eca:	238a      	movs	r3, #138	; 0x8a
   12ecc:	6022      	str	r2, [r4, #0]
   12ece:	602b      	str	r3, [r5, #0]
   12ed0:	b004      	add	sp, #16
   12ed2:	bd70      	pop	{r4, r5, r6, pc}
   12ed4:	2000810c 	.word	0x2000810c

00012ed8 <_wcsrtombs_r>:
   12ed8:	b510      	push	{r4, lr}
   12eda:	b082      	sub	sp, #8
   12edc:	9c04      	ldr	r4, [sp, #16]
   12ede:	e9cd 3400 	strd	r3, r4, [sp]
   12ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12ee6:	f002 fd71 	bl	159cc <_wcsnrtombs_r>
   12eea:	b002      	add	sp, #8
   12eec:	bd10      	pop	{r4, pc}
   12eee:	bf00      	nop

00012ef0 <iswspace>:
   12ef0:	2100      	movs	r1, #0
   12ef2:	f000 b801 	b.w	12ef8 <iswspace_l>
   12ef6:	bf00      	nop

00012ef8 <iswspace_l>:
   12ef8:	b510      	push	{r4, lr}
   12efa:	f000 f907 	bl	1310c <_jp2uc_l>
   12efe:	4604      	mov	r4, r0
   12f00:	f001 f87c 	bl	13ffc <category>
   12f04:	f1a0 031a 	sub.w	r3, r0, #26
   12f08:	b2db      	uxtb	r3, r3
   12f0a:	2b02      	cmp	r3, #2
   12f0c:	d906      	bls.n	12f1c <iswspace_l+0x24>
   12f0e:	f1a4 0009 	sub.w	r0, r4, #9
   12f12:	2804      	cmp	r0, #4
   12f14:	bf8c      	ite	hi
   12f16:	2000      	movhi	r0, #0
   12f18:	2001      	movls	r0, #1
   12f1a:	bd10      	pop	{r4, pc}
   12f1c:	2001      	movs	r0, #1
   12f1e:	bd10      	pop	{r4, pc}

00012f20 <frexp>:
   12f20:	b430      	push	{r4, r5}
   12f22:	b082      	sub	sp, #8
   12f24:	ed8d 0b00 	vstr	d0, [sp]
   12f28:	9a01      	ldr	r2, [sp, #4]
   12f2a:	4c19      	ldr	r4, [pc, #100]	; (12f90 <frexp+0x70>)
   12f2c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   12f30:	2100      	movs	r1, #0
   12f32:	42a3      	cmp	r3, r4
   12f34:	6001      	str	r1, [r0, #0]
   12f36:	dc21      	bgt.n	12f7c <frexp+0x5c>
   12f38:	9c00      	ldr	r4, [sp, #0]
   12f3a:	431c      	orrs	r4, r3
   12f3c:	d01e      	beq.n	12f7c <frexp+0x5c>
   12f3e:	4c15      	ldr	r4, [pc, #84]	; (12f94 <frexp+0x74>)
   12f40:	4014      	ands	r4, r2
   12f42:	b954      	cbnz	r4, 12f5a <frexp+0x3a>
   12f44:	ed9f 7b10 	vldr	d7, [pc, #64]	; 12f88 <frexp+0x68>
   12f48:	ee20 7b07 	vmul.f64	d7, d0, d7
   12f4c:	ed8d 7b00 	vstr	d7, [sp]
   12f50:	9a01      	ldr	r2, [sp, #4]
   12f52:	f06f 0135 	mvn.w	r1, #53	; 0x35
   12f56:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   12f5a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   12f5e:	e9dd 4500 	ldrd	r4, r5, [sp]
   12f62:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   12f66:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   12f6a:	151b      	asrs	r3, r3, #20
   12f6c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   12f70:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   12f74:	e9cd 4500 	strd	r4, r5, [sp]
   12f78:	440b      	add	r3, r1
   12f7a:	6003      	str	r3, [r0, #0]
   12f7c:	ed9d 0b00 	vldr	d0, [sp]
   12f80:	b002      	add	sp, #8
   12f82:	bc30      	pop	{r4, r5}
   12f84:	4770      	bx	lr
   12f86:	bf00      	nop
   12f88:	00000000 	.word	0x00000000
   12f8c:	43500000 	.word	0x43500000
   12f90:	7fefffff 	.word	0x7fefffff
   12f94:	7ff00000 	.word	0x7ff00000

00012f98 <__assert_func>:
   12f98:	b500      	push	{lr}
   12f9a:	4c0b      	ldr	r4, [pc, #44]	; (12fc8 <__assert_func+0x30>)
   12f9c:	6825      	ldr	r5, [r4, #0]
   12f9e:	4614      	mov	r4, r2
   12fa0:	68ee      	ldr	r6, [r5, #12]
   12fa2:	461a      	mov	r2, r3
   12fa4:	b085      	sub	sp, #20
   12fa6:	4603      	mov	r3, r0
   12fa8:	460d      	mov	r5, r1
   12faa:	b14c      	cbz	r4, 12fc0 <__assert_func+0x28>
   12fac:	4907      	ldr	r1, [pc, #28]	; (12fcc <__assert_func+0x34>)
   12fae:	9500      	str	r5, [sp, #0]
   12fb0:	e9cd 1401 	strd	r1, r4, [sp, #4]
   12fb4:	4630      	mov	r0, r6
   12fb6:	4906      	ldr	r1, [pc, #24]	; (12fd0 <__assert_func+0x38>)
   12fb8:	f001 f850 	bl	1405c <fiprintf>
   12fbc:	f7f6 fe9c 	bl	9cf8 <abort>
   12fc0:	4904      	ldr	r1, [pc, #16]	; (12fd4 <__assert_func+0x3c>)
   12fc2:	460c      	mov	r4, r1
   12fc4:	e7f3      	b.n	12fae <__assert_func+0x16>
   12fc6:	bf00      	nop
   12fc8:	20008694 	.word	0x20008694
   12fcc:	20000af8 	.word	0x20000af8
   12fd0:	20000b08 	.word	0x20000b08
   12fd4:	20000798 	.word	0x20000798

00012fd8 <__jp2uc>:
   12fd8:	2902      	cmp	r1, #2
   12fda:	d032      	beq.n	13042 <__jp2uc+0x6a>
   12fdc:	2903      	cmp	r1, #3
   12fde:	f3c0 2307 	ubfx	r3, r0, #8, #8
   12fe2:	bf1d      	ittte	ne
   12fe4:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   12fe8:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   12fec:	b2d2      	uxtbne	r2, r2
   12fee:	b2c2      	uxtbeq	r2, r0
   12ff0:	f103 0150 	add.w	r1, r3, #80	; 0x50
   12ff4:	b2c9      	uxtb	r1, r1
   12ff6:	291f      	cmp	r1, #31
   12ff8:	d806      	bhi.n	13008 <__jp2uc+0x30>
   12ffa:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   12ffe:	4288      	cmp	r0, r1
   13000:	d969      	bls.n	130d6 <__jp2uc+0xfe>
   13002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13006:	4770      	bx	lr
   13008:	f103 0130 	add.w	r1, r3, #48	; 0x30
   1300c:	b2c9      	uxtb	r1, r1
   1300e:	2924      	cmp	r1, #36	; 0x24
   13010:	d80e      	bhi.n	13030 <__jp2uc+0x58>
   13012:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   13016:	4288      	cmp	r0, r1
   13018:	d8f3      	bhi.n	13002 <__jp2uc+0x2a>
   1301a:	3bd0      	subs	r3, #208	; 0xd0
   1301c:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   13020:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   13024:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   13028:	4a30      	ldr	r2, [pc, #192]	; (130ec <__jp2uc+0x114>)
   1302a:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1302e:	4770      	bx	lr
   13030:	3ba1      	subs	r3, #161	; 0xa1
   13032:	2b07      	cmp	r3, #7
   13034:	d8e5      	bhi.n	13002 <__jp2uc+0x2a>
   13036:	e8df f003 	tbb	[pc, r3]
   1303a:	3e48      	.short	0x3e48
   1303c:	25292e34 	.word	0x25292e34
   13040:	1921      	.short	0x1921
   13042:	b2c2      	uxtb	r2, r0
   13044:	2a9e      	cmp	r2, #158	; 0x9e
   13046:	f3c0 2107 	ubfx	r1, r0, #8, #8
   1304a:	d90b      	bls.n	13064 <__jp2uc+0x8c>
   1304c:	3223      	adds	r2, #35	; 0x23
   1304e:	b2d2      	uxtb	r2, r2
   13050:	2380      	movs	r3, #128	; 0x80
   13052:	299f      	cmp	r1, #159	; 0x9f
   13054:	bf94      	ite	ls
   13056:	3970      	subls	r1, #112	; 0x70
   13058:	3150      	addhi	r1, #80	; 0x50
   1305a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   1305e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   13062:	e7c5      	b.n	12ff0 <__jp2uc+0x18>
   13064:	3a7e      	subs	r2, #126	; 0x7e
   13066:	b2d2      	uxtb	r2, r2
   13068:	237f      	movs	r3, #127	; 0x7f
   1306a:	e7f2      	b.n	13052 <__jp2uc+0x7a>
   1306c:	2ac0      	cmp	r2, #192	; 0xc0
   1306e:	d8c8      	bhi.n	13002 <__jp2uc+0x2a>
   13070:	4b1f      	ldr	r3, [pc, #124]	; (130f0 <__jp2uc+0x118>)
   13072:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   13076:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1307a:	4770      	bx	lr
   1307c:	2af1      	cmp	r2, #241	; 0xf1
   1307e:	d8c0      	bhi.n	13002 <__jp2uc+0x2a>
   13080:	4b1c      	ldr	r3, [pc, #112]	; (130f4 <__jp2uc+0x11c>)
   13082:	e019      	b.n	130b8 <__jp2uc+0xe0>
   13084:	2ad8      	cmp	r2, #216	; 0xd8
   13086:	d8bc      	bhi.n	13002 <__jp2uc+0x2a>
   13088:	4b1b      	ldr	r3, [pc, #108]	; (130f8 <__jp2uc+0x120>)
   1308a:	e015      	b.n	130b8 <__jp2uc+0xe0>
   1308c:	2af6      	cmp	r2, #246	; 0xf6
   1308e:	d8b8      	bhi.n	13002 <__jp2uc+0x2a>
   13090:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   13094:	4770      	bx	lr
   13096:	2af3      	cmp	r2, #243	; 0xf3
   13098:	d8b3      	bhi.n	13002 <__jp2uc+0x2a>
   1309a:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   1309e:	3020      	adds	r0, #32
   130a0:	4770      	bx	lr
   130a2:	4b16      	ldr	r3, [pc, #88]	; (130fc <__jp2uc+0x124>)
   130a4:	4413      	add	r3, r2
   130a6:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   130aa:	2b00      	cmp	r3, #0
   130ac:	d0a9      	beq.n	13002 <__jp2uc+0x2a>
   130ae:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   130b2:	3060      	adds	r0, #96	; 0x60
   130b4:	4770      	bx	lr
   130b6:	4b12      	ldr	r3, [pc, #72]	; (13100 <__jp2uc+0x128>)
   130b8:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   130bc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   130c0:	2800      	cmp	r0, #0
   130c2:	bf08      	it	eq
   130c4:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   130c8:	4770      	bx	lr
   130ca:	4b0e      	ldr	r3, [pc, #56]	; (13104 <__jp2uc+0x12c>)
   130cc:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   130d0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   130d4:	4770      	bx	lr
   130d6:	3bb0      	subs	r3, #176	; 0xb0
   130d8:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   130dc:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   130e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   130e4:	4a08      	ldr	r2, [pc, #32]	; (13108 <__jp2uc+0x130>)
   130e6:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   130ea:	4770      	bx	lr
   130ec:	20005ec4 	.word	0x20005ec4
   130f0:	200011ec 	.word	0x200011ec
   130f4:	20001148 	.word	0x20001148
   130f8:	200010d8 	.word	0x200010d8
   130fc:	2000107c 	.word	0x2000107c
   13100:	20000fc0 	.word	0x20000fc0
   13104:	20000f04 	.word	0x20000f04
   13108:	2000122c 	.word	0x2000122c

0001310c <_jp2uc_l>:
   1310c:	b538      	push	{r3, r4, r5, lr}
   1310e:	4605      	mov	r5, r0
   13110:	b1b9      	cbz	r1, 13142 <_jp2uc_l+0x36>
   13112:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   13116:	4912      	ldr	r1, [pc, #72]	; (13160 <_jp2uc_l+0x54>)
   13118:	4620      	mov	r0, r4
   1311a:	f7fa fb65 	bl	d7e8 <strcmp>
   1311e:	b928      	cbnz	r0, 1312c <_jp2uc_l+0x20>
   13120:	4628      	mov	r0, r5
   13122:	2101      	movs	r1, #1
   13124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13128:	f7ff bf56 	b.w	12fd8 <__jp2uc>
   1312c:	490d      	ldr	r1, [pc, #52]	; (13164 <_jp2uc_l+0x58>)
   1312e:	4620      	mov	r0, r4
   13130:	f7fa fb5a 	bl	d7e8 <strcmp>
   13134:	b938      	cbnz	r0, 13146 <_jp2uc_l+0x3a>
   13136:	4628      	mov	r0, r5
   13138:	2102      	movs	r1, #2
   1313a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1313e:	f7ff bf4b 	b.w	12fd8 <__jp2uc>
   13142:	4c09      	ldr	r4, [pc, #36]	; (13168 <_jp2uc_l+0x5c>)
   13144:	e7e7      	b.n	13116 <_jp2uc_l+0xa>
   13146:	4909      	ldr	r1, [pc, #36]	; (1316c <_jp2uc_l+0x60>)
   13148:	4620      	mov	r0, r4
   1314a:	f7fa fb4d 	bl	d7e8 <strcmp>
   1314e:	b928      	cbnz	r0, 1315c <_jp2uc_l+0x50>
   13150:	4628      	mov	r0, r5
   13152:	2103      	movs	r1, #3
   13154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13158:	f7ff bf3e 	b.w	12fd8 <__jp2uc>
   1315c:	4628      	mov	r0, r5
   1315e:	bd38      	pop	{r3, r4, r5, pc}
   13160:	20000e9c 	.word	0x20000e9c
   13164:	20000ea0 	.word	0x20000ea0
   13168:	20008236 	.word	0x20008236
   1316c:	20000ea8 	.word	0x20000ea8

00013170 <_calloc_r>:
   13170:	b538      	push	{r3, r4, r5, lr}
   13172:	fba1 1402 	umull	r1, r4, r1, r2
   13176:	bb8c      	cbnz	r4, 131dc <_calloc_r+0x6c>
   13178:	f7f8 fae6 	bl	b748 <_malloc_r>
   1317c:	4605      	mov	r5, r0
   1317e:	b1e0      	cbz	r0, 131ba <_calloc_r+0x4a>
   13180:	f850 2c04 	ldr.w	r2, [r0, #-4]
   13184:	f022 0203 	bic.w	r2, r2, #3
   13188:	3a04      	subs	r2, #4
   1318a:	2a24      	cmp	r2, #36	; 0x24
   1318c:	d817      	bhi.n	131be <_calloc_r+0x4e>
   1318e:	2a13      	cmp	r2, #19
   13190:	d91a      	bls.n	131c8 <_calloc_r+0x58>
   13192:	2a1b      	cmp	r2, #27
   13194:	e9c0 4400 	strd	r4, r4, [r0]
   13198:	d91d      	bls.n	131d6 <_calloc_r+0x66>
   1319a:	2a24      	cmp	r2, #36	; 0x24
   1319c:	bf14      	ite	ne
   1319e:	f100 0210 	addne.w	r2, r0, #16
   131a2:	f100 0218 	addeq.w	r2, r0, #24
   131a6:	f04f 0300 	mov.w	r3, #0
   131aa:	e9c0 4402 	strd	r4, r4, [r0, #8]
   131ae:	bf04      	itt	eq
   131b0:	6104      	streq	r4, [r0, #16]
   131b2:	6144      	streq	r4, [r0, #20]
   131b4:	e9c2 3300 	strd	r3, r3, [r2]
   131b8:	6093      	str	r3, [r2, #8]
   131ba:	4628      	mov	r0, r5
   131bc:	bd38      	pop	{r3, r4, r5, pc}
   131be:	4621      	mov	r1, r4
   131c0:	f7fa f990 	bl	d4e4 <memset>
   131c4:	4628      	mov	r0, r5
   131c6:	bd38      	pop	{r3, r4, r5, pc}
   131c8:	4602      	mov	r2, r0
   131ca:	2300      	movs	r3, #0
   131cc:	e9c2 3300 	strd	r3, r3, [r2]
   131d0:	6093      	str	r3, [r2, #8]
   131d2:	4628      	mov	r0, r5
   131d4:	bd38      	pop	{r3, r4, r5, pc}
   131d6:	f100 0208 	add.w	r2, r0, #8
   131da:	e7f6      	b.n	131ca <_calloc_r+0x5a>
   131dc:	f7fa faf0 	bl	d7c0 <__errno>
   131e0:	230c      	movs	r3, #12
   131e2:	2500      	movs	r5, #0
   131e4:	6003      	str	r3, [r0, #0]
   131e6:	e7e8      	b.n	131ba <_calloc_r+0x4a>

000131e8 <quorem>:
   131e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131ec:	6903      	ldr	r3, [r0, #16]
   131ee:	690c      	ldr	r4, [r1, #16]
   131f0:	42a3      	cmp	r3, r4
   131f2:	b083      	sub	sp, #12
   131f4:	f2c0 8087 	blt.w	13306 <quorem+0x11e>
   131f8:	3c01      	subs	r4, #1
   131fa:	f101 0514 	add.w	r5, r1, #20
   131fe:	00a3      	lsls	r3, r4, #2
   13200:	f100 0814 	add.w	r8, r0, #20
   13204:	9300      	str	r3, [sp, #0]
   13206:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1320a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   1320e:	3301      	adds	r3, #1
   13210:	4681      	mov	r9, r0
   13212:	429a      	cmp	r2, r3
   13214:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   13218:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   1321c:	9001      	str	r0, [sp, #4]
   1321e:	fbb2 f6f3 	udiv	r6, r2, r3
   13222:	d33b      	bcc.n	1329c <quorem+0xb4>
   13224:	f04f 0c00 	mov.w	ip, #0
   13228:	46ae      	mov	lr, r5
   1322a:	4640      	mov	r0, r8
   1322c:	46e2      	mov	sl, ip
   1322e:	4663      	mov	r3, ip
   13230:	f85e bb04 	ldr.w	fp, [lr], #4
   13234:	6802      	ldr	r2, [r0, #0]
   13236:	fa1f fc8b 	uxth.w	ip, fp
   1323a:	fb06 330c 	mla	r3, r6, ip, r3
   1323e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   13242:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   13246:	fb06 cc0b 	mla	ip, r6, fp, ip
   1324a:	b29b      	uxth	r3, r3
   1324c:	ebaa 0303 	sub.w	r3, sl, r3
   13250:	fa1f fa8c 	uxth.w	sl, ip
   13254:	fa13 f382 	uxtah	r3, r3, r2
   13258:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   1325c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   13260:	b29b      	uxth	r3, r3
   13262:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   13266:	4577      	cmp	r7, lr
   13268:	f840 3b04 	str.w	r3, [r0], #4
   1326c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   13270:	ea4f 431c 	mov.w	r3, ip, lsr #16
   13274:	d2dc      	bcs.n	13230 <quorem+0x48>
   13276:	9b00      	ldr	r3, [sp, #0]
   13278:	f858 3003 	ldr.w	r3, [r8, r3]
   1327c:	b973      	cbnz	r3, 1329c <quorem+0xb4>
   1327e:	9b01      	ldr	r3, [sp, #4]
   13280:	3b04      	subs	r3, #4
   13282:	4598      	cmp	r8, r3
   13284:	d304      	bcc.n	13290 <quorem+0xa8>
   13286:	e007      	b.n	13298 <quorem+0xb0>
   13288:	4598      	cmp	r8, r3
   1328a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   1328e:	d203      	bcs.n	13298 <quorem+0xb0>
   13290:	f853 2904 	ldr.w	r2, [r3], #-4
   13294:	2a00      	cmp	r2, #0
   13296:	d0f7      	beq.n	13288 <quorem+0xa0>
   13298:	f8c9 4010 	str.w	r4, [r9, #16]
   1329c:	4648      	mov	r0, r9
   1329e:	f7fe ff77 	bl	12190 <__mcmp>
   132a2:	2800      	cmp	r0, #0
   132a4:	db2b      	blt.n	132fe <quorem+0x116>
   132a6:	3601      	adds	r6, #1
   132a8:	4641      	mov	r1, r8
   132aa:	2300      	movs	r3, #0
   132ac:	f855 0b04 	ldr.w	r0, [r5], #4
   132b0:	f8d1 c000 	ldr.w	ip, [r1]
   132b4:	b282      	uxth	r2, r0
   132b6:	1a9a      	subs	r2, r3, r2
   132b8:	0c03      	lsrs	r3, r0, #16
   132ba:	fa12 f28c 	uxtah	r2, r2, ip
   132be:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   132c2:	eb03 4322 	add.w	r3, r3, r2, asr #16
   132c6:	b292      	uxth	r2, r2
   132c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   132cc:	42af      	cmp	r7, r5
   132ce:	f841 2b04 	str.w	r2, [r1], #4
   132d2:	ea4f 4323 	mov.w	r3, r3, asr #16
   132d6:	d2e9      	bcs.n	132ac <quorem+0xc4>
   132d8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   132dc:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   132e0:	b96a      	cbnz	r2, 132fe <quorem+0x116>
   132e2:	3b04      	subs	r3, #4
   132e4:	4598      	cmp	r8, r3
   132e6:	d304      	bcc.n	132f2 <quorem+0x10a>
   132e8:	e007      	b.n	132fa <quorem+0x112>
   132ea:	4598      	cmp	r8, r3
   132ec:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   132f0:	d203      	bcs.n	132fa <quorem+0x112>
   132f2:	f853 2904 	ldr.w	r2, [r3], #-4
   132f6:	2a00      	cmp	r2, #0
   132f8:	d0f7      	beq.n	132ea <quorem+0x102>
   132fa:	f8c9 4010 	str.w	r4, [r9, #16]
   132fe:	4630      	mov	r0, r6
   13300:	b003      	add	sp, #12
   13302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13306:	2000      	movs	r0, #0
   13308:	b003      	add	sp, #12
   1330a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1330e:	bf00      	nop

00013310 <_dtoa_r>:
   13310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13314:	ed2d 8b02 	vpush	{d8}
   13318:	b08f      	sub	sp, #60	; 0x3c
   1331a:	ed8d 0b02 	vstr	d0, [sp, #8]
   1331e:	9101      	str	r1, [sp, #4]
   13320:	6b81      	ldr	r1, [r0, #56]	; 0x38
   13322:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   13324:	9305      	str	r3, [sp, #20]
   13326:	ec57 6b10 	vmov	r6, r7, d0
   1332a:	4604      	mov	r4, r0
   1332c:	4693      	mov	fp, r2
   1332e:	b141      	cbz	r1, 13342 <_dtoa_r+0x32>
   13330:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   13332:	604a      	str	r2, [r1, #4]
   13334:	2301      	movs	r3, #1
   13336:	4093      	lsls	r3, r2
   13338:	608b      	str	r3, [r1, #8]
   1333a:	f7fe fc71 	bl	11c20 <_Bfree>
   1333e:	2300      	movs	r3, #0
   13340:	63a3      	str	r3, [r4, #56]	; 0x38
   13342:	f1b7 0800 	subs.w	r8, r7, #0
   13346:	bfb4      	ite	lt
   13348:	2301      	movlt	r3, #1
   1334a:	2300      	movge	r3, #0
   1334c:	602b      	str	r3, [r5, #0]
   1334e:	4bbe      	ldr	r3, [pc, #760]	; (13648 <_dtoa_r+0x338>)
   13350:	bfbc      	itt	lt
   13352:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   13356:	f8cd 800c 	strlt.w	r8, [sp, #12]
   1335a:	ea33 0308 	bics.w	r3, r3, r8
   1335e:	f000 809f 	beq.w	134a0 <_dtoa_r+0x190>
   13362:	ed9d 8b02 	vldr	d8, [sp, #8]
   13366:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1336e:	d111      	bne.n	13394 <_dtoa_r+0x84>
   13370:	9a05      	ldr	r2, [sp, #20]
   13372:	2301      	movs	r3, #1
   13374:	6013      	str	r3, [r2, #0]
   13376:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   13378:	2b00      	cmp	r3, #0
   1337a:	f000 823f 	beq.w	137fc <_dtoa_r+0x4ec>
   1337e:	4bb3      	ldr	r3, [pc, #716]	; (1364c <_dtoa_r+0x33c>)
   13380:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13382:	6013      	str	r3, [r2, #0]
   13384:	3b01      	subs	r3, #1
   13386:	9300      	str	r3, [sp, #0]
   13388:	9800      	ldr	r0, [sp, #0]
   1338a:	b00f      	add	sp, #60	; 0x3c
   1338c:	ecbd 8b02 	vpop	{d8}
   13390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13394:	aa0c      	add	r2, sp, #48	; 0x30
   13396:	a90d      	add	r1, sp, #52	; 0x34
   13398:	4620      	mov	r0, r4
   1339a:	eeb0 0b48 	vmov.f64	d0, d8
   1339e:	f7ff f857 	bl	12450 <__d2b>
   133a2:	ea5f 5318 	movs.w	r3, r8, lsr #20
   133a6:	4605      	mov	r5, r0
   133a8:	f040 8092 	bne.w	134d0 <_dtoa_r+0x1c0>
   133ac:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   133b0:	440b      	add	r3, r1
   133b2:	f203 4232 	addw	r2, r3, #1074	; 0x432
   133b6:	2a20      	cmp	r2, #32
   133b8:	f340 82fa 	ble.w	139b0 <_dtoa_r+0x6a0>
   133bc:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   133c0:	fa08 f802 	lsl.w	r8, r8, r2
   133c4:	f203 4212 	addw	r2, r3, #1042	; 0x412
   133c8:	40d6      	lsrs	r6, r2
   133ca:	ea48 0206 	orr.w	r2, r8, r6
   133ce:	ee07 2a10 	vmov	s14, r2
   133d2:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   133d6:	1e58      	subs	r0, r3, #1
   133d8:	ee17 6a90 	vmov	r6, s15
   133dc:	ec53 2b17 	vmov	r2, r3, d7
   133e0:	f04f 0a01 	mov.w	sl, #1
   133e4:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   133e8:	ed9f 3b91 	vldr	d3, [pc, #580]	; 13630 <_dtoa_r+0x320>
   133ec:	ed9f 7b92 	vldr	d7, [pc, #584]	; 13638 <_dtoa_r+0x328>
   133f0:	ed9f 5b93 	vldr	d5, [pc, #588]	; 13640 <_dtoa_r+0x330>
   133f4:	ee06 0a90 	vmov	s13, r0
   133f8:	ec43 2b12 	vmov	d2, r2, r3
   133fc:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   13400:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   13404:	ee32 6b46 	vsub.f64	d6, d2, d6
   13408:	eea6 7b03 	vfma.f64	d7, d6, d3
   1340c:	eea4 7b05 	vfma.f64	d7, d4, d5
   13410:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   13414:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   13418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1341c:	ee16 7a90 	vmov	r7, s13
   13420:	d508      	bpl.n	13434 <_dtoa_r+0x124>
   13422:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   13426:	eeb4 6b47 	vcmp.f64	d6, d7
   1342a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1342e:	bf18      	it	ne
   13430:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   13434:	2f16      	cmp	r7, #22
   13436:	f200 8145 	bhi.w	136c4 <_dtoa_r+0x3b4>
   1343a:	4b85      	ldr	r3, [pc, #532]	; (13650 <_dtoa_r+0x340>)
   1343c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   13440:	ed93 7b00 	vldr	d7, [r3]
   13444:	eeb4 8bc7 	vcmpe.f64	d8, d7
   13448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1344c:	d557      	bpl.n	134fe <_dtoa_r+0x1ee>
   1344e:	1a09      	subs	r1, r1, r0
   13450:	2300      	movs	r3, #0
   13452:	f1b1 0801 	subs.w	r8, r1, #1
   13456:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   1345a:	930a      	str	r3, [sp, #40]	; 0x28
   1345c:	f100 8139 	bmi.w	136d2 <_dtoa_r+0x3c2>
   13460:	2300      	movs	r3, #0
   13462:	9306      	str	r3, [sp, #24]
   13464:	2f00      	cmp	r7, #0
   13466:	da52      	bge.n	1350e <_dtoa_r+0x1fe>
   13468:	9b06      	ldr	r3, [sp, #24]
   1346a:	9704      	str	r7, [sp, #16]
   1346c:	1bdb      	subs	r3, r3, r7
   1346e:	9306      	str	r3, [sp, #24]
   13470:	427b      	negs	r3, r7
   13472:	9308      	str	r3, [sp, #32]
   13474:	9b01      	ldr	r3, [sp, #4]
   13476:	2b09      	cmp	r3, #9
   13478:	f04f 0700 	mov.w	r7, #0
   1347c:	d84e      	bhi.n	1351c <_dtoa_r+0x20c>
   1347e:	2b05      	cmp	r3, #5
   13480:	f340 829d 	ble.w	139be <_dtoa_r+0x6ae>
   13484:	3b04      	subs	r3, #4
   13486:	9301      	str	r3, [sp, #4]
   13488:	2600      	movs	r6, #0
   1348a:	9b01      	ldr	r3, [sp, #4]
   1348c:	1e9a      	subs	r2, r3, #2
   1348e:	2a03      	cmp	r2, #3
   13490:	f200 8125 	bhi.w	136de <_dtoa_r+0x3ce>
   13494:	e8df f012 	tbh	[pc, r2, lsl #1]
   13498:	03a703aa 	.word	0x03a703aa
   1349c:	037e039d 	.word	0x037e039d
   134a0:	9a05      	ldr	r2, [sp, #20]
   134a2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   134a6:	f242 730f 	movw	r3, #9999	; 0x270f
   134aa:	ea58 0806 	orrs.w	r8, r8, r6
   134ae:	6013      	str	r3, [r2, #0]
   134b0:	d11e      	bne.n	134f0 <_dtoa_r+0x1e0>
   134b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   134b4:	2b00      	cmp	r3, #0
   134b6:	f000 8591 	beq.w	13fdc <_dtoa_r+0xccc>
   134ba:	4b66      	ldr	r3, [pc, #408]	; (13654 <_dtoa_r+0x344>)
   134bc:	9300      	str	r3, [sp, #0]
   134be:	3308      	adds	r3, #8
   134c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   134c2:	9800      	ldr	r0, [sp, #0]
   134c4:	6013      	str	r3, [r2, #0]
   134c6:	b00f      	add	sp, #60	; 0x3c
   134c8:	ecbd 8b02 	vpop	{d8}
   134cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134d0:	ee18 6a90 	vmov	r6, s17
   134d4:	f3c6 0613 	ubfx	r6, r6, #0, #20
   134d8:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   134dc:	ec53 2b18 	vmov	r2, r3, d8
   134e0:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   134e4:	990c      	ldr	r1, [sp, #48]	; 0x30
   134e6:	f04f 0a00 	mov.w	sl, #0
   134ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   134ee:	e77b      	b.n	133e8 <_dtoa_r+0xd8>
   134f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   134f2:	2b00      	cmp	r3, #0
   134f4:	f040 833b 	bne.w	13b6e <_dtoa_r+0x85e>
   134f8:	4b57      	ldr	r3, [pc, #348]	; (13658 <_dtoa_r+0x348>)
   134fa:	9300      	str	r3, [sp, #0]
   134fc:	e744      	b.n	13388 <_dtoa_r+0x78>
   134fe:	1a09      	subs	r1, r1, r0
   13500:	2300      	movs	r3, #0
   13502:	f1b1 0801 	subs.w	r8, r1, #1
   13506:	930a      	str	r3, [sp, #40]	; 0x28
   13508:	f100 80e3 	bmi.w	136d2 <_dtoa_r+0x3c2>
   1350c:	9306      	str	r3, [sp, #24]
   1350e:	2300      	movs	r3, #0
   13510:	9308      	str	r3, [sp, #32]
   13512:	9b01      	ldr	r3, [sp, #4]
   13514:	9704      	str	r7, [sp, #16]
   13516:	2b09      	cmp	r3, #9
   13518:	44b8      	add	r8, r7
   1351a:	d9b0      	bls.n	1347e <_dtoa_r+0x16e>
   1351c:	2300      	movs	r3, #0
   1351e:	2601      	movs	r6, #1
   13520:	9301      	str	r3, [sp, #4]
   13522:	9607      	str	r6, [sp, #28]
   13524:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   13528:	469b      	mov	fp, r3
   1352a:	2100      	movs	r1, #0
   1352c:	63e1      	str	r1, [r4, #60]	; 0x3c
   1352e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   13532:	4620      	mov	r0, r4
   13534:	f7fe fb4e 	bl	11bd4 <_Balloc>
   13538:	9000      	str	r0, [sp, #0]
   1353a:	2800      	cmp	r0, #0
   1353c:	f000 8540 	beq.w	13fc0 <_dtoa_r+0xcb0>
   13540:	9b00      	ldr	r3, [sp, #0]
   13542:	63a3      	str	r3, [r4, #56]	; 0x38
   13544:	f1b9 0f0e 	cmp.w	r9, #14
   13548:	f200 80dc 	bhi.w	13704 <_dtoa_r+0x3f4>
   1354c:	2e00      	cmp	r6, #0
   1354e:	f000 80d9 	beq.w	13704 <_dtoa_r+0x3f4>
   13552:	9b04      	ldr	r3, [sp, #16]
   13554:	2b00      	cmp	r3, #0
   13556:	f340 83de 	ble.w	13d16 <_dtoa_r+0xa06>
   1355a:	4a3d      	ldr	r2, [pc, #244]	; (13650 <_dtoa_r+0x340>)
   1355c:	f003 010f 	and.w	r1, r3, #15
   13560:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   13564:	ed92 7b00 	vldr	d7, [r2]
   13568:	111a      	asrs	r2, r3, #4
   1356a:	05db      	lsls	r3, r3, #23
   1356c:	f140 8382 	bpl.w	13c74 <_dtoa_r+0x964>
   13570:	493a      	ldr	r1, [pc, #232]	; (1365c <_dtoa_r+0x34c>)
   13572:	ed91 6b08 	vldr	d6, [r1, #32]
   13576:	f002 020f 	and.w	r2, r2, #15
   1357a:	2003      	movs	r0, #3
   1357c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   13580:	b15a      	cbz	r2, 1359a <_dtoa_r+0x28a>
   13582:	4936      	ldr	r1, [pc, #216]	; (1365c <_dtoa_r+0x34c>)
   13584:	07d6      	lsls	r6, r2, #31
   13586:	d504      	bpl.n	13592 <_dtoa_r+0x282>
   13588:	ed91 6b00 	vldr	d6, [r1]
   1358c:	3001      	adds	r0, #1
   1358e:	ee27 7b06 	vmul.f64	d7, d7, d6
   13592:	1052      	asrs	r2, r2, #1
   13594:	f101 0108 	add.w	r1, r1, #8
   13598:	d1f4      	bne.n	13584 <_dtoa_r+0x274>
   1359a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   1359e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   135a0:	b13b      	cbz	r3, 135b2 <_dtoa_r+0x2a2>
   135a2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   135a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
   135aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   135ae:	f100 84ae 	bmi.w	13f0e <_dtoa_r+0xbfe>
   135b2:	ee07 0a90 	vmov	s15, r0
   135b6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   135ba:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   135be:	eea5 7b06 	vfma.f64	d7, d5, d6
   135c2:	ee17 2a90 	vmov	r2, s15
   135c6:	ec51 0b17 	vmov	r0, r1, d7
   135ca:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   135ce:	f1b9 0f00 	cmp.w	r9, #0
   135d2:	f000 8388 	beq.w	13ce6 <_dtoa_r+0x9d6>
   135d6:	9e04      	ldr	r6, [sp, #16]
   135d8:	464a      	mov	r2, r9
   135da:	9b07      	ldr	r3, [sp, #28]
   135dc:	2b00      	cmp	r3, #0
   135de:	f000 8447 	beq.w	13e70 <_dtoa_r+0xb60>
   135e2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   135e6:	4b1a      	ldr	r3, [pc, #104]	; (13650 <_dtoa_r+0x340>)
   135e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   135ec:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   135f0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   135f4:	ee36 7b47 	vsub.f64	d7, d6, d7
   135f8:	ed1c 6b02 	vldr	d6, [ip, #-8]
   135fc:	ee83 5b06 	vdiv.f64	d5, d3, d6
   13600:	ec41 0b16 	vmov	d6, r0, r1
   13604:	ee14 0a90 	vmov	r0, s9
   13608:	ee35 5b46 	vsub.f64	d5, d5, d6
   1360c:	9900      	ldr	r1, [sp, #0]
   1360e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   13612:	3030      	adds	r0, #48	; 0x30
   13614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13618:	f801 0b01 	strb.w	r0, [r1], #1
   1361c:	f300 84ac 	bgt.w	13f78 <_dtoa_r+0xc68>
   13620:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   13624:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   13628:	f04f 0c00 	mov.w	ip, #0
   1362c:	e031      	b.n	13692 <_dtoa_r+0x382>
   1362e:	bf00      	nop
   13630:	636f4361 	.word	0x636f4361
   13634:	3fd287a7 	.word	0x3fd287a7
   13638:	8b60c8b3 	.word	0x8b60c8b3
   1363c:	3fc68a28 	.word	0x3fc68a28
   13640:	509f79fb 	.word	0x509f79fb
   13644:	3fd34413 	.word	0x3fd34413
   13648:	7ff00000 	.word	0x7ff00000
   1364c:	20000f01 	.word	0x20000f01
   13650:	200002a8 	.word	0x200002a8
   13654:	20000e28 	.word	0x20000e28
   13658:	20000e34 	.word	0x20000e34
   1365c:	20000280 	.word	0x20000280
   13660:	f10c 0c01 	add.w	ip, ip, #1
   13664:	4594      	cmp	ip, r2
   13666:	da4d      	bge.n	13704 <_dtoa_r+0x3f4>
   13668:	ee27 7b04 	vmul.f64	d7, d7, d4
   1366c:	ee25 5b04 	vmul.f64	d5, d5, d4
   13670:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   13674:	ee16 3a90 	vmov	r3, s13
   13678:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   1367c:	3330      	adds	r3, #48	; 0x30
   1367e:	ee37 7b43 	vsub.f64	d7, d7, d3
   13682:	eeb4 7bc5 	vcmpe.f64	d7, d5
   13686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1368a:	f801 3b01 	strb.w	r3, [r1], #1
   1368e:	f100 8473 	bmi.w	13f78 <_dtoa_r+0xc68>
   13692:	ee32 6b47 	vsub.f64	d6, d2, d7
   13696:	eeb4 6bc5 	vcmpe.f64	d6, d5
   1369a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1369e:	d5df      	bpl.n	13660 <_dtoa_r+0x350>
   136a0:	9a00      	ldr	r2, [sp, #0]
   136a2:	9604      	str	r6, [sp, #16]
   136a4:	e002      	b.n	136ac <_dtoa_r+0x39c>
   136a6:	428a      	cmp	r2, r1
   136a8:	f000 8450 	beq.w	13f4c <_dtoa_r+0xc3c>
   136ac:	4689      	mov	r9, r1
   136ae:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   136b2:	2b39      	cmp	r3, #57	; 0x39
   136b4:	d0f7      	beq.n	136a6 <_dtoa_r+0x396>
   136b6:	3301      	adds	r3, #1
   136b8:	b2db      	uxtb	r3, r3
   136ba:	700b      	strb	r3, [r1, #0]
   136bc:	9b04      	ldr	r3, [sp, #16]
   136be:	3301      	adds	r3, #1
   136c0:	9304      	str	r3, [sp, #16]
   136c2:	e155      	b.n	13970 <_dtoa_r+0x660>
   136c4:	1a09      	subs	r1, r1, r0
   136c6:	2301      	movs	r3, #1
   136c8:	f1b1 0801 	subs.w	r8, r1, #1
   136cc:	930a      	str	r3, [sp, #40]	; 0x28
   136ce:	f57f aec7 	bpl.w	13460 <_dtoa_r+0x150>
   136d2:	f1c1 0301 	rsb	r3, r1, #1
   136d6:	9306      	str	r3, [sp, #24]
   136d8:	f04f 0800 	mov.w	r8, #0
   136dc:	e6c2      	b.n	13464 <_dtoa_r+0x154>
   136de:	2600      	movs	r6, #0
   136e0:	63e6      	str	r6, [r4, #60]	; 0x3c
   136e2:	4631      	mov	r1, r6
   136e4:	4620      	mov	r0, r4
   136e6:	f7fe fa75 	bl	11bd4 <_Balloc>
   136ea:	9000      	str	r0, [sp, #0]
   136ec:	2800      	cmp	r0, #0
   136ee:	f000 8467 	beq.w	13fc0 <_dtoa_r+0xcb0>
   136f2:	9b00      	ldr	r3, [sp, #0]
   136f4:	63a3      	str	r3, [r4, #56]	; 0x38
   136f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   136fa:	930b      	str	r3, [sp, #44]	; 0x2c
   136fc:	4699      	mov	r9, r3
   136fe:	2301      	movs	r3, #1
   13700:	46b3      	mov	fp, r6
   13702:	9307      	str	r3, [sp, #28]
   13704:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13706:	2a00      	cmp	r2, #0
   13708:	db55      	blt.n	137b6 <_dtoa_r+0x4a6>
   1370a:	9904      	ldr	r1, [sp, #16]
   1370c:	290e      	cmp	r1, #14
   1370e:	dc52      	bgt.n	137b6 <_dtoa_r+0x4a6>
   13710:	4bb7      	ldr	r3, [pc, #732]	; (139f0 <_dtoa_r+0x6e0>)
   13712:	f1bb 0f00 	cmp.w	fp, #0
   13716:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1371a:	ed93 6b00 	vldr	d6, [r3]
   1371e:	da15      	bge.n	1374c <_dtoa_r+0x43c>
   13720:	f1b9 0f00 	cmp.w	r9, #0
   13724:	dc12      	bgt.n	1374c <_dtoa_r+0x43c>
   13726:	f040 82f2 	bne.w	13d0e <_dtoa_r+0x9fe>
   1372a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1372e:	ee26 7b07 	vmul.f64	d7, d6, d7
   13732:	eeb4 8bc7 	vcmpe.f64	d8, d7
   13736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1373a:	46ca      	mov	sl, r9
   1373c:	464e      	mov	r6, r9
   1373e:	f200 826d 	bhi.w	13c1c <_dtoa_r+0x90c>
   13742:	f8dd 8000 	ldr.w	r8, [sp]
   13746:	ea6f 0b0b 	mvn.w	fp, fp
   1374a:	e270      	b.n	13c2e <_dtoa_r+0x91e>
   1374c:	ee88 7b06 	vdiv.f64	d7, d8, d6
   13750:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   13754:	9900      	ldr	r1, [sp, #0]
   13756:	ee17 3a10 	vmov	r3, s14
   1375a:	f1b9 0f01 	cmp.w	r9, #1
   1375e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   13762:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   13766:	f801 3b01 	strb.w	r3, [r1], #1
   1376a:	eea5 8b46 	vfms.f64	d8, d5, d6
   1376e:	f000 8334 	beq.w	13dda <_dtoa_r+0xaca>
   13772:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   13776:	2301      	movs	r3, #1
   13778:	e011      	b.n	1379e <_dtoa_r+0x48e>
   1377a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   1377e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   13782:	3301      	adds	r3, #1
   13784:	ee17 2a10 	vmov	r2, s14
   13788:	454b      	cmp	r3, r9
   1378a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   1378e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   13792:	f801 2b01 	strb.w	r2, [r1], #1
   13796:	eea5 8b46 	vfms.f64	d8, d5, d6
   1379a:	f000 831e 	beq.w	13dda <_dtoa_r+0xaca>
   1379e:	ee28 8b04 	vmul.f64	d8, d8, d4
   137a2:	eeb5 8b40 	vcmp.f64	d8, #0.0
   137a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   137aa:	d1e6      	bne.n	1377a <_dtoa_r+0x46a>
   137ac:	9b04      	ldr	r3, [sp, #16]
   137ae:	3301      	adds	r3, #1
   137b0:	9304      	str	r3, [sp, #16]
   137b2:	4689      	mov	r9, r1
   137b4:	e0dc      	b.n	13970 <_dtoa_r+0x660>
   137b6:	9b07      	ldr	r3, [sp, #28]
   137b8:	b343      	cbz	r3, 1380c <_dtoa_r+0x4fc>
   137ba:	9b01      	ldr	r3, [sp, #4]
   137bc:	2b01      	cmp	r3, #1
   137be:	f340 8276 	ble.w	13cae <_dtoa_r+0x99e>
   137c2:	9b08      	ldr	r3, [sp, #32]
   137c4:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   137c8:	4553      	cmp	r3, sl
   137ca:	f280 823f 	bge.w	13c4c <_dtoa_r+0x93c>
   137ce:	9b08      	ldr	r3, [sp, #32]
   137d0:	f8cd a020 	str.w	sl, [sp, #32]
   137d4:	ebaa 0203 	sub.w	r2, sl, r3
   137d8:	4417      	add	r7, r2
   137da:	f04f 0a00 	mov.w	sl, #0
   137de:	f1b9 0f00 	cmp.w	r9, #0
   137e2:	f2c0 8325 	blt.w	13e30 <_dtoa_r+0xb20>
   137e6:	9b06      	ldr	r3, [sp, #24]
   137e8:	9309      	str	r3, [sp, #36]	; 0x24
   137ea:	444b      	add	r3, r9
   137ec:	44c8      	add	r8, r9
   137ee:	9306      	str	r3, [sp, #24]
   137f0:	2101      	movs	r1, #1
   137f2:	4620      	mov	r0, r4
   137f4:	f7fe fb18 	bl	11e28 <__i2b>
   137f8:	4606      	mov	r6, r0
   137fa:	e00c      	b.n	13816 <_dtoa_r+0x506>
   137fc:	4b7d      	ldr	r3, [pc, #500]	; (139f4 <_dtoa_r+0x6e4>)
   137fe:	9300      	str	r3, [sp, #0]
   13800:	9800      	ldr	r0, [sp, #0]
   13802:	b00f      	add	sp, #60	; 0x3c
   13804:	ecbd 8b02 	vpop	{d8}
   13808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1380c:	9b06      	ldr	r3, [sp, #24]
   1380e:	f8dd a020 	ldr.w	sl, [sp, #32]
   13812:	9e07      	ldr	r6, [sp, #28]
   13814:	9309      	str	r3, [sp, #36]	; 0x24
   13816:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13818:	b16b      	cbz	r3, 13836 <_dtoa_r+0x526>
   1381a:	f1b8 0f00 	cmp.w	r8, #0
   1381e:	dd0a      	ble.n	13836 <_dtoa_r+0x526>
   13820:	4543      	cmp	r3, r8
   13822:	9906      	ldr	r1, [sp, #24]
   13824:	461a      	mov	r2, r3
   13826:	bfa8      	it	ge
   13828:	4642      	movge	r2, r8
   1382a:	1a89      	subs	r1, r1, r2
   1382c:	1a9b      	subs	r3, r3, r2
   1382e:	9106      	str	r1, [sp, #24]
   13830:	9309      	str	r3, [sp, #36]	; 0x24
   13832:	eba8 0802 	sub.w	r8, r8, r2
   13836:	9b08      	ldr	r3, [sp, #32]
   13838:	b163      	cbz	r3, 13854 <_dtoa_r+0x544>
   1383a:	9b07      	ldr	r3, [sp, #28]
   1383c:	2b00      	cmp	r3, #0
   1383e:	f000 82a7 	beq.w	13d90 <_dtoa_r+0xa80>
   13842:	f1ba 0f00 	cmp.w	sl, #0
   13846:	f300 8204 	bgt.w	13c52 <_dtoa_r+0x942>
   1384a:	9b08      	ldr	r3, [sp, #32]
   1384c:	ebb3 020a 	subs.w	r2, r3, sl
   13850:	f040 82ff 	bne.w	13e52 <_dtoa_r+0xb42>
   13854:	2101      	movs	r1, #1
   13856:	4620      	mov	r0, r4
   13858:	f7fe fae6 	bl	11e28 <__i2b>
   1385c:	2f00      	cmp	r7, #0
   1385e:	4682      	mov	sl, r0
   13860:	f300 80af 	bgt.w	139c2 <_dtoa_r+0x6b2>
   13864:	9b01      	ldr	r3, [sp, #4]
   13866:	2b01      	cmp	r3, #1
   13868:	f340 8187 	ble.w	13b7a <_dtoa_r+0x86a>
   1386c:	2300      	movs	r3, #0
   1386e:	9308      	str	r3, [sp, #32]
   13870:	2001      	movs	r0, #1
   13872:	2f00      	cmp	r7, #0
   13874:	f040 80b1 	bne.w	139da <_dtoa_r+0x6ca>
   13878:	4440      	add	r0, r8
   1387a:	f010 001f 	ands.w	r0, r0, #31
   1387e:	f000 817a 	beq.w	13b76 <_dtoa_r+0x866>
   13882:	f1c0 0220 	rsb	r2, r0, #32
   13886:	2a04      	cmp	r2, #4
   13888:	f300 8088 	bgt.w	1399c <_dtoa_r+0x68c>
   1388c:	f040 81f6 	bne.w	13c7c <_dtoa_r+0x96c>
   13890:	9b06      	ldr	r3, [sp, #24]
   13892:	2b00      	cmp	r3, #0
   13894:	dd05      	ble.n	138a2 <_dtoa_r+0x592>
   13896:	4629      	mov	r1, r5
   13898:	461a      	mov	r2, r3
   1389a:	4620      	mov	r0, r4
   1389c:	f7fe fc00 	bl	120a0 <__lshift>
   138a0:	4605      	mov	r5, r0
   138a2:	f1b8 0f00 	cmp.w	r8, #0
   138a6:	dd05      	ble.n	138b4 <_dtoa_r+0x5a4>
   138a8:	4651      	mov	r1, sl
   138aa:	4642      	mov	r2, r8
   138ac:	4620      	mov	r0, r4
   138ae:	f7fe fbf7 	bl	120a0 <__lshift>
   138b2:	4682      	mov	sl, r0
   138b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   138b6:	2b00      	cmp	r3, #0
   138b8:	f040 813f 	bne.w	13b3a <_dtoa_r+0x82a>
   138bc:	f1b9 0f00 	cmp.w	r9, #0
   138c0:	f340 8125 	ble.w	13b0e <_dtoa_r+0x7fe>
   138c4:	9b07      	ldr	r3, [sp, #28]
   138c6:	2b00      	cmp	r3, #0
   138c8:	f040 80a3 	bne.w	13a12 <_dtoa_r+0x702>
   138cc:	9b04      	ldr	r3, [sp, #16]
   138ce:	3301      	adds	r3, #1
   138d0:	9304      	str	r3, [sp, #16]
   138d2:	f8dd 8000 	ldr.w	r8, [sp]
   138d6:	2701      	movs	r7, #1
   138d8:	e007      	b.n	138ea <_dtoa_r+0x5da>
   138da:	4629      	mov	r1, r5
   138dc:	2300      	movs	r3, #0
   138de:	220a      	movs	r2, #10
   138e0:	4620      	mov	r0, r4
   138e2:	f7fe f9a7 	bl	11c34 <__multadd>
   138e6:	3701      	adds	r7, #1
   138e8:	4605      	mov	r5, r0
   138ea:	4651      	mov	r1, sl
   138ec:	4628      	mov	r0, r5
   138ee:	f7ff fc7b 	bl	131e8 <quorem>
   138f2:	45b9      	cmp	r9, r7
   138f4:	f100 0030 	add.w	r0, r0, #48	; 0x30
   138f8:	f808 0b01 	strb.w	r0, [r8], #1
   138fc:	dced      	bgt.n	138da <_dtoa_r+0x5ca>
   138fe:	f1b9 0f00 	cmp.w	r9, #0
   13902:	9a00      	ldr	r2, [sp, #0]
   13904:	bfcc      	ite	gt
   13906:	46cb      	movgt	fp, r9
   13908:	f04f 0b01 	movle.w	fp, #1
   1390c:	4603      	mov	r3, r0
   1390e:	4493      	add	fp, r2
   13910:	2700      	movs	r7, #0
   13912:	4629      	mov	r1, r5
   13914:	2201      	movs	r2, #1
   13916:	4620      	mov	r0, r4
   13918:	9301      	str	r3, [sp, #4]
   1391a:	f7fe fbc1 	bl	120a0 <__lshift>
   1391e:	4651      	mov	r1, sl
   13920:	4605      	mov	r5, r0
   13922:	f7fe fc35 	bl	12190 <__mcmp>
   13926:	2800      	cmp	r0, #0
   13928:	f340 81af 	ble.w	13c8a <_dtoa_r+0x97a>
   1392c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   13930:	9a00      	ldr	r2, [sp, #0]
   13932:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   13936:	e004      	b.n	13942 <_dtoa_r+0x632>
   13938:	455a      	cmp	r2, fp
   1393a:	f000 81b1 	beq.w	13ca0 <_dtoa_r+0x990>
   1393e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   13942:	2b39      	cmp	r3, #57	; 0x39
   13944:	f10b 0901 	add.w	r9, fp, #1
   13948:	d0f6      	beq.n	13938 <_dtoa_r+0x628>
   1394a:	3301      	adds	r3, #1
   1394c:	f88b 3000 	strb.w	r3, [fp]
   13950:	4651      	mov	r1, sl
   13952:	4620      	mov	r0, r4
   13954:	f7fe f964 	bl	11c20 <_Bfree>
   13958:	b156      	cbz	r6, 13970 <_dtoa_r+0x660>
   1395a:	b12f      	cbz	r7, 13968 <_dtoa_r+0x658>
   1395c:	42b7      	cmp	r7, r6
   1395e:	d003      	beq.n	13968 <_dtoa_r+0x658>
   13960:	4639      	mov	r1, r7
   13962:	4620      	mov	r0, r4
   13964:	f7fe f95c 	bl	11c20 <_Bfree>
   13968:	4631      	mov	r1, r6
   1396a:	4620      	mov	r0, r4
   1396c:	f7fe f958 	bl	11c20 <_Bfree>
   13970:	4629      	mov	r1, r5
   13972:	4620      	mov	r0, r4
   13974:	f7fe f954 	bl	11c20 <_Bfree>
   13978:	2300      	movs	r3, #0
   1397a:	f889 3000 	strb.w	r3, [r9]
   1397e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   13982:	601a      	str	r2, [r3, #0]
   13984:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   13986:	2b00      	cmp	r3, #0
   13988:	f43f acfe 	beq.w	13388 <_dtoa_r+0x78>
   1398c:	9800      	ldr	r0, [sp, #0]
   1398e:	f8c3 9000 	str.w	r9, [r3]
   13992:	b00f      	add	sp, #60	; 0x3c
   13994:	ecbd 8b02 	vpop	{d8}
   13998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1399c:	f1c0 001c 	rsb	r0, r0, #28
   139a0:	9b06      	ldr	r3, [sp, #24]
   139a2:	4403      	add	r3, r0
   139a4:	9306      	str	r3, [sp, #24]
   139a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   139a8:	4403      	add	r3, r0
   139aa:	9309      	str	r3, [sp, #36]	; 0x24
   139ac:	4480      	add	r8, r0
   139ae:	e76f      	b.n	13890 <_dtoa_r+0x580>
   139b0:	f1c2 0220 	rsb	r2, r2, #32
   139b4:	fa06 f202 	lsl.w	r2, r6, r2
   139b8:	ee07 2a10 	vmov	s14, r2
   139bc:	e509      	b.n	133d2 <_dtoa_r+0xc2>
   139be:	2601      	movs	r6, #1
   139c0:	e563      	b.n	1348a <_dtoa_r+0x17a>
   139c2:	4601      	mov	r1, r0
   139c4:	463a      	mov	r2, r7
   139c6:	4620      	mov	r0, r4
   139c8:	f7fe fb0a 	bl	11fe0 <__pow5mult>
   139cc:	9b01      	ldr	r3, [sp, #4]
   139ce:	2b01      	cmp	r3, #1
   139d0:	4682      	mov	sl, r0
   139d2:	f340 81c5 	ble.w	13d60 <_dtoa_r+0xa50>
   139d6:	2300      	movs	r3, #0
   139d8:	9308      	str	r3, [sp, #32]
   139da:	f8da 2010 	ldr.w	r2, [sl, #16]
   139de:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   139e2:	6910      	ldr	r0, [r2, #16]
   139e4:	f7fe f9d0 	bl	11d88 <__hi0bits>
   139e8:	f1c0 0020 	rsb	r0, r0, #32
   139ec:	e744      	b.n	13878 <_dtoa_r+0x568>
   139ee:	bf00      	nop
   139f0:	200002a8 	.word	0x200002a8
   139f4:	20000f00 	.word	0x20000f00
   139f8:	4631      	mov	r1, r6
   139fa:	2300      	movs	r3, #0
   139fc:	220a      	movs	r2, #10
   139fe:	4620      	mov	r0, r4
   13a00:	f7fe f918 	bl	11c34 <__multadd>
   13a04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13a06:	2b00      	cmp	r3, #0
   13a08:	4606      	mov	r6, r0
   13a0a:	f340 82ce 	ble.w	13faa <_dtoa_r+0xc9a>
   13a0e:	9704      	str	r7, [sp, #16]
   13a10:	4699      	mov	r9, r3
   13a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13a14:	2b00      	cmp	r3, #0
   13a16:	dd05      	ble.n	13a24 <_dtoa_r+0x714>
   13a18:	4631      	mov	r1, r6
   13a1a:	461a      	mov	r2, r3
   13a1c:	4620      	mov	r0, r4
   13a1e:	f7fe fb3f 	bl	120a0 <__lshift>
   13a22:	4606      	mov	r6, r0
   13a24:	9b08      	ldr	r3, [sp, #32]
   13a26:	2b00      	cmp	r3, #0
   13a28:	f040 81eb 	bne.w	13e02 <_dtoa_r+0xaf2>
   13a2c:	46b0      	mov	r8, r6
   13a2e:	9b02      	ldr	r3, [sp, #8]
   13a30:	9f00      	ldr	r7, [sp, #0]
   13a32:	f003 0201 	and.w	r2, r3, #1
   13a36:	1e7b      	subs	r3, r7, #1
   13a38:	444b      	add	r3, r9
   13a3a:	9308      	str	r3, [sp, #32]
   13a3c:	9b01      	ldr	r3, [sp, #4]
   13a3e:	920a      	str	r2, [sp, #40]	; 0x28
   13a40:	4313      	orrs	r3, r2
   13a42:	9309      	str	r3, [sp, #36]	; 0x24
   13a44:	4651      	mov	r1, sl
   13a46:	4628      	mov	r0, r5
   13a48:	f7ff fbce 	bl	131e8 <quorem>
   13a4c:	4631      	mov	r1, r6
   13a4e:	4683      	mov	fp, r0
   13a50:	4628      	mov	r0, r5
   13a52:	f7fe fb9d 	bl	12190 <__mcmp>
   13a56:	4642      	mov	r2, r8
   13a58:	4651      	mov	r1, sl
   13a5a:	4681      	mov	r9, r0
   13a5c:	4620      	mov	r0, r4
   13a5e:	f7fe fbb9 	bl	121d4 <__mdiff>
   13a62:	68c2      	ldr	r2, [r0, #12]
   13a64:	4601      	mov	r1, r0
   13a66:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   13a6a:	2a00      	cmp	r2, #0
   13a6c:	d142      	bne.n	13af4 <_dtoa_r+0x7e4>
   13a6e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   13a72:	4628      	mov	r0, r5
   13a74:	f7fe fb8c 	bl	12190 <__mcmp>
   13a78:	9906      	ldr	r1, [sp, #24]
   13a7a:	9002      	str	r0, [sp, #8]
   13a7c:	4620      	mov	r0, r4
   13a7e:	f7fe f8cf 	bl	11c20 <_Bfree>
   13a82:	9a02      	ldr	r2, [sp, #8]
   13a84:	9b07      	ldr	r3, [sp, #28]
   13a86:	b91a      	cbnz	r2, 13a90 <_dtoa_r+0x780>
   13a88:	9909      	ldr	r1, [sp, #36]	; 0x24
   13a8a:	2900      	cmp	r1, #0
   13a8c:	f000 827e 	beq.w	13f8c <_dtoa_r+0xc7c>
   13a90:	f1b9 0f00 	cmp.w	r9, #0
   13a94:	f2c0 8183 	blt.w	13d9e <_dtoa_r+0xa8e>
   13a98:	9901      	ldr	r1, [sp, #4]
   13a9a:	ea49 0901 	orr.w	r9, r9, r1
   13a9e:	990a      	ldr	r1, [sp, #40]	; 0x28
   13aa0:	ea51 0909 	orrs.w	r9, r1, r9
   13aa4:	f000 817b 	beq.w	13d9e <_dtoa_r+0xa8e>
   13aa8:	2a00      	cmp	r2, #0
   13aaa:	f300 81c6 	bgt.w	13e3a <_dtoa_r+0xb2a>
   13aae:	9a08      	ldr	r2, [sp, #32]
   13ab0:	703b      	strb	r3, [r7, #0]
   13ab2:	f107 0901 	add.w	r9, r7, #1
   13ab6:	4297      	cmp	r7, r2
   13ab8:	46cb      	mov	fp, r9
   13aba:	f000 81c4 	beq.w	13e46 <_dtoa_r+0xb36>
   13abe:	4629      	mov	r1, r5
   13ac0:	2300      	movs	r3, #0
   13ac2:	220a      	movs	r2, #10
   13ac4:	4620      	mov	r0, r4
   13ac6:	f7fe f8b5 	bl	11c34 <__multadd>
   13aca:	4546      	cmp	r6, r8
   13acc:	4605      	mov	r5, r0
   13ace:	4631      	mov	r1, r6
   13ad0:	f04f 0300 	mov.w	r3, #0
   13ad4:	f04f 020a 	mov.w	r2, #10
   13ad8:	4620      	mov	r0, r4
   13ada:	d012      	beq.n	13b02 <_dtoa_r+0x7f2>
   13adc:	f7fe f8aa 	bl	11c34 <__multadd>
   13ae0:	4641      	mov	r1, r8
   13ae2:	4606      	mov	r6, r0
   13ae4:	2300      	movs	r3, #0
   13ae6:	220a      	movs	r2, #10
   13ae8:	4620      	mov	r0, r4
   13aea:	f7fe f8a3 	bl	11c34 <__multadd>
   13aee:	464f      	mov	r7, r9
   13af0:	4680      	mov	r8, r0
   13af2:	e7a7      	b.n	13a44 <_dtoa_r+0x734>
   13af4:	4620      	mov	r0, r4
   13af6:	9302      	str	r3, [sp, #8]
   13af8:	f7fe f892 	bl	11c20 <_Bfree>
   13afc:	9b02      	ldr	r3, [sp, #8]
   13afe:	2201      	movs	r2, #1
   13b00:	e7c6      	b.n	13a90 <_dtoa_r+0x780>
   13b02:	f7fe f897 	bl	11c34 <__multadd>
   13b06:	464f      	mov	r7, r9
   13b08:	4606      	mov	r6, r0
   13b0a:	4680      	mov	r8, r0
   13b0c:	e79a      	b.n	13a44 <_dtoa_r+0x734>
   13b0e:	9b01      	ldr	r3, [sp, #4]
   13b10:	2b02      	cmp	r3, #2
   13b12:	dc71      	bgt.n	13bf8 <_dtoa_r+0x8e8>
   13b14:	9b07      	ldr	r3, [sp, #28]
   13b16:	2b00      	cmp	r3, #0
   13b18:	f47f af7b 	bne.w	13a12 <_dtoa_r+0x702>
   13b1c:	9b04      	ldr	r3, [sp, #16]
   13b1e:	4651      	mov	r1, sl
   13b20:	3301      	adds	r3, #1
   13b22:	4628      	mov	r0, r5
   13b24:	9304      	str	r3, [sp, #16]
   13b26:	f7ff fb5f 	bl	131e8 <quorem>
   13b2a:	f8dd b000 	ldr.w	fp, [sp]
   13b2e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   13b32:	f80b 3b01 	strb.w	r3, [fp], #1
   13b36:	2700      	movs	r7, #0
   13b38:	e6eb      	b.n	13912 <_dtoa_r+0x602>
   13b3a:	4651      	mov	r1, sl
   13b3c:	4628      	mov	r0, r5
   13b3e:	f7fe fb27 	bl	12190 <__mcmp>
   13b42:	2800      	cmp	r0, #0
   13b44:	f6bf aeba 	bge.w	138bc <_dtoa_r+0x5ac>
   13b48:	4629      	mov	r1, r5
   13b4a:	2300      	movs	r3, #0
   13b4c:	220a      	movs	r2, #10
   13b4e:	4620      	mov	r0, r4
   13b50:	f7fe f870 	bl	11c34 <__multadd>
   13b54:	9b04      	ldr	r3, [sp, #16]
   13b56:	1e5f      	subs	r7, r3, #1
   13b58:	9b07      	ldr	r3, [sp, #28]
   13b5a:	4605      	mov	r5, r0
   13b5c:	2b00      	cmp	r3, #0
   13b5e:	f47f af4b 	bne.w	139f8 <_dtoa_r+0x6e8>
   13b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13b64:	2b00      	cmp	r3, #0
   13b66:	f340 8218 	ble.w	13f9a <_dtoa_r+0xc8a>
   13b6a:	4699      	mov	r9, r3
   13b6c:	e6b1      	b.n	138d2 <_dtoa_r+0x5c2>
   13b6e:	4bbc      	ldr	r3, [pc, #752]	; (13e60 <_dtoa_r+0xb50>)
   13b70:	9300      	str	r3, [sp, #0]
   13b72:	3303      	adds	r3, #3
   13b74:	e4a4      	b.n	134c0 <_dtoa_r+0x1b0>
   13b76:	201c      	movs	r0, #28
   13b78:	e712      	b.n	139a0 <_dtoa_r+0x690>
   13b7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   13b7e:	2800      	cmp	r0, #0
   13b80:	f47f ae74 	bne.w	1386c <_dtoa_r+0x55c>
   13b84:	f3c1 0213 	ubfx	r2, r1, #0, #20
   13b88:	2a00      	cmp	r2, #0
   13b8a:	f000 80f4 	beq.w	13d76 <_dtoa_r+0xa66>
   13b8e:	9b02      	ldr	r3, [sp, #8]
   13b90:	9308      	str	r3, [sp, #32]
   13b92:	e66d      	b.n	13870 <_dtoa_r+0x560>
   13b94:	2301      	movs	r3, #1
   13b96:	9307      	str	r3, [sp, #28]
   13b98:	9b04      	ldr	r3, [sp, #16]
   13b9a:	445b      	add	r3, fp
   13b9c:	f103 0901 	add.w	r9, r3, #1
   13ba0:	f1b9 0f01 	cmp.w	r9, #1
   13ba4:	46cc      	mov	ip, r9
   13ba6:	930b      	str	r3, [sp, #44]	; 0x2c
   13ba8:	bfb8      	it	lt
   13baa:	f04f 0c01 	movlt.w	ip, #1
   13bae:	2100      	movs	r1, #0
   13bb0:	f1bc 0f17 	cmp.w	ip, #23
   13bb4:	63e1      	str	r1, [r4, #60]	; 0x3c
   13bb6:	f77f acbc 	ble.w	13532 <_dtoa_r+0x222>
   13bba:	2001      	movs	r0, #1
   13bbc:	2204      	movs	r2, #4
   13bbe:	0052      	lsls	r2, r2, #1
   13bc0:	f102 0314 	add.w	r3, r2, #20
   13bc4:	4563      	cmp	r3, ip
   13bc6:	4601      	mov	r1, r0
   13bc8:	f100 0001 	add.w	r0, r0, #1
   13bcc:	d9f7      	bls.n	13bbe <_dtoa_r+0x8ae>
   13bce:	63e1      	str	r1, [r4, #60]	; 0x3c
   13bd0:	e4af      	b.n	13532 <_dtoa_r+0x222>
   13bd2:	2301      	movs	r3, #1
   13bd4:	9307      	str	r3, [sp, #28]
   13bd6:	f1bb 0f00 	cmp.w	fp, #0
   13bda:	dd52      	ble.n	13c82 <_dtoa_r+0x972>
   13bdc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   13be0:	46d9      	mov	r9, fp
   13be2:	46dc      	mov	ip, fp
   13be4:	e7e3      	b.n	13bae <_dtoa_r+0x89e>
   13be6:	2300      	movs	r3, #0
   13be8:	9307      	str	r3, [sp, #28]
   13bea:	e7d5      	b.n	13b98 <_dtoa_r+0x888>
   13bec:	2300      	movs	r3, #0
   13bee:	9307      	str	r3, [sp, #28]
   13bf0:	e7f1      	b.n	13bd6 <_dtoa_r+0x8c6>
   13bf2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   13bf6:	9704      	str	r7, [sp, #16]
   13bf8:	f1b9 0f00 	cmp.w	r9, #0
   13bfc:	f47f ada1 	bne.w	13742 <_dtoa_r+0x432>
   13c00:	4651      	mov	r1, sl
   13c02:	464b      	mov	r3, r9
   13c04:	2205      	movs	r2, #5
   13c06:	4620      	mov	r0, r4
   13c08:	f7fe f814 	bl	11c34 <__multadd>
   13c0c:	4601      	mov	r1, r0
   13c0e:	4682      	mov	sl, r0
   13c10:	4628      	mov	r0, r5
   13c12:	f7fe fabd 	bl	12190 <__mcmp>
   13c16:	2800      	cmp	r0, #0
   13c18:	f77f ad93 	ble.w	13742 <_dtoa_r+0x432>
   13c1c:	9b04      	ldr	r3, [sp, #16]
   13c1e:	f103 0b01 	add.w	fp, r3, #1
   13c22:	9b00      	ldr	r3, [sp, #0]
   13c24:	2231      	movs	r2, #49	; 0x31
   13c26:	4698      	mov	r8, r3
   13c28:	f803 2b01 	strb.w	r2, [r3], #1
   13c2c:	9300      	str	r3, [sp, #0]
   13c2e:	4651      	mov	r1, sl
   13c30:	4620      	mov	r0, r4
   13c32:	f7fd fff5 	bl	11c20 <_Bfree>
   13c36:	f10b 0301 	add.w	r3, fp, #1
   13c3a:	f8dd 9000 	ldr.w	r9, [sp]
   13c3e:	9304      	str	r3, [sp, #16]
   13c40:	f8cd 8000 	str.w	r8, [sp]
   13c44:	2e00      	cmp	r6, #0
   13c46:	f47f ae8f 	bne.w	13968 <_dtoa_r+0x658>
   13c4a:	e691      	b.n	13970 <_dtoa_r+0x660>
   13c4c:	eba3 0a0a 	sub.w	sl, r3, sl
   13c50:	e5c5      	b.n	137de <_dtoa_r+0x4ce>
   13c52:	4631      	mov	r1, r6
   13c54:	4652      	mov	r2, sl
   13c56:	4620      	mov	r0, r4
   13c58:	f7fe f9c2 	bl	11fe0 <__pow5mult>
   13c5c:	462a      	mov	r2, r5
   13c5e:	4601      	mov	r1, r0
   13c60:	4606      	mov	r6, r0
   13c62:	4620      	mov	r0, r4
   13c64:	f7fe f90e 	bl	11e84 <__multiply>
   13c68:	4629      	mov	r1, r5
   13c6a:	4605      	mov	r5, r0
   13c6c:	4620      	mov	r0, r4
   13c6e:	f7fd ffd7 	bl	11c20 <_Bfree>
   13c72:	e5ea      	b.n	1384a <_dtoa_r+0x53a>
   13c74:	2002      	movs	r0, #2
   13c76:	eeb0 5b48 	vmov.f64	d5, d8
   13c7a:	e481      	b.n	13580 <_dtoa_r+0x270>
   13c7c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   13c80:	e68e      	b.n	139a0 <_dtoa_r+0x690>
   13c82:	f04f 0b01 	mov.w	fp, #1
   13c86:	46d9      	mov	r9, fp
   13c88:	e44f      	b.n	1352a <_dtoa_r+0x21a>
   13c8a:	d103      	bne.n	13c94 <_dtoa_r+0x984>
   13c8c:	9b01      	ldr	r3, [sp, #4]
   13c8e:	07db      	lsls	r3, r3, #31
   13c90:	f53f ae4c 	bmi.w	1392c <_dtoa_r+0x61c>
   13c94:	46d9      	mov	r9, fp
   13c96:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   13c9a:	2b30      	cmp	r3, #48	; 0x30
   13c9c:	d0fa      	beq.n	13c94 <_dtoa_r+0x984>
   13c9e:	e657      	b.n	13950 <_dtoa_r+0x640>
   13ca0:	9b04      	ldr	r3, [sp, #16]
   13ca2:	9a00      	ldr	r2, [sp, #0]
   13ca4:	3301      	adds	r3, #1
   13ca6:	9304      	str	r3, [sp, #16]
   13ca8:	2331      	movs	r3, #49	; 0x31
   13caa:	7013      	strb	r3, [r2, #0]
   13cac:	e650      	b.n	13950 <_dtoa_r+0x640>
   13cae:	f1ba 0f00 	cmp.w	sl, #0
   13cb2:	f000 8123 	beq.w	13efc <_dtoa_r+0xbec>
   13cb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   13cba:	9b06      	ldr	r3, [sp, #24]
   13cbc:	9309      	str	r3, [sp, #36]	; 0x24
   13cbe:	4413      	add	r3, r2
   13cc0:	f8dd a020 	ldr.w	sl, [sp, #32]
   13cc4:	9306      	str	r3, [sp, #24]
   13cc6:	4490      	add	r8, r2
   13cc8:	e592      	b.n	137f0 <_dtoa_r+0x4e0>
   13cca:	ee07 0a90 	vmov	s15, r0
   13cce:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   13cd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   13cd6:	eea6 5b07 	vfma.f64	d5, d6, d7
   13cda:	ee15 2a90 	vmov	r2, s11
   13cde:	ec51 0b15 	vmov	r0, r1, d5
   13ce2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   13ce6:	ec41 0b15 	vmov	d5, r0, r1
   13cea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   13cee:	ee36 7b47 	vsub.f64	d7, d6, d7
   13cf2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   13cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13cfa:	f300 8137 	bgt.w	13f6c <_dtoa_r+0xc5c>
   13cfe:	eeb1 5b45 	vneg.f64	d5, d5
   13d02:	eeb4 7bc5 	vcmpe.f64	d7, d5
   13d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13d0a:	f57f acfb 	bpl.w	13704 <_dtoa_r+0x3f4>
   13d0e:	f04f 0a00 	mov.w	sl, #0
   13d12:	4656      	mov	r6, sl
   13d14:	e515      	b.n	13742 <_dtoa_r+0x432>
   13d16:	f000 80f5 	beq.w	13f04 <_dtoa_r+0xbf4>
   13d1a:	9b04      	ldr	r3, [sp, #16]
   13d1c:	4951      	ldr	r1, [pc, #324]	; (13e64 <_dtoa_r+0xb54>)
   13d1e:	425a      	negs	r2, r3
   13d20:	f002 000f 	and.w	r0, r2, #15
   13d24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   13d28:	ed91 6b00 	vldr	d6, [r1]
   13d2c:	1112      	asrs	r2, r2, #4
   13d2e:	ee28 6b06 	vmul.f64	d6, d8, d6
   13d32:	f000 8142 	beq.w	13fba <_dtoa_r+0xcaa>
   13d36:	eeb0 7b46 	vmov.f64	d7, d6
   13d3a:	494b      	ldr	r1, [pc, #300]	; (13e68 <_dtoa_r+0xb58>)
   13d3c:	2600      	movs	r6, #0
   13d3e:	2002      	movs	r0, #2
   13d40:	07d3      	lsls	r3, r2, #31
   13d42:	d505      	bpl.n	13d50 <_dtoa_r+0xa40>
   13d44:	ed91 5b00 	vldr	d5, [r1]
   13d48:	3001      	adds	r0, #1
   13d4a:	2601      	movs	r6, #1
   13d4c:	ee27 7b05 	vmul.f64	d7, d7, d5
   13d50:	1052      	asrs	r2, r2, #1
   13d52:	f101 0108 	add.w	r1, r1, #8
   13d56:	d1f3      	bne.n	13d40 <_dtoa_r+0xa30>
   13d58:	2e00      	cmp	r6, #0
   13d5a:	fe06 6b07 	vseleq.f64	d6, d6, d7
   13d5e:	e41e      	b.n	1359e <_dtoa_r+0x28e>
   13d60:	9b02      	ldr	r3, [sp, #8]
   13d62:	2b00      	cmp	r3, #0
   13d64:	f47f ae37 	bne.w	139d6 <_dtoa_r+0x6c6>
   13d68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   13d6c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   13d70:	2a00      	cmp	r2, #0
   13d72:	f040 8137 	bne.w	13fe4 <_dtoa_r+0xcd4>
   13d76:	4a3d      	ldr	r2, [pc, #244]	; (13e6c <_dtoa_r+0xb5c>)
   13d78:	400a      	ands	r2, r1
   13d7a:	2a00      	cmp	r2, #0
   13d7c:	f000 80fa 	beq.w	13f74 <_dtoa_r+0xc64>
   13d80:	9b06      	ldr	r3, [sp, #24]
   13d82:	3301      	adds	r3, #1
   13d84:	9306      	str	r3, [sp, #24]
   13d86:	2301      	movs	r3, #1
   13d88:	f108 0801 	add.w	r8, r8, #1
   13d8c:	9308      	str	r3, [sp, #32]
   13d8e:	e56f      	b.n	13870 <_dtoa_r+0x560>
   13d90:	4629      	mov	r1, r5
   13d92:	9a08      	ldr	r2, [sp, #32]
   13d94:	4620      	mov	r0, r4
   13d96:	f7fe f923 	bl	11fe0 <__pow5mult>
   13d9a:	4605      	mov	r5, r0
   13d9c:	e55a      	b.n	13854 <_dtoa_r+0x544>
   13d9e:	2a00      	cmp	r2, #0
   13da0:	dd12      	ble.n	13dc8 <_dtoa_r+0xab8>
   13da2:	4629      	mov	r1, r5
   13da4:	2201      	movs	r2, #1
   13da6:	4620      	mov	r0, r4
   13da8:	9301      	str	r3, [sp, #4]
   13daa:	f7fe f979 	bl	120a0 <__lshift>
   13dae:	4651      	mov	r1, sl
   13db0:	4605      	mov	r5, r0
   13db2:	f7fe f9ed 	bl	12190 <__mcmp>
   13db6:	2800      	cmp	r0, #0
   13db8:	9b01      	ldr	r3, [sp, #4]
   13dba:	f340 80e1 	ble.w	13f80 <_dtoa_r+0xc70>
   13dbe:	2b39      	cmp	r3, #57	; 0x39
   13dc0:	f000 80ca 	beq.w	13f58 <_dtoa_r+0xc48>
   13dc4:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   13dc8:	46b9      	mov	r9, r7
   13dca:	f809 3b01 	strb.w	r3, [r9], #1
   13dce:	9b04      	ldr	r3, [sp, #16]
   13dd0:	3301      	adds	r3, #1
   13dd2:	4637      	mov	r7, r6
   13dd4:	9304      	str	r3, [sp, #16]
   13dd6:	4646      	mov	r6, r8
   13dd8:	e5ba      	b.n	13950 <_dtoa_r+0x640>
   13dda:	ee38 8b08 	vadd.f64	d8, d8, d8
   13dde:	eeb4 8bc6 	vcmpe.f64	d8, d6
   13de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13de6:	dc0a      	bgt.n	13dfe <_dtoa_r+0xaee>
   13de8:	eeb4 8b46 	vcmp.f64	d8, d6
   13dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13df0:	f47f acdc 	bne.w	137ac <_dtoa_r+0x49c>
   13df4:	ee17 3a10 	vmov	r3, s14
   13df8:	07d8      	lsls	r0, r3, #31
   13dfa:	f57f acd7 	bpl.w	137ac <_dtoa_r+0x49c>
   13dfe:	9a00      	ldr	r2, [sp, #0]
   13e00:	e454      	b.n	136ac <_dtoa_r+0x39c>
   13e02:	6871      	ldr	r1, [r6, #4]
   13e04:	4620      	mov	r0, r4
   13e06:	f7fd fee5 	bl	11bd4 <_Balloc>
   13e0a:	4607      	mov	r7, r0
   13e0c:	2800      	cmp	r0, #0
   13e0e:	f000 80de 	beq.w	13fce <_dtoa_r+0xcbe>
   13e12:	6933      	ldr	r3, [r6, #16]
   13e14:	3302      	adds	r3, #2
   13e16:	009a      	lsls	r2, r3, #2
   13e18:	f106 010c 	add.w	r1, r6, #12
   13e1c:	300c      	adds	r0, #12
   13e1e:	f7f5 fd95 	bl	994c <memcpy>
   13e22:	4639      	mov	r1, r7
   13e24:	2201      	movs	r2, #1
   13e26:	4620      	mov	r0, r4
   13e28:	f7fe f93a 	bl	120a0 <__lshift>
   13e2c:	4680      	mov	r8, r0
   13e2e:	e5fe      	b.n	13a2e <_dtoa_r+0x71e>
   13e30:	9b06      	ldr	r3, [sp, #24]
   13e32:	eba3 0309 	sub.w	r3, r3, r9
   13e36:	9309      	str	r3, [sp, #36]	; 0x24
   13e38:	e4da      	b.n	137f0 <_dtoa_r+0x4e0>
   13e3a:	2b39      	cmp	r3, #57	; 0x39
   13e3c:	f000 808c 	beq.w	13f58 <_dtoa_r+0xc48>
   13e40:	46b9      	mov	r9, r7
   13e42:	3301      	adds	r3, #1
   13e44:	e7c1      	b.n	13dca <_dtoa_r+0xaba>
   13e46:	9a04      	ldr	r2, [sp, #16]
   13e48:	3201      	adds	r2, #1
   13e4a:	4637      	mov	r7, r6
   13e4c:	9204      	str	r2, [sp, #16]
   13e4e:	4646      	mov	r6, r8
   13e50:	e55f      	b.n	13912 <_dtoa_r+0x602>
   13e52:	4629      	mov	r1, r5
   13e54:	4620      	mov	r0, r4
   13e56:	f7fe f8c3 	bl	11fe0 <__pow5mult>
   13e5a:	4605      	mov	r5, r0
   13e5c:	e4fa      	b.n	13854 <_dtoa_r+0x544>
   13e5e:	bf00      	nop
   13e60:	20000e34 	.word	0x20000e34
   13e64:	200002a8 	.word	0x200002a8
   13e68:	20000280 	.word	0x20000280
   13e6c:	7ff00000 	.word	0x7ff00000
   13e70:	4b5e      	ldr	r3, [pc, #376]	; (13fec <_dtoa_r+0xcdc>)
   13e72:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   13e76:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   13e7a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   13e7e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   13e82:	ee36 7b47 	vsub.f64	d7, d6, d7
   13e86:	ec41 0b16 	vmov	d6, r0, r1
   13e8a:	ee15 1a90 	vmov	r1, s11
   13e8e:	ee23 3b06 	vmul.f64	d3, d3, d6
   13e92:	9800      	ldr	r0, [sp, #0]
   13e94:	3130      	adds	r1, #48	; 0x30
   13e96:	2a01      	cmp	r2, #1
   13e98:	f800 1b01 	strb.w	r1, [r0], #1
   13e9c:	f000 8083 	beq.w	13fa6 <_dtoa_r+0xc96>
   13ea0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   13ea4:	9b00      	ldr	r3, [sp, #0]
   13ea6:	1899      	adds	r1, r3, r2
   13ea8:	ee27 7b04 	vmul.f64	d7, d7, d4
   13eac:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   13eb0:	ee16 3a90 	vmov	r3, s13
   13eb4:	3330      	adds	r3, #48	; 0x30
   13eb6:	f800 3b01 	strb.w	r3, [r0], #1
   13eba:	4281      	cmp	r1, r0
   13ebc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   13ec0:	ee37 7b45 	vsub.f64	d7, d7, d5
   13ec4:	d1f0      	bne.n	13ea8 <_dtoa_r+0xb98>
   13ec6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   13eca:	ee33 5b06 	vadd.f64	d5, d3, d6
   13ece:	eeb4 5bc7 	vcmpe.f64	d5, d7
   13ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13ed6:	f53f abe3 	bmi.w	136a0 <_dtoa_r+0x390>
   13eda:	ee36 6b43 	vsub.f64	d6, d6, d3
   13ede:	eeb4 6bc7 	vcmpe.f64	d6, d7
   13ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13ee6:	f77f ac0d 	ble.w	13704 <_dtoa_r+0x3f4>
   13eea:	4689      	mov	r9, r1
   13eec:	3901      	subs	r1, #1
   13eee:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   13ef2:	2b30      	cmp	r3, #48	; 0x30
   13ef4:	d0f9      	beq.n	13eea <_dtoa_r+0xbda>
   13ef6:	1c73      	adds	r3, r6, #1
   13ef8:	9304      	str	r3, [sp, #16]
   13efa:	e539      	b.n	13970 <_dtoa_r+0x660>
   13efc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13efe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   13f02:	e6da      	b.n	13cba <_dtoa_r+0x9aa>
   13f04:	2002      	movs	r0, #2
   13f06:	eeb0 6b48 	vmov.f64	d6, d8
   13f0a:	f7ff bb48 	b.w	1359e <_dtoa_r+0x28e>
   13f0e:	f1b9 0f00 	cmp.w	r9, #0
   13f12:	f43f aeda 	beq.w	13cca <_dtoa_r+0x9ba>
   13f16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13f18:	2a00      	cmp	r2, #0
   13f1a:	f77f abf3 	ble.w	13704 <_dtoa_r+0x3f4>
   13f1e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   13f22:	ee26 6b04 	vmul.f64	d6, d6, d4
   13f26:	3001      	adds	r0, #1
   13f28:	ee07 0a90 	vmov	s15, r0
   13f2c:	9b04      	ldr	r3, [sp, #16]
   13f2e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   13f32:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   13f36:	eea6 7b05 	vfma.f64	d7, d6, d5
   13f3a:	ee17 ca90 	vmov	ip, s15
   13f3e:	ec51 0b17 	vmov	r0, r1, d7
   13f42:	1e5e      	subs	r6, r3, #1
   13f44:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   13f48:	f7ff bb47 	b.w	135da <_dtoa_r+0x2ca>
   13f4c:	9b04      	ldr	r3, [sp, #16]
   13f4e:	3301      	adds	r3, #1
   13f50:	9304      	str	r3, [sp, #16]
   13f52:	2331      	movs	r3, #49	; 0x31
   13f54:	f7ff bbb1 	b.w	136ba <_dtoa_r+0x3aa>
   13f58:	9b04      	ldr	r3, [sp, #16]
   13f5a:	46bb      	mov	fp, r7
   13f5c:	3301      	adds	r3, #1
   13f5e:	9304      	str	r3, [sp, #16]
   13f60:	2339      	movs	r3, #57	; 0x39
   13f62:	4637      	mov	r7, r6
   13f64:	f80b 3b01 	strb.w	r3, [fp], #1
   13f68:	4646      	mov	r6, r8
   13f6a:	e4e1      	b.n	13930 <_dtoa_r+0x620>
   13f6c:	f04f 0a00 	mov.w	sl, #0
   13f70:	4656      	mov	r6, sl
   13f72:	e653      	b.n	13c1c <_dtoa_r+0x90c>
   13f74:	9208      	str	r2, [sp, #32]
   13f76:	e47b      	b.n	13870 <_dtoa_r+0x560>
   13f78:	1c73      	adds	r3, r6, #1
   13f7a:	9304      	str	r3, [sp, #16]
   13f7c:	4689      	mov	r9, r1
   13f7e:	e4f7      	b.n	13970 <_dtoa_r+0x660>
   13f80:	f47f af22 	bne.w	13dc8 <_dtoa_r+0xab8>
   13f84:	07da      	lsls	r2, r3, #31
   13f86:	f57f af1f 	bpl.w	13dc8 <_dtoa_r+0xab8>
   13f8a:	e718      	b.n	13dbe <_dtoa_r+0xaae>
   13f8c:	2b39      	cmp	r3, #57	; 0x39
   13f8e:	d0e3      	beq.n	13f58 <_dtoa_r+0xc48>
   13f90:	f1b9 0f00 	cmp.w	r9, #0
   13f94:	f73f af16 	bgt.w	13dc4 <_dtoa_r+0xab4>
   13f98:	e716      	b.n	13dc8 <_dtoa_r+0xab8>
   13f9a:	9b01      	ldr	r3, [sp, #4]
   13f9c:	2b02      	cmp	r3, #2
   13f9e:	f73f ae28 	bgt.w	13bf2 <_dtoa_r+0x8e2>
   13fa2:	9704      	str	r7, [sp, #16]
   13fa4:	e5ba      	b.n	13b1c <_dtoa_r+0x80c>
   13fa6:	4601      	mov	r1, r0
   13fa8:	e78d      	b.n	13ec6 <_dtoa_r+0xbb6>
   13faa:	9b01      	ldr	r3, [sp, #4]
   13fac:	2b02      	cmp	r3, #2
   13fae:	f73f ae20 	bgt.w	13bf2 <_dtoa_r+0x8e2>
   13fb2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   13fb6:	9704      	str	r7, [sp, #16]
   13fb8:	e52b      	b.n	13a12 <_dtoa_r+0x702>
   13fba:	2002      	movs	r0, #2
   13fbc:	f7ff baef 	b.w	1359e <_dtoa_r+0x28e>
   13fc0:	4b0b      	ldr	r3, [pc, #44]	; (13ff0 <_dtoa_r+0xce0>)
   13fc2:	480c      	ldr	r0, [pc, #48]	; (13ff4 <_dtoa_r+0xce4>)
   13fc4:	2200      	movs	r2, #0
   13fc6:	f240 11af 	movw	r1, #431	; 0x1af
   13fca:	f7fe ffe5 	bl	12f98 <__assert_func>
   13fce:	4b08      	ldr	r3, [pc, #32]	; (13ff0 <_dtoa_r+0xce0>)
   13fd0:	4808      	ldr	r0, [pc, #32]	; (13ff4 <_dtoa_r+0xce4>)
   13fd2:	463a      	mov	r2, r7
   13fd4:	f240 21ef 	movw	r1, #751	; 0x2ef
   13fd8:	f7fe ffde 	bl	12f98 <__assert_func>
   13fdc:	4b06      	ldr	r3, [pc, #24]	; (13ff8 <_dtoa_r+0xce8>)
   13fde:	9300      	str	r3, [sp, #0]
   13fe0:	f7ff b9d2 	b.w	13388 <_dtoa_r+0x78>
   13fe4:	9b02      	ldr	r3, [sp, #8]
   13fe6:	9308      	str	r3, [sp, #32]
   13fe8:	e4f7      	b.n	139da <_dtoa_r+0x6ca>
   13fea:	bf00      	nop
   13fec:	200002a8 	.word	0x200002a8
   13ff0:	20000b38 	.word	0x20000b38
   13ff4:	20000e38 	.word	0x20000e38
   13ff8:	20000e28 	.word	0x20000e28

00013ffc <category>:
   13ffc:	4b15      	ldr	r3, [pc, #84]	; (14054 <category+0x58>)
   13ffe:	4298      	cmp	r0, r3
   14000:	d823      	bhi.n	1404a <category+0x4e>
   14002:	b570      	push	{r4, r5, r6, lr}
   14004:	4e14      	ldr	r6, [pc, #80]	; (14058 <category+0x5c>)
   14006:	f04f 0e00 	mov.w	lr, #0
   1400a:	f640 04db 	movw	r4, #2267	; 0x8db
   1400e:	e003      	b.n	14018 <category+0x1c>
   14010:	f102 0e01 	add.w	lr, r2, #1
   14014:	45a6      	cmp	lr, r4
   14016:	dc16      	bgt.n	14046 <category+0x4a>
   14018:	eb04 020e 	add.w	r2, r4, lr
   1401c:	f022 0301 	bic.w	r3, r2, #1
   14020:	eb03 0362 	add.w	r3, r3, r2, asr #1
   14024:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   14028:	1052      	asrs	r2, r2, #1
   1402a:	7859      	ldrb	r1, [r3, #1]
   1402c:	885d      	ldrh	r5, [r3, #2]
   1402e:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   14032:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   14036:	448c      	add	ip, r1
   14038:	4560      	cmp	r0, ip
   1403a:	d8e9      	bhi.n	14010 <category+0x14>
   1403c:	4288      	cmp	r0, r1
   1403e:	d206      	bcs.n	1404e <category+0x52>
   14040:	1e54      	subs	r4, r2, #1
   14042:	45a6      	cmp	lr, r4
   14044:	dde8      	ble.n	14018 <category+0x1c>
   14046:	20ff      	movs	r0, #255	; 0xff
   14048:	bd70      	pop	{r4, r5, r6, pc}
   1404a:	20ff      	movs	r0, #255	; 0xff
   1404c:	4770      	bx	lr
   1404e:	7818      	ldrb	r0, [r3, #0]
   14050:	bd70      	pop	{r4, r5, r6, pc}
   14052:	bf00      	nop
   14054:	000e01ef 	.word	0x000e01ef
   14058:	2000299c 	.word	0x2000299c

0001405c <fiprintf>:
   1405c:	b40e      	push	{r1, r2, r3}
   1405e:	b510      	push	{r4, lr}
   14060:	b083      	sub	sp, #12
   14062:	ab05      	add	r3, sp, #20
   14064:	4c06      	ldr	r4, [pc, #24]	; (14080 <fiprintf+0x24>)
   14066:	f853 2b04 	ldr.w	r2, [r3], #4
   1406a:	9301      	str	r3, [sp, #4]
   1406c:	4601      	mov	r1, r0
   1406e:	6820      	ldr	r0, [r4, #0]
   14070:	f000 f97c 	bl	1436c <_vfiprintf_r>
   14074:	b003      	add	sp, #12
   14076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1407a:	b003      	add	sp, #12
   1407c:	4770      	bx	lr
   1407e:	bf00      	nop
   14080:	20008694 	.word	0x20008694

00014084 <__ssprint_r>:
   14084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14088:	6893      	ldr	r3, [r2, #8]
   1408a:	6817      	ldr	r7, [r2, #0]
   1408c:	b083      	sub	sp, #12
   1408e:	4692      	mov	sl, r2
   14090:	2b00      	cmp	r3, #0
   14092:	d070      	beq.n	14176 <__ssprint_r+0xf2>
   14094:	4681      	mov	r9, r0
   14096:	688a      	ldr	r2, [r1, #8]
   14098:	6808      	ldr	r0, [r1, #0]
   1409a:	460c      	mov	r4, r1
   1409c:	3708      	adds	r7, #8
   1409e:	e043      	b.n	14128 <__ssprint_r+0xa4>
   140a0:	89a3      	ldrh	r3, [r4, #12]
   140a2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   140a6:	d02e      	beq.n	14106 <__ssprint_r+0x82>
   140a8:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   140ac:	eba0 0801 	sub.w	r8, r0, r1
   140b0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   140b4:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   140b8:	f108 0001 	add.w	r0, r8, #1
   140bc:	1076      	asrs	r6, r6, #1
   140be:	4428      	add	r0, r5
   140c0:	42b0      	cmp	r0, r6
   140c2:	4632      	mov	r2, r6
   140c4:	bf84      	itt	hi
   140c6:	4606      	movhi	r6, r0
   140c8:	4632      	movhi	r2, r6
   140ca:	055b      	lsls	r3, r3, #21
   140cc:	d537      	bpl.n	1413e <__ssprint_r+0xba>
   140ce:	4611      	mov	r1, r2
   140d0:	4648      	mov	r0, r9
   140d2:	f7f7 fb39 	bl	b748 <_malloc_r>
   140d6:	9001      	str	r0, [sp, #4]
   140d8:	2800      	cmp	r0, #0
   140da:	d03a      	beq.n	14152 <__ssprint_r+0xce>
   140dc:	4642      	mov	r2, r8
   140de:	6921      	ldr	r1, [r4, #16]
   140e0:	f7f5 fc34 	bl	994c <memcpy>
   140e4:	89a2      	ldrh	r2, [r4, #12]
   140e6:	9b01      	ldr	r3, [sp, #4]
   140e8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   140ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   140f0:	81a2      	strh	r2, [r4, #12]
   140f2:	eba6 0208 	sub.w	r2, r6, r8
   140f6:	eb03 0008 	add.w	r0, r3, r8
   140fa:	6166      	str	r6, [r4, #20]
   140fc:	60a2      	str	r2, [r4, #8]
   140fe:	6123      	str	r3, [r4, #16]
   14100:	6020      	str	r0, [r4, #0]
   14102:	462e      	mov	r6, r5
   14104:	46a8      	mov	r8, r5
   14106:	4642      	mov	r2, r8
   14108:	4659      	mov	r1, fp
   1410a:	f7f9 f96f 	bl	d3ec <memmove>
   1410e:	f8da 3008 	ldr.w	r3, [sl, #8]
   14112:	68a2      	ldr	r2, [r4, #8]
   14114:	6820      	ldr	r0, [r4, #0]
   14116:	1b92      	subs	r2, r2, r6
   14118:	4440      	add	r0, r8
   1411a:	1b5b      	subs	r3, r3, r5
   1411c:	60a2      	str	r2, [r4, #8]
   1411e:	6020      	str	r0, [r4, #0]
   14120:	f8ca 3008 	str.w	r3, [sl, #8]
   14124:	b33b      	cbz	r3, 14176 <__ssprint_r+0xf2>
   14126:	3708      	adds	r7, #8
   14128:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   1412c:	2d00      	cmp	r5, #0
   1412e:	d0fa      	beq.n	14126 <__ssprint_r+0xa2>
   14130:	42aa      	cmp	r2, r5
   14132:	4616      	mov	r6, r2
   14134:	4690      	mov	r8, r2
   14136:	d9b3      	bls.n	140a0 <__ssprint_r+0x1c>
   14138:	462e      	mov	r6, r5
   1413a:	46a8      	mov	r8, r5
   1413c:	e7e3      	b.n	14106 <__ssprint_r+0x82>
   1413e:	4648      	mov	r0, r9
   14140:	f7f7 fdca 	bl	bcd8 <_realloc_r>
   14144:	4603      	mov	r3, r0
   14146:	2800      	cmp	r0, #0
   14148:	d1d3      	bne.n	140f2 <__ssprint_r+0x6e>
   1414a:	6921      	ldr	r1, [r4, #16]
   1414c:	4648      	mov	r0, r9
   1414e:	f7f9 fe49 	bl	dde4 <_free_r>
   14152:	89a3      	ldrh	r3, [r4, #12]
   14154:	220c      	movs	r2, #12
   14156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1415a:	f8c9 2000 	str.w	r2, [r9]
   1415e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14162:	81a3      	strh	r3, [r4, #12]
   14164:	2200      	movs	r2, #0
   14166:	2300      	movs	r3, #0
   14168:	f8ca 2008 	str.w	r2, [sl, #8]
   1416c:	f8ca 3004 	str.w	r3, [sl, #4]
   14170:	b003      	add	sp, #12
   14172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14176:	2000      	movs	r0, #0
   14178:	2300      	movs	r3, #0
   1417a:	f8ca 3004 	str.w	r3, [sl, #4]
   1417e:	b003      	add	sp, #12
   14180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014184 <_sungetc_r>:
   14184:	b538      	push	{r3, r4, r5, lr}
   14186:	1c4b      	adds	r3, r1, #1
   14188:	d01a      	beq.n	141c0 <_sungetc_r+0x3c>
   1418a:	8993      	ldrh	r3, [r2, #12]
   1418c:	4614      	mov	r4, r2
   1418e:	6b12      	ldr	r2, [r2, #48]	; 0x30
   14190:	f023 0320 	bic.w	r3, r3, #32
   14194:	81a3      	strh	r3, [r4, #12]
   14196:	b2cd      	uxtb	r5, r1
   14198:	b1aa      	cbz	r2, 141c6 <_sungetc_r+0x42>
   1419a:	6862      	ldr	r2, [r4, #4]
   1419c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1419e:	429a      	cmp	r2, r3
   141a0:	da09      	bge.n	141b6 <_sungetc_r+0x32>
   141a2:	6823      	ldr	r3, [r4, #0]
   141a4:	1e5a      	subs	r2, r3, #1
   141a6:	6022      	str	r2, [r4, #0]
   141a8:	f803 5c01 	strb.w	r5, [r3, #-1]
   141ac:	6863      	ldr	r3, [r4, #4]
   141ae:	3301      	adds	r3, #1
   141b0:	6063      	str	r3, [r4, #4]
   141b2:	4628      	mov	r0, r5
   141b4:	bd38      	pop	{r3, r4, r5, pc}
   141b6:	4621      	mov	r1, r4
   141b8:	f001 f8de 	bl	15378 <__submore>
   141bc:	2800      	cmp	r0, #0
   141be:	d0f0      	beq.n	141a2 <_sungetc_r+0x1e>
   141c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   141c4:	e7f5      	b.n	141b2 <_sungetc_r+0x2e>
   141c6:	6923      	ldr	r3, [r4, #16]
   141c8:	6822      	ldr	r2, [r4, #0]
   141ca:	b12b      	cbz	r3, 141d8 <_sungetc_r+0x54>
   141cc:	4293      	cmp	r3, r2
   141ce:	d203      	bcs.n	141d8 <_sungetc_r+0x54>
   141d0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   141d4:	42ab      	cmp	r3, r5
   141d6:	d00f      	beq.n	141f8 <_sungetc_r+0x74>
   141d8:	6861      	ldr	r1, [r4, #4]
   141da:	63e1      	str	r1, [r4, #60]	; 0x3c
   141dc:	4623      	mov	r3, r4
   141de:	63a2      	str	r2, [r4, #56]	; 0x38
   141e0:	f104 0140 	add.w	r1, r4, #64	; 0x40
   141e4:	2203      	movs	r2, #3
   141e6:	6362      	str	r2, [r4, #52]	; 0x34
   141e8:	6321      	str	r1, [r4, #48]	; 0x30
   141ea:	f803 5f42 	strb.w	r5, [r3, #66]!
   141ee:	2201      	movs	r2, #1
   141f0:	e9c4 3200 	strd	r3, r2, [r4]
   141f4:	4628      	mov	r0, r5
   141f6:	bd38      	pop	{r3, r4, r5, pc}
   141f8:	6863      	ldr	r3, [r4, #4]
   141fa:	3a01      	subs	r2, #1
   141fc:	3301      	adds	r3, #1
   141fe:	e9c4 2300 	strd	r2, r3, [r4]
   14202:	e7d6      	b.n	141b2 <_sungetc_r+0x2e>

00014204 <__ssrefill_r>:
   14204:	b510      	push	{r4, lr}
   14206:	460c      	mov	r4, r1
   14208:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1420a:	b169      	cbz	r1, 14228 <__ssrefill_r+0x24>
   1420c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   14210:	4299      	cmp	r1, r3
   14212:	d001      	beq.n	14218 <__ssrefill_r+0x14>
   14214:	f7f9 fde6 	bl	dde4 <_free_r>
   14218:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1421a:	6063      	str	r3, [r4, #4]
   1421c:	2000      	movs	r0, #0
   1421e:	6320      	str	r0, [r4, #48]	; 0x30
   14220:	b113      	cbz	r3, 14228 <__ssrefill_r+0x24>
   14222:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14224:	6023      	str	r3, [r4, #0]
   14226:	bd10      	pop	{r4, pc}
   14228:	89a3      	ldrh	r3, [r4, #12]
   1422a:	6921      	ldr	r1, [r4, #16]
   1422c:	2200      	movs	r2, #0
   1422e:	f043 0320 	orr.w	r3, r3, #32
   14232:	e9c4 1200 	strd	r1, r2, [r4]
   14236:	81a3      	strh	r3, [r4, #12]
   14238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1423c:	bd10      	pop	{r4, pc}
   1423e:	bf00      	nop

00014240 <_sfread_r>:
   14240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14244:	b085      	sub	sp, #20
   14246:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1424a:	fb02 f303 	mul.w	r3, r2, r3
   1424e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   14250:	9301      	str	r3, [sp, #4]
   14252:	b3a3      	cbz	r3, 142be <_sfread_r+0x7e>
   14254:	f8d4 a004 	ldr.w	sl, [r4, #4]
   14258:	9b01      	ldr	r3, [sp, #4]
   1425a:	4553      	cmp	r3, sl
   1425c:	468b      	mov	fp, r1
   1425e:	d946      	bls.n	142ee <_sfread_r+0xae>
   14260:	46a0      	mov	r8, r4
   14262:	9d01      	ldr	r5, [sp, #4]
   14264:	f858 1b40 	ldr.w	r1, [r8], #64
   14268:	4607      	mov	r7, r0
   1426a:	2600      	movs	r6, #0
   1426c:	4652      	mov	r2, sl
   1426e:	4658      	mov	r0, fp
   14270:	f7f5 fb6c 	bl	994c <memcpy>
   14274:	6823      	ldr	r3, [r4, #0]
   14276:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14278:	4453      	add	r3, sl
   1427a:	46a9      	mov	r9, r5
   1427c:	e9c4 3600 	strd	r3, r6, [r4]
   14280:	4611      	mov	r1, r2
   14282:	4638      	mov	r0, r7
   14284:	44d3      	add	fp, sl
   14286:	eba5 050a 	sub.w	r5, r5, sl
   1428a:	b1e2      	cbz	r2, 142c6 <_sfread_r+0x86>
   1428c:	4542      	cmp	r2, r8
   1428e:	d001      	beq.n	14294 <_sfread_r+0x54>
   14290:	f7f9 fda8 	bl	dde4 <_free_r>
   14294:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14296:	6326      	str	r6, [r4, #48]	; 0x30
   14298:	6063      	str	r3, [r4, #4]
   1429a:	b1a3      	cbz	r3, 142c6 <_sfread_r+0x86>
   1429c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   1429e:	6021      	str	r1, [r4, #0]
   142a0:	42ab      	cmp	r3, r5
   142a2:	469a      	mov	sl, r3
   142a4:	d3e2      	bcc.n	1426c <_sfread_r+0x2c>
   142a6:	9b02      	ldr	r3, [sp, #8]
   142a8:	9301      	str	r3, [sp, #4]
   142aa:	462a      	mov	r2, r5
   142ac:	4658      	mov	r0, fp
   142ae:	f7f5 fb4d 	bl	994c <memcpy>
   142b2:	e9d4 3200 	ldrd	r3, r2, [r4]
   142b6:	1b52      	subs	r2, r2, r5
   142b8:	442b      	add	r3, r5
   142ba:	e9c4 3200 	strd	r3, r2, [r4]
   142be:	9801      	ldr	r0, [sp, #4]
   142c0:	b005      	add	sp, #20
   142c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142c6:	9a01      	ldr	r2, [sp, #4]
   142c8:	9b03      	ldr	r3, [sp, #12]
   142ca:	4452      	add	r2, sl
   142cc:	eba2 0209 	sub.w	r2, r2, r9
   142d0:	fbb2 f3f3 	udiv	r3, r2, r3
   142d4:	9301      	str	r3, [sp, #4]
   142d6:	89a3      	ldrh	r3, [r4, #12]
   142d8:	6922      	ldr	r2, [r4, #16]
   142da:	9801      	ldr	r0, [sp, #4]
   142dc:	f043 0320 	orr.w	r3, r3, #32
   142e0:	81a3      	strh	r3, [r4, #12]
   142e2:	2300      	movs	r3, #0
   142e4:	e9c4 2300 	strd	r2, r3, [r4]
   142e8:	b005      	add	sp, #20
   142ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142ee:	6821      	ldr	r1, [r4, #0]
   142f0:	461d      	mov	r5, r3
   142f2:	e7d8      	b.n	142a6 <_sfread_r+0x66>

000142f4 <__sprint_r.part.0>:
   142f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142f8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   142fa:	049c      	lsls	r4, r3, #18
   142fc:	4690      	mov	r8, r2
   142fe:	d52d      	bpl.n	1435c <__sprint_r.part.0+0x68>
   14300:	6893      	ldr	r3, [r2, #8]
   14302:	6812      	ldr	r2, [r2, #0]
   14304:	b343      	cbz	r3, 14358 <__sprint_r.part.0+0x64>
   14306:	468b      	mov	fp, r1
   14308:	4606      	mov	r6, r0
   1430a:	f102 0908 	add.w	r9, r2, #8
   1430e:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   14312:	ea5f 079a 	movs.w	r7, sl, lsr #2
   14316:	d015      	beq.n	14344 <__sprint_r.part.0+0x50>
   14318:	3d04      	subs	r5, #4
   1431a:	2400      	movs	r4, #0
   1431c:	e001      	b.n	14322 <__sprint_r.part.0+0x2e>
   1431e:	42a7      	cmp	r7, r4
   14320:	d00e      	beq.n	14340 <__sprint_r.part.0+0x4c>
   14322:	f855 1f04 	ldr.w	r1, [r5, #4]!
   14326:	465a      	mov	r2, fp
   14328:	4630      	mov	r0, r6
   1432a:	f001 fa97 	bl	1585c <_fputwc_r>
   1432e:	1c43      	adds	r3, r0, #1
   14330:	f104 0401 	add.w	r4, r4, #1
   14334:	d1f3      	bne.n	1431e <__sprint_r.part.0+0x2a>
   14336:	2300      	movs	r3, #0
   14338:	e9c8 3301 	strd	r3, r3, [r8, #4]
   1433c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14340:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14344:	f02a 0a03 	bic.w	sl, sl, #3
   14348:	eba3 030a 	sub.w	r3, r3, sl
   1434c:	f8c8 3008 	str.w	r3, [r8, #8]
   14350:	f109 0908 	add.w	r9, r9, #8
   14354:	2b00      	cmp	r3, #0
   14356:	d1da      	bne.n	1430e <__sprint_r.part.0+0x1a>
   14358:	2000      	movs	r0, #0
   1435a:	e7ec      	b.n	14336 <__sprint_r.part.0+0x42>
   1435c:	f001 f848 	bl	153f0 <__sfvwrite_r>
   14360:	2300      	movs	r3, #0
   14362:	e9c8 3301 	strd	r3, r3, [r8, #4]
   14366:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1436a:	bf00      	nop

0001436c <_vfiprintf_r>:
   1436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14370:	ed2d 8b02 	vpush	{d8}
   14374:	b0c5      	sub	sp, #276	; 0x114
   14376:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   1437a:	4683      	mov	fp, r0
   1437c:	ee08 1a10 	vmov	s16, r1
   14380:	4616      	mov	r6, r2
   14382:	2100      	movs	r1, #0
   14384:	2208      	movs	r2, #8
   14386:	4650      	mov	r0, sl
   14388:	461c      	mov	r4, r3
   1438a:	9307      	str	r3, [sp, #28]
   1438c:	f7f9 f8aa 	bl	d4e4 <memset>
   14390:	f1bb 0f00 	cmp.w	fp, #0
   14394:	d004      	beq.n	143a0 <_vfiprintf_r+0x34>
   14396:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   1439a:	2b00      	cmp	r3, #0
   1439c:	f000 86a0 	beq.w	150e0 <_vfiprintf_r+0xd74>
   143a0:	ee18 2a10 	vmov	r2, s16
   143a4:	6e53      	ldr	r3, [r2, #100]	; 0x64
   143a6:	07db      	lsls	r3, r3, #31
   143a8:	f140 8513 	bpl.w	14dd2 <_vfiprintf_r+0xa66>
   143ac:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   143b0:	b28a      	uxth	r2, r1
   143b2:	0495      	lsls	r5, r2, #18
   143b4:	d40b      	bmi.n	143ce <_vfiprintf_r+0x62>
   143b6:	ee18 3a10 	vmov	r3, s16
   143ba:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   143be:	8199      	strh	r1, [r3, #12]
   143c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   143c2:	b28a      	uxth	r2, r1
   143c4:	ee18 1a10 	vmov	r1, s16
   143c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   143cc:	664b      	str	r3, [r1, #100]	; 0x64
   143ce:	0710      	lsls	r0, r2, #28
   143d0:	f140 8105 	bpl.w	145de <_vfiprintf_r+0x272>
   143d4:	ee18 3a10 	vmov	r3, s16
   143d8:	691b      	ldr	r3, [r3, #16]
   143da:	2b00      	cmp	r3, #0
   143dc:	f000 80ff 	beq.w	145de <_vfiprintf_r+0x272>
   143e0:	f002 031a 	and.w	r3, r2, #26
   143e4:	2b0a      	cmp	r3, #10
   143e6:	f000 810a 	beq.w	145fe <_vfiprintf_r+0x292>
   143ea:	2300      	movs	r3, #0
   143ec:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   143f0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   143f4:	aa1b      	add	r2, sp, #108	; 0x6c
   143f6:	930c      	str	r3, [sp, #48]	; 0x30
   143f8:	9218      	str	r2, [sp, #96]	; 0x60
   143fa:	4691      	mov	r9, r2
   143fc:	930b      	str	r3, [sp, #44]	; 0x2c
   143fe:	9305      	str	r3, [sp, #20]
   14400:	46b0      	mov	r8, r6
   14402:	4644      	mov	r4, r8
   14404:	4ba8      	ldr	r3, [pc, #672]	; (146a8 <_vfiprintf_r+0x33c>)
   14406:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1440a:	f7f9 f967 	bl	d6dc <__locale_mb_cur_max>
   1440e:	4622      	mov	r2, r4
   14410:	4603      	mov	r3, r0
   14412:	a912      	add	r1, sp, #72	; 0x48
   14414:	f8cd a000 	str.w	sl, [sp]
   14418:	4658      	mov	r0, fp
   1441a:	47a8      	blx	r5
   1441c:	2800      	cmp	r0, #0
   1441e:	f000 8145 	beq.w	146ac <_vfiprintf_r+0x340>
   14422:	f2c0 8139 	blt.w	14698 <_vfiprintf_r+0x32c>
   14426:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14428:	2a25      	cmp	r2, #37	; 0x25
   1442a:	4603      	mov	r3, r0
   1442c:	d001      	beq.n	14432 <_vfiprintf_r+0xc6>
   1442e:	441c      	add	r4, r3
   14430:	e7e8      	b.n	14404 <_vfiprintf_r+0x98>
   14432:	ebb4 0608 	subs.w	r6, r4, r8
   14436:	4605      	mov	r5, r0
   14438:	f040 813c 	bne.w	146b4 <_vfiprintf_r+0x348>
   1443c:	2300      	movs	r3, #0
   1443e:	7861      	ldrb	r1, [r4, #1]
   14440:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   14444:	f104 0801 	add.w	r8, r4, #1
   14448:	9306      	str	r3, [sp, #24]
   1444a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1444e:	461e      	mov	r6, r3
   14450:	242b      	movs	r4, #43	; 0x2b
   14452:	f108 0801 	add.w	r8, r8, #1
   14456:	f1a1 0320 	sub.w	r3, r1, #32
   1445a:	2b5a      	cmp	r3, #90	; 0x5a
   1445c:	f200 8178 	bhi.w	14750 <_vfiprintf_r+0x3e4>
   14460:	e8df f013 	tbh	[pc, r3, lsl #1]
   14464:	017602b5 	.word	0x017602b5
   14468:	02b00176 	.word	0x02b00176
   1446c:	01760176 	.word	0x01760176
   14470:	006a0176 	.word	0x006a0176
   14474:	01760176 	.word	0x01760176
   14478:	028d027d 	.word	0x028d027d
   1447c:	02880176 	.word	0x02880176
   14480:	01760297 	.word	0x01760297
   14484:	005b0292 	.word	0x005b0292
   14488:	005b005b 	.word	0x005b005b
   1448c:	005b005b 	.word	0x005b005b
   14490:	005b005b 	.word	0x005b005b
   14494:	005b005b 	.word	0x005b005b
   14498:	01760176 	.word	0x01760176
   1449c:	01760176 	.word	0x01760176
   144a0:	01760176 	.word	0x01760176
   144a4:	01760176 	.word	0x01760176
   144a8:	025c0176 	.word	0x025c0176
   144ac:	01760084 	.word	0x01760084
   144b0:	01760176 	.word	0x01760176
   144b4:	01760176 	.word	0x01760176
   144b8:	01760176 	.word	0x01760176
   144bc:	01760176 	.word	0x01760176
   144c0:	00e80176 	.word	0x00e80176
   144c4:	01760176 	.word	0x01760176
   144c8:	02330176 	.word	0x02330176
   144cc:	02da0176 	.word	0x02da0176
   144d0:	01760176 	.word	0x01760176
   144d4:	0176058b 	.word	0x0176058b
   144d8:	01760176 	.word	0x01760176
   144dc:	01760176 	.word	0x01760176
   144e0:	01760176 	.word	0x01760176
   144e4:	01760176 	.word	0x01760176
   144e8:	025c0176 	.word	0x025c0176
   144ec:	01760086 	.word	0x01760086
   144f0:	01760176 	.word	0x01760176
   144f4:	008602cd 	.word	0x008602cd
   144f8:	0176007f 	.word	0x0176007f
   144fc:	017602c0 	.word	0x017602c0
   14500:	00ea02fd 	.word	0x00ea02fd
   14504:	007f02ed 	.word	0x007f02ed
   14508:	02330176 	.word	0x02330176
   1450c:	0569007c 	.word	0x0569007c
   14510:	01760176 	.word	0x01760176
   14514:	0176056b 	.word	0x0176056b
   14518:	007c      	.short	0x007c
   1451a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1451e:	2200      	movs	r2, #0
   14520:	f818 1b01 	ldrb.w	r1, [r8], #1
   14524:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   14528:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1452c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   14530:	2b09      	cmp	r3, #9
   14532:	d9f5      	bls.n	14520 <_vfiprintf_r+0x1b4>
   14534:	9206      	str	r2, [sp, #24]
   14536:	e78e      	b.n	14456 <_vfiprintf_r+0xea>
   14538:	4658      	mov	r0, fp
   1453a:	f7fe faf1 	bl	12b20 <_localeconv_r>
   1453e:	6843      	ldr	r3, [r0, #4]
   14540:	930d      	str	r3, [sp, #52]	; 0x34
   14542:	4618      	mov	r0, r3
   14544:	f7f9 fb3c 	bl	dbc0 <strlen>
   14548:	900e      	str	r0, [sp, #56]	; 0x38
   1454a:	4605      	mov	r5, r0
   1454c:	4658      	mov	r0, fp
   1454e:	f7fe fae7 	bl	12b20 <_localeconv_r>
   14552:	6883      	ldr	r3, [r0, #8]
   14554:	930b      	str	r3, [sp, #44]	; 0x2c
   14556:	2d00      	cmp	r5, #0
   14558:	f040 84d6 	bne.w	14f08 <_vfiprintf_r+0xb9c>
   1455c:	f898 1000 	ldrb.w	r1, [r8]
   14560:	e777      	b.n	14452 <_vfiprintf_r+0xe6>
   14562:	f898 1000 	ldrb.w	r1, [r8]
   14566:	f046 0620 	orr.w	r6, r6, #32
   1456a:	e772      	b.n	14452 <_vfiprintf_r+0xe6>
   1456c:	f046 0610 	orr.w	r6, r6, #16
   14570:	06b4      	lsls	r4, r6, #26
   14572:	f140 818e 	bpl.w	14892 <_vfiprintf_r+0x526>
   14576:	9b07      	ldr	r3, [sp, #28]
   14578:	3307      	adds	r3, #7
   1457a:	f023 0307 	bic.w	r3, r3, #7
   1457e:	461a      	mov	r2, r3
   14580:	6859      	ldr	r1, [r3, #4]
   14582:	f852 3b08 	ldr.w	r3, [r2], #8
   14586:	9207      	str	r2, [sp, #28]
   14588:	460a      	mov	r2, r1
   1458a:	2900      	cmp	r1, #0
   1458c:	f2c0 8470 	blt.w	14e70 <_vfiprintf_r+0xb04>
   14590:	1c79      	adds	r1, r7, #1
   14592:	f000 85a2 	beq.w	150da <_vfiprintf_r+0xd6e>
   14596:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   1459a:	9103      	str	r1, [sp, #12]
   1459c:	ea53 0102 	orrs.w	r1, r3, r2
   145a0:	f000 843f 	beq.w	14e22 <_vfiprintf_r+0xab6>
   145a4:	2b0a      	cmp	r3, #10
   145a6:	f172 0100 	sbcs.w	r1, r2, #0
   145aa:	f080 8541 	bcs.w	15030 <_vfiprintf_r+0xcc4>
   145ae:	3330      	adds	r3, #48	; 0x30
   145b0:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   145b4:	9e03      	ldr	r6, [sp, #12]
   145b6:	2301      	movs	r3, #1
   145b8:	9304      	str	r3, [sp, #16]
   145ba:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   145be:	9b04      	ldr	r3, [sp, #16]
   145c0:	42bb      	cmp	r3, r7
   145c2:	bfb8      	it	lt
   145c4:	463b      	movlt	r3, r7
   145c6:	9303      	str	r3, [sp, #12]
   145c8:	2300      	movs	r3, #0
   145ca:	9308      	str	r3, [sp, #32]
   145cc:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   145d0:	2b00      	cmp	r3, #0
   145d2:	f000 80cb 	beq.w	1476c <_vfiprintf_r+0x400>
   145d6:	9b03      	ldr	r3, [sp, #12]
   145d8:	3301      	adds	r3, #1
   145da:	9303      	str	r3, [sp, #12]
   145dc:	e0c6      	b.n	1476c <_vfiprintf_r+0x400>
   145de:	ee18 1a10 	vmov	r1, s16
   145e2:	4658      	mov	r0, fp
   145e4:	ee18 5a10 	vmov	r5, s16
   145e8:	f001 f87c 	bl	156e4 <__swsetup_r>
   145ec:	2800      	cmp	r0, #0
   145ee:	f040 8652 	bne.w	15296 <_vfiprintf_r+0xf2a>
   145f2:	89aa      	ldrh	r2, [r5, #12]
   145f4:	f002 031a 	and.w	r3, r2, #26
   145f8:	2b0a      	cmp	r3, #10
   145fa:	f47f aef6 	bne.w	143ea <_vfiprintf_r+0x7e>
   145fe:	ee18 1a10 	vmov	r1, s16
   14602:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   14606:	2b00      	cmp	r3, #0
   14608:	f6ff aeef 	blt.w	143ea <_vfiprintf_r+0x7e>
   1460c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1460e:	07db      	lsls	r3, r3, #31
   14610:	d402      	bmi.n	14618 <_vfiprintf_r+0x2ac>
   14612:	0597      	lsls	r7, r2, #22
   14614:	f140 8612 	bpl.w	1523c <_vfiprintf_r+0xed0>
   14618:	ee18 1a10 	vmov	r1, s16
   1461c:	4623      	mov	r3, r4
   1461e:	4632      	mov	r2, r6
   14620:	4658      	mov	r0, fp
   14622:	f000 fe69 	bl	152f8 <__sbprintf>
   14626:	9005      	str	r0, [sp, #20]
   14628:	9805      	ldr	r0, [sp, #20]
   1462a:	b045      	add	sp, #276	; 0x114
   1462c:	ecbd 8b02 	vpop	{d8}
   14630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14634:	f046 0610 	orr.w	r6, r6, #16
   14638:	f016 0220 	ands.w	r2, r6, #32
   1463c:	f000 8136 	beq.w	148ac <_vfiprintf_r+0x540>
   14640:	9b07      	ldr	r3, [sp, #28]
   14642:	3307      	adds	r3, #7
   14644:	f023 0307 	bic.w	r3, r3, #7
   14648:	4619      	mov	r1, r3
   1464a:	685a      	ldr	r2, [r3, #4]
   1464c:	f851 3b08 	ldr.w	r3, [r1], #8
   14650:	9107      	str	r1, [sp, #28]
   14652:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   14656:	9103      	str	r1, [sp, #12]
   14658:	2100      	movs	r1, #0
   1465a:	2000      	movs	r0, #0
   1465c:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   14660:	1c78      	adds	r0, r7, #1
   14662:	f000 8210 	beq.w	14a86 <_vfiprintf_r+0x71a>
   14666:	9803      	ldr	r0, [sp, #12]
   14668:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   1466c:	ea53 0002 	orrs.w	r0, r3, r2
   14670:	f040 8208 	bne.w	14a84 <_vfiprintf_r+0x718>
   14674:	2f00      	cmp	r7, #0
   14676:	f040 8538 	bne.w	150ea <_vfiprintf_r+0xd7e>
   1467a:	2900      	cmp	r1, #0
   1467c:	f040 83d5 	bne.w	14e2a <_vfiprintf_r+0xabe>
   14680:	9b03      	ldr	r3, [sp, #12]
   14682:	f013 0301 	ands.w	r3, r3, #1
   14686:	9304      	str	r3, [sp, #16]
   14688:	f000 8411 	beq.w	14eae <_vfiprintf_r+0xb42>
   1468c:	2330      	movs	r3, #48	; 0x30
   1468e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   14692:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   14696:	e792      	b.n	145be <_vfiprintf_r+0x252>
   14698:	2208      	movs	r2, #8
   1469a:	2100      	movs	r1, #0
   1469c:	4650      	mov	r0, sl
   1469e:	f7f8 ff21 	bl	d4e4 <memset>
   146a2:	2301      	movs	r3, #1
   146a4:	441c      	add	r4, r3
   146a6:	e6ad      	b.n	14404 <_vfiprintf_r+0x98>
   146a8:	2000810c 	.word	0x2000810c
   146ac:	ebb4 0608 	subs.w	r6, r4, r8
   146b0:	4605      	mov	r5, r0
   146b2:	d01b      	beq.n	146ec <_vfiprintf_r+0x380>
   146b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   146b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   146b8:	3301      	adds	r3, #1
   146ba:	4432      	add	r2, r6
   146bc:	2b07      	cmp	r3, #7
   146be:	e9c9 8600 	strd	r8, r6, [r9]
   146c2:	921a      	str	r2, [sp, #104]	; 0x68
   146c4:	9319      	str	r3, [sp, #100]	; 0x64
   146c6:	dd1c      	ble.n	14702 <_vfiprintf_r+0x396>
   146c8:	2a00      	cmp	r2, #0
   146ca:	f000 83a6 	beq.w	14e1a <_vfiprintf_r+0xaae>
   146ce:	ee18 1a10 	vmov	r1, s16
   146d2:	aa18      	add	r2, sp, #96	; 0x60
   146d4:	4658      	mov	r0, fp
   146d6:	f7ff fe0d 	bl	142f4 <__sprint_r.part.0>
   146da:	bb20      	cbnz	r0, 14726 <_vfiprintf_r+0x3ba>
   146dc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   146e0:	9b05      	ldr	r3, [sp, #20]
   146e2:	4433      	add	r3, r6
   146e4:	9305      	str	r3, [sp, #20]
   146e6:	2d00      	cmp	r5, #0
   146e8:	f47f aea8 	bne.w	1443c <_vfiprintf_r+0xd0>
   146ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   146ee:	2b00      	cmp	r3, #0
   146f0:	f040 85c1 	bne.w	15276 <_vfiprintf_r+0xf0a>
   146f4:	ee18 3a10 	vmov	r3, s16
   146f8:	2200      	movs	r2, #0
   146fa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   146fe:	9219      	str	r2, [sp, #100]	; 0x64
   14700:	e015      	b.n	1472e <_vfiprintf_r+0x3c2>
   14702:	f109 0908 	add.w	r9, r9, #8
   14706:	e7eb      	b.n	146e0 <_vfiprintf_r+0x374>
   14708:	ee18 1a10 	vmov	r1, s16
   1470c:	aa18      	add	r2, sp, #96	; 0x60
   1470e:	4658      	mov	r0, fp
   14710:	f7ff fdf0 	bl	142f4 <__sprint_r.part.0>
   14714:	2800      	cmp	r0, #0
   14716:	f000 80a6 	beq.w	14866 <_vfiprintf_r+0x4fa>
   1471a:	9b08      	ldr	r3, [sp, #32]
   1471c:	b11b      	cbz	r3, 14726 <_vfiprintf_r+0x3ba>
   1471e:	9908      	ldr	r1, [sp, #32]
   14720:	4658      	mov	r0, fp
   14722:	f7f9 fb5f 	bl	dde4 <_free_r>
   14726:	ee18 3a10 	vmov	r3, s16
   1472a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1472e:	ee18 2a10 	vmov	r2, s16
   14732:	6e52      	ldr	r2, [r2, #100]	; 0x64
   14734:	f012 0f01 	tst.w	r2, #1
   14738:	b29a      	uxth	r2, r3
   1473a:	f000 80a0 	beq.w	1487e <_vfiprintf_r+0x512>
   1473e:	0650      	lsls	r0, r2, #25
   14740:	f100 85b2 	bmi.w	152a8 <_vfiprintf_r+0xf3c>
   14744:	9805      	ldr	r0, [sp, #20]
   14746:	b045      	add	sp, #276	; 0x114
   14748:	ecbd 8b02 	vpop	{d8}
   1474c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14750:	2900      	cmp	r1, #0
   14752:	d0cb      	beq.n	146ec <_vfiprintf_r+0x380>
   14754:	2300      	movs	r3, #0
   14756:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1475a:	2301      	movs	r3, #1
   1475c:	e9cd 3303 	strd	r3, r3, [sp, #12]
   14760:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   14764:	ac2b      	add	r4, sp, #172	; 0xac
   14766:	2300      	movs	r3, #0
   14768:	9308      	str	r3, [sp, #32]
   1476a:	461f      	mov	r7, r3
   1476c:	f016 0302 	ands.w	r3, r6, #2
   14770:	9309      	str	r3, [sp, #36]	; 0x24
   14772:	d002      	beq.n	1477a <_vfiprintf_r+0x40e>
   14774:	9b03      	ldr	r3, [sp, #12]
   14776:	3302      	adds	r3, #2
   14778:	9303      	str	r3, [sp, #12]
   1477a:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   1477e:	930a      	str	r3, [sp, #40]	; 0x28
   14780:	d105      	bne.n	1478e <_vfiprintf_r+0x422>
   14782:	9b06      	ldr	r3, [sp, #24]
   14784:	9a03      	ldr	r2, [sp, #12]
   14786:	1a9d      	subs	r5, r3, r2
   14788:	2d00      	cmp	r5, #0
   1478a:	f300 827b 	bgt.w	14c84 <_vfiprintf_r+0x918>
   1478e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   14792:	1c41      	adds	r1, r0, #1
   14794:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   14798:	b182      	cbz	r2, 147bc <_vfiprintf_r+0x450>
   1479a:	2201      	movs	r2, #1
   1479c:	3301      	adds	r3, #1
   1479e:	f8c9 2004 	str.w	r2, [r9, #4]
   147a2:	2907      	cmp	r1, #7
   147a4:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   147a8:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   147ac:	f8c9 2000 	str.w	r2, [r9]
   147b0:	f300 824a 	bgt.w	14c48 <_vfiprintf_r+0x8dc>
   147b4:	4608      	mov	r0, r1
   147b6:	f109 0908 	add.w	r9, r9, #8
   147ba:	3101      	adds	r1, #1
   147bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   147be:	b1e2      	cbz	r2, 147fa <_vfiprintf_r+0x48e>
   147c0:	aa11      	add	r2, sp, #68	; 0x44
   147c2:	3302      	adds	r3, #2
   147c4:	f8c9 2000 	str.w	r2, [r9]
   147c8:	2907      	cmp	r1, #7
   147ca:	f04f 0202 	mov.w	r2, #2
   147ce:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   147d2:	f8c9 2004 	str.w	r2, [r9, #4]
   147d6:	f340 8250 	ble.w	14c7a <_vfiprintf_r+0x90e>
   147da:	2b00      	cmp	r3, #0
   147dc:	f000 8343 	beq.w	14e66 <_vfiprintf_r+0xafa>
   147e0:	ee18 1a10 	vmov	r1, s16
   147e4:	aa18      	add	r2, sp, #96	; 0x60
   147e6:	4658      	mov	r0, fp
   147e8:	f7ff fd84 	bl	142f4 <__sprint_r.part.0>
   147ec:	2800      	cmp	r0, #0
   147ee:	d194      	bne.n	1471a <_vfiprintf_r+0x3ae>
   147f0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   147f4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   147f8:	1c41      	adds	r1, r0, #1
   147fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   147fc:	2a80      	cmp	r2, #128	; 0x80
   147fe:	f000 8184 	beq.w	14b0a <_vfiprintf_r+0x79e>
   14802:	9a04      	ldr	r2, [sp, #16]
   14804:	1abd      	subs	r5, r7, r2
   14806:	2d00      	cmp	r5, #0
   14808:	f300 81d7 	bgt.w	14bba <_vfiprintf_r+0x84e>
   1480c:	9a04      	ldr	r2, [sp, #16]
   1480e:	f8c9 4000 	str.w	r4, [r9]
   14812:	4413      	add	r3, r2
   14814:	2907      	cmp	r1, #7
   14816:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1481a:	f8c9 2004 	str.w	r2, [r9, #4]
   1481e:	f340 816e 	ble.w	14afe <_vfiprintf_r+0x792>
   14822:	2b00      	cmp	r3, #0
   14824:	f000 8275 	beq.w	14d12 <_vfiprintf_r+0x9a6>
   14828:	ee18 1a10 	vmov	r1, s16
   1482c:	aa18      	add	r2, sp, #96	; 0x60
   1482e:	4658      	mov	r0, fp
   14830:	f7ff fd60 	bl	142f4 <__sprint_r.part.0>
   14834:	2800      	cmp	r0, #0
   14836:	f47f af70 	bne.w	1471a <_vfiprintf_r+0x3ae>
   1483a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1483c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14840:	0775      	lsls	r5, r6, #29
   14842:	d505      	bpl.n	14850 <_vfiprintf_r+0x4e4>
   14844:	9a06      	ldr	r2, [sp, #24]
   14846:	9903      	ldr	r1, [sp, #12]
   14848:	1a54      	subs	r4, r2, r1
   1484a:	2c00      	cmp	r4, #0
   1484c:	f300 826b 	bgt.w	14d26 <_vfiprintf_r+0x9ba>
   14850:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   14854:	9803      	ldr	r0, [sp, #12]
   14856:	4281      	cmp	r1, r0
   14858:	bfac      	ite	ge
   1485a:	1852      	addge	r2, r2, r1
   1485c:	1812      	addlt	r2, r2, r0
   1485e:	9205      	str	r2, [sp, #20]
   14860:	2b00      	cmp	r3, #0
   14862:	f47f af51 	bne.w	14708 <_vfiprintf_r+0x39c>
   14866:	9908      	ldr	r1, [sp, #32]
   14868:	2300      	movs	r3, #0
   1486a:	9319      	str	r3, [sp, #100]	; 0x64
   1486c:	2900      	cmp	r1, #0
   1486e:	f000 8149 	beq.w	14b04 <_vfiprintf_r+0x798>
   14872:	4658      	mov	r0, fp
   14874:	f7f9 fab6 	bl	dde4 <_free_r>
   14878:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1487c:	e5c1      	b.n	14402 <_vfiprintf_r+0x96>
   1487e:	059c      	lsls	r4, r3, #22
   14880:	f53f af5d 	bmi.w	1473e <_vfiprintf_r+0x3d2>
   14884:	ee18 4a10 	vmov	r4, s16
   14888:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1488a:	f7f9 f941 	bl	db10 <__retarget_lock_release_recursive>
   1488e:	89a2      	ldrh	r2, [r4, #12]
   14890:	e755      	b.n	1473e <_vfiprintf_r+0x3d2>
   14892:	06f0      	lsls	r0, r6, #27
   14894:	9a07      	ldr	r2, [sp, #28]
   14896:	f100 831f 	bmi.w	14ed8 <_vfiprintf_r+0xb6c>
   1489a:	0671      	lsls	r1, r6, #25
   1489c:	f140 8319 	bpl.w	14ed2 <_vfiprintf_r+0xb66>
   148a0:	f932 3b04 	ldrsh.w	r3, [r2], #4
   148a4:	9207      	str	r2, [sp, #28]
   148a6:	17da      	asrs	r2, r3, #31
   148a8:	4611      	mov	r1, r2
   148aa:	e66e      	b.n	1458a <_vfiprintf_r+0x21e>
   148ac:	f016 0310 	ands.w	r3, r6, #16
   148b0:	9907      	ldr	r1, [sp, #28]
   148b2:	f040 8309 	bne.w	14ec8 <_vfiprintf_r+0xb5c>
   148b6:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   148ba:	f000 8301 	beq.w	14ec0 <_vfiprintf_r+0xb54>
   148be:	461a      	mov	r2, r3
   148c0:	f851 3b04 	ldr.w	r3, [r1], #4
   148c4:	9107      	str	r1, [sp, #28]
   148c6:	b29b      	uxth	r3, r3
   148c8:	e6c3      	b.n	14652 <_vfiprintf_r+0x2e6>
   148ca:	9b07      	ldr	r3, [sp, #28]
   148cc:	461a      	mov	r2, r3
   148ce:	2300      	movs	r3, #0
   148d0:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   148d4:	4613      	mov	r3, r2
   148d6:	f853 4b04 	ldr.w	r4, [r3], #4
   148da:	9303      	str	r3, [sp, #12]
   148dc:	2c00      	cmp	r4, #0
   148de:	f000 8412 	beq.w	15106 <_vfiprintf_r+0xd9a>
   148e2:	2953      	cmp	r1, #83	; 0x53
   148e4:	f000 8365 	beq.w	14fb2 <_vfiprintf_r+0xc46>
   148e8:	f016 0510 	ands.w	r5, r6, #16
   148ec:	f040 8361 	bne.w	14fb2 <_vfiprintf_r+0xc46>
   148f0:	1c7b      	adds	r3, r7, #1
   148f2:	f000 84b3 	beq.w	1525c <_vfiprintf_r+0xef0>
   148f6:	463a      	mov	r2, r7
   148f8:	4629      	mov	r1, r5
   148fa:	4620      	mov	r0, r4
   148fc:	f7f9 f910 	bl	db20 <memchr>
   14900:	9008      	str	r0, [sp, #32]
   14902:	2800      	cmp	r0, #0
   14904:	f000 849f 	beq.w	15246 <_vfiprintf_r+0xeda>
   14908:	1b03      	subs	r3, r0, r4
   1490a:	9a03      	ldr	r2, [sp, #12]
   1490c:	9304      	str	r3, [sp, #16]
   1490e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14912:	462f      	mov	r7, r5
   14914:	9207      	str	r2, [sp, #28]
   14916:	9303      	str	r3, [sp, #12]
   14918:	9508      	str	r5, [sp, #32]
   1491a:	e657      	b.n	145cc <_vfiprintf_r+0x260>
   1491c:	2943      	cmp	r1, #67	; 0x43
   1491e:	d002      	beq.n	14926 <_vfiprintf_r+0x5ba>
   14920:	06f5      	lsls	r5, r6, #27
   14922:	f140 832d 	bpl.w	14f80 <_vfiprintf_r+0xc14>
   14926:	9d07      	ldr	r5, [sp, #28]
   14928:	2208      	movs	r2, #8
   1492a:	2100      	movs	r1, #0
   1492c:	a816      	add	r0, sp, #88	; 0x58
   1492e:	ac2b      	add	r4, sp, #172	; 0xac
   14930:	f7f8 fdd8 	bl	d4e4 <memset>
   14934:	ab16      	add	r3, sp, #88	; 0x58
   14936:	f855 2b04 	ldr.w	r2, [r5], #4
   1493a:	4621      	mov	r1, r4
   1493c:	4658      	mov	r0, fp
   1493e:	f7fe faa5 	bl	12e8c <_wcrtomb_r>
   14942:	4603      	mov	r3, r0
   14944:	3301      	adds	r3, #1
   14946:	9004      	str	r0, [sp, #16]
   14948:	f000 84b3 	beq.w	152b2 <_vfiprintf_r+0xf46>
   1494c:	9b04      	ldr	r3, [sp, #16]
   1494e:	9507      	str	r5, [sp, #28]
   14950:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14954:	9303      	str	r3, [sp, #12]
   14956:	2300      	movs	r3, #0
   14958:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1495c:	e703      	b.n	14766 <_vfiprintf_r+0x3fa>
   1495e:	9b07      	ldr	r3, [sp, #28]
   14960:	f853 2b04 	ldr.w	r2, [r3], #4
   14964:	9206      	str	r2, [sp, #24]
   14966:	2a00      	cmp	r2, #0
   14968:	f280 829c 	bge.w	14ea4 <_vfiprintf_r+0xb38>
   1496c:	9a06      	ldr	r2, [sp, #24]
   1496e:	4252      	negs	r2, r2
   14970:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14974:	f898 1000 	ldrb.w	r1, [r8]
   14978:	f046 0604 	orr.w	r6, r6, #4
   1497c:	e569      	b.n	14452 <_vfiprintf_r+0xe6>
   1497e:	f898 1000 	ldrb.w	r1, [r8]
   14982:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   14986:	e564      	b.n	14452 <_vfiprintf_r+0xe6>
   14988:	f898 1000 	ldrb.w	r1, [r8]
   1498c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   14990:	e55f      	b.n	14452 <_vfiprintf_r+0xe6>
   14992:	4642      	mov	r2, r8
   14994:	f812 1b01 	ldrb.w	r1, [r2], #1
   14998:	292a      	cmp	r1, #42	; 0x2a
   1499a:	f000 8496 	beq.w	152ca <_vfiprintf_r+0xf5e>
   1499e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   149a2:	2b09      	cmp	r3, #9
   149a4:	4690      	mov	r8, r2
   149a6:	f04f 0700 	mov.w	r7, #0
   149aa:	f63f ad54 	bhi.w	14456 <_vfiprintf_r+0xea>
   149ae:	f818 1b01 	ldrb.w	r1, [r8], #1
   149b2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   149b6:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   149ba:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   149be:	2b09      	cmp	r3, #9
   149c0:	d9f5      	bls.n	149ae <_vfiprintf_r+0x642>
   149c2:	e548      	b.n	14456 <_vfiprintf_r+0xea>
   149c4:	f898 1000 	ldrb.w	r1, [r8]
   149c8:	f046 0601 	orr.w	r6, r6, #1
   149cc:	e541      	b.n	14452 <_vfiprintf_r+0xe6>
   149ce:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   149d2:	2b00      	cmp	r3, #0
   149d4:	f47f adc2 	bne.w	1455c <_vfiprintf_r+0x1f0>
   149d8:	2320      	movs	r3, #32
   149da:	f898 1000 	ldrb.w	r1, [r8]
   149de:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   149e2:	e536      	b.n	14452 <_vfiprintf_r+0xe6>
   149e4:	f898 1000 	ldrb.w	r1, [r8]
   149e8:	296c      	cmp	r1, #108	; 0x6c
   149ea:	bf03      	ittte	eq
   149ec:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   149f0:	f046 0620 	orreq.w	r6, r6, #32
   149f4:	f108 0801 	addeq.w	r8, r8, #1
   149f8:	f046 0610 	orrne.w	r6, r6, #16
   149fc:	e529      	b.n	14452 <_vfiprintf_r+0xe6>
   149fe:	f898 1000 	ldrb.w	r1, [r8]
   14a02:	2968      	cmp	r1, #104	; 0x68
   14a04:	bf03      	ittte	eq
   14a06:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   14a0a:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   14a0e:	f108 0801 	addeq.w	r8, r8, #1
   14a12:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   14a16:	e51c      	b.n	14452 <_vfiprintf_r+0xe6>
   14a18:	f046 0310 	orr.w	r3, r6, #16
   14a1c:	9303      	str	r3, [sp, #12]
   14a1e:	9b03      	ldr	r3, [sp, #12]
   14a20:	f013 0220 	ands.w	r2, r3, #32
   14a24:	f000 8206 	beq.w	14e34 <_vfiprintf_r+0xac8>
   14a28:	9b07      	ldr	r3, [sp, #28]
   14a2a:	3307      	adds	r3, #7
   14a2c:	f023 0307 	bic.w	r3, r3, #7
   14a30:	4619      	mov	r1, r3
   14a32:	685a      	ldr	r2, [r3, #4]
   14a34:	f851 3b08 	ldr.w	r3, [r1], #8
   14a38:	9107      	str	r1, [sp, #28]
   14a3a:	2101      	movs	r1, #1
   14a3c:	e60d      	b.n	1465a <_vfiprintf_r+0x2ee>
   14a3e:	9a07      	ldr	r2, [sp, #28]
   14a40:	f046 0302 	orr.w	r3, r6, #2
   14a44:	9303      	str	r3, [sp, #12]
   14a46:	f852 3b04 	ldr.w	r3, [r2], #4
   14a4a:	9207      	str	r2, [sp, #28]
   14a4c:	f647 0230 	movw	r2, #30768	; 0x7830
   14a50:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   14a54:	4ab8      	ldr	r2, [pc, #736]	; (14d38 <_vfiprintf_r+0x9cc>)
   14a56:	920c      	str	r2, [sp, #48]	; 0x30
   14a58:	2102      	movs	r1, #2
   14a5a:	2200      	movs	r2, #0
   14a5c:	e5fd      	b.n	1465a <_vfiprintf_r+0x2ee>
   14a5e:	06b7      	lsls	r7, r6, #26
   14a60:	f100 8248 	bmi.w	14ef4 <_vfiprintf_r+0xb88>
   14a64:	06f5      	lsls	r5, r6, #27
   14a66:	f100 8346 	bmi.w	150f6 <_vfiprintf_r+0xd8a>
   14a6a:	0674      	lsls	r4, r6, #25
   14a6c:	f100 83d5 	bmi.w	1521a <_vfiprintf_r+0xeae>
   14a70:	05b0      	lsls	r0, r6, #22
   14a72:	f140 8340 	bpl.w	150f6 <_vfiprintf_r+0xd8a>
   14a76:	9b07      	ldr	r3, [sp, #28]
   14a78:	9905      	ldr	r1, [sp, #20]
   14a7a:	f853 2b04 	ldr.w	r2, [r3], #4
   14a7e:	9307      	str	r3, [sp, #28]
   14a80:	7011      	strb	r1, [r2, #0]
   14a82:	e4be      	b.n	14402 <_vfiprintf_r+0x96>
   14a84:	9603      	str	r6, [sp, #12]
   14a86:	2901      	cmp	r1, #1
   14a88:	f43f ad8c 	beq.w	145a4 <_vfiprintf_r+0x238>
   14a8c:	2902      	cmp	r1, #2
   14a8e:	ac44      	add	r4, sp, #272	; 0x110
   14a90:	d111      	bne.n	14ab6 <_vfiprintf_r+0x74a>
   14a92:	980c      	ldr	r0, [sp, #48]	; 0x30
   14a94:	f003 010f 	and.w	r1, r3, #15
   14a98:	091b      	lsrs	r3, r3, #4
   14a9a:	5c41      	ldrb	r1, [r0, r1]
   14a9c:	f804 1d01 	strb.w	r1, [r4, #-1]!
   14aa0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   14aa4:	0912      	lsrs	r2, r2, #4
   14aa6:	ea53 0102 	orrs.w	r1, r3, r2
   14aaa:	d1f3      	bne.n	14a94 <_vfiprintf_r+0x728>
   14aac:	9e03      	ldr	r6, [sp, #12]
   14aae:	ab44      	add	r3, sp, #272	; 0x110
   14ab0:	1b1b      	subs	r3, r3, r4
   14ab2:	9304      	str	r3, [sp, #16]
   14ab4:	e583      	b.n	145be <_vfiprintf_r+0x252>
   14ab6:	f003 0107 	and.w	r1, r3, #7
   14aba:	08db      	lsrs	r3, r3, #3
   14abc:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   14ac0:	08d2      	lsrs	r2, r2, #3
   14ac2:	3130      	adds	r1, #48	; 0x30
   14ac4:	ea53 0502 	orrs.w	r5, r3, r2
   14ac8:	4620      	mov	r0, r4
   14aca:	f804 1d01 	strb.w	r1, [r4, #-1]!
   14ace:	d1f2      	bne.n	14ab6 <_vfiprintf_r+0x74a>
   14ad0:	9e03      	ldr	r6, [sp, #12]
   14ad2:	07f3      	lsls	r3, r6, #31
   14ad4:	d5eb      	bpl.n	14aae <_vfiprintf_r+0x742>
   14ad6:	2930      	cmp	r1, #48	; 0x30
   14ad8:	d0e8      	beq.n	14aac <_vfiprintf_r+0x740>
   14ada:	2330      	movs	r3, #48	; 0x30
   14adc:	3802      	subs	r0, #2
   14ade:	f804 3c01 	strb.w	r3, [r4, #-1]
   14ae2:	ab44      	add	r3, sp, #272	; 0x110
   14ae4:	1a1b      	subs	r3, r3, r0
   14ae6:	9e03      	ldr	r6, [sp, #12]
   14ae8:	9304      	str	r3, [sp, #16]
   14aea:	4604      	mov	r4, r0
   14aec:	e567      	b.n	145be <_vfiprintf_r+0x252>
   14aee:	9b04      	ldr	r3, [sp, #16]
   14af0:	941b      	str	r4, [sp, #108]	; 0x6c
   14af2:	2201      	movs	r2, #1
   14af4:	931c      	str	r3, [sp, #112]	; 0x70
   14af6:	931a      	str	r3, [sp, #104]	; 0x68
   14af8:	9219      	str	r2, [sp, #100]	; 0x64
   14afa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14afe:	f109 0908 	add.w	r9, r9, #8
   14b02:	e69d      	b.n	14840 <_vfiprintf_r+0x4d4>
   14b04:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14b08:	e47b      	b.n	14402 <_vfiprintf_r+0x96>
   14b0a:	9a06      	ldr	r2, [sp, #24]
   14b0c:	9d03      	ldr	r5, [sp, #12]
   14b0e:	1b55      	subs	r5, r2, r5
   14b10:	2d00      	cmp	r5, #0
   14b12:	f77f ae76 	ble.w	14802 <_vfiprintf_r+0x496>
   14b16:	2d10      	cmp	r5, #16
   14b18:	f340 83bb 	ble.w	15292 <_vfiprintf_r+0xf26>
   14b1c:	9409      	str	r4, [sp, #36]	; 0x24
   14b1e:	ee18 4a10 	vmov	r4, s16
   14b22:	e007      	b.n	14b34 <_vfiprintf_r+0x7c8>
   14b24:	f100 0c02 	add.w	ip, r0, #2
   14b28:	f109 0908 	add.w	r9, r9, #8
   14b2c:	4610      	mov	r0, r2
   14b2e:	3d10      	subs	r5, #16
   14b30:	2d10      	cmp	r5, #16
   14b32:	dd1e      	ble.n	14b72 <_vfiprintf_r+0x806>
   14b34:	4981      	ldr	r1, [pc, #516]	; (14d3c <_vfiprintf_r+0x9d0>)
   14b36:	f8c9 1000 	str.w	r1, [r9]
   14b3a:	1c42      	adds	r2, r0, #1
   14b3c:	3310      	adds	r3, #16
   14b3e:	2110      	movs	r1, #16
   14b40:	2a07      	cmp	r2, #7
   14b42:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   14b46:	f8c9 1004 	str.w	r1, [r9, #4]
   14b4a:	ddeb      	ble.n	14b24 <_vfiprintf_r+0x7b8>
   14b4c:	aa18      	add	r2, sp, #96	; 0x60
   14b4e:	2b00      	cmp	r3, #0
   14b50:	d074      	beq.n	14c3c <_vfiprintf_r+0x8d0>
   14b52:	4621      	mov	r1, r4
   14b54:	4658      	mov	r0, fp
   14b56:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14b5a:	f7ff fbcb 	bl	142f4 <__sprint_r.part.0>
   14b5e:	2800      	cmp	r0, #0
   14b60:	f47f addb 	bne.w	1471a <_vfiprintf_r+0x3ae>
   14b64:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   14b68:	3d10      	subs	r5, #16
   14b6a:	2d10      	cmp	r5, #16
   14b6c:	f100 0c01 	add.w	ip, r0, #1
   14b70:	dce0      	bgt.n	14b34 <_vfiprintf_r+0x7c8>
   14b72:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14b74:	4a71      	ldr	r2, [pc, #452]	; (14d3c <_vfiprintf_r+0x9d0>)
   14b76:	f8c9 5004 	str.w	r5, [r9, #4]
   14b7a:	442b      	add	r3, r5
   14b7c:	f1bc 0f07 	cmp.w	ip, #7
   14b80:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   14b84:	f8c9 2000 	str.w	r2, [r9]
   14b88:	f340 8194 	ble.w	14eb4 <_vfiprintf_r+0xb48>
   14b8c:	2b00      	cmp	r3, #0
   14b8e:	f000 831f 	beq.w	151d0 <_vfiprintf_r+0xe64>
   14b92:	ee18 1a10 	vmov	r1, s16
   14b96:	aa18      	add	r2, sp, #96	; 0x60
   14b98:	4658      	mov	r0, fp
   14b9a:	f7ff fbab 	bl	142f4 <__sprint_r.part.0>
   14b9e:	2800      	cmp	r0, #0
   14ba0:	f47f adbb 	bne.w	1471a <_vfiprintf_r+0x3ae>
   14ba4:	9a04      	ldr	r2, [sp, #16]
   14ba6:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   14baa:	1abd      	subs	r5, r7, r2
   14bac:	2d00      	cmp	r5, #0
   14bae:	f100 0101 	add.w	r1, r0, #1
   14bb2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14bb6:	f77f ae29 	ble.w	1480c <_vfiprintf_r+0x4a0>
   14bba:	2d10      	cmp	r5, #16
   14bbc:	dd29      	ble.n	14c12 <_vfiprintf_r+0x8a6>
   14bbe:	9409      	str	r4, [sp, #36]	; 0x24
   14bc0:	2710      	movs	r7, #16
   14bc2:	ee18 4a10 	vmov	r4, s16
   14bc6:	e007      	b.n	14bd8 <_vfiprintf_r+0x86c>
   14bc8:	f100 0c02 	add.w	ip, r0, #2
   14bcc:	f109 0908 	add.w	r9, r9, #8
   14bd0:	4610      	mov	r0, r2
   14bd2:	3d10      	subs	r5, #16
   14bd4:	2d10      	cmp	r5, #16
   14bd6:	dd1a      	ble.n	14c0e <_vfiprintf_r+0x8a2>
   14bd8:	1c42      	adds	r2, r0, #1
   14bda:	4958      	ldr	r1, [pc, #352]	; (14d3c <_vfiprintf_r+0x9d0>)
   14bdc:	3310      	adds	r3, #16
   14bde:	2a07      	cmp	r2, #7
   14be0:	e9c9 1700 	strd	r1, r7, [r9]
   14be4:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   14be8:	ddee      	ble.n	14bc8 <_vfiprintf_r+0x85c>
   14bea:	aa18      	add	r2, sp, #96	; 0x60
   14bec:	b303      	cbz	r3, 14c30 <_vfiprintf_r+0x8c4>
   14bee:	4621      	mov	r1, r4
   14bf0:	4658      	mov	r0, fp
   14bf2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14bf6:	f7ff fb7d 	bl	142f4 <__sprint_r.part.0>
   14bfa:	2800      	cmp	r0, #0
   14bfc:	f47f ad8d 	bne.w	1471a <_vfiprintf_r+0x3ae>
   14c00:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   14c04:	3d10      	subs	r5, #16
   14c06:	2d10      	cmp	r5, #16
   14c08:	f100 0c01 	add.w	ip, r0, #1
   14c0c:	dce4      	bgt.n	14bd8 <_vfiprintf_r+0x86c>
   14c0e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14c10:	4661      	mov	r1, ip
   14c12:	4a4a      	ldr	r2, [pc, #296]	; (14d3c <_vfiprintf_r+0x9d0>)
   14c14:	f8c9 5004 	str.w	r5, [r9, #4]
   14c18:	442b      	add	r3, r5
   14c1a:	2907      	cmp	r1, #7
   14c1c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   14c20:	f8c9 2000 	str.w	r2, [r9]
   14c24:	f300 80e7 	bgt.w	14df6 <_vfiprintf_r+0xa8a>
   14c28:	f109 0908 	add.w	r9, r9, #8
   14c2c:	3101      	adds	r1, #1
   14c2e:	e5ed      	b.n	1480c <_vfiprintf_r+0x4a0>
   14c30:	f04f 0c01 	mov.w	ip, #1
   14c34:	4618      	mov	r0, r3
   14c36:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14c3a:	e7ca      	b.n	14bd2 <_vfiprintf_r+0x866>
   14c3c:	f04f 0c01 	mov.w	ip, #1
   14c40:	4618      	mov	r0, r3
   14c42:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14c46:	e772      	b.n	14b2e <_vfiprintf_r+0x7c2>
   14c48:	2b00      	cmp	r3, #0
   14c4a:	f000 8104 	beq.w	14e56 <_vfiprintf_r+0xaea>
   14c4e:	ee18 1a10 	vmov	r1, s16
   14c52:	aa18      	add	r2, sp, #96	; 0x60
   14c54:	4658      	mov	r0, fp
   14c56:	f7ff fb4d 	bl	142f4 <__sprint_r.part.0>
   14c5a:	2800      	cmp	r0, #0
   14c5c:	f47f ad5d 	bne.w	1471a <_vfiprintf_r+0x3ae>
   14c60:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   14c64:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14c68:	1c41      	adds	r1, r0, #1
   14c6a:	e5a7      	b.n	147bc <_vfiprintf_r+0x450>
   14c6c:	2302      	movs	r3, #2
   14c6e:	aa11      	add	r2, sp, #68	; 0x44
   14c70:	931c      	str	r3, [sp, #112]	; 0x70
   14c72:	921b      	str	r2, [sp, #108]	; 0x6c
   14c74:	2101      	movs	r1, #1
   14c76:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14c7a:	4608      	mov	r0, r1
   14c7c:	f109 0908 	add.w	r9, r9, #8
   14c80:	1c41      	adds	r1, r0, #1
   14c82:	e5ba      	b.n	147fa <_vfiprintf_r+0x48e>
   14c84:	2d10      	cmp	r5, #16
   14c86:	f340 82e5 	ble.w	15254 <_vfiprintf_r+0xee8>
   14c8a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   14c8e:	940f      	str	r4, [sp, #60]	; 0x3c
   14c90:	4608      	mov	r0, r1
   14c92:	ee18 4a10 	vmov	r4, s16
   14c96:	e007      	b.n	14ca8 <_vfiprintf_r+0x93c>
   14c98:	f100 0c02 	add.w	ip, r0, #2
   14c9c:	f109 0908 	add.w	r9, r9, #8
   14ca0:	4610      	mov	r0, r2
   14ca2:	3d10      	subs	r5, #16
   14ca4:	2d10      	cmp	r5, #16
   14ca6:	dd1d      	ble.n	14ce4 <_vfiprintf_r+0x978>
   14ca8:	4925      	ldr	r1, [pc, #148]	; (14d40 <_vfiprintf_r+0x9d4>)
   14caa:	f8c9 1000 	str.w	r1, [r9]
   14cae:	1c42      	adds	r2, r0, #1
   14cb0:	3310      	adds	r3, #16
   14cb2:	2110      	movs	r1, #16
   14cb4:	2a07      	cmp	r2, #7
   14cb6:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   14cba:	f8c9 1004 	str.w	r1, [r9, #4]
   14cbe:	ddeb      	ble.n	14c98 <_vfiprintf_r+0x92c>
   14cc0:	aa18      	add	r2, sp, #96	; 0x60
   14cc2:	b303      	cbz	r3, 14d06 <_vfiprintf_r+0x99a>
   14cc4:	4621      	mov	r1, r4
   14cc6:	4658      	mov	r0, fp
   14cc8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14ccc:	f7ff fb12 	bl	142f4 <__sprint_r.part.0>
   14cd0:	2800      	cmp	r0, #0
   14cd2:	f47f ad22 	bne.w	1471a <_vfiprintf_r+0x3ae>
   14cd6:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   14cda:	3d10      	subs	r5, #16
   14cdc:	2d10      	cmp	r5, #16
   14cde:	f100 0c01 	add.w	ip, r0, #1
   14ce2:	dce1      	bgt.n	14ca8 <_vfiprintf_r+0x93c>
   14ce4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   14ce6:	4660      	mov	r0, ip
   14ce8:	4a15      	ldr	r2, [pc, #84]	; (14d40 <_vfiprintf_r+0x9d4>)
   14cea:	f8c9 5004 	str.w	r5, [r9, #4]
   14cee:	442b      	add	r3, r5
   14cf0:	2807      	cmp	r0, #7
   14cf2:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   14cf6:	f8c9 2000 	str.w	r2, [r9]
   14cfa:	f300 80c1 	bgt.w	14e80 <_vfiprintf_r+0xb14>
   14cfe:	f109 0908 	add.w	r9, r9, #8
   14d02:	1c41      	adds	r1, r0, #1
   14d04:	e546      	b.n	14794 <_vfiprintf_r+0x428>
   14d06:	4618      	mov	r0, r3
   14d08:	f04f 0c01 	mov.w	ip, #1
   14d0c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14d10:	e7c7      	b.n	14ca2 <_vfiprintf_r+0x936>
   14d12:	0776      	lsls	r6, r6, #29
   14d14:	9319      	str	r3, [sp, #100]	; 0x64
   14d16:	d553      	bpl.n	14dc0 <_vfiprintf_r+0xa54>
   14d18:	9a06      	ldr	r2, [sp, #24]
   14d1a:	9903      	ldr	r1, [sp, #12]
   14d1c:	1a54      	subs	r4, r2, r1
   14d1e:	2c00      	cmp	r4, #0
   14d20:	dd4e      	ble.n	14dc0 <_vfiprintf_r+0xa54>
   14d22:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14d26:	2c10      	cmp	r4, #16
   14d28:	f340 82b0 	ble.w	1528c <_vfiprintf_r+0xf20>
   14d2c:	9919      	ldr	r1, [sp, #100]	; 0x64
   14d2e:	ee18 6a10 	vmov	r6, s16
   14d32:	2510      	movs	r5, #16
   14d34:	e00d      	b.n	14d52 <_vfiprintf_r+0x9e6>
   14d36:	bf00      	nop
   14d38:	20000ed0 	.word	0x20000ed0
   14d3c:	20007f64 	.word	0x20007f64
   14d40:	2000298c 	.word	0x2000298c
   14d44:	1c88      	adds	r0, r1, #2
   14d46:	f109 0908 	add.w	r9, r9, #8
   14d4a:	4611      	mov	r1, r2
   14d4c:	3c10      	subs	r4, #16
   14d4e:	2c10      	cmp	r4, #16
   14d50:	dd1a      	ble.n	14d88 <_vfiprintf_r+0xa1c>
   14d52:	1c4a      	adds	r2, r1, #1
   14d54:	48b3      	ldr	r0, [pc, #716]	; (15024 <_vfiprintf_r+0xcb8>)
   14d56:	3310      	adds	r3, #16
   14d58:	2a07      	cmp	r2, #7
   14d5a:	e9c9 0500 	strd	r0, r5, [r9]
   14d5e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   14d62:	ddef      	ble.n	14d44 <_vfiprintf_r+0x9d8>
   14d64:	aa18      	add	r2, sp, #96	; 0x60
   14d66:	b333      	cbz	r3, 14db6 <_vfiprintf_r+0xa4a>
   14d68:	4631      	mov	r1, r6
   14d6a:	4658      	mov	r0, fp
   14d6c:	f7ff fac2 	bl	142f4 <__sprint_r.part.0>
   14d70:	2800      	cmp	r0, #0
   14d72:	f47f acd2 	bne.w	1471a <_vfiprintf_r+0x3ae>
   14d76:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   14d7a:	3c10      	subs	r4, #16
   14d7c:	2c10      	cmp	r4, #16
   14d7e:	f101 0001 	add.w	r0, r1, #1
   14d82:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14d86:	dce4      	bgt.n	14d52 <_vfiprintf_r+0x9e6>
   14d88:	4aa6      	ldr	r2, [pc, #664]	; (15024 <_vfiprintf_r+0xcb8>)
   14d8a:	f8c9 4004 	str.w	r4, [r9, #4]
   14d8e:	4423      	add	r3, r4
   14d90:	2807      	cmp	r0, #7
   14d92:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   14d96:	f8c9 2000 	str.w	r2, [r9]
   14d9a:	f77f ad59 	ble.w	14850 <_vfiprintf_r+0x4e4>
   14d9e:	b17b      	cbz	r3, 14dc0 <_vfiprintf_r+0xa54>
   14da0:	ee18 1a10 	vmov	r1, s16
   14da4:	aa18      	add	r2, sp, #96	; 0x60
   14da6:	4658      	mov	r0, fp
   14da8:	f7ff faa4 	bl	142f4 <__sprint_r.part.0>
   14dac:	2800      	cmp	r0, #0
   14dae:	f47f acb4 	bne.w	1471a <_vfiprintf_r+0x3ae>
   14db2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14db4:	e54c      	b.n	14850 <_vfiprintf_r+0x4e4>
   14db6:	2001      	movs	r0, #1
   14db8:	4619      	mov	r1, r3
   14dba:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14dbe:	e7c5      	b.n	14d4c <_vfiprintf_r+0x9e0>
   14dc0:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   14dc4:	9903      	ldr	r1, [sp, #12]
   14dc6:	428a      	cmp	r2, r1
   14dc8:	bfac      	ite	ge
   14dca:	189b      	addge	r3, r3, r2
   14dcc:	185b      	addlt	r3, r3, r1
   14dce:	9305      	str	r3, [sp, #20]
   14dd0:	e549      	b.n	14866 <_vfiprintf_r+0x4fa>
   14dd2:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   14dd6:	058f      	lsls	r7, r1, #22
   14dd8:	ee18 3a10 	vmov	r3, s16
   14ddc:	b28a      	uxth	r2, r1
   14dde:	f53f aae8 	bmi.w	143b2 <_vfiprintf_r+0x46>
   14de2:	ee18 5a10 	vmov	r5, s16
   14de6:	6d98      	ldr	r0, [r3, #88]	; 0x58
   14de8:	f7f8 fe90 	bl	db0c <__retarget_lock_acquire_recursive>
   14dec:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   14df0:	b28a      	uxth	r2, r1
   14df2:	f7ff bade 	b.w	143b2 <_vfiprintf_r+0x46>
   14df6:	2b00      	cmp	r3, #0
   14df8:	f43f ae79 	beq.w	14aee <_vfiprintf_r+0x782>
   14dfc:	ee18 1a10 	vmov	r1, s16
   14e00:	aa18      	add	r2, sp, #96	; 0x60
   14e02:	4658      	mov	r0, fp
   14e04:	f7ff fa76 	bl	142f4 <__sprint_r.part.0>
   14e08:	2800      	cmp	r0, #0
   14e0a:	f47f ac86 	bne.w	1471a <_vfiprintf_r+0x3ae>
   14e0e:	9919      	ldr	r1, [sp, #100]	; 0x64
   14e10:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14e12:	3101      	adds	r1, #1
   14e14:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14e18:	e4f8      	b.n	1480c <_vfiprintf_r+0x4a0>
   14e1a:	9219      	str	r2, [sp, #100]	; 0x64
   14e1c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14e20:	e45e      	b.n	146e0 <_vfiprintf_r+0x374>
   14e22:	2f00      	cmp	r7, #0
   14e24:	f47f abc3 	bne.w	145ae <_vfiprintf_r+0x242>
   14e28:	9e03      	ldr	r6, [sp, #12]
   14e2a:	2700      	movs	r7, #0
   14e2c:	9704      	str	r7, [sp, #16]
   14e2e:	ac44      	add	r4, sp, #272	; 0x110
   14e30:	f7ff bbc5 	b.w	145be <_vfiprintf_r+0x252>
   14e34:	9b03      	ldr	r3, [sp, #12]
   14e36:	f013 0310 	ands.w	r3, r3, #16
   14e3a:	d154      	bne.n	14ee6 <_vfiprintf_r+0xb7a>
   14e3c:	9a03      	ldr	r2, [sp, #12]
   14e3e:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   14e42:	f000 816b 	beq.w	1511c <_vfiprintf_r+0xdb0>
   14e46:	9907      	ldr	r1, [sp, #28]
   14e48:	461a      	mov	r2, r3
   14e4a:	f851 3b04 	ldr.w	r3, [r1], #4
   14e4e:	9107      	str	r1, [sp, #28]
   14e50:	b29b      	uxth	r3, r3
   14e52:	2101      	movs	r1, #1
   14e54:	e401      	b.n	1465a <_vfiprintf_r+0x2ee>
   14e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14e58:	2a00      	cmp	r2, #0
   14e5a:	d164      	bne.n	14f26 <_vfiprintf_r+0xbba>
   14e5c:	4618      	mov	r0, r3
   14e5e:	2101      	movs	r1, #1
   14e60:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14e64:	e4c9      	b.n	147fa <_vfiprintf_r+0x48e>
   14e66:	2101      	movs	r1, #1
   14e68:	4618      	mov	r0, r3
   14e6a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14e6e:	e4c4      	b.n	147fa <_vfiprintf_r+0x48e>
   14e70:	425b      	negs	r3, r3
   14e72:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   14e76:	9603      	str	r6, [sp, #12]
   14e78:	202d      	movs	r0, #45	; 0x2d
   14e7a:	2101      	movs	r1, #1
   14e7c:	f7ff bbee 	b.w	1465c <_vfiprintf_r+0x2f0>
   14e80:	2b00      	cmp	r3, #0
   14e82:	f000 8088 	beq.w	14f96 <_vfiprintf_r+0xc2a>
   14e86:	ee18 1a10 	vmov	r1, s16
   14e8a:	aa18      	add	r2, sp, #96	; 0x60
   14e8c:	4658      	mov	r0, fp
   14e8e:	f7ff fa31 	bl	142f4 <__sprint_r.part.0>
   14e92:	2800      	cmp	r0, #0
   14e94:	f47f ac41 	bne.w	1471a <_vfiprintf_r+0x3ae>
   14e98:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   14e9c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14ea0:	1c41      	adds	r1, r0, #1
   14ea2:	e477      	b.n	14794 <_vfiprintf_r+0x428>
   14ea4:	f898 1000 	ldrb.w	r1, [r8]
   14ea8:	9307      	str	r3, [sp, #28]
   14eaa:	f7ff bad2 	b.w	14452 <_vfiprintf_r+0xe6>
   14eae:	ac44      	add	r4, sp, #272	; 0x110
   14eb0:	f7ff bb85 	b.w	145be <_vfiprintf_r+0x252>
   14eb4:	f109 0908 	add.w	r9, r9, #8
   14eb8:	f10c 0101 	add.w	r1, ip, #1
   14ebc:	4660      	mov	r0, ip
   14ebe:	e4a0      	b.n	14802 <_vfiprintf_r+0x496>
   14ec0:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   14ec4:	f040 8197 	bne.w	151f6 <_vfiprintf_r+0xe8a>
   14ec8:	f851 3b04 	ldr.w	r3, [r1], #4
   14ecc:	9107      	str	r1, [sp, #28]
   14ece:	f7ff bbc0 	b.w	14652 <_vfiprintf_r+0x2e6>
   14ed2:	05b3      	lsls	r3, r6, #22
   14ed4:	f100 8188 	bmi.w	151e8 <_vfiprintf_r+0xe7c>
   14ed8:	f852 3b04 	ldr.w	r3, [r2], #4
   14edc:	9207      	str	r2, [sp, #28]
   14ede:	17da      	asrs	r2, r3, #31
   14ee0:	4611      	mov	r1, r2
   14ee2:	f7ff bb52 	b.w	1458a <_vfiprintf_r+0x21e>
   14ee6:	9907      	ldr	r1, [sp, #28]
   14ee8:	f851 3b04 	ldr.w	r3, [r1], #4
   14eec:	9107      	str	r1, [sp, #28]
   14eee:	2101      	movs	r1, #1
   14ef0:	f7ff bbb3 	b.w	1465a <_vfiprintf_r+0x2ee>
   14ef4:	9b07      	ldr	r3, [sp, #28]
   14ef6:	9805      	ldr	r0, [sp, #20]
   14ef8:	f853 1b04 	ldr.w	r1, [r3], #4
   14efc:	9307      	str	r3, [sp, #28]
   14efe:	17c2      	asrs	r2, r0, #31
   14f00:	e9c1 0200 	strd	r0, r2, [r1]
   14f04:	f7ff ba7d 	b.w	14402 <_vfiprintf_r+0x96>
   14f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14f0a:	2b00      	cmp	r3, #0
   14f0c:	f43f ab26 	beq.w	1455c <_vfiprintf_r+0x1f0>
   14f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14f12:	781b      	ldrb	r3, [r3, #0]
   14f14:	2b00      	cmp	r3, #0
   14f16:	f43f ab21 	beq.w	1455c <_vfiprintf_r+0x1f0>
   14f1a:	f898 1000 	ldrb.w	r1, [r8]
   14f1e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   14f22:	f7ff ba96 	b.w	14452 <_vfiprintf_r+0xe6>
   14f26:	2302      	movs	r3, #2
   14f28:	aa11      	add	r2, sp, #68	; 0x44
   14f2a:	931c      	str	r3, [sp, #112]	; 0x70
   14f2c:	921b      	str	r2, [sp, #108]	; 0x6c
   14f2e:	2001      	movs	r0, #1
   14f30:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14f34:	e6a2      	b.n	14c7c <_vfiprintf_r+0x910>
   14f36:	9603      	str	r6, [sp, #12]
   14f38:	e571      	b.n	14a1e <_vfiprintf_r+0x6b2>
   14f3a:	4b3b      	ldr	r3, [pc, #236]	; (15028 <_vfiprintf_r+0xcbc>)
   14f3c:	930c      	str	r3, [sp, #48]	; 0x30
   14f3e:	f016 0220 	ands.w	r2, r6, #32
   14f42:	d059      	beq.n	14ff8 <_vfiprintf_r+0xc8c>
   14f44:	9b07      	ldr	r3, [sp, #28]
   14f46:	3307      	adds	r3, #7
   14f48:	f023 0307 	bic.w	r3, r3, #7
   14f4c:	4618      	mov	r0, r3
   14f4e:	685a      	ldr	r2, [r3, #4]
   14f50:	f850 3b08 	ldr.w	r3, [r0], #8
   14f54:	9007      	str	r0, [sp, #28]
   14f56:	07f4      	lsls	r4, r6, #31
   14f58:	d509      	bpl.n	14f6e <_vfiprintf_r+0xc02>
   14f5a:	ea53 0002 	orrs.w	r0, r3, r2
   14f5e:	d006      	beq.n	14f6e <_vfiprintf_r+0xc02>
   14f60:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   14f64:	2130      	movs	r1, #48	; 0x30
   14f66:	f046 0602 	orr.w	r6, r6, #2
   14f6a:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   14f6e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   14f72:	9103      	str	r1, [sp, #12]
   14f74:	2102      	movs	r1, #2
   14f76:	f7ff bb70 	b.w	1465a <_vfiprintf_r+0x2ee>
   14f7a:	4b2c      	ldr	r3, [pc, #176]	; (1502c <_vfiprintf_r+0xcc0>)
   14f7c:	930c      	str	r3, [sp, #48]	; 0x30
   14f7e:	e7de      	b.n	14f3e <_vfiprintf_r+0xbd2>
   14f80:	9b07      	ldr	r3, [sp, #28]
   14f82:	2101      	movs	r1, #1
   14f84:	f853 2b04 	ldr.w	r2, [r3], #4
   14f88:	9103      	str	r1, [sp, #12]
   14f8a:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   14f8e:	9307      	str	r3, [sp, #28]
   14f90:	9104      	str	r1, [sp, #16]
   14f92:	ac2b      	add	r4, sp, #172	; 0xac
   14f94:	e4df      	b.n	14956 <_vfiprintf_r+0x5ea>
   14f96:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   14f9a:	2a00      	cmp	r2, #0
   14f9c:	f040 8132 	bne.w	15204 <_vfiprintf_r+0xe98>
   14fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14fa2:	2a00      	cmp	r2, #0
   14fa4:	f47f ae62 	bne.w	14c6c <_vfiprintf_r+0x900>
   14fa8:	4618      	mov	r0, r3
   14faa:	2101      	movs	r1, #1
   14fac:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14fb0:	e427      	b.n	14802 <_vfiprintf_r+0x496>
   14fb2:	2100      	movs	r1, #0
   14fb4:	2208      	movs	r2, #8
   14fb6:	a816      	add	r0, sp, #88	; 0x58
   14fb8:	9413      	str	r4, [sp, #76]	; 0x4c
   14fba:	f7f8 fa93 	bl	d4e4 <memset>
   14fbe:	1c79      	adds	r1, r7, #1
   14fc0:	f000 80bc 	beq.w	1513c <_vfiprintf_r+0xdd0>
   14fc4:	2500      	movs	r5, #0
   14fc6:	9407      	str	r4, [sp, #28]
   14fc8:	462c      	mov	r4, r5
   14fca:	e00c      	b.n	14fe6 <_vfiprintf_r+0xc7a>
   14fcc:	a92b      	add	r1, sp, #172	; 0xac
   14fce:	4658      	mov	r0, fp
   14fd0:	f7fd ff5c 	bl	12e8c <_wcrtomb_r>
   14fd4:	1c42      	adds	r2, r0, #1
   14fd6:	4420      	add	r0, r4
   14fd8:	f000 816b 	beq.w	152b2 <_vfiprintf_r+0xf46>
   14fdc:	42b8      	cmp	r0, r7
   14fde:	dc08      	bgt.n	14ff2 <_vfiprintf_r+0xc86>
   14fe0:	f000 8170 	beq.w	152c4 <_vfiprintf_r+0xf58>
   14fe4:	4604      	mov	r4, r0
   14fe6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14fe8:	5952      	ldr	r2, [r2, r5]
   14fea:	ab16      	add	r3, sp, #88	; 0x58
   14fec:	3504      	adds	r5, #4
   14fee:	2a00      	cmp	r2, #0
   14ff0:	d1ec      	bne.n	14fcc <_vfiprintf_r+0xc60>
   14ff2:	9404      	str	r4, [sp, #16]
   14ff4:	9c07      	ldr	r4, [sp, #28]
   14ff6:	e0af      	b.n	15158 <_vfiprintf_r+0xdec>
   14ff8:	f016 0310 	ands.w	r3, r6, #16
   14ffc:	9807      	ldr	r0, [sp, #28]
   14ffe:	d10c      	bne.n	1501a <_vfiprintf_r+0xcae>
   15000:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   15004:	d005      	beq.n	15012 <_vfiprintf_r+0xca6>
   15006:	461a      	mov	r2, r3
   15008:	f850 3b04 	ldr.w	r3, [r0], #4
   1500c:	9007      	str	r0, [sp, #28]
   1500e:	b29b      	uxth	r3, r3
   15010:	e7a1      	b.n	14f56 <_vfiprintf_r+0xbea>
   15012:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   15016:	f040 80e1 	bne.w	151dc <_vfiprintf_r+0xe70>
   1501a:	f850 3b04 	ldr.w	r3, [r0], #4
   1501e:	9007      	str	r0, [sp, #28]
   15020:	e799      	b.n	14f56 <_vfiprintf_r+0xbea>
   15022:	bf00      	nop
   15024:	2000298c 	.word	0x2000298c
   15028:	20000ed0 	.word	0x20000ed0
   1502c:	20000ee4 	.word	0x20000ee4
   15030:	9903      	ldr	r1, [sp, #12]
   15032:	9704      	str	r7, [sp, #16]
   15034:	ac44      	add	r4, sp, #272	; 0x110
   15036:	469e      	mov	lr, r3
   15038:	ee08 ba90 	vmov	s17, fp
   1503c:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   15040:	f04f 0c00 	mov.w	ip, #0
   15044:	4623      	mov	r3, r4
   15046:	e006      	b.n	15056 <_vfiprintf_r+0xcea>
   15048:	f1be 0f0a 	cmp.w	lr, #10
   1504c:	f172 0200 	sbcs.w	r2, r2, #0
   15050:	d339      	bcc.n	150c6 <_vfiprintf_r+0xd5a>
   15052:	46a6      	mov	lr, r4
   15054:	462a      	mov	r2, r5
   15056:	49a6      	ldr	r1, [pc, #664]	; (152f0 <_vfiprintf_r+0xf84>)
   15058:	eb1e 0002 	adds.w	r0, lr, r2
   1505c:	f140 0000 	adc.w	r0, r0, #0
   15060:	460f      	mov	r7, r1
   15062:	fba1 1400 	umull	r1, r4, r1, r0
   15066:	f024 0103 	bic.w	r1, r4, #3
   1506a:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   1506e:	1a40      	subs	r0, r0, r1
   15070:	ebbe 0100 	subs.w	r1, lr, r0
   15074:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   15078:	f162 0400 	sbc.w	r4, r2, #0
   1507c:	fb05 f501 	mul.w	r5, r5, r1
   15080:	fb07 5504 	mla	r5, r7, r4, r5
   15084:	fba1 4107 	umull	r4, r1, r1, r7
   15088:	440d      	add	r5, r1
   1508a:	2705      	movs	r7, #5
   1508c:	f004 0101 	and.w	r1, r4, #1
   15090:	fba1 1b07 	umull	r1, fp, r1, r7
   15094:	1809      	adds	r1, r1, r0
   15096:	0864      	lsrs	r4, r4, #1
   15098:	3130      	adds	r1, #48	; 0x30
   1509a:	f803 1c01 	strb.w	r1, [r3, #-1]
   1509e:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   150a2:	f10c 0c01 	add.w	ip, ip, #1
   150a6:	3b01      	subs	r3, #1
   150a8:	086d      	lsrs	r5, r5, #1
   150aa:	2e00      	cmp	r6, #0
   150ac:	d0cc      	beq.n	15048 <_vfiprintf_r+0xcdc>
   150ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   150b0:	7809      	ldrb	r1, [r1, #0]
   150b2:	4561      	cmp	r1, ip
   150b4:	d1c8      	bne.n	15048 <_vfiprintf_r+0xcdc>
   150b6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   150ba:	d0c5      	beq.n	15048 <_vfiprintf_r+0xcdc>
   150bc:	f1be 0f0a 	cmp.w	lr, #10
   150c0:	f172 0200 	sbcs.w	r2, r2, #0
   150c4:	d26c      	bcs.n	151a0 <_vfiprintf_r+0xe34>
   150c6:	461c      	mov	r4, r3
   150c8:	ab44      	add	r3, sp, #272	; 0x110
   150ca:	1b1b      	subs	r3, r3, r4
   150cc:	9f04      	ldr	r7, [sp, #16]
   150ce:	9e03      	ldr	r6, [sp, #12]
   150d0:	9304      	str	r3, [sp, #16]
   150d2:	ee18 ba90 	vmov	fp, s17
   150d6:	f7ff ba72 	b.w	145be <_vfiprintf_r+0x252>
   150da:	9603      	str	r6, [sp, #12]
   150dc:	f7ff ba62 	b.w	145a4 <_vfiprintf_r+0x238>
   150e0:	4658      	mov	r0, fp
   150e2:	f7f8 f8d1 	bl	d288 <__sinit>
   150e6:	f7ff b95b 	b.w	143a0 <_vfiprintf_r+0x34>
   150ea:	2901      	cmp	r1, #1
   150ec:	9603      	str	r6, [sp, #12]
   150ee:	f47f accd 	bne.w	14a8c <_vfiprintf_r+0x720>
   150f2:	f7ff ba5c 	b.w	145ae <_vfiprintf_r+0x242>
   150f6:	9b07      	ldr	r3, [sp, #28]
   150f8:	9905      	ldr	r1, [sp, #20]
   150fa:	f853 2b04 	ldr.w	r2, [r3], #4
   150fe:	6011      	str	r1, [r2, #0]
   15100:	9307      	str	r3, [sp, #28]
   15102:	f7ff b97e 	b.w	14402 <_vfiprintf_r+0x96>
   15106:	2f06      	cmp	r7, #6
   15108:	463b      	mov	r3, r7
   1510a:	9a03      	ldr	r2, [sp, #12]
   1510c:	4c79      	ldr	r4, [pc, #484]	; (152f4 <_vfiprintf_r+0xf88>)
   1510e:	9207      	str	r2, [sp, #28]
   15110:	bf28      	it	cs
   15112:	2306      	movcs	r3, #6
   15114:	9304      	str	r3, [sp, #16]
   15116:	9303      	str	r3, [sp, #12]
   15118:	f7ff bb25 	b.w	14766 <_vfiprintf_r+0x3fa>
   1511c:	9b03      	ldr	r3, [sp, #12]
   1511e:	9907      	ldr	r1, [sp, #28]
   15120:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   15124:	bf14      	ite	ne
   15126:	f851 3b04 	ldrne.w	r3, [r1], #4
   1512a:	f851 3b04 	ldreq.w	r3, [r1], #4
   1512e:	9107      	str	r1, [sp, #28]
   15130:	bf1c      	itt	ne
   15132:	4602      	movne	r2, r0
   15134:	b2db      	uxtbne	r3, r3
   15136:	2101      	movs	r1, #1
   15138:	f7ff ba8f 	b.w	1465a <_vfiprintf_r+0x2ee>
   1513c:	ab16      	add	r3, sp, #88	; 0x58
   1513e:	9300      	str	r3, [sp, #0]
   15140:	2300      	movs	r3, #0
   15142:	4619      	mov	r1, r3
   15144:	aa13      	add	r2, sp, #76	; 0x4c
   15146:	4658      	mov	r0, fp
   15148:	f7fd fec6 	bl	12ed8 <_wcsrtombs_r>
   1514c:	4603      	mov	r3, r0
   1514e:	3301      	adds	r3, #1
   15150:	9004      	str	r0, [sp, #16]
   15152:	f000 80ae 	beq.w	152b2 <_vfiprintf_r+0xf46>
   15156:	9413      	str	r4, [sp, #76]	; 0x4c
   15158:	9b04      	ldr	r3, [sp, #16]
   1515a:	2b00      	cmp	r3, #0
   1515c:	d030      	beq.n	151c0 <_vfiprintf_r+0xe54>
   1515e:	2b63      	cmp	r3, #99	; 0x63
   15160:	dc63      	bgt.n	1522a <_vfiprintf_r+0xebe>
   15162:	2300      	movs	r3, #0
   15164:	9308      	str	r3, [sp, #32]
   15166:	ac2b      	add	r4, sp, #172	; 0xac
   15168:	2208      	movs	r2, #8
   1516a:	2100      	movs	r1, #0
   1516c:	a816      	add	r0, sp, #88	; 0x58
   1516e:	f7f8 f9b9 	bl	d4e4 <memset>
   15172:	9d04      	ldr	r5, [sp, #16]
   15174:	ab16      	add	r3, sp, #88	; 0x58
   15176:	9300      	str	r3, [sp, #0]
   15178:	aa13      	add	r2, sp, #76	; 0x4c
   1517a:	462b      	mov	r3, r5
   1517c:	4621      	mov	r1, r4
   1517e:	4658      	mov	r0, fp
   15180:	f7fd feaa 	bl	12ed8 <_wcsrtombs_r>
   15184:	4285      	cmp	r5, r0
   15186:	f040 80ab 	bne.w	152e0 <_vfiprintf_r+0xf74>
   1518a:	9b03      	ldr	r3, [sp, #12]
   1518c:	9a04      	ldr	r2, [sp, #16]
   1518e:	9307      	str	r3, [sp, #28]
   15190:	2300      	movs	r3, #0
   15192:	54a3      	strb	r3, [r4, r2]
   15194:	461f      	mov	r7, r3
   15196:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1519a:	9303      	str	r3, [sp, #12]
   1519c:	f7ff ba16 	b.w	145cc <_vfiprintf_r+0x260>
   151a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   151a2:	990d      	ldr	r1, [sp, #52]	; 0x34
   151a4:	1a9b      	subs	r3, r3, r2
   151a6:	4618      	mov	r0, r3
   151a8:	9308      	str	r3, [sp, #32]
   151aa:	f7f8 fa33 	bl	d614 <strncpy>
   151ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   151b0:	9b08      	ldr	r3, [sp, #32]
   151b2:	784a      	ldrb	r2, [r1, #1]
   151b4:	b10a      	cbz	r2, 151ba <_vfiprintf_r+0xe4e>
   151b6:	3101      	adds	r1, #1
   151b8:	910b      	str	r1, [sp, #44]	; 0x2c
   151ba:	f04f 0c00 	mov.w	ip, #0
   151be:	e748      	b.n	15052 <_vfiprintf_r+0xce6>
   151c0:	9b03      	ldr	r3, [sp, #12]
   151c2:	9307      	str	r3, [sp, #28]
   151c4:	9b04      	ldr	r3, [sp, #16]
   151c6:	9303      	str	r3, [sp, #12]
   151c8:	461f      	mov	r7, r3
   151ca:	9308      	str	r3, [sp, #32]
   151cc:	f7ff b9fe 	b.w	145cc <_vfiprintf_r+0x260>
   151d0:	2101      	movs	r1, #1
   151d2:	4618      	mov	r0, r3
   151d4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   151d8:	f7ff bb13 	b.w	14802 <_vfiprintf_r+0x496>
   151dc:	f850 3b04 	ldr.w	r3, [r0], #4
   151e0:	9007      	str	r0, [sp, #28]
   151e2:	4622      	mov	r2, r4
   151e4:	b2db      	uxtb	r3, r3
   151e6:	e6b6      	b.n	14f56 <_vfiprintf_r+0xbea>
   151e8:	f912 3b04 	ldrsb.w	r3, [r2], #4
   151ec:	9207      	str	r2, [sp, #28]
   151ee:	17da      	asrs	r2, r3, #31
   151f0:	4611      	mov	r1, r2
   151f2:	f7ff b9ca 	b.w	1458a <_vfiprintf_r+0x21e>
   151f6:	f851 3b04 	ldr.w	r3, [r1], #4
   151fa:	9107      	str	r1, [sp, #28]
   151fc:	4602      	mov	r2, r0
   151fe:	b2db      	uxtb	r3, r3
   15200:	f7ff ba27 	b.w	14652 <_vfiprintf_r+0x2e6>
   15204:	2301      	movs	r3, #1
   15206:	931c      	str	r3, [sp, #112]	; 0x70
   15208:	2101      	movs	r1, #1
   1520a:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   1520e:	931b      	str	r3, [sp, #108]	; 0x6c
   15210:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   15214:	460b      	mov	r3, r1
   15216:	f7ff bacd 	b.w	147b4 <_vfiprintf_r+0x448>
   1521a:	9b07      	ldr	r3, [sp, #28]
   1521c:	9905      	ldr	r1, [sp, #20]
   1521e:	f853 2b04 	ldr.w	r2, [r3], #4
   15222:	9307      	str	r3, [sp, #28]
   15224:	8011      	strh	r1, [r2, #0]
   15226:	f7ff b8ec 	b.w	14402 <_vfiprintf_r+0x96>
   1522a:	1c59      	adds	r1, r3, #1
   1522c:	4658      	mov	r0, fp
   1522e:	f7f6 fa8b 	bl	b748 <_malloc_r>
   15232:	4604      	mov	r4, r0
   15234:	2800      	cmp	r0, #0
   15236:	d03c      	beq.n	152b2 <_vfiprintf_r+0xf46>
   15238:	9008      	str	r0, [sp, #32]
   1523a:	e795      	b.n	15168 <_vfiprintf_r+0xdfc>
   1523c:	6d88      	ldr	r0, [r1, #88]	; 0x58
   1523e:	f7f8 fc67 	bl	db10 <__retarget_lock_release_recursive>
   15242:	f7ff b9e9 	b.w	14618 <_vfiprintf_r+0x2ac>
   15246:	9b03      	ldr	r3, [sp, #12]
   15248:	9307      	str	r3, [sp, #28]
   1524a:	e9cd 7703 	strd	r7, r7, [sp, #12]
   1524e:	9f08      	ldr	r7, [sp, #32]
   15250:	f7ff b9bc 	b.w	145cc <_vfiprintf_r+0x260>
   15254:	9819      	ldr	r0, [sp, #100]	; 0x64
   15256:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15258:	3001      	adds	r0, #1
   1525a:	e545      	b.n	14ce8 <_vfiprintf_r+0x97c>
   1525c:	9b03      	ldr	r3, [sp, #12]
   1525e:	9307      	str	r3, [sp, #28]
   15260:	4620      	mov	r0, r4
   15262:	f7f8 fcad 	bl	dbc0 <strlen>
   15266:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1526a:	462f      	mov	r7, r5
   1526c:	9004      	str	r0, [sp, #16]
   1526e:	9303      	str	r3, [sp, #12]
   15270:	9508      	str	r5, [sp, #32]
   15272:	f7ff b9ab 	b.w	145cc <_vfiprintf_r+0x260>
   15276:	ee18 1a10 	vmov	r1, s16
   1527a:	aa18      	add	r2, sp, #96	; 0x60
   1527c:	4658      	mov	r0, fp
   1527e:	f7ff f839 	bl	142f4 <__sprint_r.part.0>
   15282:	2800      	cmp	r0, #0
   15284:	f43f aa36 	beq.w	146f4 <_vfiprintf_r+0x388>
   15288:	f7ff ba4d 	b.w	14726 <_vfiprintf_r+0x3ba>
   1528c:	9819      	ldr	r0, [sp, #100]	; 0x64
   1528e:	3001      	adds	r0, #1
   15290:	e57a      	b.n	14d88 <_vfiprintf_r+0xa1c>
   15292:	468c      	mov	ip, r1
   15294:	e46e      	b.n	14b74 <_vfiprintf_r+0x808>
   15296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   15298:	07d9      	lsls	r1, r3, #31
   1529a:	d405      	bmi.n	152a8 <_vfiprintf_r+0xf3c>
   1529c:	89ab      	ldrh	r3, [r5, #12]
   1529e:	059a      	lsls	r2, r3, #22
   152a0:	d402      	bmi.n	152a8 <_vfiprintf_r+0xf3c>
   152a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
   152a4:	f7f8 fc34 	bl	db10 <__retarget_lock_release_recursive>
   152a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   152ac:	9305      	str	r3, [sp, #20]
   152ae:	f7ff ba49 	b.w	14744 <_vfiprintf_r+0x3d8>
   152b2:	ee18 2a10 	vmov	r2, s16
   152b6:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   152ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   152be:	8193      	strh	r3, [r2, #12]
   152c0:	f7ff ba35 	b.w	1472e <_vfiprintf_r+0x3c2>
   152c4:	9c07      	ldr	r4, [sp, #28]
   152c6:	9704      	str	r7, [sp, #16]
   152c8:	e746      	b.n	15158 <_vfiprintf_r+0xdec>
   152ca:	9b07      	ldr	r3, [sp, #28]
   152cc:	f898 1001 	ldrb.w	r1, [r8, #1]
   152d0:	f853 7b04 	ldr.w	r7, [r3], #4
   152d4:	9307      	str	r3, [sp, #28]
   152d6:	4690      	mov	r8, r2
   152d8:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   152dc:	f7ff b8b9 	b.w	14452 <_vfiprintf_r+0xe6>
   152e0:	ee18 2a10 	vmov	r2, s16
   152e4:	8993      	ldrh	r3, [r2, #12]
   152e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   152ea:	8193      	strh	r3, [r2, #12]
   152ec:	f7ff ba15 	b.w	1471a <_vfiprintf_r+0x3ae>
   152f0:	cccccccd 	.word	0xcccccccd
   152f4:	20000ef8 	.word	0x20000ef8

000152f8 <__sbprintf>:
   152f8:	b570      	push	{r4, r5, r6, lr}
   152fa:	460c      	mov	r4, r1
   152fc:	8989      	ldrh	r1, [r1, #12]
   152fe:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   15302:	f021 0102 	bic.w	r1, r1, #2
   15306:	f8ad 1014 	strh.w	r1, [sp, #20]
   1530a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1530c:	911b      	str	r1, [sp, #108]	; 0x6c
   1530e:	89e1      	ldrh	r1, [r4, #14]
   15310:	f8ad 1016 	strh.w	r1, [sp, #22]
   15314:	69e1      	ldr	r1, [r4, #28]
   15316:	9109      	str	r1, [sp, #36]	; 0x24
   15318:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1531a:	910b      	str	r1, [sp, #44]	; 0x2c
   1531c:	a91c      	add	r1, sp, #112	; 0x70
   1531e:	9102      	str	r1, [sp, #8]
   15320:	9106      	str	r1, [sp, #24]
   15322:	f44f 6180 	mov.w	r1, #1024	; 0x400
   15326:	4606      	mov	r6, r0
   15328:	9104      	str	r1, [sp, #16]
   1532a:	9107      	str	r1, [sp, #28]
   1532c:	a818      	add	r0, sp, #96	; 0x60
   1532e:	2100      	movs	r1, #0
   15330:	e9cd 3200 	strd	r3, r2, [sp]
   15334:	9108      	str	r1, [sp, #32]
   15336:	f7f8 fbe5 	bl	db04 <__retarget_lock_init_recursive>
   1533a:	e9dd 3200 	ldrd	r3, r2, [sp]
   1533e:	a902      	add	r1, sp, #8
   15340:	4630      	mov	r0, r6
   15342:	f7ff f813 	bl	1436c <_vfiprintf_r>
   15346:	1e05      	subs	r5, r0, #0
   15348:	db07      	blt.n	1535a <__sbprintf+0x62>
   1534a:	a902      	add	r1, sp, #8
   1534c:	4630      	mov	r0, r6
   1534e:	f7fd fb5d 	bl	12a0c <_fflush_r>
   15352:	2800      	cmp	r0, #0
   15354:	bf18      	it	ne
   15356:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   1535a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1535e:	065b      	lsls	r3, r3, #25
   15360:	d503      	bpl.n	1536a <__sbprintf+0x72>
   15362:	89a3      	ldrh	r3, [r4, #12]
   15364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15368:	81a3      	strh	r3, [r4, #12]
   1536a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1536c:	f7f8 fbcc 	bl	db08 <__retarget_lock_close_recursive>
   15370:	4628      	mov	r0, r5
   15372:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   15376:	bd70      	pop	{r4, r5, r6, pc}

00015378 <__submore>:
   15378:	f101 0340 	add.w	r3, r1, #64	; 0x40
   1537c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15380:	460c      	mov	r4, r1
   15382:	6b09      	ldr	r1, [r1, #48]	; 0x30
   15384:	4299      	cmp	r1, r3
   15386:	d014      	beq.n	153b2 <__submore+0x3a>
   15388:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1538a:	0077      	lsls	r7, r6, #1
   1538c:	463a      	mov	r2, r7
   1538e:	f7f6 fca3 	bl	bcd8 <_realloc_r>
   15392:	4605      	mov	r5, r0
   15394:	b340      	cbz	r0, 153e8 <__submore+0x70>
   15396:	eb00 0806 	add.w	r8, r0, r6
   1539a:	4601      	mov	r1, r0
   1539c:	4632      	mov	r2, r6
   1539e:	4640      	mov	r0, r8
   153a0:	f7f4 fad4 	bl	994c <memcpy>
   153a4:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   153a8:	f8c4 8000 	str.w	r8, [r4]
   153ac:	2000      	movs	r0, #0
   153ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   153b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   153b6:	f7f6 f9c7 	bl	b748 <_malloc_r>
   153ba:	b1a8      	cbz	r0, 153e8 <__submore+0x70>
   153bc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   153c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   153c4:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   153c8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   153cc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   153d0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   153d4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   153d8:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   153dc:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   153e0:	6023      	str	r3, [r4, #0]
   153e2:	2000      	movs	r0, #0
   153e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   153e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   153ec:	e7df      	b.n	153ae <__submore+0x36>
   153ee:	bf00      	nop

000153f0 <__sfvwrite_r>:
   153f0:	6893      	ldr	r3, [r2, #8]
   153f2:	2b00      	cmp	r3, #0
   153f4:	f000 8085 	beq.w	15502 <__sfvwrite_r+0x112>
   153f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153fc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   15400:	460c      	mov	r4, r1
   15402:	0719      	lsls	r1, r3, #28
   15404:	4680      	mov	r8, r0
   15406:	b083      	sub	sp, #12
   15408:	4617      	mov	r7, r2
   1540a:	b298      	uxth	r0, r3
   1540c:	d525      	bpl.n	1545a <__sfvwrite_r+0x6a>
   1540e:	6923      	ldr	r3, [r4, #16]
   15410:	b31b      	cbz	r3, 1545a <__sfvwrite_r+0x6a>
   15412:	f010 0302 	ands.w	r3, r0, #2
   15416:	683d      	ldr	r5, [r7, #0]
   15418:	d02d      	beq.n	15476 <__sfvwrite_r+0x86>
   1541a:	f04f 0a00 	mov.w	sl, #0
   1541e:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 156e0 <__sfvwrite_r+0x2f0>
   15422:	4656      	mov	r6, sl
   15424:	46b9      	mov	r9, r7
   15426:	455e      	cmp	r6, fp
   15428:	4633      	mov	r3, r6
   1542a:	4652      	mov	r2, sl
   1542c:	bf28      	it	cs
   1542e:	465b      	movcs	r3, fp
   15430:	4640      	mov	r0, r8
   15432:	2e00      	cmp	r6, #0
   15434:	d052      	beq.n	154dc <__sfvwrite_r+0xec>
   15436:	69e1      	ldr	r1, [r4, #28]
   15438:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1543a:	47b8      	blx	r7
   1543c:	2800      	cmp	r0, #0
   1543e:	dd56      	ble.n	154ee <__sfvwrite_r+0xfe>
   15440:	f8d9 3008 	ldr.w	r3, [r9, #8]
   15444:	1a1b      	subs	r3, r3, r0
   15446:	4482      	add	sl, r0
   15448:	1a36      	subs	r6, r6, r0
   1544a:	f8c9 3008 	str.w	r3, [r9, #8]
   1544e:	2b00      	cmp	r3, #0
   15450:	d1e9      	bne.n	15426 <__sfvwrite_r+0x36>
   15452:	2000      	movs	r0, #0
   15454:	b003      	add	sp, #12
   15456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1545a:	4621      	mov	r1, r4
   1545c:	4640      	mov	r0, r8
   1545e:	f000 f941 	bl	156e4 <__swsetup_r>
   15462:	2800      	cmp	r0, #0
   15464:	f040 8138 	bne.w	156d8 <__sfvwrite_r+0x2e8>
   15468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1546c:	683d      	ldr	r5, [r7, #0]
   1546e:	b298      	uxth	r0, r3
   15470:	f010 0302 	ands.w	r3, r0, #2
   15474:	d1d1      	bne.n	1541a <__sfvwrite_r+0x2a>
   15476:	f010 0901 	ands.w	r9, r0, #1
   1547a:	d144      	bne.n	15506 <__sfvwrite_r+0x116>
   1547c:	464e      	mov	r6, r9
   1547e:	9700      	str	r7, [sp, #0]
   15480:	b346      	cbz	r6, 154d4 <__sfvwrite_r+0xe4>
   15482:	0582      	lsls	r2, r0, #22
   15484:	f8d4 b008 	ldr.w	fp, [r4, #8]
   15488:	f140 8085 	bpl.w	15596 <__sfvwrite_r+0x1a6>
   1548c:	45b3      	cmp	fp, r6
   1548e:	465a      	mov	r2, fp
   15490:	f200 80b4 	bhi.w	155fc <__sfvwrite_r+0x20c>
   15494:	f410 6f90 	tst.w	r0, #1152	; 0x480
   15498:	f040 80c1 	bne.w	1561e <__sfvwrite_r+0x22e>
   1549c:	6820      	ldr	r0, [r4, #0]
   1549e:	9201      	str	r2, [sp, #4]
   154a0:	4649      	mov	r1, r9
   154a2:	f7f7 ffa3 	bl	d3ec <memmove>
   154a6:	68a3      	ldr	r3, [r4, #8]
   154a8:	9a01      	ldr	r2, [sp, #4]
   154aa:	eba3 010b 	sub.w	r1, r3, fp
   154ae:	6823      	ldr	r3, [r4, #0]
   154b0:	60a1      	str	r1, [r4, #8]
   154b2:	4413      	add	r3, r2
   154b4:	46b2      	mov	sl, r6
   154b6:	6023      	str	r3, [r4, #0]
   154b8:	2600      	movs	r6, #0
   154ba:	9a00      	ldr	r2, [sp, #0]
   154bc:	6893      	ldr	r3, [r2, #8]
   154be:	eba3 030a 	sub.w	r3, r3, sl
   154c2:	44d1      	add	r9, sl
   154c4:	6093      	str	r3, [r2, #8]
   154c6:	2b00      	cmp	r3, #0
   154c8:	d0c3      	beq.n	15452 <__sfvwrite_r+0x62>
   154ca:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   154ce:	b280      	uxth	r0, r0
   154d0:	2e00      	cmp	r6, #0
   154d2:	d1d6      	bne.n	15482 <__sfvwrite_r+0x92>
   154d4:	e9d5 9600 	ldrd	r9, r6, [r5]
   154d8:	3508      	adds	r5, #8
   154da:	e7d1      	b.n	15480 <__sfvwrite_r+0x90>
   154dc:	e9d5 a600 	ldrd	sl, r6, [r5]
   154e0:	3508      	adds	r5, #8
   154e2:	e7a0      	b.n	15426 <__sfvwrite_r+0x36>
   154e4:	4621      	mov	r1, r4
   154e6:	4640      	mov	r0, r8
   154e8:	f7fd fa90 	bl	12a0c <_fflush_r>
   154ec:	b388      	cbz	r0, 15552 <__sfvwrite_r+0x162>
   154ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   154f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   154f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   154fa:	81a3      	strh	r3, [r4, #12]
   154fc:	b003      	add	sp, #12
   154fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15502:	2000      	movs	r0, #0
   15504:	4770      	bx	lr
   15506:	461e      	mov	r6, r3
   15508:	46ba      	mov	sl, r7
   1550a:	4699      	mov	r9, r3
   1550c:	4618      	mov	r0, r3
   1550e:	9500      	str	r5, [sp, #0]
   15510:	461f      	mov	r7, r3
   15512:	b366      	cbz	r6, 1556e <__sfvwrite_r+0x17e>
   15514:	2800      	cmp	r0, #0
   15516:	d032      	beq.n	1557e <__sfvwrite_r+0x18e>
   15518:	464a      	mov	r2, r9
   1551a:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   1551e:	6820      	ldr	r0, [r4, #0]
   15520:	68a5      	ldr	r5, [r4, #8]
   15522:	42b2      	cmp	r2, r6
   15524:	bf28      	it	cs
   15526:	4632      	movcs	r2, r6
   15528:	4288      	cmp	r0, r1
   1552a:	d904      	bls.n	15536 <__sfvwrite_r+0x146>
   1552c:	eb05 0b03 	add.w	fp, r5, r3
   15530:	455a      	cmp	r2, fp
   15532:	f300 80a7 	bgt.w	15684 <__sfvwrite_r+0x294>
   15536:	4293      	cmp	r3, r2
   15538:	dc64      	bgt.n	15604 <__sfvwrite_r+0x214>
   1553a:	69e1      	ldr	r1, [r4, #28]
   1553c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1553e:	463a      	mov	r2, r7
   15540:	4640      	mov	r0, r8
   15542:	47a8      	blx	r5
   15544:	f1b0 0b00 	subs.w	fp, r0, #0
   15548:	ddd1      	ble.n	154ee <__sfvwrite_r+0xfe>
   1554a:	ebb9 090b 	subs.w	r9, r9, fp
   1554e:	d0c9      	beq.n	154e4 <__sfvwrite_r+0xf4>
   15550:	2001      	movs	r0, #1
   15552:	f8da 3008 	ldr.w	r3, [sl, #8]
   15556:	eba3 030b 	sub.w	r3, r3, fp
   1555a:	445f      	add	r7, fp
   1555c:	eba6 060b 	sub.w	r6, r6, fp
   15560:	f8ca 3008 	str.w	r3, [sl, #8]
   15564:	2b00      	cmp	r3, #0
   15566:	f43f af74 	beq.w	15452 <__sfvwrite_r+0x62>
   1556a:	2e00      	cmp	r6, #0
   1556c:	d1d2      	bne.n	15514 <__sfvwrite_r+0x124>
   1556e:	9a00      	ldr	r2, [sp, #0]
   15570:	6856      	ldr	r6, [r2, #4]
   15572:	4613      	mov	r3, r2
   15574:	3208      	adds	r2, #8
   15576:	9200      	str	r2, [sp, #0]
   15578:	2e00      	cmp	r6, #0
   1557a:	d0f8      	beq.n	1556e <__sfvwrite_r+0x17e>
   1557c:	681f      	ldr	r7, [r3, #0]
   1557e:	4632      	mov	r2, r6
   15580:	210a      	movs	r1, #10
   15582:	4638      	mov	r0, r7
   15584:	f7f8 facc 	bl	db20 <memchr>
   15588:	2800      	cmp	r0, #0
   1558a:	f000 809c 	beq.w	156c6 <__sfvwrite_r+0x2d6>
   1558e:	3001      	adds	r0, #1
   15590:	eba0 0907 	sub.w	r9, r0, r7
   15594:	e7c0      	b.n	15518 <__sfvwrite_r+0x128>
   15596:	6820      	ldr	r0, [r4, #0]
   15598:	6923      	ldr	r3, [r4, #16]
   1559a:	4298      	cmp	r0, r3
   1559c:	d816      	bhi.n	155cc <__sfvwrite_r+0x1dc>
   1559e:	6962      	ldr	r2, [r4, #20]
   155a0:	42b2      	cmp	r2, r6
   155a2:	d813      	bhi.n	155cc <__sfvwrite_r+0x1dc>
   155a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   155a8:	42b3      	cmp	r3, r6
   155aa:	bf28      	it	cs
   155ac:	4633      	movcs	r3, r6
   155ae:	69e1      	ldr	r1, [r4, #28]
   155b0:	fb93 f3f2 	sdiv	r3, r3, r2
   155b4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   155b6:	fb02 f303 	mul.w	r3, r2, r3
   155ba:	4640      	mov	r0, r8
   155bc:	464a      	mov	r2, r9
   155be:	47b8      	blx	r7
   155c0:	f1b0 0a00 	subs.w	sl, r0, #0
   155c4:	dd93      	ble.n	154ee <__sfvwrite_r+0xfe>
   155c6:	eba6 060a 	sub.w	r6, r6, sl
   155ca:	e776      	b.n	154ba <__sfvwrite_r+0xca>
   155cc:	45b3      	cmp	fp, r6
   155ce:	46da      	mov	sl, fp
   155d0:	bf28      	it	cs
   155d2:	46b2      	movcs	sl, r6
   155d4:	4652      	mov	r2, sl
   155d6:	4649      	mov	r1, r9
   155d8:	f7f7 ff08 	bl	d3ec <memmove>
   155dc:	68a3      	ldr	r3, [r4, #8]
   155de:	6822      	ldr	r2, [r4, #0]
   155e0:	eba3 030a 	sub.w	r3, r3, sl
   155e4:	4452      	add	r2, sl
   155e6:	60a3      	str	r3, [r4, #8]
   155e8:	6022      	str	r2, [r4, #0]
   155ea:	2b00      	cmp	r3, #0
   155ec:	d1eb      	bne.n	155c6 <__sfvwrite_r+0x1d6>
   155ee:	4621      	mov	r1, r4
   155f0:	4640      	mov	r0, r8
   155f2:	f7fd fa0b 	bl	12a0c <_fflush_r>
   155f6:	2800      	cmp	r0, #0
   155f8:	d0e5      	beq.n	155c6 <__sfvwrite_r+0x1d6>
   155fa:	e778      	b.n	154ee <__sfvwrite_r+0xfe>
   155fc:	6820      	ldr	r0, [r4, #0]
   155fe:	46b3      	mov	fp, r6
   15600:	4632      	mov	r2, r6
   15602:	e74c      	b.n	1549e <__sfvwrite_r+0xae>
   15604:	4639      	mov	r1, r7
   15606:	9201      	str	r2, [sp, #4]
   15608:	f7f7 fef0 	bl	d3ec <memmove>
   1560c:	9a01      	ldr	r2, [sp, #4]
   1560e:	68a3      	ldr	r3, [r4, #8]
   15610:	1a9b      	subs	r3, r3, r2
   15612:	60a3      	str	r3, [r4, #8]
   15614:	6823      	ldr	r3, [r4, #0]
   15616:	4413      	add	r3, r2
   15618:	6023      	str	r3, [r4, #0]
   1561a:	4693      	mov	fp, r2
   1561c:	e795      	b.n	1554a <__sfvwrite_r+0x15a>
   1561e:	6823      	ldr	r3, [r4, #0]
   15620:	6921      	ldr	r1, [r4, #16]
   15622:	eba3 0b01 	sub.w	fp, r3, r1
   15626:	6963      	ldr	r3, [r4, #20]
   15628:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   1562c:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   15630:	f10b 0301 	add.w	r3, fp, #1
   15634:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   15638:	4433      	add	r3, r6
   1563a:	4553      	cmp	r3, sl
   1563c:	4652      	mov	r2, sl
   1563e:	bf84      	itt	hi
   15640:	469a      	movhi	sl, r3
   15642:	4652      	movhi	r2, sl
   15644:	0543      	lsls	r3, r0, #21
   15646:	d52c      	bpl.n	156a2 <__sfvwrite_r+0x2b2>
   15648:	4611      	mov	r1, r2
   1564a:	4640      	mov	r0, r8
   1564c:	f7f6 f87c 	bl	b748 <_malloc_r>
   15650:	2800      	cmp	r0, #0
   15652:	d03b      	beq.n	156cc <__sfvwrite_r+0x2dc>
   15654:	465a      	mov	r2, fp
   15656:	6921      	ldr	r1, [r4, #16]
   15658:	9001      	str	r0, [sp, #4]
   1565a:	f7f4 f977 	bl	994c <memcpy>
   1565e:	89a2      	ldrh	r2, [r4, #12]
   15660:	9b01      	ldr	r3, [sp, #4]
   15662:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   15666:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1566a:	81a2      	strh	r2, [r4, #12]
   1566c:	eb03 000b 	add.w	r0, r3, fp
   15670:	6123      	str	r3, [r4, #16]
   15672:	ebaa 030b 	sub.w	r3, sl, fp
   15676:	f8c4 a014 	str.w	sl, [r4, #20]
   1567a:	60a3      	str	r3, [r4, #8]
   1567c:	6020      	str	r0, [r4, #0]
   1567e:	46b3      	mov	fp, r6
   15680:	4632      	mov	r2, r6
   15682:	e70c      	b.n	1549e <__sfvwrite_r+0xae>
   15684:	4639      	mov	r1, r7
   15686:	465a      	mov	r2, fp
   15688:	f7f7 feb0 	bl	d3ec <memmove>
   1568c:	6823      	ldr	r3, [r4, #0]
   1568e:	445b      	add	r3, fp
   15690:	6023      	str	r3, [r4, #0]
   15692:	4621      	mov	r1, r4
   15694:	4640      	mov	r0, r8
   15696:	f7fd f9b9 	bl	12a0c <_fflush_r>
   1569a:	2800      	cmp	r0, #0
   1569c:	f43f af55 	beq.w	1554a <__sfvwrite_r+0x15a>
   156a0:	e725      	b.n	154ee <__sfvwrite_r+0xfe>
   156a2:	4640      	mov	r0, r8
   156a4:	f7f6 fb18 	bl	bcd8 <_realloc_r>
   156a8:	4603      	mov	r3, r0
   156aa:	2800      	cmp	r0, #0
   156ac:	d1de      	bne.n	1566c <__sfvwrite_r+0x27c>
   156ae:	6921      	ldr	r1, [r4, #16]
   156b0:	4640      	mov	r0, r8
   156b2:	f7f8 fb97 	bl	dde4 <_free_r>
   156b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   156ba:	220c      	movs	r2, #12
   156bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   156c0:	f8c8 2000 	str.w	r2, [r8]
   156c4:	e715      	b.n	154f2 <__sfvwrite_r+0x102>
   156c6:	1c72      	adds	r2, r6, #1
   156c8:	4691      	mov	r9, r2
   156ca:	e726      	b.n	1551a <__sfvwrite_r+0x12a>
   156cc:	220c      	movs	r2, #12
   156ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   156d2:	f8c8 2000 	str.w	r2, [r8]
   156d6:	e70c      	b.n	154f2 <__sfvwrite_r+0x102>
   156d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   156dc:	e6ba      	b.n	15454 <__sfvwrite_r+0x64>
   156de:	bf00      	nop
   156e0:	7ffffc00 	.word	0x7ffffc00

000156e4 <__swsetup_r>:
   156e4:	b538      	push	{r3, r4, r5, lr}
   156e6:	4b31      	ldr	r3, [pc, #196]	; (157ac <__swsetup_r+0xc8>)
   156e8:	681b      	ldr	r3, [r3, #0]
   156ea:	4605      	mov	r5, r0
   156ec:	460c      	mov	r4, r1
   156ee:	b113      	cbz	r3, 156f6 <__swsetup_r+0x12>
   156f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   156f2:	2a00      	cmp	r2, #0
   156f4:	d04e      	beq.n	15794 <__swsetup_r+0xb0>
   156f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   156fa:	0718      	lsls	r0, r3, #28
   156fc:	b29a      	uxth	r2, r3
   156fe:	d51c      	bpl.n	1573a <__swsetup_r+0x56>
   15700:	6921      	ldr	r1, [r4, #16]
   15702:	b329      	cbz	r1, 15750 <__swsetup_r+0x6c>
   15704:	f012 0001 	ands.w	r0, r2, #1
   15708:	d007      	beq.n	1571a <__swsetup_r+0x36>
   1570a:	2000      	movs	r0, #0
   1570c:	60a0      	str	r0, [r4, #8]
   1570e:	6960      	ldr	r0, [r4, #20]
   15710:	4240      	negs	r0, r0
   15712:	61a0      	str	r0, [r4, #24]
   15714:	b139      	cbz	r1, 15726 <__swsetup_r+0x42>
   15716:	2000      	movs	r0, #0
   15718:	bd38      	pop	{r3, r4, r5, pc}
   1571a:	0795      	lsls	r5, r2, #30
   1571c:	bf58      	it	pl
   1571e:	6960      	ldrpl	r0, [r4, #20]
   15720:	60a0      	str	r0, [r4, #8]
   15722:	2900      	cmp	r1, #0
   15724:	d1f7      	bne.n	15716 <__swsetup_r+0x32>
   15726:	0612      	lsls	r2, r2, #24
   15728:	bf58      	it	pl
   1572a:	4608      	movpl	r0, r1
   1572c:	d5f4      	bpl.n	15718 <__swsetup_r+0x34>
   1572e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15732:	81a3      	strh	r3, [r4, #12]
   15734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15738:	bd38      	pop	{r3, r4, r5, pc}
   1573a:	06d1      	lsls	r1, r2, #27
   1573c:	d52e      	bpl.n	1579c <__swsetup_r+0xb8>
   1573e:	0752      	lsls	r2, r2, #29
   15740:	d414      	bmi.n	1576c <__swsetup_r+0x88>
   15742:	6921      	ldr	r1, [r4, #16]
   15744:	f043 0308 	orr.w	r3, r3, #8
   15748:	81a3      	strh	r3, [r4, #12]
   1574a:	b29a      	uxth	r2, r3
   1574c:	2900      	cmp	r1, #0
   1574e:	d1d9      	bne.n	15704 <__swsetup_r+0x20>
   15750:	f402 7020 	and.w	r0, r2, #640	; 0x280
   15754:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   15758:	d0d4      	beq.n	15704 <__swsetup_r+0x20>
   1575a:	4621      	mov	r1, r4
   1575c:	4628      	mov	r0, r5
   1575e:	f000 f947 	bl	159f0 <__smakebuf_r>
   15762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15766:	6921      	ldr	r1, [r4, #16]
   15768:	b29a      	uxth	r2, r3
   1576a:	e7cb      	b.n	15704 <__swsetup_r+0x20>
   1576c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1576e:	b151      	cbz	r1, 15786 <__swsetup_r+0xa2>
   15770:	f104 0240 	add.w	r2, r4, #64	; 0x40
   15774:	4291      	cmp	r1, r2
   15776:	d004      	beq.n	15782 <__swsetup_r+0x9e>
   15778:	4628      	mov	r0, r5
   1577a:	f7f8 fb33 	bl	dde4 <_free_r>
   1577e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15782:	2200      	movs	r2, #0
   15784:	6322      	str	r2, [r4, #48]	; 0x30
   15786:	6921      	ldr	r1, [r4, #16]
   15788:	2200      	movs	r2, #0
   1578a:	e9c4 1200 	strd	r1, r2, [r4]
   1578e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   15792:	e7d7      	b.n	15744 <__swsetup_r+0x60>
   15794:	4618      	mov	r0, r3
   15796:	f7f7 fd77 	bl	d288 <__sinit>
   1579a:	e7ac      	b.n	156f6 <__swsetup_r+0x12>
   1579c:	2209      	movs	r2, #9
   1579e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   157a2:	602a      	str	r2, [r5, #0]
   157a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   157a8:	81a3      	strh	r3, [r4, #12]
   157aa:	bd38      	pop	{r3, r4, r5, pc}
   157ac:	20008694 	.word	0x20008694

000157b0 <__fputwc>:
   157b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   157b4:	b082      	sub	sp, #8
   157b6:	4682      	mov	sl, r0
   157b8:	4688      	mov	r8, r1
   157ba:	4614      	mov	r4, r2
   157bc:	f7f7 ff8e 	bl	d6dc <__locale_mb_cur_max>
   157c0:	2801      	cmp	r0, #1
   157c2:	d103      	bne.n	157cc <__fputwc+0x1c>
   157c4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   157c8:	2bfe      	cmp	r3, #254	; 0xfe
   157ca:	d936      	bls.n	1583a <__fputwc+0x8a>
   157cc:	f10d 0904 	add.w	r9, sp, #4
   157d0:	4642      	mov	r2, r8
   157d2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   157d6:	4649      	mov	r1, r9
   157d8:	4650      	mov	r0, sl
   157da:	f7fd fb57 	bl	12e8c <_wcrtomb_r>
   157de:	1c42      	adds	r2, r0, #1
   157e0:	4606      	mov	r6, r0
   157e2:	d032      	beq.n	1584a <__fputwc+0x9a>
   157e4:	b320      	cbz	r0, 15830 <__fputwc+0x80>
   157e6:	f89d c004 	ldrb.w	ip, [sp, #4]
   157ea:	2500      	movs	r5, #0
   157ec:	e009      	b.n	15802 <__fputwc+0x52>
   157ee:	6823      	ldr	r3, [r4, #0]
   157f0:	1c5a      	adds	r2, r3, #1
   157f2:	6022      	str	r2, [r4, #0]
   157f4:	f883 c000 	strb.w	ip, [r3]
   157f8:	3501      	adds	r5, #1
   157fa:	42b5      	cmp	r5, r6
   157fc:	d218      	bcs.n	15830 <__fputwc+0x80>
   157fe:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   15802:	68a3      	ldr	r3, [r4, #8]
   15804:	3b01      	subs	r3, #1
   15806:	2b00      	cmp	r3, #0
   15808:	60a3      	str	r3, [r4, #8]
   1580a:	daf0      	bge.n	157ee <__fputwc+0x3e>
   1580c:	69a7      	ldr	r7, [r4, #24]
   1580e:	42bb      	cmp	r3, r7
   15810:	4661      	mov	r1, ip
   15812:	4622      	mov	r2, r4
   15814:	4650      	mov	r0, sl
   15816:	db02      	blt.n	1581e <__fputwc+0x6e>
   15818:	f1bc 0f0a 	cmp.w	ip, #10
   1581c:	d1e7      	bne.n	157ee <__fputwc+0x3e>
   1581e:	f000 f953 	bl	15ac8 <__swbuf_r>
   15822:	1c43      	adds	r3, r0, #1
   15824:	d1e8      	bne.n	157f8 <__fputwc+0x48>
   15826:	4606      	mov	r6, r0
   15828:	4630      	mov	r0, r6
   1582a:	b002      	add	sp, #8
   1582c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15830:	4646      	mov	r6, r8
   15832:	4630      	mov	r0, r6
   15834:	b002      	add	sp, #8
   15836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1583a:	fa5f fc88 	uxtb.w	ip, r8
   1583e:	f88d c004 	strb.w	ip, [sp, #4]
   15842:	4606      	mov	r6, r0
   15844:	f10d 0904 	add.w	r9, sp, #4
   15848:	e7cf      	b.n	157ea <__fputwc+0x3a>
   1584a:	89a3      	ldrh	r3, [r4, #12]
   1584c:	4630      	mov	r0, r6
   1584e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15852:	81a3      	strh	r3, [r4, #12]
   15854:	b002      	add	sp, #8
   15856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1585a:	bf00      	nop

0001585c <_fputwc_r>:
   1585c:	b530      	push	{r4, r5, lr}
   1585e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   15860:	f013 0f01 	tst.w	r3, #1
   15864:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   15868:	4614      	mov	r4, r2
   1586a:	b083      	sub	sp, #12
   1586c:	4605      	mov	r5, r0
   1586e:	b29a      	uxth	r2, r3
   15870:	d101      	bne.n	15876 <_fputwc_r+0x1a>
   15872:	0598      	lsls	r0, r3, #22
   15874:	d51c      	bpl.n	158b0 <_fputwc_r+0x54>
   15876:	0490      	lsls	r0, r2, #18
   15878:	d406      	bmi.n	15888 <_fputwc_r+0x2c>
   1587a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1587c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   15880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   15884:	81a3      	strh	r3, [r4, #12]
   15886:	6662      	str	r2, [r4, #100]	; 0x64
   15888:	4622      	mov	r2, r4
   1588a:	4628      	mov	r0, r5
   1588c:	f7ff ff90 	bl	157b0 <__fputwc>
   15890:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15892:	07da      	lsls	r2, r3, #31
   15894:	4605      	mov	r5, r0
   15896:	d402      	bmi.n	1589e <_fputwc_r+0x42>
   15898:	89a3      	ldrh	r3, [r4, #12]
   1589a:	059b      	lsls	r3, r3, #22
   1589c:	d502      	bpl.n	158a4 <_fputwc_r+0x48>
   1589e:	4628      	mov	r0, r5
   158a0:	b003      	add	sp, #12
   158a2:	bd30      	pop	{r4, r5, pc}
   158a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   158a6:	f7f8 f933 	bl	db10 <__retarget_lock_release_recursive>
   158aa:	4628      	mov	r0, r5
   158ac:	b003      	add	sp, #12
   158ae:	bd30      	pop	{r4, r5, pc}
   158b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   158b2:	9101      	str	r1, [sp, #4]
   158b4:	f7f8 f92a 	bl	db0c <__retarget_lock_acquire_recursive>
   158b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   158bc:	9901      	ldr	r1, [sp, #4]
   158be:	b29a      	uxth	r2, r3
   158c0:	e7d9      	b.n	15876 <_fputwc_r+0x1a>
   158c2:	bf00      	nop

000158c4 <_wcsnrtombs_l>:
   158c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158c8:	b08b      	sub	sp, #44	; 0x2c
   158ca:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   158ce:	9f14      	ldr	r7, [sp, #80]	; 0x50
   158d0:	9103      	str	r1, [sp, #12]
   158d2:	4681      	mov	r9, r0
   158d4:	9205      	str	r2, [sp, #20]
   158d6:	461e      	mov	r6, r3
   158d8:	f1b8 0f00 	cmp.w	r8, #0
   158dc:	d05c      	beq.n	15998 <_wcsnrtombs_l+0xd4>
   158de:	9b03      	ldr	r3, [sp, #12]
   158e0:	2b00      	cmp	r3, #0
   158e2:	d05e      	beq.n	159a2 <_wcsnrtombs_l+0xde>
   158e4:	9b05      	ldr	r3, [sp, #20]
   158e6:	681d      	ldr	r5, [r3, #0]
   158e8:	2f00      	cmp	r7, #0
   158ea:	d06a      	beq.n	159c2 <_wcsnrtombs_l+0xfe>
   158ec:	1e74      	subs	r4, r6, #1
   158ee:	b34e      	cbz	r6, 15944 <_wcsnrtombs_l+0x80>
   158f0:	9b03      	ldr	r3, [sp, #12]
   158f2:	9304      	str	r3, [sp, #16]
   158f4:	3d04      	subs	r5, #4
   158f6:	2600      	movs	r6, #0
   158f8:	9501      	str	r5, [sp, #4]
   158fa:	e00b      	b.n	15914 <_wcsnrtombs_l+0x50>
   158fc:	9b03      	ldr	r3, [sp, #12]
   158fe:	bb2b      	cbnz	r3, 1594c <_wcsnrtombs_l+0x88>
   15900:	9b01      	ldr	r3, [sp, #4]
   15902:	681a      	ldr	r2, [r3, #0]
   15904:	2a00      	cmp	r2, #0
   15906:	d03a      	beq.n	1597e <_wcsnrtombs_l+0xba>
   15908:	45bc      	cmp	ip, r7
   1590a:	d25c      	bcs.n	159c6 <_wcsnrtombs_l+0x102>
   1590c:	3c01      	subs	r4, #1
   1590e:	1c63      	adds	r3, r4, #1
   15910:	4666      	mov	r6, ip
   15912:	d017      	beq.n	15944 <_wcsnrtombs_l+0x80>
   15914:	f8d8 3000 	ldr.w	r3, [r8]
   15918:	9302      	str	r3, [sp, #8]
   1591a:	9b01      	ldr	r3, [sp, #4]
   1591c:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   15920:	f853 2f04 	ldr.w	r2, [r3, #4]!
   15924:	9301      	str	r3, [sp, #4]
   15926:	a907      	add	r1, sp, #28
   15928:	4643      	mov	r3, r8
   1592a:	4648      	mov	r0, r9
   1592c:	f8d8 b004 	ldr.w	fp, [r8, #4]
   15930:	47a8      	blx	r5
   15932:	1c42      	adds	r2, r0, #1
   15934:	d03a      	beq.n	159ac <_wcsnrtombs_l+0xe8>
   15936:	eb00 0c06 	add.w	ip, r0, r6
   1593a:	45bc      	cmp	ip, r7
   1593c:	d9de      	bls.n	158fc <_wcsnrtombs_l+0x38>
   1593e:	9b02      	ldr	r3, [sp, #8]
   15940:	e9c8 3b00 	strd	r3, fp, [r8]
   15944:	4630      	mov	r0, r6
   15946:	b00b      	add	sp, #44	; 0x2c
   15948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1594c:	2800      	cmp	r0, #0
   1594e:	dd0e      	ble.n	1596e <_wcsnrtombs_l+0xaa>
   15950:	9b04      	ldr	r3, [sp, #16]
   15952:	9d01      	ldr	r5, [sp, #4]
   15954:	4418      	add	r0, r3
   15956:	1e5a      	subs	r2, r3, #1
   15958:	a907      	add	r1, sp, #28
   1595a:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   1595e:	f811 3b01 	ldrb.w	r3, [r1], #1
   15962:	f802 3f01 	strb.w	r3, [r2, #1]!
   15966:	4572      	cmp	r2, lr
   15968:	d1f9      	bne.n	1595e <_wcsnrtombs_l+0x9a>
   1596a:	9501      	str	r5, [sp, #4]
   1596c:	9004      	str	r0, [sp, #16]
   1596e:	9b05      	ldr	r3, [sp, #20]
   15970:	681a      	ldr	r2, [r3, #0]
   15972:	3204      	adds	r2, #4
   15974:	601a      	str	r2, [r3, #0]
   15976:	9b01      	ldr	r3, [sp, #4]
   15978:	681a      	ldr	r2, [r3, #0]
   1597a:	2a00      	cmp	r2, #0
   1597c:	d1c4      	bne.n	15908 <_wcsnrtombs_l+0x44>
   1597e:	9b03      	ldr	r3, [sp, #12]
   15980:	b10b      	cbz	r3, 15986 <_wcsnrtombs_l+0xc2>
   15982:	9b05      	ldr	r3, [sp, #20]
   15984:	601a      	str	r2, [r3, #0]
   15986:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   1598a:	2200      	movs	r2, #0
   1598c:	4630      	mov	r0, r6
   1598e:	f8c8 2000 	str.w	r2, [r8]
   15992:	b00b      	add	sp, #44	; 0x2c
   15994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15998:	9b03      	ldr	r3, [sp, #12]
   1599a:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   1599e:	2b00      	cmp	r3, #0
   159a0:	d1a0      	bne.n	158e4 <_wcsnrtombs_l+0x20>
   159a2:	9b05      	ldr	r3, [sp, #20]
   159a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   159a8:	681d      	ldr	r5, [r3, #0]
   159aa:	e79f      	b.n	158ec <_wcsnrtombs_l+0x28>
   159ac:	4606      	mov	r6, r0
   159ae:	218a      	movs	r1, #138	; 0x8a
   159b0:	2200      	movs	r2, #0
   159b2:	4630      	mov	r0, r6
   159b4:	f8c9 1000 	str.w	r1, [r9]
   159b8:	f8c8 2000 	str.w	r2, [r8]
   159bc:	b00b      	add	sp, #44	; 0x2c
   159be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159c2:	463e      	mov	r6, r7
   159c4:	e7be      	b.n	15944 <_wcsnrtombs_l+0x80>
   159c6:	4666      	mov	r6, ip
   159c8:	e7bc      	b.n	15944 <_wcsnrtombs_l+0x80>
   159ca:	bf00      	nop

000159cc <_wcsnrtombs_r>:
   159cc:	b510      	push	{r4, lr}
   159ce:	b084      	sub	sp, #16
   159d0:	4c05      	ldr	r4, [pc, #20]	; (159e8 <_wcsnrtombs_r+0x1c>)
   159d2:	9806      	ldr	r0, [sp, #24]
   159d4:	9000      	str	r0, [sp, #0]
   159d6:	9807      	ldr	r0, [sp, #28]
   159d8:	9001      	str	r0, [sp, #4]
   159da:	4804      	ldr	r0, [pc, #16]	; (159ec <_wcsnrtombs_r+0x20>)
   159dc:	6800      	ldr	r0, [r0, #0]
   159de:	9402      	str	r4, [sp, #8]
   159e0:	f7ff ff70 	bl	158c4 <_wcsnrtombs_l>
   159e4:	b004      	add	sp, #16
   159e6:	bd10      	pop	{r4, pc}
   159e8:	2000810c 	.word	0x2000810c
   159ec:	20008694 	.word	0x20008694

000159f0 <__smakebuf_r>:
   159f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   159f4:	898b      	ldrh	r3, [r1, #12]
   159f6:	460c      	mov	r4, r1
   159f8:	0799      	lsls	r1, r3, #30
   159fa:	b096      	sub	sp, #88	; 0x58
   159fc:	d508      	bpl.n	15a10 <__smakebuf_r+0x20>
   159fe:	f104 0343 	add.w	r3, r4, #67	; 0x43
   15a02:	2201      	movs	r2, #1
   15a04:	e9c4 3204 	strd	r3, r2, [r4, #16]
   15a08:	6023      	str	r3, [r4, #0]
   15a0a:	b016      	add	sp, #88	; 0x58
   15a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   15a14:	2900      	cmp	r1, #0
   15a16:	4606      	mov	r6, r0
   15a18:	db25      	blt.n	15a66 <__smakebuf_r+0x76>
   15a1a:	466a      	mov	r2, sp
   15a1c:	f000 f8ac 	bl	15b78 <_fstat_r>
   15a20:	2800      	cmp	r0, #0
   15a22:	db1f      	blt.n	15a64 <__smakebuf_r+0x74>
   15a24:	9d01      	ldr	r5, [sp, #4]
   15a26:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   15a2a:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   15a2e:	fab5 f585 	clz	r5, r5
   15a32:	f44f 6880 	mov.w	r8, #1024	; 0x400
   15a36:	096d      	lsrs	r5, r5, #5
   15a38:	f44f 6700 	mov.w	r7, #2048	; 0x800
   15a3c:	4641      	mov	r1, r8
   15a3e:	4630      	mov	r0, r6
   15a40:	f7f5 fe82 	bl	b748 <_malloc_r>
   15a44:	b1e0      	cbz	r0, 15a80 <__smakebuf_r+0x90>
   15a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15a4a:	f8c4 8014 	str.w	r8, [r4, #20]
   15a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15a52:	6020      	str	r0, [r4, #0]
   15a54:	6120      	str	r0, [r4, #16]
   15a56:	81a3      	strh	r3, [r4, #12]
   15a58:	bb35      	cbnz	r5, 15aa8 <__smakebuf_r+0xb8>
   15a5a:	433b      	orrs	r3, r7
   15a5c:	81a3      	strh	r3, [r4, #12]
   15a5e:	b016      	add	sp, #88	; 0x58
   15a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15a64:	89a3      	ldrh	r3, [r4, #12]
   15a66:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   15a6a:	d019      	beq.n	15aa0 <__smakebuf_r+0xb0>
   15a6c:	f04f 0840 	mov.w	r8, #64	; 0x40
   15a70:	2500      	movs	r5, #0
   15a72:	4641      	mov	r1, r8
   15a74:	4630      	mov	r0, r6
   15a76:	462f      	mov	r7, r5
   15a78:	f7f5 fe66 	bl	b748 <_malloc_r>
   15a7c:	2800      	cmp	r0, #0
   15a7e:	d1e2      	bne.n	15a46 <__smakebuf_r+0x56>
   15a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15a84:	059a      	lsls	r2, r3, #22
   15a86:	d4c0      	bmi.n	15a0a <__smakebuf_r+0x1a>
   15a88:	f023 0303 	bic.w	r3, r3, #3
   15a8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   15a90:	f043 0302 	orr.w	r3, r3, #2
   15a94:	2101      	movs	r1, #1
   15a96:	e9c4 2104 	strd	r2, r1, [r4, #16]
   15a9a:	81a3      	strh	r3, [r4, #12]
   15a9c:	6022      	str	r2, [r4, #0]
   15a9e:	e7b4      	b.n	15a0a <__smakebuf_r+0x1a>
   15aa0:	f44f 6880 	mov.w	r8, #1024	; 0x400
   15aa4:	462f      	mov	r7, r5
   15aa6:	e7c9      	b.n	15a3c <__smakebuf_r+0x4c>
   15aa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   15aac:	4630      	mov	r0, r6
   15aae:	f000 f879 	bl	15ba4 <_isatty_r>
   15ab2:	b910      	cbnz	r0, 15aba <__smakebuf_r+0xca>
   15ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15ab8:	e7cf      	b.n	15a5a <__smakebuf_r+0x6a>
   15aba:	89a3      	ldrh	r3, [r4, #12]
   15abc:	f023 0303 	bic.w	r3, r3, #3
   15ac0:	f043 0301 	orr.w	r3, r3, #1
   15ac4:	b21b      	sxth	r3, r3
   15ac6:	e7c8      	b.n	15a5a <__smakebuf_r+0x6a>

00015ac8 <__swbuf_r>:
   15ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15aca:	460d      	mov	r5, r1
   15acc:	4614      	mov	r4, r2
   15ace:	4606      	mov	r6, r0
   15ad0:	b110      	cbz	r0, 15ad8 <__swbuf_r+0x10>
   15ad2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   15ad4:	2b00      	cmp	r3, #0
   15ad6:	d04c      	beq.n	15b72 <__swbuf_r+0xaa>
   15ad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   15adc:	69a3      	ldr	r3, [r4, #24]
   15ade:	60a3      	str	r3, [r4, #8]
   15ae0:	0717      	lsls	r7, r2, #28
   15ae2:	b290      	uxth	r0, r2
   15ae4:	d51b      	bpl.n	15b1e <__swbuf_r+0x56>
   15ae6:	6923      	ldr	r3, [r4, #16]
   15ae8:	b1cb      	cbz	r3, 15b1e <__swbuf_r+0x56>
   15aea:	b2ed      	uxtb	r5, r5
   15aec:	0481      	lsls	r1, r0, #18
   15aee:	462f      	mov	r7, r5
   15af0:	d522      	bpl.n	15b38 <__swbuf_r+0x70>
   15af2:	6822      	ldr	r2, [r4, #0]
   15af4:	6961      	ldr	r1, [r4, #20]
   15af6:	1ad3      	subs	r3, r2, r3
   15af8:	4299      	cmp	r1, r3
   15afa:	dd29      	ble.n	15b50 <__swbuf_r+0x88>
   15afc:	3301      	adds	r3, #1
   15afe:	68a1      	ldr	r1, [r4, #8]
   15b00:	3901      	subs	r1, #1
   15b02:	60a1      	str	r1, [r4, #8]
   15b04:	1c51      	adds	r1, r2, #1
   15b06:	6021      	str	r1, [r4, #0]
   15b08:	7015      	strb	r5, [r2, #0]
   15b0a:	6962      	ldr	r2, [r4, #20]
   15b0c:	429a      	cmp	r2, r3
   15b0e:	d027      	beq.n	15b60 <__swbuf_r+0x98>
   15b10:	89a3      	ldrh	r3, [r4, #12]
   15b12:	07db      	lsls	r3, r3, #31
   15b14:	d501      	bpl.n	15b1a <__swbuf_r+0x52>
   15b16:	2d0a      	cmp	r5, #10
   15b18:	d022      	beq.n	15b60 <__swbuf_r+0x98>
   15b1a:	4638      	mov	r0, r7
   15b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15b1e:	4621      	mov	r1, r4
   15b20:	4630      	mov	r0, r6
   15b22:	f7ff fddf 	bl	156e4 <__swsetup_r>
   15b26:	bb08      	cbnz	r0, 15b6c <__swbuf_r+0xa4>
   15b28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   15b2c:	6923      	ldr	r3, [r4, #16]
   15b2e:	b290      	uxth	r0, r2
   15b30:	b2ed      	uxtb	r5, r5
   15b32:	0481      	lsls	r1, r0, #18
   15b34:	462f      	mov	r7, r5
   15b36:	d4dc      	bmi.n	15af2 <__swbuf_r+0x2a>
   15b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   15b3c:	81a2      	strh	r2, [r4, #12]
   15b3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15b40:	6961      	ldr	r1, [r4, #20]
   15b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   15b46:	6662      	str	r2, [r4, #100]	; 0x64
   15b48:	6822      	ldr	r2, [r4, #0]
   15b4a:	1ad3      	subs	r3, r2, r3
   15b4c:	4299      	cmp	r1, r3
   15b4e:	dcd5      	bgt.n	15afc <__swbuf_r+0x34>
   15b50:	4621      	mov	r1, r4
   15b52:	4630      	mov	r0, r6
   15b54:	f7fc ff5a 	bl	12a0c <_fflush_r>
   15b58:	b940      	cbnz	r0, 15b6c <__swbuf_r+0xa4>
   15b5a:	6822      	ldr	r2, [r4, #0]
   15b5c:	2301      	movs	r3, #1
   15b5e:	e7ce      	b.n	15afe <__swbuf_r+0x36>
   15b60:	4621      	mov	r1, r4
   15b62:	4630      	mov	r0, r6
   15b64:	f7fc ff52 	bl	12a0c <_fflush_r>
   15b68:	2800      	cmp	r0, #0
   15b6a:	d0d6      	beq.n	15b1a <__swbuf_r+0x52>
   15b6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   15b70:	e7d3      	b.n	15b1a <__swbuf_r+0x52>
   15b72:	f7f7 fb89 	bl	d288 <__sinit>
   15b76:	e7af      	b.n	15ad8 <__swbuf_r+0x10>

00015b78 <_fstat_r>:
   15b78:	b570      	push	{r4, r5, r6, lr}
   15b7a:	460c      	mov	r4, r1
   15b7c:	4d08      	ldr	r5, [pc, #32]	; (15ba0 <_fstat_r+0x28>)
   15b7e:	4603      	mov	r3, r0
   15b80:	2600      	movs	r6, #0
   15b82:	4620      	mov	r0, r4
   15b84:	4611      	mov	r1, r2
   15b86:	461c      	mov	r4, r3
   15b88:	602e      	str	r6, [r5, #0]
   15b8a:	f7f4 f8a7 	bl	9cdc <_fstat>
   15b8e:	1c43      	adds	r3, r0, #1
   15b90:	d000      	beq.n	15b94 <_fstat_r+0x1c>
   15b92:	bd70      	pop	{r4, r5, r6, pc}
   15b94:	682b      	ldr	r3, [r5, #0]
   15b96:	2b00      	cmp	r3, #0
   15b98:	d0fb      	beq.n	15b92 <_fstat_r+0x1a>
   15b9a:	6023      	str	r3, [r4, #0]
   15b9c:	bd70      	pop	{r4, r5, r6, pc}
   15b9e:	bf00      	nop
   15ba0:	20009580 	.word	0x20009580

00015ba4 <_isatty_r>:
   15ba4:	b538      	push	{r3, r4, r5, lr}
   15ba6:	4d07      	ldr	r5, [pc, #28]	; (15bc4 <_isatty_r+0x20>)
   15ba8:	2200      	movs	r2, #0
   15baa:	4604      	mov	r4, r0
   15bac:	4608      	mov	r0, r1
   15bae:	602a      	str	r2, [r5, #0]
   15bb0:	f7f4 f89a 	bl	9ce8 <_isatty>
   15bb4:	1c43      	adds	r3, r0, #1
   15bb6:	d000      	beq.n	15bba <_isatty_r+0x16>
   15bb8:	bd38      	pop	{r3, r4, r5, pc}
   15bba:	682b      	ldr	r3, [r5, #0]
   15bbc:	2b00      	cmp	r3, #0
   15bbe:	d0fb      	beq.n	15bb8 <_isatty_r+0x14>
   15bc0:	6023      	str	r3, [r4, #0]
   15bc2:	bd38      	pop	{r3, r4, r5, pc}
   15bc4:	20009580 	.word	0x20009580

00015bc8 <__aeabi_drsub>:
   15bc8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   15bcc:	e002      	b.n	15bd4 <__adddf3>
   15bce:	bf00      	nop

00015bd0 <__aeabi_dsub>:
   15bd0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00015bd4 <__adddf3>:
   15bd4:	b530      	push	{r4, r5, lr}
   15bd6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   15bda:	ea4f 0543 	mov.w	r5, r3, lsl #1
   15bde:	ea94 0f05 	teq	r4, r5
   15be2:	bf08      	it	eq
   15be4:	ea90 0f02 	teqeq	r0, r2
   15be8:	bf1f      	itttt	ne
   15bea:	ea54 0c00 	orrsne.w	ip, r4, r0
   15bee:	ea55 0c02 	orrsne.w	ip, r5, r2
   15bf2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   15bf6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   15bfa:	f000 80e2 	beq.w	15dc2 <__adddf3+0x1ee>
   15bfe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   15c02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   15c06:	bfb8      	it	lt
   15c08:	426d      	neglt	r5, r5
   15c0a:	dd0c      	ble.n	15c26 <__adddf3+0x52>
   15c0c:	442c      	add	r4, r5
   15c0e:	ea80 0202 	eor.w	r2, r0, r2
   15c12:	ea81 0303 	eor.w	r3, r1, r3
   15c16:	ea82 0000 	eor.w	r0, r2, r0
   15c1a:	ea83 0101 	eor.w	r1, r3, r1
   15c1e:	ea80 0202 	eor.w	r2, r0, r2
   15c22:	ea81 0303 	eor.w	r3, r1, r3
   15c26:	2d36      	cmp	r5, #54	; 0x36
   15c28:	bf88      	it	hi
   15c2a:	bd30      	pophi	{r4, r5, pc}
   15c2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   15c30:	ea4f 3101 	mov.w	r1, r1, lsl #12
   15c34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   15c38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   15c3c:	d002      	beq.n	15c44 <__adddf3+0x70>
   15c3e:	4240      	negs	r0, r0
   15c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15c44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   15c48:	ea4f 3303 	mov.w	r3, r3, lsl #12
   15c4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   15c50:	d002      	beq.n	15c58 <__adddf3+0x84>
   15c52:	4252      	negs	r2, r2
   15c54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   15c58:	ea94 0f05 	teq	r4, r5
   15c5c:	f000 80a7 	beq.w	15dae <__adddf3+0x1da>
   15c60:	f1a4 0401 	sub.w	r4, r4, #1
   15c64:	f1d5 0e20 	rsbs	lr, r5, #32
   15c68:	db0d      	blt.n	15c86 <__adddf3+0xb2>
   15c6a:	fa02 fc0e 	lsl.w	ip, r2, lr
   15c6e:	fa22 f205 	lsr.w	r2, r2, r5
   15c72:	1880      	adds	r0, r0, r2
   15c74:	f141 0100 	adc.w	r1, r1, #0
   15c78:	fa03 f20e 	lsl.w	r2, r3, lr
   15c7c:	1880      	adds	r0, r0, r2
   15c7e:	fa43 f305 	asr.w	r3, r3, r5
   15c82:	4159      	adcs	r1, r3
   15c84:	e00e      	b.n	15ca4 <__adddf3+0xd0>
   15c86:	f1a5 0520 	sub.w	r5, r5, #32
   15c8a:	f10e 0e20 	add.w	lr, lr, #32
   15c8e:	2a01      	cmp	r2, #1
   15c90:	fa03 fc0e 	lsl.w	ip, r3, lr
   15c94:	bf28      	it	cs
   15c96:	f04c 0c02 	orrcs.w	ip, ip, #2
   15c9a:	fa43 f305 	asr.w	r3, r3, r5
   15c9e:	18c0      	adds	r0, r0, r3
   15ca0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   15ca4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15ca8:	d507      	bpl.n	15cba <__adddf3+0xe6>
   15caa:	f04f 0e00 	mov.w	lr, #0
   15cae:	f1dc 0c00 	rsbs	ip, ip, #0
   15cb2:	eb7e 0000 	sbcs.w	r0, lr, r0
   15cb6:	eb6e 0101 	sbc.w	r1, lr, r1
   15cba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   15cbe:	d31b      	bcc.n	15cf8 <__adddf3+0x124>
   15cc0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   15cc4:	d30c      	bcc.n	15ce0 <__adddf3+0x10c>
   15cc6:	0849      	lsrs	r1, r1, #1
   15cc8:	ea5f 0030 	movs.w	r0, r0, rrx
   15ccc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   15cd0:	f104 0401 	add.w	r4, r4, #1
   15cd4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   15cd8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   15cdc:	f080 809a 	bcs.w	15e14 <__adddf3+0x240>
   15ce0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   15ce4:	bf08      	it	eq
   15ce6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   15cea:	f150 0000 	adcs.w	r0, r0, #0
   15cee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   15cf2:	ea41 0105 	orr.w	r1, r1, r5
   15cf6:	bd30      	pop	{r4, r5, pc}
   15cf8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   15cfc:	4140      	adcs	r0, r0
   15cfe:	eb41 0101 	adc.w	r1, r1, r1
   15d02:	3c01      	subs	r4, #1
   15d04:	bf28      	it	cs
   15d06:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   15d0a:	d2e9      	bcs.n	15ce0 <__adddf3+0x10c>
   15d0c:	f091 0f00 	teq	r1, #0
   15d10:	bf04      	itt	eq
   15d12:	4601      	moveq	r1, r0
   15d14:	2000      	moveq	r0, #0
   15d16:	fab1 f381 	clz	r3, r1
   15d1a:	bf08      	it	eq
   15d1c:	3320      	addeq	r3, #32
   15d1e:	f1a3 030b 	sub.w	r3, r3, #11
   15d22:	f1b3 0220 	subs.w	r2, r3, #32
   15d26:	da0c      	bge.n	15d42 <__adddf3+0x16e>
   15d28:	320c      	adds	r2, #12
   15d2a:	dd08      	ble.n	15d3e <__adddf3+0x16a>
   15d2c:	f102 0c14 	add.w	ip, r2, #20
   15d30:	f1c2 020c 	rsb	r2, r2, #12
   15d34:	fa01 f00c 	lsl.w	r0, r1, ip
   15d38:	fa21 f102 	lsr.w	r1, r1, r2
   15d3c:	e00c      	b.n	15d58 <__adddf3+0x184>
   15d3e:	f102 0214 	add.w	r2, r2, #20
   15d42:	bfd8      	it	le
   15d44:	f1c2 0c20 	rsble	ip, r2, #32
   15d48:	fa01 f102 	lsl.w	r1, r1, r2
   15d4c:	fa20 fc0c 	lsr.w	ip, r0, ip
   15d50:	bfdc      	itt	le
   15d52:	ea41 010c 	orrle.w	r1, r1, ip
   15d56:	4090      	lslle	r0, r2
   15d58:	1ae4      	subs	r4, r4, r3
   15d5a:	bfa2      	ittt	ge
   15d5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   15d60:	4329      	orrge	r1, r5
   15d62:	bd30      	popge	{r4, r5, pc}
   15d64:	ea6f 0404 	mvn.w	r4, r4
   15d68:	3c1f      	subs	r4, #31
   15d6a:	da1c      	bge.n	15da6 <__adddf3+0x1d2>
   15d6c:	340c      	adds	r4, #12
   15d6e:	dc0e      	bgt.n	15d8e <__adddf3+0x1ba>
   15d70:	f104 0414 	add.w	r4, r4, #20
   15d74:	f1c4 0220 	rsb	r2, r4, #32
   15d78:	fa20 f004 	lsr.w	r0, r0, r4
   15d7c:	fa01 f302 	lsl.w	r3, r1, r2
   15d80:	ea40 0003 	orr.w	r0, r0, r3
   15d84:	fa21 f304 	lsr.w	r3, r1, r4
   15d88:	ea45 0103 	orr.w	r1, r5, r3
   15d8c:	bd30      	pop	{r4, r5, pc}
   15d8e:	f1c4 040c 	rsb	r4, r4, #12
   15d92:	f1c4 0220 	rsb	r2, r4, #32
   15d96:	fa20 f002 	lsr.w	r0, r0, r2
   15d9a:	fa01 f304 	lsl.w	r3, r1, r4
   15d9e:	ea40 0003 	orr.w	r0, r0, r3
   15da2:	4629      	mov	r1, r5
   15da4:	bd30      	pop	{r4, r5, pc}
   15da6:	fa21 f004 	lsr.w	r0, r1, r4
   15daa:	4629      	mov	r1, r5
   15dac:	bd30      	pop	{r4, r5, pc}
   15dae:	f094 0f00 	teq	r4, #0
   15db2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   15db6:	bf06      	itte	eq
   15db8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   15dbc:	3401      	addeq	r4, #1
   15dbe:	3d01      	subne	r5, #1
   15dc0:	e74e      	b.n	15c60 <__adddf3+0x8c>
   15dc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   15dc6:	bf18      	it	ne
   15dc8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   15dcc:	d029      	beq.n	15e22 <__adddf3+0x24e>
   15dce:	ea94 0f05 	teq	r4, r5
   15dd2:	bf08      	it	eq
   15dd4:	ea90 0f02 	teqeq	r0, r2
   15dd8:	d005      	beq.n	15de6 <__adddf3+0x212>
   15dda:	ea54 0c00 	orrs.w	ip, r4, r0
   15dde:	bf04      	itt	eq
   15de0:	4619      	moveq	r1, r3
   15de2:	4610      	moveq	r0, r2
   15de4:	bd30      	pop	{r4, r5, pc}
   15de6:	ea91 0f03 	teq	r1, r3
   15dea:	bf1e      	ittt	ne
   15dec:	2100      	movne	r1, #0
   15dee:	2000      	movne	r0, #0
   15df0:	bd30      	popne	{r4, r5, pc}
   15df2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   15df6:	d105      	bne.n	15e04 <__adddf3+0x230>
   15df8:	0040      	lsls	r0, r0, #1
   15dfa:	4149      	adcs	r1, r1
   15dfc:	bf28      	it	cs
   15dfe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   15e02:	bd30      	pop	{r4, r5, pc}
   15e04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   15e08:	bf3c      	itt	cc
   15e0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   15e0e:	bd30      	popcc	{r4, r5, pc}
   15e10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15e14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   15e18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   15e1c:	f04f 0000 	mov.w	r0, #0
   15e20:	bd30      	pop	{r4, r5, pc}
   15e22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   15e26:	bf1a      	itte	ne
   15e28:	4619      	movne	r1, r3
   15e2a:	4610      	movne	r0, r2
   15e2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   15e30:	bf1c      	itt	ne
   15e32:	460b      	movne	r3, r1
   15e34:	4602      	movne	r2, r0
   15e36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   15e3a:	bf06      	itte	eq
   15e3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   15e40:	ea91 0f03 	teqeq	r1, r3
   15e44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   15e48:	bd30      	pop	{r4, r5, pc}
   15e4a:	bf00      	nop

00015e4c <__aeabi_ui2d>:
   15e4c:	f090 0f00 	teq	r0, #0
   15e50:	bf04      	itt	eq
   15e52:	2100      	moveq	r1, #0
   15e54:	4770      	bxeq	lr
   15e56:	b530      	push	{r4, r5, lr}
   15e58:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15e5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15e60:	f04f 0500 	mov.w	r5, #0
   15e64:	f04f 0100 	mov.w	r1, #0
   15e68:	e750      	b.n	15d0c <__adddf3+0x138>
   15e6a:	bf00      	nop

00015e6c <__aeabi_i2d>:
   15e6c:	f090 0f00 	teq	r0, #0
   15e70:	bf04      	itt	eq
   15e72:	2100      	moveq	r1, #0
   15e74:	4770      	bxeq	lr
   15e76:	b530      	push	{r4, r5, lr}
   15e78:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15e7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15e80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   15e84:	bf48      	it	mi
   15e86:	4240      	negmi	r0, r0
   15e88:	f04f 0100 	mov.w	r1, #0
   15e8c:	e73e      	b.n	15d0c <__adddf3+0x138>
   15e8e:	bf00      	nop

00015e90 <__aeabi_f2d>:
   15e90:	0042      	lsls	r2, r0, #1
   15e92:	ea4f 01e2 	mov.w	r1, r2, asr #3
   15e96:	ea4f 0131 	mov.w	r1, r1, rrx
   15e9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   15e9e:	bf1f      	itttt	ne
   15ea0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   15ea4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   15ea8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   15eac:	4770      	bxne	lr
   15eae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   15eb2:	bf08      	it	eq
   15eb4:	4770      	bxeq	lr
   15eb6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   15eba:	bf04      	itt	eq
   15ebc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   15ec0:	4770      	bxeq	lr
   15ec2:	b530      	push	{r4, r5, lr}
   15ec4:	f44f 7460 	mov.w	r4, #896	; 0x380
   15ec8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15ecc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   15ed0:	e71c      	b.n	15d0c <__adddf3+0x138>
   15ed2:	bf00      	nop

00015ed4 <__aeabi_ul2d>:
   15ed4:	ea50 0201 	orrs.w	r2, r0, r1
   15ed8:	bf08      	it	eq
   15eda:	4770      	bxeq	lr
   15edc:	b530      	push	{r4, r5, lr}
   15ede:	f04f 0500 	mov.w	r5, #0
   15ee2:	e00a      	b.n	15efa <__aeabi_l2d+0x16>

00015ee4 <__aeabi_l2d>:
   15ee4:	ea50 0201 	orrs.w	r2, r0, r1
   15ee8:	bf08      	it	eq
   15eea:	4770      	bxeq	lr
   15eec:	b530      	push	{r4, r5, lr}
   15eee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   15ef2:	d502      	bpl.n	15efa <__aeabi_l2d+0x16>
   15ef4:	4240      	negs	r0, r0
   15ef6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15efa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15efe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15f02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   15f06:	f43f aed8 	beq.w	15cba <__adddf3+0xe6>
   15f0a:	f04f 0203 	mov.w	r2, #3
   15f0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   15f12:	bf18      	it	ne
   15f14:	3203      	addne	r2, #3
   15f16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   15f1a:	bf18      	it	ne
   15f1c:	3203      	addne	r2, #3
   15f1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   15f22:	f1c2 0320 	rsb	r3, r2, #32
   15f26:	fa00 fc03 	lsl.w	ip, r0, r3
   15f2a:	fa20 f002 	lsr.w	r0, r0, r2
   15f2e:	fa01 fe03 	lsl.w	lr, r1, r3
   15f32:	ea40 000e 	orr.w	r0, r0, lr
   15f36:	fa21 f102 	lsr.w	r1, r1, r2
   15f3a:	4414      	add	r4, r2
   15f3c:	e6bd      	b.n	15cba <__adddf3+0xe6>
   15f3e:	bf00      	nop

00015f40 <__aeabi_d2lz>:
   15f40:	b508      	push	{r3, lr}
   15f42:	4602      	mov	r2, r0
   15f44:	460b      	mov	r3, r1
   15f46:	ec43 2b17 	vmov	d7, r2, r3
   15f4a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   15f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15f52:	d403      	bmi.n	15f5c <__aeabi_d2lz+0x1c>
   15f54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   15f58:	f000 b80a 	b.w	15f70 <__aeabi_d2ulz>
   15f5c:	eeb1 7b47 	vneg.f64	d7, d7
   15f60:	ec51 0b17 	vmov	r0, r1, d7
   15f64:	f000 f804 	bl	15f70 <__aeabi_d2ulz>
   15f68:	4240      	negs	r0, r0
   15f6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15f6e:	bd08      	pop	{r3, pc}

00015f70 <__aeabi_d2ulz>:
   15f70:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 15fa0 <__aeabi_d2ulz+0x30>
   15f74:	ec41 0b17 	vmov	d7, r0, r1
   15f78:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 15fa8 <__aeabi_d2ulz+0x38>
   15f7c:	ee27 6b06 	vmul.f64	d6, d7, d6
   15f80:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   15f84:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   15f88:	eea4 7b45 	vfms.f64	d7, d4, d5
   15f8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   15f90:	ee16 1a10 	vmov	r1, s12
   15f94:	ee17 0a90 	vmov	r0, s15
   15f98:	4770      	bx	lr
   15f9a:	bf00      	nop
   15f9c:	f3af 8000 	nop.w
   15fa0:	00000000 	.word	0x00000000
   15fa4:	3df00000 	.word	0x3df00000
   15fa8:	00000000 	.word	0x00000000
   15fac:	41f00000 	.word	0x41f00000

00015fb0 <___reboot_Teensyduino__veneer>:
   15fb0:	f85f f000 	ldr.w	pc, [pc]	; 15fb4 <___reboot_Teensyduino__veneer+0x4>
   15fb4:	60001d8d 	.word	0x60001d8d

00015fb8 <___init_veneer>:
   15fb8:	f85f f000 	ldr.w	pc, [pc]	; 15fbc <___init_veneer+0x4>
   15fbc:	60001e35 	.word	0x60001e35

Disassembly of section .fini:

00015fc0 <_fini>:
   15fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15fc2:	bf00      	nop
